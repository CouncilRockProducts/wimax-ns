/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:05 AM
 *
 * Project : Ofer
 * Module  : Host Device Protocol
 * Author  : Moti Cohen
 * Date    : 15/12/2005
 * Purpose : Host Device Protocol: Describe HDIProtocol PeekPoke Buffer
 *****************************************************************************/

#if !defined(_BITMAN_PEEKPOKEBUFF_H_)
#define _BITMAN_PEEKPOKEBUFF_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define BM_BufferByte_BufferByte_MASK (0xFF)

#define BM_BufferByte_BufferByte_OFFSET (0)

#define BM_BufferByte_BufferByte_SHIFTED_MASK (0xFF)

#define BM_BufferUInt32_BufferUInt32_MASK (0xFFFFFFFF)

#define BM_BufferUInt32_BufferUInt32_OFFSET (0)

#define BM_BufferUInt32_BufferUInt32_SHIFTED_MASK (0xFFFFFFFF)

typedef UINT8 AddressValuePair[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _Address;
	UINT32 _Value;
} BMS_AddressValuePair;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _Value;
	UINT32 _Address;
} BMS_AddressValuePair;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'AddressValuePair' Type: 'AddressValuePair', Top-level, Non-instance, No bitoff root
#define BM_AddressValuePair_Address_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_AddressValuePair_Address_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal0_tmp_bitoff;\
	BM_AddressValuePair_Address_GET_POS( base_ptr, out_ptr, bmlocal0_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal0_tmp_bitoff);\
}

#define BM_AddressValuePair_Address_POS_ALIGNED 0

// Alignment of AddressValuePair_Address: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_AddressValuePair_Address_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AddressValuePair_Address_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1_my_ptr;\
	UINT bmlocal2_my_bitoff;\
	BM_AddressValuePair_Address_GET_POS( base_ptr, bmlocal1_my_ptr, bmlocal2_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1_my_ptr, bmlocal2_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_AddressValuePair_Address_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal3_tmp_var;
	BM_AddressValuePair_Address_GET( base_ptr, bmlocal3_tmp_var );
	return bmlocal3_tmp_var;
}

#define BM_AddressValuePair_Address_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4_my_ptr;\
	UINT bmlocal5_my_bitoff;\
	BM_AddressValuePair_Address_GET_POS( base_ptr, bmlocal4_my_ptr, bmlocal5_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4_my_ptr, bmlocal5_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// AddressValuePair_Address: IS_DEFAULT accessor is not defined because no default value was specified.
// AddressValuePair_Address: SET_DEFAULT accessor is not defined because no default value was specified.
// AddressValuePair_Address: IS_RESET accessor is not defined because no reset value was specified.
// AddressValuePair_Address: SET_RESET accessor is not defined because no reset value was specified.
// AddressValuePair_Address: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// AddressValuePair_Address: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_AddressValuePair_Address_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6_out_val;\
	BM_AddressValuePair_Address_GET( base_ptr, bmlocal6_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Address", 32, (UINT)(bmlocal6_out_val), "%d", 1);\
}

#define BM_AddressValuePair_Address_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AddressValuePair_Address_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_AddressValuePair_Address_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7_my_ptr;\
	UINT bmlocal8_my_bitoff;\
	BM_AddressValuePair_Address_GET_POS( base_ptr, bmlocal7_my_ptr, bmlocal8_my_bitoff );\
	(*((UINT32*)bmlocal7_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8_my_bitoff );\
}

// AddressValuePair_Address: Validation accessors are not defined because validation condition was not specified.
#define BM_AddressValuePair_Address_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9_tmp_bits;\
	BM_AddressValuePair_Address_GET_SIZE( base_ptr, out_bytes, bmlocal9_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9_tmp_bits );\
}

#define BM_AddressValuePair_Address_BYTES_SIZE 4

#define BM_AddressValuePair_Value_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12_acc_bytes;\
	UINT bmlocal13_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12_acc_bytes = 4;\
	bmlocal13_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12_acc_bytes );\
	out_bitoff += bmlocal13_acc_bits;\
}

#define BM_AddressValuePair_Value_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14_tmp_bitoff;\
	BM_AddressValuePair_Value_GET_POS( base_ptr, out_ptr, bmlocal14_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14_tmp_bitoff);\
}

#define BM_AddressValuePair_Value_POS_ALIGNED 4

// Alignment of AddressValuePair_Value: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_AddressValuePair_Value_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AddressValuePair_Value_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal15_my_ptr;\
	UINT bmlocal16_my_bitoff;\
	BM_AddressValuePair_Value_GET_POS( base_ptr, bmlocal15_my_ptr, bmlocal16_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal15_my_ptr, bmlocal16_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_AddressValuePair_Value_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal17_tmp_var;
	BM_AddressValuePair_Value_GET( base_ptr, bmlocal17_tmp_var );
	return bmlocal17_tmp_var;
}

#define BM_AddressValuePair_Value_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal18_my_ptr;\
	UINT bmlocal19_my_bitoff;\
	BM_AddressValuePair_Value_GET_POS( base_ptr, bmlocal18_my_ptr, bmlocal19_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal18_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal18_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal18_my_ptr, bmlocal19_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// AddressValuePair_Value: IS_DEFAULT accessor is not defined because no default value was specified.
// AddressValuePair_Value: SET_DEFAULT accessor is not defined because no default value was specified.
// AddressValuePair_Value: IS_RESET accessor is not defined because no reset value was specified.
// AddressValuePair_Value: SET_RESET accessor is not defined because no reset value was specified.
// AddressValuePair_Value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// AddressValuePair_Value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_AddressValuePair_Value_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal20_out_val;\
	BM_AddressValuePair_Value_GET( base_ptr, bmlocal20_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Value", 32, (UINT)(bmlocal20_out_val), "%d", 1);\
}

#define BM_AddressValuePair_Value_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AddressValuePair_Value_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_AddressValuePair_Value_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal21_my_ptr;\
	UINT bmlocal22_my_bitoff;\
	BM_AddressValuePair_Value_GET_POS( base_ptr, bmlocal21_my_ptr, bmlocal22_my_bitoff );\
	(*((UINT32*)bmlocal21_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal22_my_bitoff );\
}

// AddressValuePair_Value: Validation accessors are not defined because validation condition was not specified.
#define BM_AddressValuePair_Value_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal23_tmp_bits;\
	BM_AddressValuePair_Value_GET_SIZE( base_ptr, out_bytes, bmlocal23_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal23_tmp_bits );\
}

#define BM_AddressValuePair_Value_BYTES_SIZE 4

#define BM_AddressValuePair_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AddressValuePair_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal26_tmp_bits;\
	BM_AddressValuePair_GET_SIZE( base_ptr, out_bytes, bmlocal26_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal26_tmp_bits );\
}

#define BM_AddressValuePair_BYTES_SIZE 8

#define BM_AddressValuePair_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AddressValuePair", 1);\
	BM_AddressValuePair_Address_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_AddressValuePair_Value_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AddressValuePair_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AddressValuePair_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BufferByte[1];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT8 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT8 _BufferByte : 8;
	} fields;
} BMS_BufferByte;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT8 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT8 _BufferByte : 8;
	} fields;
} BMS_BufferByte;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BufferByte' Type: 'BufferByte', Top-level, Non-instance, No bitoff root
#define BM_BufferByte_BufferByte_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BufferByte_BufferByte_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal27_tmp_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, out_ptr, bmlocal27_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal27_tmp_bitoff);\
}

#define BM_BufferByte_BufferByte_POS_ALIGNED 0

// Alignment of BufferByte_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BufferByte_BufferByte_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferByte_BufferByte_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal28_my_ptr;\
	UINT bmlocal29_my_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, bmlocal28_my_ptr, bmlocal29_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_GET_VOLATILE_NOSPAN( bmlocal28_my_ptr, bmlocal29_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
}

BMI_INLINE UINT8 BM_INLINE_BufferByte_BufferByte_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal30_tmp_var;
	BM_BufferByte_BufferByte_GET( base_ptr, bmlocal30_tmp_var );
	return bmlocal30_tmp_var;
}

#define BM_BufferByte_BufferByte_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal31_my_ptr;\
	UINT bmlocal32_my_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, bmlocal31_my_ptr, bmlocal32_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_SET_VOLATILE_NOSPAN( bmlocal31_my_ptr, bmlocal32_my_bitoff, 8, in_val, 0x00000000 );\
}

// BufferByte_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// BufferByte_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// BufferByte_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// BufferByte_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// BufferByte_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BufferByte_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BufferByte_BufferByte_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal33_out_val;\
	BM_BufferByte_BufferByte_GET( base_ptr, bmlocal33_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal33_out_val), "%d", 1);\
}

#define BM_BufferByte_BufferByte_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BufferByte_BufferByte_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BufferByte_BufferByte_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal34_my_ptr;\
	UINT bmlocal35_my_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, bmlocal34_my_ptr, bmlocal35_my_bitoff );\
	(*((UINT8*)bmlocal34_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal35_my_bitoff );\
}

// BufferByte_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_BufferByte_BufferByte_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal36_tmp_bits;\
	BM_BufferByte_BufferByte_GET_SIZE( base_ptr, out_bytes, bmlocal36_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal36_tmp_bits );\
}

#define BM_BufferByte_BufferByte_BYTES_SIZE 1

#define BM_BufferByte_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferByte_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal39_tmp_bits;\
	BM_BufferByte_GET_SIZE( base_ptr, out_bytes, bmlocal39_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal39_tmp_bits );\
}

#define BM_BufferByte_BYTES_SIZE 1

BMI_INLINE UINT BM_INLINE_BufferByte_GET_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_BufferByte_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal40_my_ptr;\
	UINT bmlocal41_my_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, bmlocal40_my_ptr, bmlocal41_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_GET_VOLATILE_NOSPAN( bmlocal40_my_ptr, bmlocal41_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
}

BMI_INLINE UINT8 BM_INLINE_BufferByte_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal42_tmp_var;
	BM_BufferByte_GET( base_ptr, bmlocal42_tmp_var );
	return bmlocal42_tmp_var;
}

#define BM_BufferByte_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal43_my_ptr;\
	UINT bmlocal44_my_bitoff;\
	BM_BufferByte_BufferByte_GET_POS( base_ptr, bmlocal43_my_ptr, bmlocal44_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_SET_VOLATILE_NOSPAN( bmlocal43_my_ptr, bmlocal44_my_bitoff, 8, in_val, 0x00000000 );\
}

// BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// BufferByte: SET_RESET accessor is not defined because no reset value was specified.
#define BM_BufferByte_GET_ALL( base_ptr, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal45_val;\
	BM_BufferByte_GET( base_ptr, bmlocal45_val );\
	param_BufferByte = (UINT8)(((bmlocal45_val&BM_BufferByte_BufferByte_SHIFTED_MASK) >> BM_BufferByte_BufferByte_OFFSET));\
}

#define BM_BufferByte_SET_ALL( base_ptr, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal46_varToWrite = (UINT8)(((param_BufferByte&BM_BufferByte_BufferByte_MASK) << BM_BufferByte_BufferByte_OFFSET));\
	BM_BufferByte_SET( base_ptr, bmlocal46_varToWrite );\
}

#define BM_BufferByte_STRICT_SET_ALL( base_ptr, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal47_varToWrite = (UINT8)((param_BufferByte << BM_BufferByte_BufferByte_OFFSET));\
	BM_BufferByte_SET( base_ptr, bmlocal47_varToWrite );\
}

#define BM_BufferByte_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BufferByte", 1);\
	BM_BufferByte_BufferByte_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferByte_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BufferByte_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BufferUInt32[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _BufferUInt32;
	} fields;
} BMS_BufferUInt32;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _BufferUInt32;
	} fields;
} BMS_BufferUInt32;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BufferUInt32' Type: 'BufferUInt32', Top-level, Non-instance, No bitoff root
#define BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BufferUInt32_BufferUInt32_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal48_tmp_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, out_ptr, bmlocal48_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal48_tmp_bitoff);\
}

#define BM_BufferUInt32_BufferUInt32_POS_ALIGNED 0

// Alignment of BufferUInt32_BufferUInt32: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BufferUInt32_BufferUInt32_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferUInt32_BufferUInt32_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal49_my_ptr;\
	UINT bmlocal50_my_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, bmlocal49_my_ptr, bmlocal50_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal49_my_ptr, bmlocal50_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_BufferUInt32_BufferUInt32_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal51_tmp_var;
	BM_BufferUInt32_BufferUInt32_GET( base_ptr, bmlocal51_tmp_var );
	return bmlocal51_tmp_var;
}

#define BM_BufferUInt32_BufferUInt32_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal52_my_ptr;\
	UINT bmlocal53_my_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, bmlocal52_my_ptr, bmlocal53_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal52_my_ptr, bmlocal53_my_bitoff, 32, in_val, 0x00000000 );\
}

// BufferUInt32_BufferUInt32: IS_DEFAULT accessor is not defined because no default value was specified.
// BufferUInt32_BufferUInt32: SET_DEFAULT accessor is not defined because no default value was specified.
// BufferUInt32_BufferUInt32: IS_RESET accessor is not defined because no reset value was specified.
// BufferUInt32_BufferUInt32: SET_RESET accessor is not defined because no reset value was specified.
// BufferUInt32_BufferUInt32: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BufferUInt32_BufferUInt32: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BufferUInt32_BufferUInt32_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal54_out_val;\
	BM_BufferUInt32_BufferUInt32_GET( base_ptr, bmlocal54_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferUInt32", 32, (UINT)(bmlocal54_out_val), "%d", 1);\
}

#define BM_BufferUInt32_BufferUInt32_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BufferUInt32_BufferUInt32_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BufferUInt32_BufferUInt32_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal55_my_ptr;\
	UINT bmlocal56_my_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, bmlocal55_my_ptr, bmlocal56_my_bitoff );\
	(*((UINT32*)bmlocal55_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal56_my_bitoff );\
}

// BufferUInt32_BufferUInt32: Validation accessors are not defined because validation condition was not specified.
#define BM_BufferUInt32_BufferUInt32_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal57_tmp_bits;\
	BM_BufferUInt32_BufferUInt32_GET_SIZE( base_ptr, out_bytes, bmlocal57_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal57_tmp_bits );\
}

#define BM_BufferUInt32_BufferUInt32_BYTES_SIZE 4

#define BM_BufferUInt32_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferUInt32_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal60_tmp_bits;\
	BM_BufferUInt32_GET_SIZE( base_ptr, out_bytes, bmlocal60_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal60_tmp_bits );\
}

#define BM_BufferUInt32_BYTES_SIZE 4

BMI_INLINE UINT BM_INLINE_BufferUInt32_GET_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_BufferUInt32_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal61_my_ptr;\
	UINT bmlocal62_my_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, bmlocal61_my_ptr, bmlocal62_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal61_my_ptr, bmlocal62_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_BufferUInt32_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal63_tmp_var;
	BM_BufferUInt32_GET( base_ptr, bmlocal63_tmp_var );
	return bmlocal63_tmp_var;
}

#define BM_BufferUInt32_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal64_my_ptr;\
	UINT bmlocal65_my_bitoff;\
	BM_BufferUInt32_BufferUInt32_GET_POS( base_ptr, bmlocal64_my_ptr, bmlocal65_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal64_my_ptr, bmlocal65_my_bitoff, 32, in_val, 0x00000000 );\
}

// BufferUInt32: IS_DEFAULT accessor is not defined because no default value was specified.
// BufferUInt32: SET_DEFAULT accessor is not defined because no default value was specified.
// BufferUInt32: IS_RESET accessor is not defined because no reset value was specified.
// BufferUInt32: SET_RESET accessor is not defined because no reset value was specified.
#define BM_BufferUInt32_GET_ALL( base_ptr, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal66_val;\
	BM_BufferUInt32_GET( base_ptr, bmlocal66_val );\
	param_BufferUInt32 = (UINT32)(((bmlocal66_val&BM_BufferUInt32_BufferUInt32_SHIFTED_MASK) >> BM_BufferUInt32_BufferUInt32_OFFSET));\
}

#define BM_BufferUInt32_SET_ALL( base_ptr, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal67_varToWrite = (UINT32)(((param_BufferUInt32&BM_BufferUInt32_BufferUInt32_MASK) << BM_BufferUInt32_BufferUInt32_OFFSET));\
	BM_BufferUInt32_SET( base_ptr, bmlocal67_varToWrite );\
}

#define BM_BufferUInt32_STRICT_SET_ALL( base_ptr, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal68_varToWrite = (UINT32)((param_BufferUInt32 << BM_BufferUInt32_BufferUInt32_OFFSET));\
	BM_BufferUInt32_SET( base_ptr, bmlocal68_varToWrite );\
}

#define BM_BufferUInt32_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BufferUInt32", 1);\
	BM_BufferUInt32_BufferUInt32_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BufferUInt32_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BufferUInt32_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PeekPokeBuffer[8];

// COMPOSITE: Full name: 'PeekPokeBuffer' Type: 'PeekPokeBuffer', Top-level, Non-instance, No bitoff root
#define BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal69_tmp_bitoff;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS( base_ptr, out_ptr, bmlocal69_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal69_tmp_bitoff);\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_POS_ALIGNED 0

// Alignment of PeekPokeBuffer_PeekPokeBytesNum: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PeekPokeBuffer_PeekPokeBytesNum_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal70_my_ptr;\
	UINT bmlocal71_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal70_my_ptr, bmlocal71_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal70_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal70_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal70_my_ptr, bmlocal71_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeBuffer_PeekPokeBytesNum_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal72_tmp_var;
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, bmlocal72_tmp_var );
	return bmlocal72_tmp_var;
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal73_my_ptr;\
	UINT bmlocal74_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal73_my_ptr, bmlocal74_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal73_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal73_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal73_my_ptr, bmlocal74_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PeekPokeBuffer_PeekPokeBytesNum: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeBytesNum: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeBytesNum: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_PeekPokeBytesNum: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_PeekPokeBytesNum: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeBuffer_PeekPokeBytesNum: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeBuffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal75_out_val;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, bmlocal75_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PeekPokeBytesNum", 32, (UINT)(bmlocal75_out_val), "%d", 1);\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal76_my_ptr;\
	UINT bmlocal77_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal76_my_ptr, bmlocal77_my_bitoff );\
	(*((UINT32*)bmlocal76_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal77_my_bitoff );\
}

// PeekPokeBuffer_PeekPokeBytesNum: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeBuffer_PeekPokeBytesNum_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal78_tmp_bits;\
	BM_PeekPokeBuffer_PeekPokeBytesNum_GET_SIZE( base_ptr, out_bytes, bmlocal78_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal78_tmp_bits );\
}

#define BM_PeekPokeBuffer_PeekPokeBytesNum_BYTES_SIZE 4

#define BM_PeekPokeBuffer_DeviceStartAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal81_acc_bytes;\
	UINT bmlocal82_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal81_acc_bytes = 4;\
	bmlocal82_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal81_acc_bytes );\
	out_bitoff += bmlocal82_acc_bits;\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal83_tmp_bitoff;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET_POS( base_ptr, out_ptr, bmlocal83_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal83_tmp_bitoff);\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_POS_ALIGNED 4

// Alignment of PeekPokeBuffer_DeviceStartAddress: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PeekPokeBuffer_DeviceStartAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal84_my_ptr;\
	UINT bmlocal85_my_bitoff;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal84_my_ptr, bmlocal85_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal84_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal84_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal84_my_ptr, bmlocal85_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeBuffer_DeviceStartAddress_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal86_tmp_var;
	BM_PeekPokeBuffer_DeviceStartAddress_GET( base_ptr, bmlocal86_tmp_var );
	return bmlocal86_tmp_var;
}

#define BM_PeekPokeBuffer_DeviceStartAddress_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal87_my_ptr;\
	UINT bmlocal88_my_bitoff;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal87_my_ptr, bmlocal88_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal87_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal87_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal87_my_ptr, bmlocal88_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PeekPokeBuffer_DeviceStartAddress: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_DeviceStartAddress: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_DeviceStartAddress: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_DeviceStartAddress: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_DeviceStartAddress: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeBuffer_DeviceStartAddress: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeBuffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal89_out_val;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET( base_ptr, bmlocal89_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DeviceStartAddress", 32, (UINT)(bmlocal89_out_val), "%d", 1);\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal90_my_ptr;\
	UINT bmlocal91_my_bitoff;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal90_my_ptr, bmlocal91_my_bitoff );\
	(*((UINT32*)bmlocal90_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal91_my_bitoff );\
}

// PeekPokeBuffer_DeviceStartAddress: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeBuffer_DeviceStartAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal92_tmp_bits;\
	BM_PeekPokeBuffer_DeviceStartAddress_GET_SIZE( base_ptr, out_bytes, bmlocal92_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal92_tmp_bits );\
}

#define BM_PeekPokeBuffer_DeviceStartAddress_BYTES_SIZE 4

#define BM_PeekPokeBuffer_PeekPokeArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal95_acc_bytes;\
	UINT bmlocal96_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal95_acc_bytes = 8;\
	bmlocal96_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal95_acc_bytes );\
	out_bitoff += bmlocal96_acc_bits;\
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal97_tmp_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_POS( base_ptr, out_ptr, bmlocal97_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal97_tmp_bitoff);\
}

#define BM_PeekPokeBuffer_PeekPokeArray_POS_ALIGNED 8

// ARRAY: PeekPokeBuffer_PeekPokeArray
#define BM_PeekPokeBuffer_PeekPokeArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal98_var0;\
		BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, bmlocal98_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal98_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_PeekPokeBuffer_PeekPokeArray_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal99_my_bytes;
	UINT bmlocal100_my_bits;
	BM_PeekPokeBuffer_PeekPokeArray_GET_SIZE( base_ptr, bmlocal99_my_bytes, bmlocal100_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal99_my_bytes, bmlocal100_my_bits);
	BMI_UNUSED_VAR( bmlocal100_my_bits );
	return bmlocal99_my_bytes;
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal101_var0;\
			BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, bmlocal101_var0 );\
			out_element_count = (UINT)(bmlocal101_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal102_out_ptr;\
	UINT bmlocal103_out_bitoff;\
	UINT bmlocal104_element_size_bytes;\
	UINT bmlocal105_element_size_bits;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_POS( base_ptr, bmlocal102_out_ptr, bmlocal103_out_bitoff );\
	bmlocal104_element_size_bytes = 1;\
	bmlocal105_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal102_out_ptr) + (idx0) * bmlocal104_element_size_bytes );\
	out_bitoff = bmlocal103_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal105_element_size_bits );\
}

// COMPOSITE: Full name: 'PeekPokeBuffer_PeekPokeArray' Type: 'BufferByte', Inner, Non-instance, No bitoff root
#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal106_parent_out_ptr;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_ELEMENT_POS( base_ptr, idx0, bmlocal106_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal106_parent_out_ptr;\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal107_tmp_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal107_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal107_tmp_bitoff);\
}

// Alignment of PeekPokeBuffer_PeekPokeArray_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal108_my_ptr;\
	UINT bmlocal109_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, bmlocal108_my_ptr, bmlocal109_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_GET_VOLATILE_NOSPAN( bmlocal108_my_ptr, bmlocal109_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
}

BMI_INLINE UINT8 BM_INLINE_PeekPokeBuffer_PeekPokeArray_BufferByte_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal110_tmp_var;
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET( base_ptr, idx0, bmlocal110_tmp_var );
	return bmlocal110_tmp_var;
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal111_my_ptr;\
	UINT bmlocal112_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, bmlocal111_my_ptr, bmlocal112_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_SET_VOLATILE_NOSPAN( bmlocal111_my_ptr, bmlocal112_my_bitoff, 8, in_val, 0x00000000 );\
}

// PeekPokeBuffer_PeekPokeArray_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeArray_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeArray_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_PeekPokeArray_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_PeekPokeArray_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeBuffer_PeekPokeArray_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal113_out_val;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET( base_ptr, idx0, bmlocal113_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal113_out_val), "%d", 1);\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal114_my_ptr;\
	UINT bmlocal115_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, bmlocal114_my_ptr, bmlocal115_my_bitoff );\
	(*((UINT8*)bmlocal114_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal115_my_bitoff );\
}

// PeekPokeBuffer_PeekPokeArray_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal116_tmp_bits;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal116_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal116_tmp_bits );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BufferByte_BYTES_SIZE 1

#define BM_PeekPokeBuffer_PeekPokeArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal119_tmp_bits;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal119_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal119_tmp_bits );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_PeekPokeBuffer_PeekPokeArray_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal120_my_ptr;\
	UINT bmlocal121_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, bmlocal120_my_ptr, bmlocal121_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_GET_VOLATILE_NOSPAN( bmlocal120_my_ptr, bmlocal121_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
}

BMI_INLINE UINT8 BM_INLINE_PeekPokeBuffer_PeekPokeArray_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal122_tmp_var;
	BM_PeekPokeBuffer_PeekPokeArray_GET( base_ptr, idx0, bmlocal122_tmp_var );
	return bmlocal122_tmp_var;
}

#define BM_PeekPokeBuffer_PeekPokeArray_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal123_my_ptr;\
	UINT bmlocal124_my_bitoff;\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_GET_POS( base_ptr, idx0, bmlocal123_my_ptr, bmlocal124_my_bitoff );\
	BMI_GENERIC_8BIT_LITTLE_SET_VOLATILE_NOSPAN( bmlocal123_my_ptr, bmlocal124_my_bitoff, 8, in_val, 0x00000000 );\
}

// PeekPokeBuffer_PeekPokeArray: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeArray: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeBuffer_PeekPokeArray: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeBuffer_PeekPokeArray: SET_RESET accessor is not defined because no reset value was specified.
#define BM_PeekPokeBuffer_PeekPokeArray_GET_ALL( base_ptr, idx0, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal125_val;\
	BM_PeekPokeBuffer_PeekPokeArray_GET( base_ptr, idx0, bmlocal125_val );\
	param_BufferByte = (UINT8)(((bmlocal125_val&BM_BufferByte_BufferByte_SHIFTED_MASK) >> BM_BufferByte_BufferByte_OFFSET));\
}

#define BM_PeekPokeBuffer_PeekPokeArray_SET_ALL( base_ptr, idx0, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal126_varToWrite = (UINT8)(((param_BufferByte&BM_BufferByte_BufferByte_MASK) << BM_BufferByte_BufferByte_OFFSET));\
	BM_PeekPokeBuffer_PeekPokeArray_SET( base_ptr, idx0, bmlocal126_varToWrite );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_STRICT_SET_ALL( base_ptr, idx0, param_BufferByte )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal127_varToWrite = (UINT8)((param_BufferByte << BM_BufferByte_BufferByte_OFFSET));\
	BM_PeekPokeBuffer_PeekPokeArray_SET( base_ptr, idx0, bmlocal127_varToWrite );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_PeekPokeArray_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal128_dim_size0;\
	UINT bmlocal129_idx0;\
	{\
		UINT32 bmlocal130_var0;\
		BM_PeekPokeBuffer_PeekPokeBytesNum_GET( base_ptr, bmlocal130_var0 );\
		bmlocal128_dim_size0 = (UINT)(bmlocal130_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PeekPokeArray", 1);\
	for( bmlocal129_idx0=0; bmlocal129_idx0<bmlocal128_dim_size0; bmlocal129_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal129_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, bmlocal129_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeBuffer_PeekPokeArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal131_tmp_bits;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_SIZE( base_ptr, out_bytes, bmlocal131_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal131_tmp_bits );\
}


#define BM_PeekPokeBuffer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal132_tmp_bytes = 0;\
	UINT bmlocal133_tmp_bits = 0;\
	out_bytes = 8;\
	out_bits = 0;\
	BM_PeekPokeBuffer_PeekPokeArray_GET_SIZE( base_ptr, bmlocal132_tmp_bytes, bmlocal133_tmp_bits );\
	out_bytes += bmlocal132_tmp_bytes;\
	out_bits += bmlocal133_tmp_bits;\
}

#define BM_PeekPokeBuffer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal134_tmp_bits;\
	BM_PeekPokeBuffer_GET_SIZE( base_ptr, out_bytes, bmlocal134_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal134_tmp_bits );\
}

#define BM_PeekPokeBuffer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PeekPokeBuffer", 1);\
	BM_PeekPokeBuffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PeekPokeBuffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PeekPokeBuffer_PeekPokeArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeBuffer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeBuffer_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PeekPokeUInt32Buffer[8];

// COMPOSITE: Full name: 'PeekPokeUInt32Buffer' Type: 'PeekPokeUInt32Buffer', Top-level, Non-instance, No bitoff root
#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal135_tmp_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS( base_ptr, out_ptr, bmlocal135_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal135_tmp_bitoff);\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_POS_ALIGNED 0

// Alignment of PeekPokeUInt32Buffer_PeekPokeBytesNum: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal136_my_ptr;\
	UINT bmlocal137_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal136_my_ptr, bmlocal137_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal136_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal136_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal136_my_ptr, bmlocal137_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal138_tmp_var;
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, bmlocal138_tmp_var );
	return bmlocal138_tmp_var;
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal139_my_ptr;\
	UINT bmlocal140_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal139_my_ptr, bmlocal140_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal139_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal139_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal139_my_ptr, bmlocal140_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PeekPokeUInt32Buffer_PeekPokeBytesNum: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeBytesNum: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeBytesNum: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_PeekPokeBytesNum: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_PeekPokeBytesNum: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeUInt32Buffer_PeekPokeBytesNum: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal141_out_val;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, bmlocal141_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PeekPokeBytesNum", 32, (UINT)(bmlocal141_out_val), "%d", 1);\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal142_my_ptr;\
	UINT bmlocal143_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_POS( base_ptr, bmlocal142_my_ptr, bmlocal143_my_bitoff );\
	(*((UINT32*)bmlocal142_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal143_my_bitoff );\
}

// PeekPokeUInt32Buffer_PeekPokeBytesNum: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal144_tmp_bits;\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET_SIZE( base_ptr, out_bytes, bmlocal144_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal144_tmp_bits );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_BYTES_SIZE 4

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal147_acc_bytes;\
	UINT bmlocal148_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal147_acc_bytes = 4;\
	bmlocal148_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal147_acc_bytes );\
	out_bitoff += bmlocal148_acc_bits;\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal149_tmp_bitoff;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS( base_ptr, out_ptr, bmlocal149_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal149_tmp_bitoff);\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_POS_ALIGNED 4

// Alignment of PeekPokeUInt32Buffer_DeviceStartAddress: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal150_my_ptr;\
	UINT bmlocal151_my_bitoff;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal150_my_ptr, bmlocal151_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal150_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal150_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal150_my_ptr, bmlocal151_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeUInt32Buffer_DeviceStartAddress_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal152_tmp_var;
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET( base_ptr, bmlocal152_tmp_var );
	return bmlocal152_tmp_var;
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal153_my_ptr;\
	UINT bmlocal154_my_bitoff;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal153_my_ptr, bmlocal154_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal153_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal153_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal153_my_ptr, bmlocal154_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PeekPokeUInt32Buffer_DeviceStartAddress: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_DeviceStartAddress: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_DeviceStartAddress: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_DeviceStartAddress: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_DeviceStartAddress: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeUInt32Buffer_DeviceStartAddress: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal155_out_val;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET( base_ptr, bmlocal155_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DeviceStartAddress", 32, (UINT)(bmlocal155_out_val), "%d", 1);\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal156_my_ptr;\
	UINT bmlocal157_my_bitoff;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_POS( base_ptr, bmlocal156_my_ptr, bmlocal157_my_bitoff );\
	(*((UINT32*)bmlocal156_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal157_my_bitoff );\
}

// PeekPokeUInt32Buffer_DeviceStartAddress: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal158_tmp_bits;\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_GET_SIZE( base_ptr, out_bytes, bmlocal158_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal158_tmp_bits );\
}

#define BM_PeekPokeUInt32Buffer_DeviceStartAddress_BYTES_SIZE 4

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal161_acc_bytes;\
	UINT bmlocal162_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal161_acc_bytes = 8;\
	bmlocal162_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal161_acc_bytes );\
	out_bitoff += bmlocal162_acc_bits;\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal163_tmp_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_POS( base_ptr, out_ptr, bmlocal163_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal163_tmp_bitoff);\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_POS_ALIGNED 8

// ARRAY: PeekPokeUInt32Buffer_PeekPokeArray
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal164_var0;\
		BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, bmlocal164_var0 );\
		out_bytes = (UINT)(4*(1*(bmlocal164_var0/4)));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_PeekPokeUInt32Buffer_PeekPokeArray_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal165_my_bytes;
	UINT bmlocal166_my_bits;
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_SIZE( base_ptr, bmlocal165_my_bytes, bmlocal166_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal165_my_bytes, bmlocal166_my_bits);
	BMI_UNUSED_VAR( bmlocal166_my_bits );
	return bmlocal165_my_bytes;
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal167_var0;\
			BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, bmlocal167_var0 );\
			out_element_count = (UINT)(bmlocal167_var0/4);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal168_out_ptr;\
	UINT bmlocal169_out_bitoff;\
	UINT bmlocal170_element_size_bytes;\
	UINT bmlocal171_element_size_bits;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_POS( base_ptr, bmlocal168_out_ptr, bmlocal169_out_bitoff );\
	bmlocal170_element_size_bytes = 4;\
	bmlocal171_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal168_out_ptr) + (idx0) * bmlocal170_element_size_bytes );\
	out_bitoff = bmlocal169_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal171_element_size_bits );\
}

// COMPOSITE: Full name: 'PeekPokeUInt32Buffer_PeekPokeArray' Type: 'BufferUInt32', Inner, Non-instance, No bitoff root
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal172_parent_out_ptr;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_ELEMENT_POS( base_ptr, idx0, bmlocal172_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal172_parent_out_ptr;\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal173_tmp_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, out_ptr, bmlocal173_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal173_tmp_bitoff);\
}

// Alignment of PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal174_my_ptr;\
	UINT bmlocal175_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, bmlocal174_my_ptr, bmlocal175_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal174_my_ptr, bmlocal175_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal176_tmp_var;
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET( base_ptr, idx0, bmlocal176_tmp_var );
	return bmlocal176_tmp_var;
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal177_my_ptr;\
	UINT bmlocal178_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, bmlocal177_my_ptr, bmlocal178_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal177_my_ptr, bmlocal178_my_bitoff, 32, in_val, 0x00000000 );\
}

// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: SET_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal179_out_val;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET( base_ptr, idx0, bmlocal179_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferUInt32", 32, (UINT)(bmlocal179_out_val), "%d", 1);\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal180_my_ptr;\
	UINT bmlocal181_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, bmlocal180_my_ptr, bmlocal181_my_bitoff );\
	(*((UINT32*)bmlocal180_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal181_my_bitoff );\
}

// PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32: Validation accessors are not defined because validation condition was not specified.
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal182_tmp_bits;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal182_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal182_tmp_bits );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_BYTES_SIZE 4

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal185_tmp_bits;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal185_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal185_tmp_bits );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_BYTES_CELL_SIZE 4

BMI_INLINE UINT BM_INLINE_PeekPokeUInt32Buffer_PeekPokeArray_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal186_my_ptr;\
	UINT bmlocal187_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, bmlocal186_my_ptr, bmlocal187_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal186_my_ptr, bmlocal187_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_PeekPokeUInt32Buffer_PeekPokeArray_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal188_tmp_var;
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET( base_ptr, idx0, bmlocal188_tmp_var );
	return bmlocal188_tmp_var;
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal189_my_ptr;\
	UINT bmlocal190_my_bitoff;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_GET_POS( base_ptr, idx0, bmlocal189_my_ptr, bmlocal190_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal189_my_ptr, bmlocal190_my_bitoff, 32, in_val, 0x00000000 );\
}

// PeekPokeUInt32Buffer_PeekPokeArray: IS_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray: SET_DEFAULT accessor is not defined because no default value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray: IS_RESET accessor is not defined because no reset value was specified.
// PeekPokeUInt32Buffer_PeekPokeArray: SET_RESET accessor is not defined because no reset value was specified.
#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_ALL( base_ptr, idx0, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal191_val;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET( base_ptr, idx0, bmlocal191_val );\
	param_BufferUInt32 = (UINT32)(((bmlocal191_val&BM_BufferUInt32_BufferUInt32_SHIFTED_MASK) >> BM_BufferUInt32_BufferUInt32_OFFSET));\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_SET_ALL( base_ptr, idx0, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal192_varToWrite = (UINT32)(((param_BufferUInt32&BM_BufferUInt32_BufferUInt32_MASK) << BM_BufferUInt32_BufferUInt32_OFFSET));\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_SET( base_ptr, idx0, bmlocal192_varToWrite );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_STRICT_SET_ALL( base_ptr, idx0, param_BufferUInt32 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal193_varToWrite = (UINT32)((param_BufferUInt32 << BM_BufferUInt32_BufferUInt32_OFFSET));\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_SET( base_ptr, idx0, bmlocal193_varToWrite );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_BufferUInt32_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal194_dim_size0;\
	UINT bmlocal195_idx0;\
	{\
		UINT32 bmlocal196_var0;\
		BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_GET( base_ptr, bmlocal196_var0 );\
		bmlocal194_dim_size0 = (UINT)(bmlocal196_var0/4);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PeekPokeArray", 1);\
	for( bmlocal195_idx0=0; bmlocal195_idx0<bmlocal194_dim_size0; bmlocal195_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal195_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH_IDX( base_ptr, bmlocal195_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal197_tmp_bits;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_SIZE( base_ptr, out_bytes, bmlocal197_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal197_tmp_bits );\
}


#define BM_PeekPokeUInt32Buffer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal198_tmp_bytes = 0;\
	UINT bmlocal199_tmp_bits = 0;\
	out_bytes = 8;\
	out_bits = 0;\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_GET_SIZE( base_ptr, bmlocal198_tmp_bytes, bmlocal199_tmp_bits );\
	out_bytes += bmlocal198_tmp_bytes;\
	out_bits += bmlocal199_tmp_bits;\
}

#define BM_PeekPokeUInt32Buffer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal200_tmp_bits;\
	BM_PeekPokeUInt32Buffer_GET_SIZE( base_ptr, out_bytes, bmlocal200_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal200_tmp_bits );\
}

#define BM_PeekPokeUInt32Buffer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PeekPokeUInt32Buffer", 1);\
	BM_PeekPokeUInt32Buffer_PeekPokeBytesNum_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PeekPokeUInt32Buffer_DeviceStartAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PeekPokeUInt32Buffer_PeekPokeArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PeekPokeUInt32Buffer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PeekPokeUInt32Buffer_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PokeMultiWordBuffer[4];

// COMPOSITE: Full name: 'PokeMultiWordBuffer' Type: 'PokeMultiWordBuffer', Top-level, Non-instance, No bitoff root
#define BM_PokeMultiWordBuffer_PokesNum_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PokeMultiWordBuffer_PokesNum_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal201_tmp_bitoff;\
	BM_PokeMultiWordBuffer_PokesNum_GET_POS( base_ptr, out_ptr, bmlocal201_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal201_tmp_bitoff);\
}

#define BM_PokeMultiWordBuffer_PokesNum_POS_ALIGNED 0

// Alignment of PokeMultiWordBuffer_PokesNum: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PokeMultiWordBuffer_PokesNum_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal202_my_ptr;\
	UINT bmlocal203_my_bitoff;\
	BM_PokeMultiWordBuffer_PokesNum_GET_POS( base_ptr, bmlocal202_my_ptr, bmlocal203_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal202_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal202_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal202_my_ptr, bmlocal203_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PokeMultiWordBuffer_PokesNum_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal204_tmp_var;
	BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, bmlocal204_tmp_var );
	return bmlocal204_tmp_var;
}

#define BM_PokeMultiWordBuffer_PokesNum_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal205_my_ptr;\
	UINT bmlocal206_my_bitoff;\
	BM_PokeMultiWordBuffer_PokesNum_GET_POS( base_ptr, bmlocal205_my_ptr, bmlocal206_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal205_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal205_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal205_my_ptr, bmlocal206_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PokeMultiWordBuffer_PokesNum: IS_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokesNum: SET_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokesNum: IS_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokesNum: SET_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokesNum: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PokeMultiWordBuffer_PokesNum: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PokeMultiWordBuffer_PokesNum_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal207_out_val;\
	BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, bmlocal207_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PokesNum", 32, (UINT)(bmlocal207_out_val), "%d", 1);\
}

#define BM_PokeMultiWordBuffer_PokesNum_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokesNum_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PokeMultiWordBuffer_PokesNum_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal208_my_ptr;\
	UINT bmlocal209_my_bitoff;\
	BM_PokeMultiWordBuffer_PokesNum_GET_POS( base_ptr, bmlocal208_my_ptr, bmlocal209_my_bitoff );\
	(*((UINT32*)bmlocal208_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal209_my_bitoff );\
}

// PokeMultiWordBuffer_PokesNum: Validation accessors are not defined because validation condition was not specified.
#define BM_PokeMultiWordBuffer_PokesNum_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal210_tmp_bits;\
	BM_PokeMultiWordBuffer_PokesNum_GET_SIZE( base_ptr, out_bytes, bmlocal210_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal210_tmp_bits );\
}

#define BM_PokeMultiWordBuffer_PokesNum_BYTES_SIZE 4

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal213_acc_bytes;\
	UINT bmlocal214_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal213_acc_bytes = 4;\
	bmlocal214_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal213_acc_bytes );\
	out_bitoff += bmlocal214_acc_bits;\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal215_tmp_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_POS( base_ptr, out_ptr, bmlocal215_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal215_tmp_bitoff);\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_POS_ALIGNED 4

// ARRAY: PokeMultiWordBuffer_PokeMultiWordArray
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal216_var0;\
		BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, bmlocal216_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal216_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal217_var0;\
			BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, bmlocal217_var0 );\
			out_element_count = (UINT)(bmlocal217_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal218_out_ptr;\
	UINT bmlocal219_out_bitoff;\
	UINT bmlocal220_element_size_bytes;\
	UINT bmlocal221_element_size_bits;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_POS( base_ptr, bmlocal218_out_ptr, bmlocal219_out_bitoff );\
	bmlocal220_element_size_bytes = 8;\
	bmlocal221_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal218_out_ptr) + (idx0) * bmlocal220_element_size_bytes );\
	out_bitoff = bmlocal219_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal221_element_size_bits );\
}

// COMPOSITE: Full name: 'PokeMultiWordBuffer_PokeMultiWordArray' Type: 'AddressValuePair', Inner, Non-instance, No bitoff root
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal222_parent_out_ptr;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_ELEMENT_POS( base_ptr, idx0, bmlocal222_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal222_parent_out_ptr;\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal223_tmp_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS( base_ptr, idx0, out_ptr, bmlocal223_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal223_tmp_bitoff);\
}

// Alignment of PokeMultiWordBuffer_PokeMultiWordArray_Address: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal224_my_ptr;\
	UINT bmlocal225_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS( base_ptr, idx0, bmlocal224_my_ptr, bmlocal225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal224_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal224_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal224_my_ptr, bmlocal225_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal226_tmp_var;
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET( base_ptr, idx0, bmlocal226_tmp_var );
	return bmlocal226_tmp_var;
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal227_my_ptr;\
	UINT bmlocal228_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS( base_ptr, idx0, bmlocal227_my_ptr, bmlocal228_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal227_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal227_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal227_my_ptr, bmlocal228_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PokeMultiWordBuffer_PokeMultiWordArray_Address: IS_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Address: SET_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Address: IS_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Address: SET_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Address: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PokeMultiWordBuffer_PokeMultiWordArray_Address: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal229_out_val;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET( base_ptr, idx0, bmlocal229_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Address", 32, (UINT)(bmlocal229_out_val), "%d", 1);\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal230_my_ptr;\
	UINT bmlocal231_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_POS( base_ptr, idx0, bmlocal230_my_ptr, bmlocal231_my_bitoff );\
	(*((UINT32*)bmlocal230_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal231_my_bitoff );\
}

// PokeMultiWordBuffer_PokeMultiWordArray_Address: Validation accessors are not defined because validation condition was not specified.
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal232_tmp_bits;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal232_tmp_bits );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_BYTES_SIZE 4

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal235_acc_bytes;\
	UINT bmlocal236_acc_bits;\
	PVOID bmlocal237_parent_out_ptr;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_ELEMENT_POS( base_ptr, idx0, bmlocal237_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal237_parent_out_ptr;\
	bmlocal235_acc_bytes = 4;\
	bmlocal236_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal235_acc_bytes );\
	out_bitoff += bmlocal236_acc_bits;\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal238_tmp_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS( base_ptr, idx0, out_ptr, bmlocal238_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal238_tmp_bitoff);\
}

// Alignment of PokeMultiWordBuffer_PokeMultiWordArray_Value: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal239_my_ptr;\
	UINT bmlocal240_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS( base_ptr, idx0, bmlocal239_my_ptr, bmlocal240_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal239_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal239_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal239_my_ptr, bmlocal240_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal241_tmp_var;
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET( base_ptr, idx0, bmlocal241_tmp_var );
	return bmlocal241_tmp_var;
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal242_my_ptr;\
	UINT bmlocal243_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS( base_ptr, idx0, bmlocal242_my_ptr, bmlocal243_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal242_my_ptr, bmlocal243_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PokeMultiWordBuffer_PokeMultiWordArray_Value: IS_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Value: SET_DEFAULT accessor is not defined because no default value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Value: IS_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Value: SET_RESET accessor is not defined because no reset value was specified.
// PokeMultiWordBuffer_PokeMultiWordArray_Value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PokeMultiWordBuffer_PokeMultiWordArray_Value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal244_out_val;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET( base_ptr, idx0, bmlocal244_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Value", 32, (UINT)(bmlocal244_out_val), "%d", 1);\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal245_my_ptr;\
	UINT bmlocal246_my_bitoff;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_POS( base_ptr, idx0, bmlocal245_my_ptr, bmlocal246_my_bitoff );\
	(*((UINT32*)bmlocal245_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal246_my_bitoff );\
}

// PokeMultiWordBuffer_PokeMultiWordArray_Value: Validation accessors are not defined because validation condition was not specified.
#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal247_tmp_bits;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal247_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal247_tmp_bits );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_BYTES_SIZE 4

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal250_tmp_bits;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal250_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal250_tmp_bits );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_BYTES_CELL_SIZE 8

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Address_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_Value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal251_dim_size0;\
	UINT bmlocal252_idx0;\
	{\
		UINT32 bmlocal253_var0;\
		BM_PokeMultiWordBuffer_PokesNum_GET( base_ptr, bmlocal253_var0 );\
		bmlocal251_dim_size0 = (UINT)(bmlocal253_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PokeMultiWordArray", 1);\
	for( bmlocal252_idx0=0; bmlocal252_idx0<bmlocal251_dim_size0; bmlocal252_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal252_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH_IDX( base_ptr, bmlocal252_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal254_tmp_bits;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_SIZE( base_ptr, out_bytes, bmlocal254_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal254_tmp_bits );\
}


#define BM_PokeMultiWordBuffer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal255_tmp_bytes = 0;\
	UINT bmlocal256_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_GET_SIZE( base_ptr, bmlocal255_tmp_bytes, bmlocal256_tmp_bits );\
	out_bytes += bmlocal255_tmp_bytes;\
	out_bits += bmlocal256_tmp_bits;\
}

#define BM_PokeMultiWordBuffer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal257_tmp_bits;\
	BM_PokeMultiWordBuffer_GET_SIZE( base_ptr, out_bytes, bmlocal257_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal257_tmp_bits );\
}

#define BM_PokeMultiWordBuffer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PokeMultiWordBuffer", 1);\
	BM_PokeMultiWordBuffer_PokesNum_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PokeMultiWordBuffer_PokeMultiWordArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PokeMultiWordBuffer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PokeMultiWordBuffer_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_PEEKPOKEBUFF_H_ */

