/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Ofer
 * Module  : L2L1Sdillo API For DM (Diagnostics Monitor) module
 * Author  : Timor Israeli
 * Date    : 22/10/2007
 * Purpose : 
 *****************************************************************************/

#if !defined(_BITMAN_L2L1SDILLODMCOMMON_H_)
#define _BITMAN_L2L1SDILLODMCOMMON_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef enum
{
	// value zero mean no valid and don't send.
	MON_BUFFER_NOT_VALID = 0,
	// bit[0] - valid.
	MON_BUFFER_VALID = 1,
	// bit[1] - send.
	MON_BUFFER_NOT_VALID_AND_SEND = 2,
	// This value is bitwise OR operation between bit[0] - valid, and bit[1] - send.
	MON_BUFFER_VALID_AND_SEND = 3
} MonitorValidity;

typedef UINT8 ULNoiseAndInterferenceLevel[2];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _valid : 8; //1 for indicating that the entry is valid, 0 for not valid
	UINT8 _level : 8; //units are [0.5]dBm, 0 indicates -150 dBm, 255 indicates -22.5 dBm. See 8.4.5.3.19
} BMS_ULNoiseAndInterferenceLevel;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _level : 8; //units are [0.5]dBm, 0 indicates -150 dBm, 255 indicates -22.5 dBm. See 8.4.5.3.19
	UINT8 _valid : 8; //1 for indicating that the entry is valid, 0 for not valid
} BMS_ULNoiseAndInterferenceLevel;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ULNoiseAndInterferenceLevel' Type: 'ULNoiseAndInterferenceLevel', Top-level, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceLevel_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ULNoiseAndInterferenceLevel_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal316_tmp_bitoff;\
	BM_ULNoiseAndInterferenceLevel_valid_GET_POS( base_ptr, out_ptr, bmlocal316_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal316_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceLevel_valid_POS_ALIGNED 0

// Alignment of ULNoiseAndInterferenceLevel_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceLevel_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceLevel_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal317_my_ptr;\
	UINT bmlocal318_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_valid_GET_POS( base_ptr, bmlocal317_my_ptr, bmlocal318_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal317_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal317_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal317_my_ptr, bmlocal318_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ULNoiseAndInterferenceLevel_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal319_my_ptr;\
	UINT bmlocal320_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_valid_GET_POS( base_ptr, bmlocal319_my_ptr, bmlocal320_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal319_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal319_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal319_my_ptr, bmlocal320_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ULNoiseAndInterferenceLevel_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceLevel_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceLevel_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceLevel_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceLevel_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceLevel_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceLevel_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal321_out_val;\
	BM_ULNoiseAndInterferenceLevel_valid_GET( base_ptr, bmlocal321_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal321_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceLevel_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceLevel_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceLevel_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal322_my_ptr;\
	UINT bmlocal323_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_valid_GET_POS( base_ptr, bmlocal322_my_ptr, bmlocal323_my_bitoff );\
	(*((UINT8*)bmlocal322_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal323_my_bitoff );\
}

// ULNoiseAndInterferenceLevel_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceLevel_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal324_tmp_bits;\
	BM_ULNoiseAndInterferenceLevel_valid_GET_SIZE( base_ptr, out_bytes, bmlocal324_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal324_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceLevel_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceLevel_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal327_acc_bytes;\
	UINT bmlocal328_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal327_acc_bytes = 1;\
	bmlocal328_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal327_acc_bytes );\
	out_bitoff += bmlocal328_acc_bits;\
}

#define BM_ULNoiseAndInterferenceLevel_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal329_tmp_bitoff;\
	BM_ULNoiseAndInterferenceLevel_level_GET_POS( base_ptr, out_ptr, bmlocal329_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal329_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceLevel_level_POS_ALIGNED 1

// Alignment of ULNoiseAndInterferenceLevel_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceLevel_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceLevel_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal330_my_ptr;\
	UINT bmlocal331_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_level_GET_POS( base_ptr, bmlocal330_my_ptr, bmlocal331_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal330_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal330_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal330_my_ptr, bmlocal331_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ULNoiseAndInterferenceLevel_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal332_my_ptr;\
	UINT bmlocal333_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_level_GET_POS( base_ptr, bmlocal332_my_ptr, bmlocal333_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal332_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal332_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal332_my_ptr, bmlocal333_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ULNoiseAndInterferenceLevel_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceLevel_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceLevel_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceLevel_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceLevel_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceLevel_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceLevel_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal334_out_val;\
	BM_ULNoiseAndInterferenceLevel_level_GET( base_ptr, bmlocal334_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal334_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceLevel_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceLevel_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceLevel_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal335_my_ptr;\
	UINT bmlocal336_my_bitoff;\
	BM_ULNoiseAndInterferenceLevel_level_GET_POS( base_ptr, bmlocal335_my_ptr, bmlocal336_my_bitoff );\
	(*((UINT8*)bmlocal335_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal336_my_bitoff );\
}

// ULNoiseAndInterferenceLevel_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceLevel_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal337_tmp_bits;\
	BM_ULNoiseAndInterferenceLevel_level_GET_SIZE( base_ptr, out_bytes, bmlocal337_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal337_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceLevel_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceLevel_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal340_tmp_bits;\
	BM_ULNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, bmlocal340_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal340_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceLevel_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ULNoiseAndInterferenceLevel", 1);\
	BM_ULNoiseAndInterferenceLevel_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceLevel_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceLevel_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, 0 );\
}


#define UL_NI_MASK_CQI_ACK_PERRNG (0x1)

#define UL_NI_MASK_PUSC (0x2)

#define UL_NI_MASK_AMC (0x4)

#define UL_NI_MASK_PERRNG (0x8)

#define UL_NI_MASK_SOUNDING (0xC)

#define UL_NI_MASK_MIMO (0x10)

typedef UINT8 ULNoiseAndInterferenceRegions[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_ULNoiseAndInterferenceLevel _cqiAckPeriodicRangingNI;
	BMS_ULNoiseAndInterferenceLevel _puscNI;
	BMS_ULNoiseAndInterferenceLevel _amcNI;
	BMS_ULNoiseAndInterferenceLevel _periodicRangingNI;
	BMS_ULNoiseAndInterferenceLevel _soundingNI;
	BMS_ULNoiseAndInterferenceLevel _mimoNI;
} BMS_ULNoiseAndInterferenceRegions;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_ULNoiseAndInterferenceLevel _mimoNI;
	BMS_ULNoiseAndInterferenceLevel _soundingNI;
	BMS_ULNoiseAndInterferenceLevel _periodicRangingNI;
	BMS_ULNoiseAndInterferenceLevel _amcNI;
	BMS_ULNoiseAndInterferenceLevel _puscNI;
	BMS_ULNoiseAndInterferenceLevel _cqiAckPeriodicRangingNI;
} BMS_ULNoiseAndInterferenceRegions;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions' Type: 'ULNoiseAndInterferenceRegions', Top-level, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal341_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal341_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal341_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_POS_ALIGNED 0

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal342_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal342_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal342_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal343_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal343_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal343_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_POS_ALIGNED 0

// Alignment of ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal344_my_ptr;\
	UINT bmlocal345_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal344_my_ptr, bmlocal345_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal344_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal344_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal344_my_ptr, bmlocal345_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal346_my_ptr;\
	UINT bmlocal347_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal346_my_ptr, bmlocal347_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal346_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal346_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal346_my_ptr, bmlocal347_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal348_out_val;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET( base_ptr, bmlocal348_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal348_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal349_my_ptr;\
	UINT bmlocal350_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal349_my_ptr, bmlocal350_my_bitoff );\
	(*((UINT8*)bmlocal349_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal350_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal351_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal351_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal351_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal354_acc_bytes;\
	UINT bmlocal355_acc_bits;\
	PVOID bmlocal356_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal356_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal356_parent_out_ptr;\
	bmlocal354_acc_bytes = 1;\
	bmlocal355_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal354_acc_bytes );\
	out_bitoff += bmlocal355_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal357_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal357_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal357_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_POS_ALIGNED 1

// Alignment of ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal358_my_ptr;\
	UINT bmlocal359_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal358_my_ptr, bmlocal359_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal358_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal358_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal358_my_ptr, bmlocal359_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal360_my_ptr;\
	UINT bmlocal361_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal360_my_ptr, bmlocal361_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal360_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal360_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal360_my_ptr, bmlocal361_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal362_out_val;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET( base_ptr, bmlocal362_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal362_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal363_my_ptr;\
	UINT bmlocal364_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal363_my_ptr, bmlocal364_my_bitoff );\
	(*((UINT8*)bmlocal363_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal364_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal365_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal365_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal365_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal368_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal368_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal368_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "cqiAckPeriodicRangingNI", 1);\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_puscNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal371_acc_bytes;\
	UINT bmlocal372_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal371_acc_bytes = 2;\
	bmlocal372_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal371_acc_bytes );\
	out_bitoff += bmlocal372_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal373_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_GET_POS( base_ptr, out_ptr, bmlocal373_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal373_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_POS_ALIGNED 2

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_puscNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal374_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_puscNI_GET_POS( base_ptr, bmlocal374_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal374_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal375_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS( base_ptr, out_ptr, bmlocal375_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal375_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_POS_ALIGNED 2

// Alignment of ULNoiseAndInterferenceRegions_puscNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal376_my_ptr;\
	UINT bmlocal377_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS( base_ptr, bmlocal376_my_ptr, bmlocal377_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal376_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal376_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal376_my_ptr, bmlocal377_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal378_my_ptr;\
	UINT bmlocal379_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS( base_ptr, bmlocal378_my_ptr, bmlocal379_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal378_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal378_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal378_my_ptr, bmlocal379_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// ULNoiseAndInterferenceRegions_puscNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_puscNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_puscNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_puscNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_puscNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_puscNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal380_out_val;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET( base_ptr, bmlocal380_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal380_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal381_my_ptr;\
	UINT bmlocal382_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_POS( base_ptr, bmlocal381_my_ptr, bmlocal382_my_bitoff );\
	(*((UINT8*)bmlocal381_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal382_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_puscNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal383_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal383_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal383_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal386_acc_bytes;\
	UINT bmlocal387_acc_bits;\
	PVOID bmlocal388_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_puscNI_GET_POS( base_ptr, bmlocal388_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal388_parent_out_ptr;\
	bmlocal386_acc_bytes = 1;\
	bmlocal387_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal386_acc_bytes );\
	out_bitoff += bmlocal387_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal389_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS( base_ptr, out_ptr, bmlocal389_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal389_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_POS_ALIGNED 3

// Alignment of ULNoiseAndInterferenceRegions_puscNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal390_my_ptr;\
	UINT bmlocal391_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS( base_ptr, bmlocal390_my_ptr, bmlocal391_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal390_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal390_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal390_my_ptr, bmlocal391_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal392_my_ptr;\
	UINT bmlocal393_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS( base_ptr, bmlocal392_my_ptr, bmlocal393_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal392_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal392_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal392_my_ptr, bmlocal393_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ULNoiseAndInterferenceRegions_puscNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_puscNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_puscNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_puscNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_puscNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_puscNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_puscNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal394_out_val;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET( base_ptr, bmlocal394_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal394_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal395_my_ptr;\
	UINT bmlocal396_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_POS( base_ptr, bmlocal395_my_ptr, bmlocal396_my_bitoff );\
	(*((UINT8*)bmlocal395_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal396_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_puscNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal397_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal397_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal397_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_puscNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal400_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_puscNI_GET_SIZE( base_ptr, out_bytes, bmlocal400_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal400_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_puscNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "puscNI", 1);\
	BM_ULNoiseAndInterferenceRegions_puscNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_puscNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_puscNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_puscNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_amcNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal403_acc_bytes;\
	UINT bmlocal404_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal403_acc_bytes = 4;\
	bmlocal404_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal403_acc_bytes );\
	out_bitoff += bmlocal404_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal405_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_GET_POS( base_ptr, out_ptr, bmlocal405_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal405_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_POS_ALIGNED 4

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_amcNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal406_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_amcNI_GET_POS( base_ptr, bmlocal406_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal406_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal407_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS( base_ptr, out_ptr, bmlocal407_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal407_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_POS_ALIGNED 4

// Alignment of ULNoiseAndInterferenceRegions_amcNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal408_my_ptr;\
	UINT bmlocal409_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS( base_ptr, bmlocal408_my_ptr, bmlocal409_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal408_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal408_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal408_my_ptr, bmlocal409_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal410_my_ptr;\
	UINT bmlocal411_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS( base_ptr, bmlocal410_my_ptr, bmlocal411_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal410_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal410_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal410_my_ptr, bmlocal411_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ULNoiseAndInterferenceRegions_amcNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_amcNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_amcNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_amcNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_amcNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_amcNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal412_out_val;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET( base_ptr, bmlocal412_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal412_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal413_my_ptr;\
	UINT bmlocal414_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_POS( base_ptr, bmlocal413_my_ptr, bmlocal414_my_bitoff );\
	(*((UINT8*)bmlocal413_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal414_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_amcNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal415_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal415_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal415_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal418_acc_bytes;\
	UINT bmlocal419_acc_bits;\
	PVOID bmlocal420_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_amcNI_GET_POS( base_ptr, bmlocal420_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal420_parent_out_ptr;\
	bmlocal418_acc_bytes = 1;\
	bmlocal419_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal418_acc_bytes );\
	out_bitoff += bmlocal419_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal421_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS( base_ptr, out_ptr, bmlocal421_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal421_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_POS_ALIGNED 5

// Alignment of ULNoiseAndInterferenceRegions_amcNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal422_my_ptr;\
	UINT bmlocal423_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS( base_ptr, bmlocal422_my_ptr, bmlocal423_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal422_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal422_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal422_my_ptr, bmlocal423_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal424_my_ptr;\
	UINT bmlocal425_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS( base_ptr, bmlocal424_my_ptr, bmlocal425_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal424_my_ptr, bmlocal425_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ULNoiseAndInterferenceRegions_amcNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_amcNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_amcNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_amcNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_amcNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_amcNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_amcNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal426_out_val;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET( base_ptr, bmlocal426_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal426_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal427_my_ptr;\
	UINT bmlocal428_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_POS( base_ptr, bmlocal427_my_ptr, bmlocal428_my_bitoff );\
	(*((UINT8*)bmlocal427_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal428_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_amcNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal429_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal429_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_amcNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal432_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_amcNI_GET_SIZE( base_ptr, out_bytes, bmlocal432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal432_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_amcNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "amcNI", 1);\
	BM_ULNoiseAndInterferenceRegions_amcNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_amcNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_amcNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_amcNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal435_acc_bytes;\
	UINT bmlocal436_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal435_acc_bytes = 6;\
	bmlocal436_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal435_acc_bytes );\
	out_bitoff += bmlocal436_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal437_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal437_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal437_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_POS_ALIGNED 6

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_periodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal438_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_POS( base_ptr, bmlocal438_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal438_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal439_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal439_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal439_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_POS_ALIGNED 6

// Alignment of ULNoiseAndInterferenceRegions_periodicRangingNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal440_my_ptr;\
	UINT bmlocal441_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal440_my_ptr, bmlocal441_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal440_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal440_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal440_my_ptr, bmlocal441_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal442_my_ptr;\
	UINT bmlocal443_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal442_my_ptr, bmlocal443_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal442_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal442_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal442_my_ptr, bmlocal443_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal444_out_val;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET( base_ptr, bmlocal444_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal444_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal445_my_ptr;\
	UINT bmlocal446_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal445_my_ptr, bmlocal446_my_bitoff );\
	(*((UINT8*)bmlocal445_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal446_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_periodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal447_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal447_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal447_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal450_acc_bytes;\
	UINT bmlocal451_acc_bits;\
	PVOID bmlocal452_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_POS( base_ptr, bmlocal452_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal452_parent_out_ptr;\
	bmlocal450_acc_bytes = 1;\
	bmlocal451_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal450_acc_bytes );\
	out_bitoff += bmlocal451_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal453_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal453_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal453_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_POS_ALIGNED 7

// Alignment of ULNoiseAndInterferenceRegions_periodicRangingNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal454_my_ptr;\
	UINT bmlocal455_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS( base_ptr, bmlocal454_my_ptr, bmlocal455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal454_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal454_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal454_my_ptr, bmlocal455_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal456_my_ptr;\
	UINT bmlocal457_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS( base_ptr, bmlocal456_my_ptr, bmlocal457_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal456_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal456_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal456_my_ptr, bmlocal457_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ULNoiseAndInterferenceRegions_periodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_periodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_periodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal458_out_val;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET( base_ptr, bmlocal458_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal458_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal459_my_ptr;\
	UINT bmlocal460_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_POS( base_ptr, bmlocal459_my_ptr, bmlocal460_my_bitoff );\
	(*((UINT8*)bmlocal459_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal460_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_periodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal461_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal461_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal461_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal464_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal464_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal464_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "periodicRangingNI", 1);\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_periodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_soundingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal467_acc_bytes;\
	UINT bmlocal468_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal467_acc_bytes = 8;\
	bmlocal468_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal467_acc_bytes );\
	out_bitoff += bmlocal468_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal469_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_GET_POS( base_ptr, out_ptr, bmlocal469_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal469_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_POS_ALIGNED 8

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_soundingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal470_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_GET_POS( base_ptr, bmlocal470_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal470_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal471_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal471_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal471_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_POS_ALIGNED 8

// Alignment of ULNoiseAndInterferenceRegions_soundingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal472_my_ptr;\
	UINT bmlocal473_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS( base_ptr, bmlocal472_my_ptr, bmlocal473_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal472_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal472_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal472_my_ptr, bmlocal473_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal474_my_ptr;\
	UINT bmlocal475_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS( base_ptr, bmlocal474_my_ptr, bmlocal475_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal474_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal474_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal474_my_ptr, bmlocal475_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ULNoiseAndInterferenceRegions_soundingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_soundingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal476_out_val;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET( base_ptr, bmlocal476_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal476_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal477_my_ptr;\
	UINT bmlocal478_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_POS( base_ptr, bmlocal477_my_ptr, bmlocal478_my_bitoff );\
	(*((UINT8*)bmlocal477_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal478_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_soundingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal479_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal479_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal479_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal482_acc_bytes;\
	UINT bmlocal483_acc_bits;\
	PVOID bmlocal484_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_GET_POS( base_ptr, bmlocal484_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal484_parent_out_ptr;\
	bmlocal482_acc_bytes = 1;\
	bmlocal483_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal482_acc_bytes );\
	out_bitoff += bmlocal483_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal485_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS( base_ptr, out_ptr, bmlocal485_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal485_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_POS_ALIGNED 9

// Alignment of ULNoiseAndInterferenceRegions_soundingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal486_my_ptr;\
	UINT bmlocal487_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS( base_ptr, bmlocal486_my_ptr, bmlocal487_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal486_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal486_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal486_my_ptr, bmlocal487_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal488_my_ptr;\
	UINT bmlocal489_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS( base_ptr, bmlocal488_my_ptr, bmlocal489_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal488_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal488_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal488_my_ptr, bmlocal489_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ULNoiseAndInterferenceRegions_soundingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_soundingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_soundingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal490_out_val;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET( base_ptr, bmlocal490_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal490_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal491_my_ptr;\
	UINT bmlocal492_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_POS( base_ptr, bmlocal491_my_ptr, bmlocal492_my_bitoff );\
	(*((UINT8*)bmlocal491_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal492_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_soundingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal493_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal493_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal493_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_soundingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal496_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_soundingNI_GET_SIZE( base_ptr, out_bytes, bmlocal496_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal496_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_soundingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "soundingNI", 1);\
	BM_ULNoiseAndInterferenceRegions_soundingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_soundingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_soundingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_soundingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_mimoNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal499_acc_bytes;\
	UINT bmlocal500_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal499_acc_bytes = 10;\
	bmlocal500_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal499_acc_bytes );\
	out_bitoff += bmlocal500_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal501_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_GET_POS( base_ptr, out_ptr, bmlocal501_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal501_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_POS_ALIGNED 10

// COMPOSITE: Full name: 'ULNoiseAndInterferenceRegions_mimoNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal502_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_GET_POS( base_ptr, bmlocal502_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal502_parent_out_ptr;\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal503_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS( base_ptr, out_ptr, bmlocal503_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal503_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_POS_ALIGNED 10

// Alignment of ULNoiseAndInterferenceRegions_mimoNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal504_my_ptr;\
	UINT bmlocal505_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS( base_ptr, bmlocal504_my_ptr, bmlocal505_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal504_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal504_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal504_my_ptr, bmlocal505_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal506_my_ptr;\
	UINT bmlocal507_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS( base_ptr, bmlocal506_my_ptr, bmlocal507_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal506_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal506_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal506_my_ptr, bmlocal507_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// ULNoiseAndInterferenceRegions_mimoNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_mimoNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal508_out_val;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET( base_ptr, bmlocal508_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal508_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal509_my_ptr;\
	UINT bmlocal510_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_POS( base_ptr, bmlocal509_my_ptr, bmlocal510_my_bitoff );\
	(*((UINT8*)bmlocal509_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal510_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_mimoNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal511_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal511_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal511_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_valid_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal514_acc_bytes;\
	UINT bmlocal515_acc_bits;\
	PVOID bmlocal516_parent_out_ptr;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_GET_POS( base_ptr, bmlocal516_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal516_parent_out_ptr;\
	bmlocal514_acc_bytes = 1;\
	bmlocal515_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal514_acc_bytes );\
	out_bitoff += bmlocal515_acc_bits;\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal517_tmp_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS( base_ptr, out_ptr, bmlocal517_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal517_tmp_bitoff);\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_POS_ALIGNED 11

// Alignment of ULNoiseAndInterferenceRegions_mimoNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal518_my_ptr;\
	UINT bmlocal519_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS( base_ptr, bmlocal518_my_ptr, bmlocal519_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal518_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal518_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal518_my_ptr, bmlocal519_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal520_my_ptr;\
	UINT bmlocal521_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS( base_ptr, bmlocal520_my_ptr, bmlocal521_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal520_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal520_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal520_my_ptr, bmlocal521_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ULNoiseAndInterferenceRegions_mimoNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_level: IS_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_level: SET_RESET accessor is not defined because no reset value was specified.
// ULNoiseAndInterferenceRegions_mimoNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ULNoiseAndInterferenceRegions_mimoNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal522_out_val;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET( base_ptr, bmlocal522_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal522_out_val), "%d", 1);\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal523_my_ptr;\
	UINT bmlocal524_my_bitoff;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_POS( base_ptr, bmlocal523_my_ptr, bmlocal524_my_bitoff );\
	(*((UINT8*)bmlocal523_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal524_my_bitoff );\
}

// ULNoiseAndInterferenceRegions_mimoNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal525_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal525_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal525_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_level_BYTES_SIZE 1

#define BM_ULNoiseAndInterferenceRegions_mimoNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal528_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_mimoNI_GET_SIZE( base_ptr, out_bytes, bmlocal528_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal528_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_BYTES_SIZE 2

#define BM_ULNoiseAndInterferenceRegions_mimoNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "mimoNI", 1);\
	BM_ULNoiseAndInterferenceRegions_mimoNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_mimoNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_mimoNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_mimoNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ULNoiseAndInterferenceRegions_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal531_tmp_bits;\
	BM_ULNoiseAndInterferenceRegions_GET_SIZE( base_ptr, out_bytes, bmlocal531_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal531_tmp_bits );\
}

#define BM_ULNoiseAndInterferenceRegions_BYTES_SIZE 12

#define BM_ULNoiseAndInterferenceRegions_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ULNoiseAndInterferenceRegions", 1);\
	BM_ULNoiseAndInterferenceRegions_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_puscNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_amcNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_periodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_soundingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ULNoiseAndInterferenceRegions_mimoNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ULNoiseAndInterferenceRegions_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ULNoiseAndInterferenceRegions_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CdmaAttributes[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _xOffset : 8; //symbol offset used to transmit the code
	UINT8 _yOffset : 8; //subchannel offset used to transmit the code
	UINT8 _codeNumber : 8; //the code transmitted [0-255]
	UINT8 _frameNumber : 8; //8 ls bits of the frame number in which the CDMA code was transmitted
} BMS_CdmaAttributes;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _frameNumber : 8; //8 ls bits of the frame number in which the CDMA code was transmitted
	UINT8 _codeNumber : 8; //the code transmitted [0-255]
	UINT8 _yOffset : 8; //subchannel offset used to transmit the code
	UINT8 _xOffset : 8; //symbol offset used to transmit the code
} BMS_CdmaAttributes;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'CdmaAttributes' Type: 'CdmaAttributes', Top-level, Non-instance, No bitoff root
#define BM_CdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CdmaAttributes_xOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal532_tmp_bitoff;\
	BM_CdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, bmlocal532_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal532_tmp_bitoff);\
}

#define BM_CdmaAttributes_xOffset_POS_ALIGNED 0

// Alignment of CdmaAttributes_xOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_xOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal533_my_ptr;\
	UINT bmlocal534_my_bitoff;\
	BM_CdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal533_my_ptr, bmlocal534_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal533_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal533_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal533_my_ptr, bmlocal534_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_CdmaAttributes_xOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal535_my_ptr;\
	UINT bmlocal536_my_bitoff;\
	BM_CdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal535_my_ptr, bmlocal536_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal535_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal535_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal535_my_ptr, bmlocal536_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// CdmaAttributes_xOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_xOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_xOffset: IS_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_xOffset: SET_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_xOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaAttributes_xOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal537_out_val;\
	BM_CdmaAttributes_xOffset_GET( base_ptr, bmlocal537_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "xOffset", 8, (UINT)(bmlocal537_out_val), "%d", 1);\
}

#define BM_CdmaAttributes_xOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaAttributes_xOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal538_my_ptr;\
	UINT bmlocal539_my_bitoff;\
	BM_CdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal538_my_ptr, bmlocal539_my_bitoff );\
	(*((UINT8*)bmlocal538_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal539_my_bitoff );\
}

// CdmaAttributes_xOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaAttributes_xOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal540_tmp_bits;\
	BM_CdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, bmlocal540_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal540_tmp_bits );\
}

#define BM_CdmaAttributes_xOffset_BYTES_SIZE 1

#define BM_CdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal543_acc_bytes;\
	UINT bmlocal544_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal543_acc_bytes = 1;\
	bmlocal544_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal543_acc_bytes );\
	out_bitoff += bmlocal544_acc_bits;\
}

#define BM_CdmaAttributes_yOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal545_tmp_bitoff;\
	BM_CdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, bmlocal545_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal545_tmp_bitoff);\
}

#define BM_CdmaAttributes_yOffset_POS_ALIGNED 1

// Alignment of CdmaAttributes_yOffset: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_yOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal546_my_ptr;\
	UINT bmlocal547_my_bitoff;\
	BM_CdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal546_my_ptr, bmlocal547_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal546_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal546_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal546_my_ptr, bmlocal547_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_CdmaAttributes_yOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal548_my_ptr;\
	UINT bmlocal549_my_bitoff;\
	BM_CdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal548_my_ptr, bmlocal549_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal548_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal548_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal548_my_ptr, bmlocal549_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// CdmaAttributes_yOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_yOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_yOffset: IS_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_yOffset: SET_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_yOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaAttributes_yOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal550_out_val;\
	BM_CdmaAttributes_yOffset_GET( base_ptr, bmlocal550_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "yOffset", 8, (UINT)(bmlocal550_out_val), "%d", 1);\
}

#define BM_CdmaAttributes_yOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaAttributes_yOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal551_my_ptr;\
	UINT bmlocal552_my_bitoff;\
	BM_CdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal551_my_ptr, bmlocal552_my_bitoff );\
	(*((UINT8*)bmlocal551_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal552_my_bitoff );\
}

// CdmaAttributes_yOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaAttributes_yOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal553_tmp_bits;\
	BM_CdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, bmlocal553_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal553_tmp_bits );\
}

#define BM_CdmaAttributes_yOffset_BYTES_SIZE 1

#define BM_CdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal556_acc_bytes;\
	UINT bmlocal557_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal556_acc_bytes = 2;\
	bmlocal557_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal556_acc_bytes );\
	out_bitoff += bmlocal557_acc_bits;\
}

#define BM_CdmaAttributes_codeNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal558_tmp_bitoff;\
	BM_CdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, bmlocal558_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal558_tmp_bitoff);\
}

#define BM_CdmaAttributes_codeNumber_POS_ALIGNED 2

// Alignment of CdmaAttributes_codeNumber: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_codeNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal559_my_ptr;\
	UINT bmlocal560_my_bitoff;\
	BM_CdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal559_my_ptr, bmlocal560_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal559_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal559_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal559_my_ptr, bmlocal560_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_CdmaAttributes_codeNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal561_my_ptr;\
	UINT bmlocal562_my_bitoff;\
	BM_CdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal561_my_ptr, bmlocal562_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal561_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal561_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal561_my_ptr, bmlocal562_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// CdmaAttributes_codeNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_codeNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_codeNumber: IS_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_codeNumber: SET_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_codeNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaAttributes_codeNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal563_out_val;\
	BM_CdmaAttributes_codeNumber_GET( base_ptr, bmlocal563_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "codeNumber", 8, (UINT)(bmlocal563_out_val), "%d", 1);\
}

#define BM_CdmaAttributes_codeNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaAttributes_codeNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal564_my_ptr;\
	UINT bmlocal565_my_bitoff;\
	BM_CdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal564_my_ptr, bmlocal565_my_bitoff );\
	(*((UINT8*)bmlocal564_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal565_my_bitoff );\
}

// CdmaAttributes_codeNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaAttributes_codeNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal566_tmp_bits;\
	BM_CdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, bmlocal566_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal566_tmp_bits );\
}

#define BM_CdmaAttributes_codeNumber_BYTES_SIZE 1

#define BM_CdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal569_acc_bytes;\
	UINT bmlocal570_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal569_acc_bytes = 3;\
	bmlocal570_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal569_acc_bytes );\
	out_bitoff += bmlocal570_acc_bits;\
}

#define BM_CdmaAttributes_frameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal571_tmp_bitoff;\
	BM_CdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, bmlocal571_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal571_tmp_bitoff);\
}

#define BM_CdmaAttributes_frameNumber_POS_ALIGNED 3

// Alignment of CdmaAttributes_frameNumber: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_frameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal572_my_ptr;\
	UINT bmlocal573_my_bitoff;\
	BM_CdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal572_my_ptr, bmlocal573_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal572_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal572_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal572_my_ptr, bmlocal573_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_CdmaAttributes_frameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal574_my_ptr;\
	UINT bmlocal575_my_bitoff;\
	BM_CdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal574_my_ptr, bmlocal575_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal574_my_ptr, bmlocal575_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// CdmaAttributes_frameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_frameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaAttributes_frameNumber: IS_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_frameNumber: SET_RESET accessor is not defined because no reset value was specified.
// CdmaAttributes_frameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaAttributes_frameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal576_out_val;\
	BM_CdmaAttributes_frameNumber_GET( base_ptr, bmlocal576_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frameNumber", 8, (UINT)(bmlocal576_out_val), "%d", 1);\
}

#define BM_CdmaAttributes_frameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaAttributes_frameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal577_my_ptr;\
	UINT bmlocal578_my_bitoff;\
	BM_CdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal577_my_ptr, bmlocal578_my_bitoff );\
	(*((UINT8*)bmlocal577_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal578_my_bitoff );\
}

// CdmaAttributes_frameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaAttributes_frameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal579_tmp_bits;\
	BM_CdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal579_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal579_tmp_bits );\
}

#define BM_CdmaAttributes_frameNumber_BYTES_SIZE 1

#define BM_CdmaAttributes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal582_tmp_bits;\
	BM_CdmaAttributes_GET_SIZE( base_ptr, out_bytes, bmlocal582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal582_tmp_bits );\
}

#define BM_CdmaAttributes_BYTES_SIZE 4

#define BM_CdmaAttributes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CdmaAttributes", 1);\
	BM_CdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaAttributes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaAttributes_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FchBuffer[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _byte0 : 8; //FCH Byte index #0
	UINT8 _byte1 : 8; //FCH Byte index #1
	UINT8 _byte2 : 8; //FCH Byte index #2
	MonitorValidity _validity : 8; //indicates whether a real FCH is placed there, and whether to send it.
} BMS_FchBuffer;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	MonitorValidity _validity : 8; //indicates whether a real FCH is placed there, and whether to send it.
	UINT8 _byte2 : 8; //FCH Byte index #2
	UINT8 _byte1 : 8; //FCH Byte index #1
	UINT8 _byte0 : 8; //FCH Byte index #0
} BMS_FchBuffer;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FchBuffer' Type: 'FchBuffer', Top-level, Non-instance, No bitoff root
#define BM_FchBuffer_byte0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FchBuffer_byte0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal583_tmp_bitoff;\
	BM_FchBuffer_byte0_GET_POS( base_ptr, out_ptr, bmlocal583_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal583_tmp_bitoff);\
}

#define BM_FchBuffer_byte0_POS_ALIGNED 0

// Alignment of FchBuffer_byte0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FchBuffer_byte0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_byte0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal584_my_ptr;\
	UINT bmlocal585_my_bitoff;\
	BM_FchBuffer_byte0_GET_POS( base_ptr, bmlocal584_my_ptr, bmlocal585_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal584_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal584_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal584_my_ptr, bmlocal585_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FchBuffer_byte0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal586_my_ptr;\
	UINT bmlocal587_my_bitoff;\
	BM_FchBuffer_byte0_GET_POS( base_ptr, bmlocal586_my_ptr, bmlocal587_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal586_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal586_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal586_my_ptr, bmlocal587_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FchBuffer_byte0: IS_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte0: SET_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte0: IS_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte0: SET_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FchBuffer_byte0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FchBuffer_byte0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal588_out_val;\
	BM_FchBuffer_byte0_GET( base_ptr, bmlocal588_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte0", 8, (UINT)(bmlocal588_out_val), "%d", 1);\
}

#define BM_FchBuffer_byte0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FchBuffer_byte0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FchBuffer_byte0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal589_my_ptr;\
	UINT bmlocal590_my_bitoff;\
	BM_FchBuffer_byte0_GET_POS( base_ptr, bmlocal589_my_ptr, bmlocal590_my_bitoff );\
	(*((UINT8*)bmlocal589_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal590_my_bitoff );\
}

// FchBuffer_byte0: Validation accessors are not defined because validation condition was not specified.
#define BM_FchBuffer_byte0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal591_tmp_bits;\
	BM_FchBuffer_byte0_GET_SIZE( base_ptr, out_bytes, bmlocal591_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal591_tmp_bits );\
}

#define BM_FchBuffer_byte0_BYTES_SIZE 1

#define BM_FchBuffer_byte1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal594_acc_bytes;\
	UINT bmlocal595_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal594_acc_bytes = 1;\
	bmlocal595_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal594_acc_bytes );\
	out_bitoff += bmlocal595_acc_bits;\
}

#define BM_FchBuffer_byte1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal596_tmp_bitoff;\
	BM_FchBuffer_byte1_GET_POS( base_ptr, out_ptr, bmlocal596_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal596_tmp_bitoff);\
}

#define BM_FchBuffer_byte1_POS_ALIGNED 1

// Alignment of FchBuffer_byte1: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FchBuffer_byte1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_byte1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal597_my_ptr;\
	UINT bmlocal598_my_bitoff;\
	BM_FchBuffer_byte1_GET_POS( base_ptr, bmlocal597_my_ptr, bmlocal598_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal597_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal597_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal597_my_ptr, bmlocal598_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FchBuffer_byte1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal599_my_ptr;\
	UINT bmlocal600_my_bitoff;\
	BM_FchBuffer_byte1_GET_POS( base_ptr, bmlocal599_my_ptr, bmlocal600_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal599_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal599_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal599_my_ptr, bmlocal600_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FchBuffer_byte1: IS_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte1: SET_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte1: IS_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte1: SET_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FchBuffer_byte1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FchBuffer_byte1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal601_out_val;\
	BM_FchBuffer_byte1_GET( base_ptr, bmlocal601_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte1", 8, (UINT)(bmlocal601_out_val), "%d", 1);\
}

#define BM_FchBuffer_byte1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FchBuffer_byte1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FchBuffer_byte1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal602_my_ptr;\
	UINT bmlocal603_my_bitoff;\
	BM_FchBuffer_byte1_GET_POS( base_ptr, bmlocal602_my_ptr, bmlocal603_my_bitoff );\
	(*((UINT8*)bmlocal602_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal603_my_bitoff );\
}

// FchBuffer_byte1: Validation accessors are not defined because validation condition was not specified.
#define BM_FchBuffer_byte1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal604_tmp_bits;\
	BM_FchBuffer_byte1_GET_SIZE( base_ptr, out_bytes, bmlocal604_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal604_tmp_bits );\
}

#define BM_FchBuffer_byte1_BYTES_SIZE 1

#define BM_FchBuffer_byte2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal607_acc_bytes;\
	UINT bmlocal608_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal607_acc_bytes = 2;\
	bmlocal608_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal607_acc_bytes );\
	out_bitoff += bmlocal608_acc_bits;\
}

#define BM_FchBuffer_byte2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal609_tmp_bitoff;\
	BM_FchBuffer_byte2_GET_POS( base_ptr, out_ptr, bmlocal609_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal609_tmp_bitoff);\
}

#define BM_FchBuffer_byte2_POS_ALIGNED 2

// Alignment of FchBuffer_byte2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FchBuffer_byte2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_byte2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal610_my_ptr;\
	UINT bmlocal611_my_bitoff;\
	BM_FchBuffer_byte2_GET_POS( base_ptr, bmlocal610_my_ptr, bmlocal611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal610_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal610_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal610_my_ptr, bmlocal611_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_FchBuffer_byte2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal612_my_ptr;\
	UINT bmlocal613_my_bitoff;\
	BM_FchBuffer_byte2_GET_POS( base_ptr, bmlocal612_my_ptr, bmlocal613_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal612_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal612_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal612_my_ptr, bmlocal613_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// FchBuffer_byte2: IS_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte2: SET_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_byte2: IS_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte2: SET_RESET accessor is not defined because no reset value was specified.
// FchBuffer_byte2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FchBuffer_byte2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FchBuffer_byte2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal614_out_val;\
	BM_FchBuffer_byte2_GET( base_ptr, bmlocal614_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte2", 8, (UINT)(bmlocal614_out_val), "%d", 1);\
}

#define BM_FchBuffer_byte2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FchBuffer_byte2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FchBuffer_byte2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal615_my_ptr;\
	UINT bmlocal616_my_bitoff;\
	BM_FchBuffer_byte2_GET_POS( base_ptr, bmlocal615_my_ptr, bmlocal616_my_bitoff );\
	(*((UINT8*)bmlocal615_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal616_my_bitoff );\
}

// FchBuffer_byte2: Validation accessors are not defined because validation condition was not specified.
#define BM_FchBuffer_byte2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal617_tmp_bits;\
	BM_FchBuffer_byte2_GET_SIZE( base_ptr, out_bytes, bmlocal617_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal617_tmp_bits );\
}

#define BM_FchBuffer_byte2_BYTES_SIZE 1

#define BM_FchBuffer_validity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal620_acc_bytes;\
	UINT bmlocal621_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal620_acc_bytes = 3;\
	bmlocal621_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal620_acc_bytes );\
	out_bitoff += bmlocal621_acc_bits;\
}

#define BM_FchBuffer_validity_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal622_tmp_bitoff;\
	BM_FchBuffer_validity_GET_POS( base_ptr, out_ptr, bmlocal622_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal622_tmp_bitoff);\
}

#define BM_FchBuffer_validity_POS_ALIGNED 3

// Alignment of FchBuffer_validity: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FchBuffer_validity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_validity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal623_my_ptr;\
	UINT bmlocal624_my_bitoff;\
	BM_FchBuffer_validity_GET_POS( base_ptr, bmlocal623_my_ptr, bmlocal624_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal623_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal623_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal623_my_ptr, bmlocal624_my_bitoff, 8, MonitorValidity, out_val, 0x00000003 );\
	}\
}

#define BM_FchBuffer_validity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal625_my_ptr;\
	UINT bmlocal626_my_bitoff;\
	BM_FchBuffer_validity_GET_POS( base_ptr, bmlocal625_my_ptr, bmlocal626_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal625_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal625_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal625_my_ptr, bmlocal626_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// FchBuffer_validity: IS_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_validity: SET_DEFAULT accessor is not defined because no default value was specified.
// FchBuffer_validity: IS_RESET accessor is not defined because no reset value was specified.
// FchBuffer_validity: SET_RESET accessor is not defined because no reset value was specified.
// FchBuffer_validity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FchBuffer_validity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FchBuffer_validity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	MonitorValidity bmlocal627_out_val;\
	BM_FchBuffer_validity_GET( base_ptr, bmlocal627_out_val );\
	if( bmlocal627_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID", 1);\
	}\
	if( bmlocal627_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID", 1);\
	}\
	if( bmlocal627_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID_AND_SEND", 1);\
	}\
	if( bmlocal627_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID_AND_SEND", 1);\
	}\
}

#define BM_FchBuffer_validity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FchBuffer_validity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FchBuffer_validity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal628_my_ptr;\
	UINT bmlocal629_my_bitoff;\
	BM_FchBuffer_validity_GET_POS( base_ptr, bmlocal628_my_ptr, bmlocal629_my_bitoff );\
	(*((UINT8*)bmlocal628_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal629_my_bitoff );\
}

// FchBuffer_validity: Validation accessors are not defined because validation condition was not specified.
#define BM_FchBuffer_validity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal630_tmp_bits;\
	BM_FchBuffer_validity_GET_SIZE( base_ptr, out_bytes, bmlocal630_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal630_tmp_bits );\
}

#define BM_FchBuffer_validity_BYTES_SIZE 1

#define BM_FchBuffer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal633_tmp_bits;\
	BM_FchBuffer_GET_SIZE( base_ptr, out_bytes, bmlocal633_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal633_tmp_bits );\
}

#define BM_FchBuffer_BYTES_SIZE 4

#define BM_FchBuffer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FchBuffer", 1);\
	BM_FchBuffer_byte0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FchBuffer_byte1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FchBuffer_byte2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FchBuffer_validity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FchBuffer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FchBuffer_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L2L1SDILLODMCOMMON_H_ */

