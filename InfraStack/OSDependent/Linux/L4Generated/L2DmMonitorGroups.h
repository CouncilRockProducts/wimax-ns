/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Besor
 * Module  : FW DM Parameters
 * Author  : Avihay Cohen
 * Date    : 19/04/2007
 * Purpose : FW - PAL API to pass DM parameters
 *****************************************************************************/

#if !defined(_BITMAN_L2DMMONITORGROUPS_H_)
#define _BITMAN_L2DMMONITORGROUPS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "l2l3_api_ranging_enums.h"
#include "L2L1SdilloDmCommon.h"
#include "DilloDiagnostics.h"

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define numOfTxConnections (16)

typedef UINT8 FrameRatio[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _DlSize : 8; //Dl size Byte index #0
	UINT8 _UlSize : 8; //Ul size Byte index #1
	UINT8 _reserved1_bytes [2]; //Align the structure to 32 bits
} BMS_FrameRatio;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved1_bytes [2]; //Align the structure to 32 bits
	UINT8 _UlSize : 8; //Ul size Byte index #1
	UINT8 _DlSize : 8; //Dl size Byte index #0
} BMS_FrameRatio;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FrameRatio' Type: 'FrameRatio', Top-level, Non-instance, No bitoff root
#define BM_FrameRatio_DlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FrameRatio_DlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4033_tmp_bitoff;\
	BM_FrameRatio_DlSize_GET_POS( base_ptr, out_ptr, bmlocal4033_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4033_tmp_bitoff);\
}

#define BM_FrameRatio_DlSize_POS_ALIGNED 0

// Alignment of FrameRatio_DlSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FrameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FrameRatio_DlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4034_my_ptr;\
	UINT bmlocal4035_my_bitoff;\
	BM_FrameRatio_DlSize_GET_POS( base_ptr, bmlocal4034_my_ptr, bmlocal4035_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4034_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4034_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4034_my_ptr, bmlocal4035_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FrameRatio_DlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4036_my_ptr;\
	UINT bmlocal4037_my_bitoff;\
	BM_FrameRatio_DlSize_GET_POS( base_ptr, bmlocal4036_my_ptr, bmlocal4037_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4036_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4036_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4036_my_ptr, bmlocal4037_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FrameRatio_DlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FrameRatio_DlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FrameRatio_DlSize: IS_RESET accessor is not defined because no reset value was specified.
// FrameRatio_DlSize: SET_RESET accessor is not defined because no reset value was specified.
// FrameRatio_DlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FrameRatio_DlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FrameRatio_DlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4038_out_val;\
	BM_FrameRatio_DlSize_GET( base_ptr, bmlocal4038_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DlSize", 8, (UINT)(bmlocal4038_out_val), "%d", 1);\
}

#define BM_FrameRatio_DlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FrameRatio_DlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FrameRatio_DlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4039_my_ptr;\
	UINT bmlocal4040_my_bitoff;\
	BM_FrameRatio_DlSize_GET_POS( base_ptr, bmlocal4039_my_ptr, bmlocal4040_my_bitoff );\
	(*((UINT8*)bmlocal4039_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4040_my_bitoff );\
}

// FrameRatio_DlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FrameRatio_DlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4041_tmp_bits;\
	BM_FrameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4041_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4041_tmp_bits );\
}

#define BM_FrameRatio_DlSize_BYTES_SIZE 1

#define BM_FrameRatio_UlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4044_acc_bytes;\
	UINT bmlocal4045_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4044_acc_bytes = 1;\
	bmlocal4045_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4044_acc_bytes );\
	out_bitoff += bmlocal4045_acc_bits;\
}

#define BM_FrameRatio_UlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4046_tmp_bitoff;\
	BM_FrameRatio_UlSize_GET_POS( base_ptr, out_ptr, bmlocal4046_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4046_tmp_bitoff);\
}

#define BM_FrameRatio_UlSize_POS_ALIGNED 1

// Alignment of FrameRatio_UlSize: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FrameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FrameRatio_UlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4047_my_ptr;\
	UINT bmlocal4048_my_bitoff;\
	BM_FrameRatio_UlSize_GET_POS( base_ptr, bmlocal4047_my_ptr, bmlocal4048_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4047_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4047_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4047_my_ptr, bmlocal4048_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FrameRatio_UlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4049_my_ptr;\
	UINT bmlocal4050_my_bitoff;\
	BM_FrameRatio_UlSize_GET_POS( base_ptr, bmlocal4049_my_ptr, bmlocal4050_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4049_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4049_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4049_my_ptr, bmlocal4050_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FrameRatio_UlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FrameRatio_UlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FrameRatio_UlSize: IS_RESET accessor is not defined because no reset value was specified.
// FrameRatio_UlSize: SET_RESET accessor is not defined because no reset value was specified.
// FrameRatio_UlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FrameRatio_UlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FrameRatio_UlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4051_out_val;\
	BM_FrameRatio_UlSize_GET( base_ptr, bmlocal4051_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UlSize", 8, (UINT)(bmlocal4051_out_val), "%d", 1);\
}

#define BM_FrameRatio_UlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FrameRatio_UlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FrameRatio_UlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4052_my_ptr;\
	UINT bmlocal4053_my_bitoff;\
	BM_FrameRatio_UlSize_GET_POS( base_ptr, bmlocal4052_my_ptr, bmlocal4053_my_bitoff );\
	(*((UINT8*)bmlocal4052_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4053_my_bitoff );\
}

// FrameRatio_UlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FrameRatio_UlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4054_tmp_bits;\
	BM_FrameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4054_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4054_tmp_bits );\
}

#define BM_FrameRatio_UlSize_BYTES_SIZE 1

#define BM_FrameRatio_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4057_acc_bytes;\
	UINT bmlocal4058_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4057_acc_bytes = 2;\
	bmlocal4058_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4057_acc_bytes );\
	out_bitoff += bmlocal4058_acc_bits;\
}

#define BM_FrameRatio_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4059_tmp_bitoff;\
	BM_FrameRatio_reserved1_GET_POS( base_ptr, out_ptr, bmlocal4059_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4059_tmp_bitoff);\
}

#define BM_FrameRatio_reserved1_POS_ALIGNED 2

#define BM_FrameRatio_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4060_my_ptr;\
	UINT bmlocal4061_my_bitoff;\
	BM_FrameRatio_reserved1_GET_POS( base_ptr, bmlocal4060_my_ptr, bmlocal4061_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4060_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4060_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4060_my_ptr, bmlocal4061_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FrameRatio_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4062_my_ptr;\
	UINT bmlocal4063_my_bitoff;\
	BM_FrameRatio_reserved1_GET_POS( base_ptr, bmlocal4062_my_ptr, bmlocal4063_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4062_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4062_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4062_my_ptr, bmlocal4063_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_FrameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FrameRatio_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal4064_out_bytes;\
	UINT bmlocal4065_out_bits;\
	BM_FrameRatio_reserved1_GET_SIZE( base_ptr, bmlocal4064_out_bytes, bmlocal4065_out_bits );\
	bmlocal4065_out_bits += bmlocal4064_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal4065_out_bits), "%d", 1);\
}

#define BM_FrameRatio_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FrameRatio_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FrameRatio_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4066_tmp_bits;\
	BM_FrameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal4066_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4066_tmp_bits );\
}

#define BM_FrameRatio_reserved1_BYTES_SIZE 2

#define BM_FrameRatio_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FrameRatio_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4069_tmp_bits;\
	BM_FrameRatio_GET_SIZE( base_ptr, out_bytes, bmlocal4069_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4069_tmp_bits );\
}

#define BM_FrameRatio_BYTES_SIZE 4

#define BM_FrameRatio_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FrameRatio", 1);\
	BM_FrameRatio_DlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FrameRatio_UlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FrameRatio_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FrameRatio_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FrameRatio_DUMP_DEPTH( base_ptr, 0 );\
}


typedef enum
{
	DM_RNG_RSP_STATUS_UNKNOWN = 0,
	DM_RNG_RSP_STATUS_CONTINUE = 1,
	DM_RNG_RSP_STATUS_ABORT = 2,
	DM_RNG_RSP_STATUS_SUCCESS = 3
} EDMRangingRspStatus;

typedef UINT8 FW_MON_TYPE_BASIC_STATUS[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FchBuffer _FCH; //The 3 bytes of the FCH plus its validity
	BMS_FrameRatio _frameRatio;
} BMS_FW_MON_TYPE_BASIC_STATUS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FrameRatio _frameRatio;
	BMS_FchBuffer _FCH; //The 3 bytes of the FCH plus its validity
} BMS_FW_MON_TYPE_BASIC_STATUS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FW_MON_TYPE_BASIC_STATUS' Type: 'FW_MON_TYPE_BASIC_STATUS', Top-level, Non-instance, No bitoff root
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4070_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, out_ptr, bmlocal4070_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4070_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_POS_ALIGNED 0

// COMPOSITE: Full name: 'FW_MON_TYPE_BASIC_STATUS_FCH' Type: 'FchBuffer', Inner, Non-instance, No bitoff root
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4071_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, bmlocal4071_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4071_parent_out_ptr;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4072_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS( base_ptr, out_ptr, bmlocal4072_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4072_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_POS_ALIGNED 0

// Alignment of FW_MON_TYPE_BASIC_STATUS_FCH_byte0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4073_my_ptr;\
	UINT bmlocal4074_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS( base_ptr, bmlocal4073_my_ptr, bmlocal4074_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4073_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4073_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4073_my_ptr, bmlocal4074_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4075_my_ptr;\
	UINT bmlocal4076_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS( base_ptr, bmlocal4075_my_ptr, bmlocal4076_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4075_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4075_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4075_my_ptr, bmlocal4076_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4077_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET( base_ptr, bmlocal4077_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte0", 8, (UINT)(bmlocal4077_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4078_my_ptr;\
	UINT bmlocal4079_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_POS( base_ptr, bmlocal4078_my_ptr, bmlocal4079_my_bitoff );\
	(*((UINT8*)bmlocal4078_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4079_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte0: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4080_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_GET_SIZE( base_ptr, out_bytes, bmlocal4080_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4080_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4083_acc_bytes;\
	UINT bmlocal4084_acc_bits;\
	PVOID bmlocal4085_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, bmlocal4085_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4085_parent_out_ptr;\
	bmlocal4083_acc_bytes = 1;\
	bmlocal4084_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4083_acc_bytes );\
	out_bitoff += bmlocal4084_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4086_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS( base_ptr, out_ptr, bmlocal4086_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4086_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_POS_ALIGNED 1

// Alignment of FW_MON_TYPE_BASIC_STATUS_FCH_byte1: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4087_my_ptr;\
	UINT bmlocal4088_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS( base_ptr, bmlocal4087_my_ptr, bmlocal4088_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4087_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4087_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4087_my_ptr, bmlocal4088_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4089_my_ptr;\
	UINT bmlocal4090_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS( base_ptr, bmlocal4089_my_ptr, bmlocal4090_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4089_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4089_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4089_my_ptr, bmlocal4090_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4091_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET( base_ptr, bmlocal4091_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte1", 8, (UINT)(bmlocal4091_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4092_my_ptr;\
	UINT bmlocal4093_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_POS( base_ptr, bmlocal4092_my_ptr, bmlocal4093_my_bitoff );\
	(*((UINT8*)bmlocal4092_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4093_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte1: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4094_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_GET_SIZE( base_ptr, out_bytes, bmlocal4094_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4094_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4097_acc_bytes;\
	UINT bmlocal4098_acc_bits;\
	PVOID bmlocal4099_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, bmlocal4099_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4099_parent_out_ptr;\
	bmlocal4097_acc_bytes = 2;\
	bmlocal4098_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4097_acc_bytes );\
	out_bitoff += bmlocal4098_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4100_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS( base_ptr, out_ptr, bmlocal4100_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4100_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_POS_ALIGNED 2

// Alignment of FW_MON_TYPE_BASIC_STATUS_FCH_byte2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4101_my_ptr;\
	UINT bmlocal4102_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS( base_ptr, bmlocal4101_my_ptr, bmlocal4102_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4101_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4101_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4101_my_ptr, bmlocal4102_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4103_my_ptr;\
	UINT bmlocal4104_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS( base_ptr, bmlocal4103_my_ptr, bmlocal4104_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4103_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4103_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4103_my_ptr, bmlocal4104_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4105_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET( base_ptr, bmlocal4105_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte2", 8, (UINT)(bmlocal4105_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4106_my_ptr;\
	UINT bmlocal4107_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_POS( base_ptr, bmlocal4106_my_ptr, bmlocal4107_my_bitoff );\
	(*((UINT8*)bmlocal4106_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4107_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_byte2: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4108_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_GET_SIZE( base_ptr, out_bytes, bmlocal4108_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4108_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4111_acc_bytes;\
	UINT bmlocal4112_acc_bits;\
	PVOID bmlocal4113_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_POS( base_ptr, bmlocal4113_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4113_parent_out_ptr;\
	bmlocal4111_acc_bytes = 3;\
	bmlocal4112_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4111_acc_bytes );\
	out_bitoff += bmlocal4112_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4114_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS( base_ptr, out_ptr, bmlocal4114_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4114_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_POS_ALIGNED 3

// Alignment of FW_MON_TYPE_BASIC_STATUS_FCH_validity: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4115_my_ptr;\
	UINT bmlocal4116_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS( base_ptr, bmlocal4115_my_ptr, bmlocal4116_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4115_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4115_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4115_my_ptr, bmlocal4116_my_bitoff, 8, MonitorValidity, out_val, 0x00000003 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4117_my_ptr;\
	UINT bmlocal4118_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS( base_ptr, bmlocal4117_my_ptr, bmlocal4118_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4117_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4117_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4117_my_ptr, bmlocal4118_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_validity: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_validity: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_validity: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_validity: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_FCH_validity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_FCH_validity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	MonitorValidity bmlocal4119_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET( base_ptr, bmlocal4119_out_val );\
	if( bmlocal4119_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID", 1);\
	}\
	if( bmlocal4119_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID", 1);\
	}\
	if( bmlocal4119_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID_AND_SEND", 1);\
	}\
	if( bmlocal4119_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID_AND_SEND", 1);\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4120_my_ptr;\
	UINT bmlocal4121_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_POS( base_ptr, bmlocal4120_my_ptr, bmlocal4121_my_bitoff );\
	(*((UINT8*)bmlocal4120_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4121_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_FCH_validity: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4122_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_GET_SIZE( base_ptr, out_bytes, bmlocal4122_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4122_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4125_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_GET_SIZE( base_ptr, out_bytes, bmlocal4125_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4125_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FCH", 1);\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_byte2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_validity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_FCH_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4128_acc_bytes;\
	UINT bmlocal4129_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4128_acc_bytes = 4;\
	bmlocal4129_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4128_acc_bytes );\
	out_bitoff += bmlocal4129_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4130_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS( base_ptr, out_ptr, bmlocal4130_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4130_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_POS_ALIGNED 4

// COMPOSITE: Full name: 'FW_MON_TYPE_BASIC_STATUS_frameRatio' Type: 'FrameRatio', Inner, Non-instance, No bitoff root
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4131_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS( base_ptr, bmlocal4131_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4131_parent_out_ptr;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4132_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS( base_ptr, out_ptr, bmlocal4132_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4132_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_POS_ALIGNED 4

// Alignment of FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4133_my_ptr;\
	UINT bmlocal4134_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4133_my_ptr, bmlocal4134_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4133_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4133_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4133_my_ptr, bmlocal4134_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4135_my_ptr;\
	UINT bmlocal4136_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4135_my_ptr, bmlocal4136_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4135_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4135_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4135_my_ptr, bmlocal4136_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4137_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET( base_ptr, bmlocal4137_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DlSize", 8, (UINT)(bmlocal4137_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4138_my_ptr;\
	UINT bmlocal4139_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4138_my_ptr, bmlocal4139_my_bitoff );\
	(*((UINT8*)bmlocal4138_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4139_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4140_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4140_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4140_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4143_acc_bytes;\
	UINT bmlocal4144_acc_bits;\
	PVOID bmlocal4145_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS( base_ptr, bmlocal4145_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4145_parent_out_ptr;\
	bmlocal4143_acc_bytes = 1;\
	bmlocal4144_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4143_acc_bytes );\
	out_bitoff += bmlocal4144_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4146_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS( base_ptr, out_ptr, bmlocal4146_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4146_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_POS_ALIGNED 5

// Alignment of FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4147_my_ptr;\
	UINT bmlocal4148_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4147_my_ptr, bmlocal4148_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4147_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4147_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4147_my_ptr, bmlocal4148_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4149_my_ptr;\
	UINT bmlocal4150_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4149_my_ptr, bmlocal4150_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4149_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4149_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4149_my_ptr, bmlocal4150_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4151_out_val;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET( base_ptr, bmlocal4151_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UlSize", 8, (UINT)(bmlocal4151_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4152_my_ptr;\
	UINT bmlocal4153_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4152_my_ptr, bmlocal4153_my_bitoff );\
	(*((UINT8*)bmlocal4152_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4153_my_bitoff );\
}

// FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4154_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4154_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4154_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_BYTES_SIZE 1

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4157_acc_bytes;\
	UINT bmlocal4158_acc_bits;\
	PVOID bmlocal4159_parent_out_ptr;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_POS( base_ptr, bmlocal4159_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4159_parent_out_ptr;\
	bmlocal4157_acc_bytes = 2;\
	bmlocal4158_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4157_acc_bytes );\
	out_bitoff += bmlocal4158_acc_bits;\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4160_tmp_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_POS( base_ptr, out_ptr, bmlocal4160_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4160_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_POS_ALIGNED 6

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4161_my_ptr;\
	UINT bmlocal4162_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_POS( base_ptr, bmlocal4161_my_ptr, bmlocal4162_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4161_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4161_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4161_my_ptr, bmlocal4162_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4163_my_ptr;\
	UINT bmlocal4164_my_bitoff;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_POS( base_ptr, bmlocal4163_my_ptr, bmlocal4164_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4163_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4163_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4163_my_ptr, bmlocal4164_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal4165_out_bytes;\
	UINT bmlocal4166_out_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_SIZE( base_ptr, bmlocal4165_out_bytes, bmlocal4166_out_bits );\
	bmlocal4166_out_bits += bmlocal4165_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal4166_out_bits), "%d", 1);\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4167_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal4167_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4167_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_BYTES_SIZE 2

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4170_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_GET_SIZE( base_ptr, out_bytes, bmlocal4170_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4170_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "frameRatio", 1);\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_UlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FW_MON_TYPE_BASIC_STATUS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4173_tmp_bits;\
	BM_FW_MON_TYPE_BASIC_STATUS_GET_SIZE( base_ptr, out_bytes, bmlocal4173_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4173_tmp_bits );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_BYTES_SIZE 8

#define BM_FW_MON_TYPE_BASIC_STATUS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FW_MON_TYPE_BASIC_STATUS", 1);\
	BM_FW_MON_TYPE_BASIC_STATUS_FCH_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BASIC_STATUS_frameRatio_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BASIC_STATUS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BASIC_STATUS_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FW_MON_TYPE_BURST_STATUS[32];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalDLPduCRCCount; //Total number of PDUs in the DL with CRC error
	UINT32 _TotalDLPduCount; //Total number of PDUs in the DL
	UINT32 _UL_PDU_Size; //Last burst's PDU Size (Bytes) in Uplink
	UINT32 _TotalULPDUSize; //Accomulative over all burst's PDU Size (Bytes) in Uplink
	UINT32 _TotalUlPduCount; //Total number of PDUs transmitted
	UINT32 _UL_SDU_Size; //Last transmitted SDU Size (Bytes) in Uplink
	UINT32 _TotalULSDUSize; //Accomulative over all SDU Size (Bytes) in Uplink
	UINT32 _TotalUlSduCount; //Total number of SDUs transmitted
} BMS_FW_MON_TYPE_BURST_STATUS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalUlSduCount; //Total number of SDUs transmitted
	UINT32 _TotalULSDUSize; //Accomulative over all SDU Size (Bytes) in Uplink
	UINT32 _UL_SDU_Size; //Last transmitted SDU Size (Bytes) in Uplink
	UINT32 _TotalUlPduCount; //Total number of PDUs transmitted
	UINT32 _TotalULPDUSize; //Accomulative over all burst's PDU Size (Bytes) in Uplink
	UINT32 _UL_PDU_Size; //Last burst's PDU Size (Bytes) in Uplink
	UINT32 _TotalDLPduCount; //Total number of PDUs in the DL
	UINT32 _TotalDLPduCRCCount; //Total number of PDUs in the DL with CRC error
} BMS_FW_MON_TYPE_BURST_STATUS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FW_MON_TYPE_BURST_STATUS' Type: 'FW_MON_TYPE_BURST_STATUS', Top-level, Non-instance, No bitoff root
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4174_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS( base_ptr, out_ptr, bmlocal4174_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4174_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_POS_ALIGNED 0

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4175_my_ptr;\
	UINT bmlocal4176_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4175_my_ptr, bmlocal4176_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4175_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4175_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4175_my_ptr, bmlocal4176_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4177_my_ptr;\
	UINT bmlocal4178_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4177_my_ptr, bmlocal4178_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4177_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4177_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4177_my_ptr, bmlocal4178_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4179_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET( base_ptr, bmlocal4179_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalDLPduCRCCount", 32, (UINT)(bmlocal4179_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4180_my_ptr;\
	UINT bmlocal4181_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4180_my_ptr, bmlocal4181_my_bitoff );\
	(*((UINT32*)bmlocal4180_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4181_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4182_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_GET_SIZE( base_ptr, out_bytes, bmlocal4182_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4182_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4185_acc_bytes;\
	UINT bmlocal4186_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4185_acc_bytes = 4;\
	bmlocal4186_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4185_acc_bytes );\
	out_bitoff += bmlocal4186_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4187_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS( base_ptr, out_ptr, bmlocal4187_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4187_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_POS_ALIGNED 4

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4188_my_ptr;\
	UINT bmlocal4189_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS( base_ptr, bmlocal4188_my_ptr, bmlocal4189_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4188_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4188_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4188_my_ptr, bmlocal4189_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4190_my_ptr;\
	UINT bmlocal4191_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS( base_ptr, bmlocal4190_my_ptr, bmlocal4191_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4190_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4190_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4190_my_ptr, bmlocal4191_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4192_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET( base_ptr, bmlocal4192_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalDLPduCount", 32, (UINT)(bmlocal4192_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4193_my_ptr;\
	UINT bmlocal4194_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_POS( base_ptr, bmlocal4193_my_ptr, bmlocal4194_my_bitoff );\
	(*((UINT32*)bmlocal4193_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4194_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalDLPduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4195_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4195_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4195_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4198_acc_bytes;\
	UINT bmlocal4199_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4198_acc_bytes = 8;\
	bmlocal4199_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4198_acc_bytes );\
	out_bitoff += bmlocal4199_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4200_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS( base_ptr, out_ptr, bmlocal4200_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4200_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_POS_ALIGNED 8

// Alignment of FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4201_my_ptr;\
	UINT bmlocal4202_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS( base_ptr, bmlocal4201_my_ptr, bmlocal4202_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4201_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4201_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4201_my_ptr, bmlocal4202_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4203_my_ptr;\
	UINT bmlocal4204_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS( base_ptr, bmlocal4203_my_ptr, bmlocal4204_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4203_my_ptr, bmlocal4204_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4205_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET( base_ptr, bmlocal4205_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_PDU_Size", 32, (UINT)(bmlocal4205_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4206_my_ptr;\
	UINT bmlocal4207_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_POS( base_ptr, bmlocal4206_my_ptr, bmlocal4207_my_bitoff );\
	(*((UINT32*)bmlocal4206_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4207_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_UL_PDU_Size: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4208_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_GET_SIZE( base_ptr, out_bytes, bmlocal4208_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4208_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4211_acc_bytes;\
	UINT bmlocal4212_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4211_acc_bytes = 12;\
	bmlocal4212_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4211_acc_bytes );\
	out_bitoff += bmlocal4212_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4213_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS( base_ptr, out_ptr, bmlocal4213_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4213_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_POS_ALIGNED 12

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4214_my_ptr;\
	UINT bmlocal4215_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS( base_ptr, bmlocal4214_my_ptr, bmlocal4215_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4214_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4214_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4214_my_ptr, bmlocal4215_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4216_my_ptr;\
	UINT bmlocal4217_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS( base_ptr, bmlocal4216_my_ptr, bmlocal4217_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4216_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4216_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4216_my_ptr, bmlocal4217_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4218_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET( base_ptr, bmlocal4218_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalULPDUSize", 32, (UINT)(bmlocal4218_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4219_my_ptr;\
	UINT bmlocal4220_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_POS( base_ptr, bmlocal4219_my_ptr, bmlocal4220_my_bitoff );\
	(*((UINT32*)bmlocal4219_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4220_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalULPDUSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4221_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_GET_SIZE( base_ptr, out_bytes, bmlocal4221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4221_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4224_acc_bytes;\
	UINT bmlocal4225_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4224_acc_bytes = 16;\
	bmlocal4225_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4224_acc_bytes );\
	out_bitoff += bmlocal4225_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4226_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS( base_ptr, out_ptr, bmlocal4226_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4226_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_POS_ALIGNED 16

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4227_my_ptr;\
	UINT bmlocal4228_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS( base_ptr, bmlocal4227_my_ptr, bmlocal4228_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4227_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4227_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4227_my_ptr, bmlocal4228_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4229_my_ptr;\
	UINT bmlocal4230_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS( base_ptr, bmlocal4229_my_ptr, bmlocal4230_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4229_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4229_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4229_my_ptr, bmlocal4230_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4231_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET( base_ptr, bmlocal4231_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalUlPduCount", 32, (UINT)(bmlocal4231_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4232_my_ptr;\
	UINT bmlocal4233_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_POS( base_ptr, bmlocal4232_my_ptr, bmlocal4233_my_bitoff );\
	(*((UINT32*)bmlocal4232_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4233_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalUlPduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4234_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4234_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4234_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4237_acc_bytes;\
	UINT bmlocal4238_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4237_acc_bytes = 20;\
	bmlocal4238_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4237_acc_bytes );\
	out_bitoff += bmlocal4238_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4239_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS( base_ptr, out_ptr, bmlocal4239_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4239_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_POS_ALIGNED 20

// Alignment of FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4240_my_ptr;\
	UINT bmlocal4241_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS( base_ptr, bmlocal4240_my_ptr, bmlocal4241_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4240_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4240_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4240_my_ptr, bmlocal4241_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4242_my_ptr;\
	UINT bmlocal4243_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS( base_ptr, bmlocal4242_my_ptr, bmlocal4243_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4242_my_ptr, bmlocal4243_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4244_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET( base_ptr, bmlocal4244_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_SDU_Size", 32, (UINT)(bmlocal4244_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4245_my_ptr;\
	UINT bmlocal4246_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_POS( base_ptr, bmlocal4245_my_ptr, bmlocal4246_my_bitoff );\
	(*((UINT32*)bmlocal4245_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4246_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_UL_SDU_Size: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4247_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_GET_SIZE( base_ptr, out_bytes, bmlocal4247_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4247_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4250_acc_bytes;\
	UINT bmlocal4251_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4250_acc_bytes = 24;\
	bmlocal4251_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4250_acc_bytes );\
	out_bitoff += bmlocal4251_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4252_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS( base_ptr, out_ptr, bmlocal4252_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4252_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_POS_ALIGNED 24

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4253_my_ptr;\
	UINT bmlocal4254_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS( base_ptr, bmlocal4253_my_ptr, bmlocal4254_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4253_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4253_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4253_my_ptr, bmlocal4254_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4255_my_ptr;\
	UINT bmlocal4256_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS( base_ptr, bmlocal4255_my_ptr, bmlocal4256_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4255_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4255_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4255_my_ptr, bmlocal4256_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4257_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET( base_ptr, bmlocal4257_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalULSDUSize", 32, (UINT)(bmlocal4257_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4258_my_ptr;\
	UINT bmlocal4259_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_POS( base_ptr, bmlocal4258_my_ptr, bmlocal4259_my_bitoff );\
	(*((UINT32*)bmlocal4258_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4259_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalULSDUSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4260_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_GET_SIZE( base_ptr, out_bytes, bmlocal4260_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4260_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4263_acc_bytes;\
	UINT bmlocal4264_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4263_acc_bytes = 28;\
	bmlocal4264_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4263_acc_bytes );\
	out_bitoff += bmlocal4264_acc_bits;\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4265_tmp_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS( base_ptr, out_ptr, bmlocal4265_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4265_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_POS_ALIGNED 28

// Alignment of FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4266_my_ptr;\
	UINT bmlocal4267_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS( base_ptr, bmlocal4266_my_ptr, bmlocal4267_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4266_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4266_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4266_my_ptr, bmlocal4267_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4268_my_ptr;\
	UINT bmlocal4269_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS( base_ptr, bmlocal4268_my_ptr, bmlocal4269_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4268_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4268_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4268_my_ptr, bmlocal4269_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4270_out_val;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET( base_ptr, bmlocal4270_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalUlSduCount", 32, (UINT)(bmlocal4270_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4271_my_ptr;\
	UINT bmlocal4272_my_bitoff;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_POS( base_ptr, bmlocal4271_my_ptr, bmlocal4272_my_bitoff );\
	(*((UINT32*)bmlocal4271_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4272_my_bitoff );\
}

// FW_MON_TYPE_BURST_STATUS_TotalUlSduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4273_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4273_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4273_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_BYTES_SIZE 4

#define BM_FW_MON_TYPE_BURST_STATUS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4276_tmp_bits;\
	BM_FW_MON_TYPE_BURST_STATUS_GET_SIZE( base_ptr, out_bytes, bmlocal4276_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4276_tmp_bits );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_BYTES_SIZE 32

#define BM_FW_MON_TYPE_BURST_STATUS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FW_MON_TYPE_BURST_STATUS", 1);\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_TotalDLPduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_UL_PDU_Size_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULPDUSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlPduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_UL_SDU_Size_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_TotalULSDUSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_BURST_STATUS_TotalUlSduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_BURST_STATUS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_BURST_STATUS_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FW_MON_TYPE_CDMA_BWR[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalNumberOfCdmaBwrInit; //Total number of initializations of CDMA BWR
	UINT32 _TotalNumberOfTxCdmaBwr; //Total number of CDMA BWR transmission (shall be equal or bigger than TotalNumberOfBwrCdmaInit)
} BMS_FW_MON_TYPE_CDMA_BWR;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalNumberOfTxCdmaBwr; //Total number of CDMA BWR transmission (shall be equal or bigger than TotalNumberOfBwrCdmaInit)
	UINT32 _TotalNumberOfCdmaBwrInit; //Total number of initializations of CDMA BWR
} BMS_FW_MON_TYPE_CDMA_BWR;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FW_MON_TYPE_CDMA_BWR' Type: 'FW_MON_TYPE_CDMA_BWR', Top-level, Non-instance, No bitoff root
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4277_tmp_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, out_ptr, bmlocal4277_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4277_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_POS_ALIGNED 0

// Alignment of FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4278_my_ptr;\
	UINT bmlocal4279_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4278_my_ptr, bmlocal4279_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4278_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4278_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4278_my_ptr, bmlocal4279_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4280_my_ptr;\
	UINT bmlocal4281_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4280_my_ptr, bmlocal4281_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4280_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4280_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4280_my_ptr, bmlocal4281_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4282_out_val;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET( base_ptr, bmlocal4282_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalNumberOfCdmaBwrInit", 32, (UINT)(bmlocal4282_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4283_my_ptr;\
	UINT bmlocal4284_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4283_my_ptr, bmlocal4284_my_bitoff );\
	(*((UINT32*)bmlocal4283_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4284_my_bitoff );\
}

// FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4285_tmp_bits;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_GET_SIZE( base_ptr, out_bytes, bmlocal4285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4285_tmp_bits );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_BYTES_SIZE 4

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4288_acc_bytes;\
	UINT bmlocal4289_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4288_acc_bytes = 4;\
	bmlocal4289_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4288_acc_bytes );\
	out_bitoff += bmlocal4289_acc_bits;\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4290_tmp_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, out_ptr, bmlocal4290_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4290_tmp_bitoff);\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_POS_ALIGNED 4

// Alignment of FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4291_my_ptr;\
	UINT bmlocal4292_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4291_my_ptr, bmlocal4292_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4291_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4291_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4291_my_ptr, bmlocal4292_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4293_my_ptr;\
	UINT bmlocal4294_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4293_my_ptr, bmlocal4294_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4293_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4293_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4293_my_ptr, bmlocal4294_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: IS_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: SET_RESET accessor is not defined because no reset value was specified.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4295_out_val;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET( base_ptr, bmlocal4295_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalNumberOfTxCdmaBwr", 32, (UINT)(bmlocal4295_out_val), "%d", 1);\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4296_my_ptr;\
	UINT bmlocal4297_my_bitoff;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4296_my_ptr, bmlocal4297_my_bitoff );\
	(*((UINT32*)bmlocal4296_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4297_my_bitoff );\
}

// FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4298_tmp_bits;\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_GET_SIZE( base_ptr, out_bytes, bmlocal4298_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4298_tmp_bits );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_BYTES_SIZE 4

#define BM_FW_MON_TYPE_CDMA_BWR_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4301_tmp_bits;\
	BM_FW_MON_TYPE_CDMA_BWR_GET_SIZE( base_ptr, out_bytes, bmlocal4301_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4301_tmp_bits );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_BYTES_SIZE 8

#define BM_FW_MON_TYPE_CDMA_BWR_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FW_MON_TYPE_CDMA_BWR", 1);\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_MON_TYPE_CDMA_BWR_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_MON_TYPE_CDMA_BWR_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_MON_TYPE_CDMA_BWR_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FW_L2_MON_TYPE_RANGING_PARAMETERS[28];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_CdmaAttributes _DilloCdmaAttributes;
	ERangingMode _RangingType; //0 'invalid', 1 'initial', 2 'periodic', 3 'ho', 4 'no-ranging'
	INT32 _TimingAdjustment; //Ranging time adjustment information in FFT samples units
	INT32 _PowerLevelAdjust; //Ranging time adjustment information in [0.25 dB] unit
	UINT32 _InvitingRetries; //Number of recieved RNG-RSP messages with status='success'
	UINT32 _ContentionRetries; //Number of recieved RNG-RSP messages with status='contimue'
	EDMRangingRspStatus _rangingStatus : 8; //1 for 'CONTINUE', 2 for 'ABORT', 3 for 'SUCCESS' - check section 11.6 table 625 in the standard
	UINT8 _reserved1_bytes [3]; //Align the structure to 32 bits
} BMS_FW_L2_MON_TYPE_RANGING_PARAMETERS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved1_bytes [3]; //Align the structure to 32 bits
	EDMRangingRspStatus _rangingStatus : 8; //1 for 'CONTINUE', 2 for 'ABORT', 3 for 'SUCCESS' - check section 11.6 table 625 in the standard
	UINT32 _ContentionRetries; //Number of recieved RNG-RSP messages with status='contimue'
	UINT32 _InvitingRetries; //Number of recieved RNG-RSP messages with status='success'
	INT32 _PowerLevelAdjust; //Ranging time adjustment information in [0.25 dB] unit
	INT32 _TimingAdjustment; //Ranging time adjustment information in FFT samples units
	ERangingMode _RangingType; //0 'invalid', 1 'initial', 2 'periodic', 3 'ho', 4 'no-ranging'
	BMS_CdmaAttributes _DilloCdmaAttributes;
} BMS_FW_L2_MON_TYPE_RANGING_PARAMETERS;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FW_L2_MON_TYPE_RANGING_PARAMETERS' Type: 'FW_L2_MON_TYPE_RANGING_PARAMETERS', Top-level, Non-instance, No bitoff root
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4302_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, out_ptr, bmlocal4302_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4302_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_POS_ALIGNED 0

// COMPOSITE: Full name: 'FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes' Type: 'CdmaAttributes', Inner, Non-instance, No bitoff root
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4303_parent_out_ptr;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4303_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4303_parent_out_ptr;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4304_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, bmlocal4304_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4304_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_POS_ALIGNED 0

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4305_my_ptr;\
	UINT bmlocal4306_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4305_my_ptr, bmlocal4306_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4305_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4305_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4305_my_ptr, bmlocal4306_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4307_my_ptr;\
	UINT bmlocal4308_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4307_my_ptr, bmlocal4308_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4307_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4307_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4307_my_ptr, bmlocal4308_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4309_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET( base_ptr, bmlocal4309_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "xOffset", 8, (UINT)(bmlocal4309_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4310_my_ptr;\
	UINT bmlocal4311_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4310_my_ptr, bmlocal4311_my_bitoff );\
	(*((UINT8*)bmlocal4310_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4311_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4312_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, bmlocal4312_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4312_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_BYTES_SIZE 1

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4315_acc_bytes;\
	UINT bmlocal4316_acc_bits;\
	PVOID bmlocal4317_parent_out_ptr;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4317_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4317_parent_out_ptr;\
	bmlocal4315_acc_bytes = 1;\
	bmlocal4316_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4315_acc_bytes );\
	out_bitoff += bmlocal4316_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4318_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, bmlocal4318_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4318_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_POS_ALIGNED 1

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4319_my_ptr;\
	UINT bmlocal4320_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4319_my_ptr, bmlocal4320_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4319_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4319_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4319_my_ptr, bmlocal4320_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4321_my_ptr;\
	UINT bmlocal4322_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4321_my_ptr, bmlocal4322_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4321_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4321_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4321_my_ptr, bmlocal4322_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4323_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET( base_ptr, bmlocal4323_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "yOffset", 8, (UINT)(bmlocal4323_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4324_my_ptr;\
	UINT bmlocal4325_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4324_my_ptr, bmlocal4325_my_bitoff );\
	(*((UINT8*)bmlocal4324_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4325_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4326_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, bmlocal4326_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4326_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_BYTES_SIZE 1

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4329_acc_bytes;\
	UINT bmlocal4330_acc_bits;\
	PVOID bmlocal4331_parent_out_ptr;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4331_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4331_parent_out_ptr;\
	bmlocal4329_acc_bytes = 2;\
	bmlocal4330_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4329_acc_bytes );\
	out_bitoff += bmlocal4330_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4332_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, bmlocal4332_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4332_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_POS_ALIGNED 2

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4333_my_ptr;\
	UINT bmlocal4334_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4333_my_ptr, bmlocal4334_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4333_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4333_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4333_my_ptr, bmlocal4334_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4335_my_ptr;\
	UINT bmlocal4336_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4335_my_ptr, bmlocal4336_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4335_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4335_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4335_my_ptr, bmlocal4336_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4337_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET( base_ptr, bmlocal4337_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "codeNumber", 8, (UINT)(bmlocal4337_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4338_my_ptr;\
	UINT bmlocal4339_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4338_my_ptr, bmlocal4339_my_bitoff );\
	(*((UINT8*)bmlocal4338_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4339_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4340_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, bmlocal4340_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4340_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_BYTES_SIZE 1

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4343_acc_bytes;\
	UINT bmlocal4344_acc_bits;\
	PVOID bmlocal4345_parent_out_ptr;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4345_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4345_parent_out_ptr;\
	bmlocal4343_acc_bytes = 3;\
	bmlocal4344_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4343_acc_bytes );\
	out_bitoff += bmlocal4344_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4346_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, bmlocal4346_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4346_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_POS_ALIGNED 3

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4347_my_ptr;\
	UINT bmlocal4348_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4347_my_ptr, bmlocal4348_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4347_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4347_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4347_my_ptr, bmlocal4348_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4349_my_ptr;\
	UINT bmlocal4350_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4349_my_ptr, bmlocal4350_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4349_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4349_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4349_my_ptr, bmlocal4350_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4351_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET( base_ptr, bmlocal4351_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frameNumber", 8, (UINT)(bmlocal4351_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4352_my_ptr;\
	UINT bmlocal4353_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4352_my_ptr, bmlocal4353_my_bitoff );\
	(*((UINT8*)bmlocal4352_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4353_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4354_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal4354_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4354_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_BYTES_SIZE 1

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4357_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_GET_SIZE( base_ptr, out_bytes, bmlocal4357_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4357_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloCdmaAttributes", 1);\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4360_acc_bytes;\
	UINT bmlocal4361_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4360_acc_bytes = 4;\
	bmlocal4361_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4360_acc_bytes );\
	out_bitoff += bmlocal4361_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4362_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS( base_ptr, out_ptr, bmlocal4362_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4362_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_POS_ALIGNED 4

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4363_my_ptr;\
	UINT bmlocal4364_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS( base_ptr, bmlocal4363_my_ptr, bmlocal4364_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ERangingMode)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4363_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ERangingMode)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4363_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4363_my_ptr, bmlocal4364_my_bitoff, 32, ERangingMode, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4365_my_ptr;\
	UINT bmlocal4366_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS( base_ptr, bmlocal4365_my_ptr, bmlocal4366_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4365_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4365_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4365_my_ptr, bmlocal4366_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	ERangingMode bmlocal4367_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET( base_ptr, bmlocal4367_out_val );\
	if( bmlocal4367_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_INVALID", 1);\
	}\
	if( bmlocal4367_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_INITIAL", 1);\
	}\
	if( bmlocal4367_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_PERIODIC", 1);\
	}\
	if( bmlocal4367_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_HO_DROP", 1);\
	}\
	if( bmlocal4367_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_HO_COORDINATED", 1);\
	}\
	if( bmlocal4367_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_LOCATION_UPDATE", 1);\
	}\
	if( bmlocal4367_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_EXIT_IDLE", 1);\
	}\
	if( bmlocal4367_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_NO_RANGING", 1);\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4368_my_ptr;\
	UINT bmlocal4369_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_POS( base_ptr, bmlocal4368_my_ptr, bmlocal4369_my_bitoff );\
	(*((UINT32*)bmlocal4368_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4369_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4370_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_GET_SIZE( base_ptr, out_bytes, bmlocal4370_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4370_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4373_acc_bytes;\
	UINT bmlocal4374_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4373_acc_bytes = 8;\
	bmlocal4374_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4373_acc_bytes );\
	out_bitoff += bmlocal4374_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4375_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS( base_ptr, out_ptr, bmlocal4375_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4375_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_POS_ALIGNED 8

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4376_my_ptr;\
	UINT bmlocal4377_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS( base_ptr, bmlocal4376_my_ptr, bmlocal4377_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4376_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4376_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4376_my_ptr, bmlocal4377_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4378_my_ptr;\
	UINT bmlocal4379_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS( base_ptr, bmlocal4378_my_ptr, bmlocal4379_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4378_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4378_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4378_my_ptr, bmlocal4379_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal4380_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET( base_ptr, bmlocal4380_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TimingAdjustment", 32, (UINT)(bmlocal4380_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4381_my_ptr;\
	UINT bmlocal4382_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_POS( base_ptr, bmlocal4381_my_ptr, bmlocal4382_my_bitoff );\
	(*((UINT32*)bmlocal4381_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4382_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4383_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_GET_SIZE( base_ptr, out_bytes, bmlocal4383_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4383_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4386_acc_bytes;\
	UINT bmlocal4387_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4386_acc_bytes = 12;\
	bmlocal4387_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4386_acc_bytes );\
	out_bitoff += bmlocal4387_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4388_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS( base_ptr, out_ptr, bmlocal4388_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4388_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_POS_ALIGNED 12

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4389_my_ptr;\
	UINT bmlocal4390_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4389_my_ptr, bmlocal4390_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4389_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4389_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4389_my_ptr, bmlocal4390_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4391_my_ptr;\
	UINT bmlocal4392_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4391_my_ptr, bmlocal4392_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4391_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4391_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4391_my_ptr, bmlocal4392_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal4393_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET( base_ptr, bmlocal4393_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerLevelAdjust", 32, (UINT)(bmlocal4393_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4394_my_ptr;\
	UINT bmlocal4395_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4394_my_ptr, bmlocal4395_my_bitoff );\
	(*((UINT32*)bmlocal4394_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4395_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4396_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_GET_SIZE( base_ptr, out_bytes, bmlocal4396_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4396_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4399_acc_bytes;\
	UINT bmlocal4400_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4399_acc_bytes = 16;\
	bmlocal4400_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4399_acc_bytes );\
	out_bitoff += bmlocal4400_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4401_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS( base_ptr, out_ptr, bmlocal4401_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4401_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_POS_ALIGNED 16

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4402_my_ptr;\
	UINT bmlocal4403_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS( base_ptr, bmlocal4402_my_ptr, bmlocal4403_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4402_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4402_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4402_my_ptr, bmlocal4403_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4404_my_ptr;\
	UINT bmlocal4405_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS( base_ptr, bmlocal4404_my_ptr, bmlocal4405_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4404_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4404_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4404_my_ptr, bmlocal4405_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4406_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET( base_ptr, bmlocal4406_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "InvitingRetries", 32, (UINT)(bmlocal4406_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4407_my_ptr;\
	UINT bmlocal4408_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_POS( base_ptr, bmlocal4407_my_ptr, bmlocal4408_my_bitoff );\
	(*((UINT32*)bmlocal4407_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4408_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4409_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_GET_SIZE( base_ptr, out_bytes, bmlocal4409_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4409_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4412_acc_bytes;\
	UINT bmlocal4413_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4412_acc_bytes = 20;\
	bmlocal4413_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4412_acc_bytes );\
	out_bitoff += bmlocal4413_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4414_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS( base_ptr, out_ptr, bmlocal4414_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4414_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_POS_ALIGNED 20

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4415_my_ptr;\
	UINT bmlocal4416_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS( base_ptr, bmlocal4415_my_ptr, bmlocal4416_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4415_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4415_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4415_my_ptr, bmlocal4416_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4417_my_ptr;\
	UINT bmlocal4418_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS( base_ptr, bmlocal4417_my_ptr, bmlocal4418_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4417_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4417_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4417_my_ptr, bmlocal4418_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4419_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET( base_ptr, bmlocal4419_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ContentionRetries", 32, (UINT)(bmlocal4419_out_val), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4420_my_ptr;\
	UINT bmlocal4421_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_POS( base_ptr, bmlocal4420_my_ptr, bmlocal4421_my_bitoff );\
	(*((UINT32*)bmlocal4420_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4421_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4422_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_GET_SIZE( base_ptr, out_bytes, bmlocal4422_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4422_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_BYTES_SIZE 4

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4425_acc_bytes;\
	UINT bmlocal4426_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4425_acc_bytes = 24;\
	bmlocal4426_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4425_acc_bytes );\
	out_bitoff += bmlocal4426_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4427_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS( base_ptr, out_ptr, bmlocal4427_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4427_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_POS_ALIGNED 24

// Alignment of FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4428_my_ptr;\
	UINT bmlocal4429_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS( base_ptr, bmlocal4428_my_ptr, bmlocal4429_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (EDMRangingRspStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4428_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (EDMRangingRspStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4428_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4428_my_ptr, bmlocal4429_my_bitoff, 8, EDMRangingRspStatus, out_val, 0x00000000 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4430_my_ptr;\
	UINT bmlocal4431_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS( base_ptr, bmlocal4430_my_ptr, bmlocal4431_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4430_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4430_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4430_my_ptr, bmlocal4431_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: IS_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: SET_RESET accessor is not defined because no reset value was specified.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	EDMRangingRspStatus bmlocal4432_out_val;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET( base_ptr, bmlocal4432_out_val );\
	if( bmlocal4432_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_UNKNOWN", 1);\
	}\
	if( bmlocal4432_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_CONTINUE", 1);\
	}\
	if( bmlocal4432_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_ABORT", 1);\
	}\
	if( bmlocal4432_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_SUCCESS", 1);\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4433_my_ptr;\
	UINT bmlocal4434_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_POS( base_ptr, bmlocal4433_my_ptr, bmlocal4434_my_bitoff );\
	(*((UINT8*)bmlocal4433_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4434_my_bitoff );\
}

// FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4435_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_GET_SIZE( base_ptr, out_bytes, bmlocal4435_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4435_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_BYTES_SIZE 1

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4438_acc_bytes;\
	UINT bmlocal4439_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4438_acc_bytes = 25;\
	bmlocal4439_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4438_acc_bytes );\
	out_bitoff += bmlocal4439_acc_bits;\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4440_tmp_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_POS( base_ptr, out_ptr, bmlocal4440_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4440_tmp_bitoff);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_POS_ALIGNED 25

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4441_my_ptr;\
	UINT bmlocal4442_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_POS( base_ptr, bmlocal4441_my_ptr, bmlocal4442_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4441_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4441_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4441_my_ptr, bmlocal4442_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4443_my_ptr;\
	UINT bmlocal4444_my_bitoff;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_POS( base_ptr, bmlocal4443_my_ptr, bmlocal4444_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4443_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4443_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4443_my_ptr, bmlocal4444_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal4445_out_bytes;\
	UINT bmlocal4446_out_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_SIZE( base_ptr, bmlocal4445_out_bytes, bmlocal4446_out_bits );\
	bmlocal4446_out_bits += bmlocal4445_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal4446_out_bits), "%d", 1);\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4447_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal4447_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4447_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_BYTES_SIZE 3

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4450_tmp_bits;\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_GET_SIZE( base_ptr, out_bytes, bmlocal4450_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4450_tmp_bits );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_BYTES_SIZE 28

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FW_L2_MON_TYPE_RANGING_PARAMETERS", 1);\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_RangingType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_TimingAdjustment_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_PowerLevelAdjust_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_InvitingRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_ContentionRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_rangingStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FW_L2_MON_TYPE_RANGING_PARAMETERS_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Grant_Info[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalGrantsAmountInBytes; //Accumulated grants (in bytes) for a given grant type
} BMS_Grant_Info;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _TotalGrantsAmountInBytes; //Accumulated grants (in bytes) for a given grant type
} BMS_Grant_Info;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'Grant_Info' Type: 'Grant_Info', Top-level, Non-instance, No bitoff root
#define BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4451_tmp_bitoff;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, bmlocal4451_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4451_tmp_bitoff);\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_POS_ALIGNED 0

// Alignment of Grant_Info_TotalGrantsAmountInBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Grant_Info_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4452_my_ptr;\
	UINT bmlocal4453_my_bitoff;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4452_my_ptr, bmlocal4453_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4452_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4452_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4452_my_ptr, bmlocal4453_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4454_my_ptr;\
	UINT bmlocal4455_my_bitoff;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4454_my_ptr, bmlocal4455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4454_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4454_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4454_my_ptr, bmlocal4455_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Grant_Info_TotalGrantsAmountInBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// Grant_Info_TotalGrantsAmountInBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// Grant_Info_TotalGrantsAmountInBytes: IS_RESET accessor is not defined because no reset value was specified.
// Grant_Info_TotalGrantsAmountInBytes: SET_RESET accessor is not defined because no reset value was specified.
// Grant_Info_TotalGrantsAmountInBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Grant_Info_TotalGrantsAmountInBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Grant_Info_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4456_out_val;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET( base_ptr, bmlocal4456_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalGrantsAmountInBytes", 32, (UINT)(bmlocal4456_out_val), "%d", 1);\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Grant_Info_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4457_my_ptr;\
	UINT bmlocal4458_my_bitoff;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4457_my_ptr, bmlocal4458_my_bitoff );\
	(*((UINT32*)bmlocal4457_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4458_my_bitoff );\
}

// Grant_Info_TotalGrantsAmountInBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_Grant_Info_TotalGrantsAmountInBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4459_tmp_bits;\
	BM_Grant_Info_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4459_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4459_tmp_bits );\
}

#define BM_Grant_Info_TotalGrantsAmountInBytes_BYTES_SIZE 4

#define BM_Grant_Info_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Grant_Info_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4462_tmp_bits;\
	BM_Grant_Info_GET_SIZE( base_ptr, out_bytes, bmlocal4462_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4462_tmp_bits );\
}

#define BM_Grant_Info_BYTES_SIZE 4

#define BM_Grant_Info_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Grant_Info", 1);\
	BM_Grant_Info_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Grant_Info_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Grant_Info_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_Grant_Info _HARQBurst;
	BMS_Grant_Info _NonHARQBurst;
	BMS_Grant_Info _UIUC14Burst;
} BMS_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_Grant_Info _UIUC14Burst;
	BMS_Grant_Info _NonHARQBurst;
	BMS_Grant_Info _HARQBurst;
} BMS_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT' Type: 'L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT', Top-level, Non-instance, No bitoff root
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4463_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_POS( base_ptr, out_ptr, bmlocal4463_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4463_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_POS_ALIGNED 0

// COMPOSITE: Full name: 'L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst' Type: 'Grant_Info', Inner, Non-instance, No bitoff root
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4464_parent_out_ptr;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_POS( base_ptr, bmlocal4464_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4464_parent_out_ptr;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4465_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, bmlocal4465_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4465_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_POS_ALIGNED 0

// Alignment of L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4466_my_ptr;\
	UINT bmlocal4467_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4466_my_ptr, bmlocal4467_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4466_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4466_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4466_my_ptr, bmlocal4467_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4468_my_ptr;\
	UINT bmlocal4469_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4468_my_ptr, bmlocal4469_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4468_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4468_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4468_my_ptr, bmlocal4469_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: IS_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: SET_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4470_out_val;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET( base_ptr, bmlocal4470_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalGrantsAmountInBytes", 32, (UINT)(bmlocal4470_out_val), "%d", 1);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4471_my_ptr;\
	UINT bmlocal4472_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4471_my_ptr, bmlocal4472_my_bitoff );\
	(*((UINT32*)bmlocal4471_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4472_my_bitoff );\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4473_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4473_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4473_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4476_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_GET_SIZE( base_ptr, out_bytes, bmlocal4476_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4476_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HARQBurst", 1);\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4479_acc_bytes;\
	UINT bmlocal4480_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4479_acc_bytes = 4;\
	bmlocal4480_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4479_acc_bytes );\
	out_bitoff += bmlocal4480_acc_bits;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4481_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_POS( base_ptr, out_ptr, bmlocal4481_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4481_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_POS_ALIGNED 4

// COMPOSITE: Full name: 'L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst' Type: 'Grant_Info', Inner, Non-instance, No bitoff root
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4482_parent_out_ptr;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_POS( base_ptr, bmlocal4482_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4482_parent_out_ptr;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4483_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, bmlocal4483_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4483_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_POS_ALIGNED 4

// Alignment of L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4484_my_ptr;\
	UINT bmlocal4485_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4484_my_ptr, bmlocal4485_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4484_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4484_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4484_my_ptr, bmlocal4485_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4486_my_ptr;\
	UINT bmlocal4487_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4486_my_ptr, bmlocal4487_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4486_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4486_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4486_my_ptr, bmlocal4487_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: IS_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: SET_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4488_out_val;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET( base_ptr, bmlocal4488_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalGrantsAmountInBytes", 32, (UINT)(bmlocal4488_out_val), "%d", 1);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4489_my_ptr;\
	UINT bmlocal4490_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4489_my_ptr, bmlocal4490_my_bitoff );\
	(*((UINT32*)bmlocal4489_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4490_my_bitoff );\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4491_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4491_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4491_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4494_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_GET_SIZE( base_ptr, out_bytes, bmlocal4494_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4494_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NonHARQBurst", 1);\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4497_acc_bytes;\
	UINT bmlocal4498_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4497_acc_bytes = 8;\
	bmlocal4498_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4497_acc_bytes );\
	out_bitoff += bmlocal4498_acc_bits;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4499_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_POS( base_ptr, out_ptr, bmlocal4499_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4499_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_POS_ALIGNED 8

// COMPOSITE: Full name: 'L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst' Type: 'Grant_Info', Inner, Non-instance, No bitoff root
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4500_parent_out_ptr;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_POS( base_ptr, bmlocal4500_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4500_parent_out_ptr;\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4501_tmp_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS( base_ptr, out_ptr, bmlocal4501_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4501_tmp_bitoff);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_POS_ALIGNED 8

// Alignment of L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4502_my_ptr;\
	UINT bmlocal4503_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4502_my_ptr, bmlocal4503_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4502_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4502_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4502_my_ptr, bmlocal4503_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4504_my_ptr;\
	UINT bmlocal4505_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4504_my_ptr, bmlocal4505_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4504_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4504_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4504_my_ptr, bmlocal4505_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: IS_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: SET_RESET accessor is not defined because no reset value was specified.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4506_out_val;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET( base_ptr, bmlocal4506_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalGrantsAmountInBytes", 32, (UINT)(bmlocal4506_out_val), "%d", 1);\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4507_my_ptr;\
	UINT bmlocal4508_my_bitoff;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_POS( base_ptr, bmlocal4507_my_ptr, bmlocal4508_my_bitoff );\
	(*((UINT32*)bmlocal4507_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4508_my_bitoff );\
}

// L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4509_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4509_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4509_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4512_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_GET_SIZE( base_ptr, out_bytes, bmlocal4512_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4512_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_BYTES_SIZE 4

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "UIUC14Burst", 1);\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_TotalGrantsAmountInBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4515_tmp_bits;\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_GET_SIZE( base_ptr, out_bytes, bmlocal4515_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4515_tmp_bits );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_BYTES_SIZE 12

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT", 1);\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_HARQBurst_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_NonHARQBurst_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_UIUC14Burst_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_MON_TYPE_SF_AND_QOS_FLOW_MNGMT_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FwMonDmParams[76];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FW_MON_TYPE_BASIC_STATUS _BasicStatusGroup;
	BMS_FW_MON_TYPE_BURST_STATUS _BurstStatusGroup;
	BMS_FW_MON_TYPE_CDMA_BWR _CdmaBwrGroup;
	BMS_FW_L2_MON_TYPE_RANGING_PARAMETERS _L2RangingTraceGroup;
} BMS_FwMonDmParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FW_L2_MON_TYPE_RANGING_PARAMETERS _L2RangingTraceGroup;
	BMS_FW_MON_TYPE_CDMA_BWR _CdmaBwrGroup;
	BMS_FW_MON_TYPE_BURST_STATUS _BurstStatusGroup;
	BMS_FW_MON_TYPE_BASIC_STATUS _BasicStatusGroup;
} BMS_FwMonDmParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FwMonDmParams' Type: 'FwMonDmParams', Top-level, Non-instance, No bitoff root
#define BM_FwMonDmParams_BasicStatusGroup_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FwMonDmParams_BasicStatusGroup_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4516_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_GET_POS( base_ptr, out_ptr, bmlocal4516_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4516_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_POS_ALIGNED 0

// COMPOSITE: Full name: 'FwMonDmParams_BasicStatusGroup' Type: 'FW_MON_TYPE_BASIC_STATUS', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4517_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_GET_POS( base_ptr, bmlocal4517_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4517_parent_out_ptr;\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4518_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, out_ptr, bmlocal4518_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4518_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_POS_ALIGNED 0

// COMPOSITE: Full name: 'FwMonDmParams_BasicStatusGroup_FCH' Type: 'FchBuffer', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4519_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, bmlocal4519_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4519_parent_out_ptr;\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4520_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS( base_ptr, out_ptr, bmlocal4520_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4520_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_POS_ALIGNED 0

// Alignment of FwMonDmParams_BasicStatusGroup_FCH_byte0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4521_my_ptr;\
	UINT bmlocal4522_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS( base_ptr, bmlocal4521_my_ptr, bmlocal4522_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4521_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4521_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4521_my_ptr, bmlocal4522_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4523_my_ptr;\
	UINT bmlocal4524_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS( base_ptr, bmlocal4523_my_ptr, bmlocal4524_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4523_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4523_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4523_my_ptr, bmlocal4524_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte0: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte0: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte0: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte0: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_FCH_byte0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4525_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET( base_ptr, bmlocal4525_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte0", 8, (UINT)(bmlocal4525_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4526_my_ptr;\
	UINT bmlocal4527_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_POS( base_ptr, bmlocal4526_my_ptr, bmlocal4527_my_bitoff );\
	(*((UINT8*)bmlocal4526_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4527_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte0: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4528_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_GET_SIZE( base_ptr, out_bytes, bmlocal4528_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4528_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4531_acc_bytes;\
	UINT bmlocal4532_acc_bits;\
	PVOID bmlocal4533_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, bmlocal4533_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4533_parent_out_ptr;\
	bmlocal4531_acc_bytes = 1;\
	bmlocal4532_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4531_acc_bytes );\
	out_bitoff += bmlocal4532_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4534_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS( base_ptr, out_ptr, bmlocal4534_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4534_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_POS_ALIGNED 1

// Alignment of FwMonDmParams_BasicStatusGroup_FCH_byte1: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4535_my_ptr;\
	UINT bmlocal4536_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS( base_ptr, bmlocal4535_my_ptr, bmlocal4536_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4535_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4535_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4535_my_ptr, bmlocal4536_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4537_my_ptr;\
	UINT bmlocal4538_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS( base_ptr, bmlocal4537_my_ptr, bmlocal4538_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4537_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4537_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4537_my_ptr, bmlocal4538_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte1: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte1: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte1: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte1: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_FCH_byte1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4539_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET( base_ptr, bmlocal4539_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte1", 8, (UINT)(bmlocal4539_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4540_my_ptr;\
	UINT bmlocal4541_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_POS( base_ptr, bmlocal4540_my_ptr, bmlocal4541_my_bitoff );\
	(*((UINT8*)bmlocal4540_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4541_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte1: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4542_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_GET_SIZE( base_ptr, out_bytes, bmlocal4542_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4542_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4545_acc_bytes;\
	UINT bmlocal4546_acc_bits;\
	PVOID bmlocal4547_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, bmlocal4547_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4547_parent_out_ptr;\
	bmlocal4545_acc_bytes = 2;\
	bmlocal4546_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4545_acc_bytes );\
	out_bitoff += bmlocal4546_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4548_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS( base_ptr, out_ptr, bmlocal4548_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4548_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_POS_ALIGNED 2

// Alignment of FwMonDmParams_BasicStatusGroup_FCH_byte2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4549_my_ptr;\
	UINT bmlocal4550_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS( base_ptr, bmlocal4549_my_ptr, bmlocal4550_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4549_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4549_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4549_my_ptr, bmlocal4550_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4551_my_ptr;\
	UINT bmlocal4552_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS( base_ptr, bmlocal4551_my_ptr, bmlocal4552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4551_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4551_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4551_my_ptr, bmlocal4552_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte2: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte2: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte2: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte2: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_byte2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_FCH_byte2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4553_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET( base_ptr, bmlocal4553_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "byte2", 8, (UINT)(bmlocal4553_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4554_my_ptr;\
	UINT bmlocal4555_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_POS( base_ptr, bmlocal4554_my_ptr, bmlocal4555_my_bitoff );\
	(*((UINT8*)bmlocal4554_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4555_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_FCH_byte2: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4556_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_GET_SIZE( base_ptr, out_bytes, bmlocal4556_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4556_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4559_acc_bytes;\
	UINT bmlocal4560_acc_bits;\
	PVOID bmlocal4561_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_POS( base_ptr, bmlocal4561_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4561_parent_out_ptr;\
	bmlocal4559_acc_bytes = 3;\
	bmlocal4560_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4559_acc_bytes );\
	out_bitoff += bmlocal4560_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4562_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS( base_ptr, out_ptr, bmlocal4562_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4562_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_POS_ALIGNED 3

// Alignment of FwMonDmParams_BasicStatusGroup_FCH_validity: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4563_my_ptr;\
	UINT bmlocal4564_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS( base_ptr, bmlocal4563_my_ptr, bmlocal4564_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4563_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (MonitorValidity)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4563_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4563_my_ptr, bmlocal4564_my_bitoff, 8, MonitorValidity, out_val, 0x00000003 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4565_my_ptr;\
	UINT bmlocal4566_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS( base_ptr, bmlocal4565_my_ptr, bmlocal4566_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4565_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4565_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4565_my_ptr, bmlocal4566_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_FCH_validity: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_validity: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_validity: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_validity: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_FCH_validity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_FCH_validity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	MonitorValidity bmlocal4567_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET( base_ptr, bmlocal4567_out_val );\
	if( bmlocal4567_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID", 1);\
	}\
	if( bmlocal4567_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID", 1);\
	}\
	if( bmlocal4567_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_NOT_VALID_AND_SEND", 1);\
	}\
	if( bmlocal4567_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "validity", "MON_BUFFER_VALID_AND_SEND", 1);\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4568_my_ptr;\
	UINT bmlocal4569_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_POS( base_ptr, bmlocal4568_my_ptr, bmlocal4569_my_bitoff );\
	(*((UINT8*)bmlocal4568_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4569_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_FCH_validity: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4570_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_GET_SIZE( base_ptr, out_bytes, bmlocal4570_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4570_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_validity_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_FCH_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4573_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_FCH_GET_SIZE( base_ptr, out_bytes, bmlocal4573_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4573_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_BYTES_SIZE 4

#define BM_FwMonDmParams_BasicStatusGroup_FCH_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FCH", 1);\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_FCH_byte2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_FCH_validity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_FCH_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_FCH_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4576_acc_bytes;\
	UINT bmlocal4577_acc_bits;\
	PVOID bmlocal4578_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_GET_POS( base_ptr, bmlocal4578_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4578_parent_out_ptr;\
	bmlocal4576_acc_bytes = 4;\
	bmlocal4577_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4576_acc_bytes );\
	out_bitoff += bmlocal4577_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4579_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS( base_ptr, out_ptr, bmlocal4579_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4579_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_POS_ALIGNED 4

// COMPOSITE: Full name: 'FwMonDmParams_BasicStatusGroup_frameRatio' Type: 'FrameRatio', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4580_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS( base_ptr, bmlocal4580_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4580_parent_out_ptr;\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4581_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS( base_ptr, out_ptr, bmlocal4581_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4581_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_POS_ALIGNED 4

// Alignment of FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4582_my_ptr;\
	UINT bmlocal4583_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4582_my_ptr, bmlocal4583_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4582_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4582_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4582_my_ptr, bmlocal4583_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4584_my_ptr;\
	UINT bmlocal4585_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4584_my_ptr, bmlocal4585_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4584_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4584_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4584_my_ptr, bmlocal4585_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4586_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET( base_ptr, bmlocal4586_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DlSize", 8, (UINT)(bmlocal4586_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4587_my_ptr;\
	UINT bmlocal4588_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_POS( base_ptr, bmlocal4587_my_ptr, bmlocal4588_my_bitoff );\
	(*((UINT8*)bmlocal4587_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4588_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_frameRatio_DlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4589_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4589_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4589_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4592_acc_bytes;\
	UINT bmlocal4593_acc_bits;\
	PVOID bmlocal4594_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS( base_ptr, bmlocal4594_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4594_parent_out_ptr;\
	bmlocal4592_acc_bytes = 1;\
	bmlocal4593_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4592_acc_bytes );\
	out_bitoff += bmlocal4593_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4595_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS( base_ptr, out_ptr, bmlocal4595_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4595_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_POS_ALIGNED 5

// Alignment of FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4596_my_ptr;\
	UINT bmlocal4597_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4596_my_ptr, bmlocal4597_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4596_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4596_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4596_my_ptr, bmlocal4597_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4598_my_ptr;\
	UINT bmlocal4599_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4598_my_ptr, bmlocal4599_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4598_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4598_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4598_my_ptr, bmlocal4599_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4600_out_val;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET( base_ptr, bmlocal4600_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UlSize", 8, (UINT)(bmlocal4600_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4601_my_ptr;\
	UINT bmlocal4602_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_POS( base_ptr, bmlocal4601_my_ptr, bmlocal4602_my_bitoff );\
	(*((UINT8*)bmlocal4601_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4602_my_bitoff );\
}

// FwMonDmParams_BasicStatusGroup_frameRatio_UlSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4603_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_GET_SIZE( base_ptr, out_bytes, bmlocal4603_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4603_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_BYTES_SIZE 1

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4606_acc_bytes;\
	UINT bmlocal4607_acc_bits;\
	PVOID bmlocal4608_parent_out_ptr;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_POS( base_ptr, bmlocal4608_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4608_parent_out_ptr;\
	bmlocal4606_acc_bytes = 2;\
	bmlocal4607_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4606_acc_bytes );\
	out_bitoff += bmlocal4607_acc_bits;\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4609_tmp_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_POS( base_ptr, out_ptr, bmlocal4609_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4609_tmp_bitoff);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_POS_ALIGNED 6

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4610_my_ptr;\
	UINT bmlocal4611_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_POS( base_ptr, bmlocal4610_my_ptr, bmlocal4611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4610_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4610_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4610_my_ptr, bmlocal4611_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4612_my_ptr;\
	UINT bmlocal4613_my_bitoff;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_POS( base_ptr, bmlocal4612_my_ptr, bmlocal4613_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4612_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4612_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4612_my_ptr, bmlocal4613_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal4614_out_bytes;\
	UINT bmlocal4615_out_bits;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_SIZE( base_ptr, bmlocal4614_out_bytes, bmlocal4615_out_bits );\
	bmlocal4615_out_bits += bmlocal4614_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal4615_out_bits), "%d", 1);\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4616_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal4616_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4616_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_BYTES_SIZE 2

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4619_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_GET_SIZE( base_ptr, out_bytes, bmlocal4619_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4619_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_BYTES_SIZE 4

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "frameRatio", 1);\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_UlSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_frameRatio_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_BasicStatusGroup_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4622_tmp_bits;\
	BM_FwMonDmParams_BasicStatusGroup_GET_SIZE( base_ptr, out_bytes, bmlocal4622_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4622_tmp_bits );\
}

#define BM_FwMonDmParams_BasicStatusGroup_BYTES_SIZE 8

#define BM_FwMonDmParams_BasicStatusGroup_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BasicStatusGroup", 1);\
	BM_FwMonDmParams_BasicStatusGroup_FCH_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BasicStatusGroup_frameRatio_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BasicStatusGroup_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BasicStatusGroup_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4625_acc_bytes;\
	UINT bmlocal4626_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4625_acc_bytes = 8;\
	bmlocal4626_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4625_acc_bytes );\
	out_bitoff += bmlocal4626_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4627_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, out_ptr, bmlocal4627_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4627_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_POS_ALIGNED 8

// COMPOSITE: Full name: 'FwMonDmParams_BurstStatusGroup' Type: 'FW_MON_TYPE_BURST_STATUS', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4628_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4628_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4628_parent_out_ptr;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4629_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS( base_ptr, out_ptr, bmlocal4629_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4629_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_POS_ALIGNED 8

// Alignment of FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4630_my_ptr;\
	UINT bmlocal4631_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4630_my_ptr, bmlocal4631_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4630_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4630_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4630_my_ptr, bmlocal4631_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4632_my_ptr;\
	UINT bmlocal4633_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4632_my_ptr, bmlocal4633_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4632_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4632_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4632_my_ptr, bmlocal4633_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4634_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET( base_ptr, bmlocal4634_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalDLPduCRCCount", 32, (UINT)(bmlocal4634_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4635_my_ptr;\
	UINT bmlocal4636_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_POS( base_ptr, bmlocal4635_my_ptr, bmlocal4636_my_bitoff );\
	(*((UINT32*)bmlocal4635_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4636_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4637_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_GET_SIZE( base_ptr, out_bytes, bmlocal4637_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4637_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4640_acc_bytes;\
	UINT bmlocal4641_acc_bits;\
	PVOID bmlocal4642_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4642_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4642_parent_out_ptr;\
	bmlocal4640_acc_bytes = 4;\
	bmlocal4641_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4640_acc_bytes );\
	out_bitoff += bmlocal4641_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4643_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS( base_ptr, out_ptr, bmlocal4643_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4643_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_POS_ALIGNED 12

// Alignment of FwMonDmParams_BurstStatusGroup_TotalDLPduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4644_my_ptr;\
	UINT bmlocal4645_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS( base_ptr, bmlocal4644_my_ptr, bmlocal4645_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4644_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4644_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4644_my_ptr, bmlocal4645_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4646_my_ptr;\
	UINT bmlocal4647_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS( base_ptr, bmlocal4646_my_ptr, bmlocal4647_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4646_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4646_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4646_my_ptr, bmlocal4647_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4648_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET( base_ptr, bmlocal4648_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalDLPduCount", 32, (UINT)(bmlocal4648_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4649_my_ptr;\
	UINT bmlocal4650_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_POS( base_ptr, bmlocal4649_my_ptr, bmlocal4650_my_bitoff );\
	(*((UINT32*)bmlocal4649_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4650_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalDLPduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4651_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4651_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4651_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4654_acc_bytes;\
	UINT bmlocal4655_acc_bits;\
	PVOID bmlocal4656_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4656_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4656_parent_out_ptr;\
	bmlocal4654_acc_bytes = 8;\
	bmlocal4655_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4654_acc_bytes );\
	out_bitoff += bmlocal4655_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4657_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS( base_ptr, out_ptr, bmlocal4657_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4657_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_POS_ALIGNED 16

// Alignment of FwMonDmParams_BurstStatusGroup_UL_PDU_Size: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4658_my_ptr;\
	UINT bmlocal4659_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS( base_ptr, bmlocal4658_my_ptr, bmlocal4659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4658_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4658_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4658_my_ptr, bmlocal4659_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4660_my_ptr;\
	UINT bmlocal4661_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS( base_ptr, bmlocal4660_my_ptr, bmlocal4661_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4660_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4660_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4660_my_ptr, bmlocal4661_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4662_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET( base_ptr, bmlocal4662_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_PDU_Size", 32, (UINT)(bmlocal4662_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4663_my_ptr;\
	UINT bmlocal4664_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_POS( base_ptr, bmlocal4663_my_ptr, bmlocal4664_my_bitoff );\
	(*((UINT32*)bmlocal4663_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4664_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_UL_PDU_Size: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4665_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_GET_SIZE( base_ptr, out_bytes, bmlocal4665_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4665_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4668_acc_bytes;\
	UINT bmlocal4669_acc_bits;\
	PVOID bmlocal4670_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4670_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4670_parent_out_ptr;\
	bmlocal4668_acc_bytes = 12;\
	bmlocal4669_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4668_acc_bytes );\
	out_bitoff += bmlocal4669_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4671_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS( base_ptr, out_ptr, bmlocal4671_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4671_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_POS_ALIGNED 20

// Alignment of FwMonDmParams_BurstStatusGroup_TotalULPDUSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4672_my_ptr;\
	UINT bmlocal4673_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS( base_ptr, bmlocal4672_my_ptr, bmlocal4673_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4672_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4672_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4672_my_ptr, bmlocal4673_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4674_my_ptr;\
	UINT bmlocal4675_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS( base_ptr, bmlocal4674_my_ptr, bmlocal4675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4674_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4674_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4674_my_ptr, bmlocal4675_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4676_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET( base_ptr, bmlocal4676_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalULPDUSize", 32, (UINT)(bmlocal4676_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4677_my_ptr;\
	UINT bmlocal4678_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_POS( base_ptr, bmlocal4677_my_ptr, bmlocal4678_my_bitoff );\
	(*((UINT32*)bmlocal4677_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4678_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalULPDUSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4679_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_GET_SIZE( base_ptr, out_bytes, bmlocal4679_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4679_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4682_acc_bytes;\
	UINT bmlocal4683_acc_bits;\
	PVOID bmlocal4684_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4684_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4684_parent_out_ptr;\
	bmlocal4682_acc_bytes = 16;\
	bmlocal4683_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4682_acc_bytes );\
	out_bitoff += bmlocal4683_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4685_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS( base_ptr, out_ptr, bmlocal4685_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4685_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_POS_ALIGNED 24

// Alignment of FwMonDmParams_BurstStatusGroup_TotalUlPduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4686_my_ptr;\
	UINT bmlocal4687_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS( base_ptr, bmlocal4686_my_ptr, bmlocal4687_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4686_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4686_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4686_my_ptr, bmlocal4687_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4688_my_ptr;\
	UINT bmlocal4689_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS( base_ptr, bmlocal4688_my_ptr, bmlocal4689_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4688_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4688_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4688_my_ptr, bmlocal4689_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4690_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET( base_ptr, bmlocal4690_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalUlPduCount", 32, (UINT)(bmlocal4690_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4691_my_ptr;\
	UINT bmlocal4692_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_POS( base_ptr, bmlocal4691_my_ptr, bmlocal4692_my_bitoff );\
	(*((UINT32*)bmlocal4691_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4692_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalUlPduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4693_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4693_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4693_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4696_acc_bytes;\
	UINT bmlocal4697_acc_bits;\
	PVOID bmlocal4698_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4698_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4698_parent_out_ptr;\
	bmlocal4696_acc_bytes = 20;\
	bmlocal4697_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4696_acc_bytes );\
	out_bitoff += bmlocal4697_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4699_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS( base_ptr, out_ptr, bmlocal4699_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4699_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_POS_ALIGNED 28

// Alignment of FwMonDmParams_BurstStatusGroup_UL_SDU_Size: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4700_my_ptr;\
	UINT bmlocal4701_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS( base_ptr, bmlocal4700_my_ptr, bmlocal4701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4700_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4700_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4700_my_ptr, bmlocal4701_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4702_my_ptr;\
	UINT bmlocal4703_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS( base_ptr, bmlocal4702_my_ptr, bmlocal4703_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4702_my_ptr, bmlocal4703_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4704_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET( base_ptr, bmlocal4704_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_SDU_Size", 32, (UINT)(bmlocal4704_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4705_my_ptr;\
	UINT bmlocal4706_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_POS( base_ptr, bmlocal4705_my_ptr, bmlocal4706_my_bitoff );\
	(*((UINT32*)bmlocal4705_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4706_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_UL_SDU_Size: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4707_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_GET_SIZE( base_ptr, out_bytes, bmlocal4707_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4707_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4710_acc_bytes;\
	UINT bmlocal4711_acc_bits;\
	PVOID bmlocal4712_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4712_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4712_parent_out_ptr;\
	bmlocal4710_acc_bytes = 24;\
	bmlocal4711_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4710_acc_bytes );\
	out_bitoff += bmlocal4711_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4713_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS( base_ptr, out_ptr, bmlocal4713_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4713_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_POS_ALIGNED 32

// Alignment of FwMonDmParams_BurstStatusGroup_TotalULSDUSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4714_my_ptr;\
	UINT bmlocal4715_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS( base_ptr, bmlocal4714_my_ptr, bmlocal4715_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4714_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4714_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4714_my_ptr, bmlocal4715_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4716_my_ptr;\
	UINT bmlocal4717_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS( base_ptr, bmlocal4716_my_ptr, bmlocal4717_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4716_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4716_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4716_my_ptr, bmlocal4717_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4718_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET( base_ptr, bmlocal4718_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalULSDUSize", 32, (UINT)(bmlocal4718_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4719_my_ptr;\
	UINT bmlocal4720_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_POS( base_ptr, bmlocal4719_my_ptr, bmlocal4720_my_bitoff );\
	(*((UINT32*)bmlocal4719_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4720_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalULSDUSize: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4721_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_GET_SIZE( base_ptr, out_bytes, bmlocal4721_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4721_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4724_acc_bytes;\
	UINT bmlocal4725_acc_bits;\
	PVOID bmlocal4726_parent_out_ptr;\
	BM_FwMonDmParams_BurstStatusGroup_GET_POS( base_ptr, bmlocal4726_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4726_parent_out_ptr;\
	bmlocal4724_acc_bytes = 28;\
	bmlocal4725_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4724_acc_bytes );\
	out_bitoff += bmlocal4725_acc_bits;\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4727_tmp_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS( base_ptr, out_ptr, bmlocal4727_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4727_tmp_bitoff);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_POS_ALIGNED 36

// Alignment of FwMonDmParams_BurstStatusGroup_TotalUlSduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4728_my_ptr;\
	UINT bmlocal4729_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS( base_ptr, bmlocal4728_my_ptr, bmlocal4729_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4728_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4728_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4728_my_ptr, bmlocal4729_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4730_my_ptr;\
	UINT bmlocal4731_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS( base_ptr, bmlocal4730_my_ptr, bmlocal4731_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4730_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4730_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4730_my_ptr, bmlocal4731_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4732_out_val;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET( base_ptr, bmlocal4732_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalUlSduCount", 32, (UINT)(bmlocal4732_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4733_my_ptr;\
	UINT bmlocal4734_my_bitoff;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_POS( base_ptr, bmlocal4733_my_ptr, bmlocal4734_my_bitoff );\
	(*((UINT32*)bmlocal4733_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4734_my_bitoff );\
}

// FwMonDmParams_BurstStatusGroup_TotalUlSduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4735_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_GET_SIZE( base_ptr, out_bytes, bmlocal4735_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4735_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_BYTES_SIZE 4

#define BM_FwMonDmParams_BurstStatusGroup_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4738_tmp_bits;\
	BM_FwMonDmParams_BurstStatusGroup_GET_SIZE( base_ptr, out_bytes, bmlocal4738_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4738_tmp_bits );\
}

#define BM_FwMonDmParams_BurstStatusGroup_BYTES_SIZE 32

#define BM_FwMonDmParams_BurstStatusGroup_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BurstStatusGroup", 1);\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCRCCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_TotalDLPduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_UL_PDU_Size_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_TotalULPDUSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlPduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_UL_SDU_Size_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_TotalULSDUSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_TotalUlSduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_BurstStatusGroup_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_BurstStatusGroup_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_CdmaBwrGroup_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4741_acc_bytes;\
	UINT bmlocal4742_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4741_acc_bytes = 40;\
	bmlocal4742_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4741_acc_bytes );\
	out_bitoff += bmlocal4742_acc_bits;\
}

#define BM_FwMonDmParams_CdmaBwrGroup_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4743_tmp_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_GET_POS( base_ptr, out_ptr, bmlocal4743_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4743_tmp_bitoff);\
}

#define BM_FwMonDmParams_CdmaBwrGroup_POS_ALIGNED 40

// COMPOSITE: Full name: 'FwMonDmParams_CdmaBwrGroup' Type: 'FW_MON_TYPE_CDMA_BWR', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4744_parent_out_ptr;\
	BM_FwMonDmParams_CdmaBwrGroup_GET_POS( base_ptr, bmlocal4744_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4744_parent_out_ptr;\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4745_tmp_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, out_ptr, bmlocal4745_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4745_tmp_bitoff);\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_POS_ALIGNED 40

// Alignment of FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4746_my_ptr;\
	UINT bmlocal4747_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4746_my_ptr, bmlocal4747_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4746_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4746_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4746_my_ptr, bmlocal4747_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4748_my_ptr;\
	UINT bmlocal4749_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4748_my_ptr, bmlocal4749_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4748_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4748_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4748_my_ptr, bmlocal4749_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4750_out_val;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET( base_ptr, bmlocal4750_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalNumberOfCdmaBwrInit", 32, (UINT)(bmlocal4750_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4751_my_ptr;\
	UINT bmlocal4752_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_POS( base_ptr, bmlocal4751_my_ptr, bmlocal4752_my_bitoff );\
	(*((UINT32*)bmlocal4751_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4752_my_bitoff );\
}

// FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4753_tmp_bits;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_GET_SIZE( base_ptr, out_bytes, bmlocal4753_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4753_tmp_bits );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_BYTES_SIZE 4

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4756_acc_bytes;\
	UINT bmlocal4757_acc_bits;\
	PVOID bmlocal4758_parent_out_ptr;\
	BM_FwMonDmParams_CdmaBwrGroup_GET_POS( base_ptr, bmlocal4758_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4758_parent_out_ptr;\
	bmlocal4756_acc_bytes = 4;\
	bmlocal4757_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4756_acc_bytes );\
	out_bitoff += bmlocal4757_acc_bits;\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4759_tmp_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, out_ptr, bmlocal4759_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4759_tmp_bitoff);\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_POS_ALIGNED 44

// Alignment of FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4760_my_ptr;\
	UINT bmlocal4761_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4760_my_ptr, bmlocal4761_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4760_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4760_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4760_my_ptr, bmlocal4761_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4762_my_ptr;\
	UINT bmlocal4763_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4762_my_ptr, bmlocal4763_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4762_my_ptr, bmlocal4763_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4764_out_val;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET( base_ptr, bmlocal4764_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalNumberOfTxCdmaBwr", 32, (UINT)(bmlocal4764_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4765_my_ptr;\
	UINT bmlocal4766_my_bitoff;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_POS( base_ptr, bmlocal4765_my_ptr, bmlocal4766_my_bitoff );\
	(*((UINT32*)bmlocal4765_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4766_my_bitoff );\
}

// FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4767_tmp_bits;\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_GET_SIZE( base_ptr, out_bytes, bmlocal4767_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4767_tmp_bits );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_BYTES_SIZE 4

#define BM_FwMonDmParams_CdmaBwrGroup_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4770_tmp_bits;\
	BM_FwMonDmParams_CdmaBwrGroup_GET_SIZE( base_ptr, out_bytes, bmlocal4770_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4770_tmp_bits );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_BYTES_SIZE 8

#define BM_FwMonDmParams_CdmaBwrGroup_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CdmaBwrGroup", 1);\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfCdmaBwrInit_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_CdmaBwrGroup_TotalNumberOfTxCdmaBwr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_CdmaBwrGroup_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_CdmaBwrGroup_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4773_acc_bytes;\
	UINT bmlocal4774_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4773_acc_bytes = 48;\
	bmlocal4774_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4773_acc_bytes );\
	out_bitoff += bmlocal4774_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4775_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, out_ptr, bmlocal4775_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4775_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_POS_ALIGNED 48

// COMPOSITE: Full name: 'FwMonDmParams_L2RangingTraceGroup' Type: 'FW_L2_MON_TYPE_RANGING_PARAMETERS', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4776_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4776_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4776_parent_out_ptr;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4777_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, out_ptr, bmlocal4777_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4777_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_POS_ALIGNED 48

// COMPOSITE: Full name: 'FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes' Type: 'CdmaAttributes', Inner, Non-instance, No bitoff root
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4778_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4778_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4778_parent_out_ptr;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4779_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, out_ptr, bmlocal4779_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4779_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_POS_ALIGNED 48

// Alignment of FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4780_my_ptr;\
	UINT bmlocal4781_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4780_my_ptr, bmlocal4781_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4780_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4780_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4780_my_ptr, bmlocal4781_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4782_my_ptr;\
	UINT bmlocal4783_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4782_my_ptr, bmlocal4783_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4782_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4782_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4782_my_ptr, bmlocal4783_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4784_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET( base_ptr, bmlocal4784_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "xOffset", 8, (UINT)(bmlocal4784_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4785_my_ptr;\
	UINT bmlocal4786_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_POS( base_ptr, bmlocal4785_my_ptr, bmlocal4786_my_bitoff );\
	(*((UINT8*)bmlocal4785_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4786_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4787_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_GET_SIZE( base_ptr, out_bytes, bmlocal4787_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4787_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_BYTES_SIZE 1

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4790_acc_bytes;\
	UINT bmlocal4791_acc_bits;\
	PVOID bmlocal4792_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4792_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4792_parent_out_ptr;\
	bmlocal4790_acc_bytes = 1;\
	bmlocal4791_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4790_acc_bytes );\
	out_bitoff += bmlocal4791_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4793_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, out_ptr, bmlocal4793_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4793_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_POS_ALIGNED 49

// Alignment of FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4794_my_ptr;\
	UINT bmlocal4795_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4794_my_ptr, bmlocal4795_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4794_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4794_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4794_my_ptr, bmlocal4795_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4796_my_ptr;\
	UINT bmlocal4797_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4796_my_ptr, bmlocal4797_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4796_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4796_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4796_my_ptr, bmlocal4797_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4798_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET( base_ptr, bmlocal4798_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "yOffset", 8, (UINT)(bmlocal4798_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4799_my_ptr;\
	UINT bmlocal4800_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_POS( base_ptr, bmlocal4799_my_ptr, bmlocal4800_my_bitoff );\
	(*((UINT8*)bmlocal4799_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4800_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4801_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_GET_SIZE( base_ptr, out_bytes, bmlocal4801_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4801_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_BYTES_SIZE 1

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4804_acc_bytes;\
	UINT bmlocal4805_acc_bits;\
	PVOID bmlocal4806_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4806_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4806_parent_out_ptr;\
	bmlocal4804_acc_bytes = 2;\
	bmlocal4805_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4804_acc_bytes );\
	out_bitoff += bmlocal4805_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4807_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, out_ptr, bmlocal4807_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4807_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_POS_ALIGNED 50

// Alignment of FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4808_my_ptr;\
	UINT bmlocal4809_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4808_my_ptr, bmlocal4809_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4808_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4808_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4808_my_ptr, bmlocal4809_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4810_my_ptr;\
	UINT bmlocal4811_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4810_my_ptr, bmlocal4811_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4810_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4810_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4810_my_ptr, bmlocal4811_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4812_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET( base_ptr, bmlocal4812_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "codeNumber", 8, (UINT)(bmlocal4812_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4813_my_ptr;\
	UINT bmlocal4814_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_POS( base_ptr, bmlocal4813_my_ptr, bmlocal4814_my_bitoff );\
	(*((UINT8*)bmlocal4813_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4814_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4815_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_GET_SIZE( base_ptr, out_bytes, bmlocal4815_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4815_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_BYTES_SIZE 1

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4818_acc_bytes;\
	UINT bmlocal4819_acc_bits;\
	PVOID bmlocal4820_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_POS( base_ptr, bmlocal4820_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4820_parent_out_ptr;\
	bmlocal4818_acc_bytes = 3;\
	bmlocal4819_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4818_acc_bytes );\
	out_bitoff += bmlocal4819_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4821_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, out_ptr, bmlocal4821_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4821_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_POS_ALIGNED 51

// Alignment of FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4822_my_ptr;\
	UINT bmlocal4823_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4822_my_ptr, bmlocal4823_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4822_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4822_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4822_my_ptr, bmlocal4823_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4824_my_ptr;\
	UINT bmlocal4825_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4824_my_ptr, bmlocal4825_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4824_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4824_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4824_my_ptr, bmlocal4825_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4826_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET( base_ptr, bmlocal4826_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frameNumber", 8, (UINT)(bmlocal4826_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4827_my_ptr;\
	UINT bmlocal4828_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_POS( base_ptr, bmlocal4827_my_ptr, bmlocal4828_my_bitoff );\
	(*((UINT8*)bmlocal4827_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4828_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4829_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal4829_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4829_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_BYTES_SIZE 1

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4832_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_GET_SIZE( base_ptr, out_bytes, bmlocal4832_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4832_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloCdmaAttributes", 1);\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_xOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_yOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_codeNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_frameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4835_acc_bytes;\
	UINT bmlocal4836_acc_bits;\
	PVOID bmlocal4837_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4837_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4837_parent_out_ptr;\
	bmlocal4835_acc_bytes = 4;\
	bmlocal4836_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4835_acc_bytes );\
	out_bitoff += bmlocal4836_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4838_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS( base_ptr, out_ptr, bmlocal4838_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4838_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_POS_ALIGNED 52

// Alignment of FwMonDmParams_L2RangingTraceGroup_RangingType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4839_my_ptr;\
	UINT bmlocal4840_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS( base_ptr, bmlocal4839_my_ptr, bmlocal4840_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ERangingMode)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4839_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ERangingMode)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4839_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4839_my_ptr, bmlocal4840_my_bitoff, 32, ERangingMode, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4841_my_ptr;\
	UINT bmlocal4842_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS( base_ptr, bmlocal4841_my_ptr, bmlocal4842_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4841_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4841_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4841_my_ptr, bmlocal4842_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_RangingType: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_RangingType: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_RangingType: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_RangingType: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_RangingType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_RangingType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	ERangingMode bmlocal4843_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET( base_ptr, bmlocal4843_out_val );\
	if( bmlocal4843_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_INVALID", 1);\
	}\
	if( bmlocal4843_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_INITIAL", 1);\
	}\
	if( bmlocal4843_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_PERIODIC", 1);\
	}\
	if( bmlocal4843_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_HO_DROP", 1);\
	}\
	if( bmlocal4843_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_HO_COORDINATED", 1);\
	}\
	if( bmlocal4843_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_LOCATION_UPDATE", 1);\
	}\
	if( bmlocal4843_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_EXIT_IDLE", 1);\
	}\
	if( bmlocal4843_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RangingType", "RANGING_MODE_NO_RANGING", 1);\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4844_my_ptr;\
	UINT bmlocal4845_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_POS( base_ptr, bmlocal4844_my_ptr, bmlocal4845_my_bitoff );\
	(*((UINT32*)bmlocal4844_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4845_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_RangingType: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4846_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_GET_SIZE( base_ptr, out_bytes, bmlocal4846_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4846_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_RangingType_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4849_acc_bytes;\
	UINT bmlocal4850_acc_bits;\
	PVOID bmlocal4851_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4851_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4851_parent_out_ptr;\
	bmlocal4849_acc_bytes = 8;\
	bmlocal4850_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4849_acc_bytes );\
	out_bitoff += bmlocal4850_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4852_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS( base_ptr, out_ptr, bmlocal4852_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4852_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_POS_ALIGNED 56

// Alignment of FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4853_my_ptr;\
	UINT bmlocal4854_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS( base_ptr, bmlocal4853_my_ptr, bmlocal4854_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4853_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4853_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4853_my_ptr, bmlocal4854_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4855_my_ptr;\
	UINT bmlocal4856_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS( base_ptr, bmlocal4855_my_ptr, bmlocal4856_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4855_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4855_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4855_my_ptr, bmlocal4856_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal4857_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET( base_ptr, bmlocal4857_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TimingAdjustment", 32, (UINT)(bmlocal4857_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4858_my_ptr;\
	UINT bmlocal4859_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_POS( base_ptr, bmlocal4858_my_ptr, bmlocal4859_my_bitoff );\
	(*((UINT32*)bmlocal4858_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4859_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_TimingAdjustment: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4860_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_GET_SIZE( base_ptr, out_bytes, bmlocal4860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4860_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4863_acc_bytes;\
	UINT bmlocal4864_acc_bits;\
	PVOID bmlocal4865_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4865_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4865_parent_out_ptr;\
	bmlocal4863_acc_bytes = 12;\
	bmlocal4864_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4863_acc_bytes );\
	out_bitoff += bmlocal4864_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4866_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS( base_ptr, out_ptr, bmlocal4866_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4866_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_POS_ALIGNED 60

// Alignment of FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4867_my_ptr;\
	UINT bmlocal4868_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4867_my_ptr, bmlocal4868_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4867_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4867_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4867_my_ptr, bmlocal4868_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4869_my_ptr;\
	UINT bmlocal4870_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4869_my_ptr, bmlocal4870_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4869_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4869_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4869_my_ptr, bmlocal4870_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal4871_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET( base_ptr, bmlocal4871_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerLevelAdjust", 32, (UINT)(bmlocal4871_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4872_my_ptr;\
	UINT bmlocal4873_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_POS( base_ptr, bmlocal4872_my_ptr, bmlocal4873_my_bitoff );\
	(*((UINT32*)bmlocal4872_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4873_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4874_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_GET_SIZE( base_ptr, out_bytes, bmlocal4874_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4874_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4877_acc_bytes;\
	UINT bmlocal4878_acc_bits;\
	PVOID bmlocal4879_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4879_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4879_parent_out_ptr;\
	bmlocal4877_acc_bytes = 16;\
	bmlocal4878_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4877_acc_bytes );\
	out_bitoff += bmlocal4878_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4880_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS( base_ptr, out_ptr, bmlocal4880_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4880_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_POS_ALIGNED 64

// Alignment of FwMonDmParams_L2RangingTraceGroup_InvitingRetries: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4881_my_ptr;\
	UINT bmlocal4882_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS( base_ptr, bmlocal4881_my_ptr, bmlocal4882_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4881_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4881_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4881_my_ptr, bmlocal4882_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4883_my_ptr;\
	UINT bmlocal4884_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS( base_ptr, bmlocal4883_my_ptr, bmlocal4884_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4883_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4883_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4883_my_ptr, bmlocal4884_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4885_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET( base_ptr, bmlocal4885_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "InvitingRetries", 32, (UINT)(bmlocal4885_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4886_my_ptr;\
	UINT bmlocal4887_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_POS( base_ptr, bmlocal4886_my_ptr, bmlocal4887_my_bitoff );\
	(*((UINT32*)bmlocal4886_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4887_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_InvitingRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4888_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_GET_SIZE( base_ptr, out_bytes, bmlocal4888_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4888_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4891_acc_bytes;\
	UINT bmlocal4892_acc_bits;\
	PVOID bmlocal4893_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4893_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4893_parent_out_ptr;\
	bmlocal4891_acc_bytes = 20;\
	bmlocal4892_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4891_acc_bytes );\
	out_bitoff += bmlocal4892_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4894_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS( base_ptr, out_ptr, bmlocal4894_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4894_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_POS_ALIGNED 68

// Alignment of FwMonDmParams_L2RangingTraceGroup_ContentionRetries: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4895_my_ptr;\
	UINT bmlocal4896_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS( base_ptr, bmlocal4895_my_ptr, bmlocal4896_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4895_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4895_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4895_my_ptr, bmlocal4896_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4897_my_ptr;\
	UINT bmlocal4898_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS( base_ptr, bmlocal4897_my_ptr, bmlocal4898_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4897_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4897_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4897_my_ptr, bmlocal4898_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4899_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET( base_ptr, bmlocal4899_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ContentionRetries", 32, (UINT)(bmlocal4899_out_val), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4900_my_ptr;\
	UINT bmlocal4901_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_POS( base_ptr, bmlocal4900_my_ptr, bmlocal4901_my_bitoff );\
	(*((UINT32*)bmlocal4900_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4901_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_ContentionRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4902_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_GET_SIZE( base_ptr, out_bytes, bmlocal4902_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4902_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_BYTES_SIZE 4

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4905_acc_bytes;\
	UINT bmlocal4906_acc_bits;\
	PVOID bmlocal4907_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4907_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4907_parent_out_ptr;\
	bmlocal4905_acc_bytes = 24;\
	bmlocal4906_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4905_acc_bytes );\
	out_bitoff += bmlocal4906_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4908_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS( base_ptr, out_ptr, bmlocal4908_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4908_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_POS_ALIGNED 72

// Alignment of FwMonDmParams_L2RangingTraceGroup_rangingStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4909_my_ptr;\
	UINT bmlocal4910_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS( base_ptr, bmlocal4909_my_ptr, bmlocal4910_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (EDMRangingRspStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4909_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (EDMRangingRspStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4909_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4909_my_ptr, bmlocal4910_my_bitoff, 8, EDMRangingRspStatus, out_val, 0x00000000 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4911_my_ptr;\
	UINT bmlocal4912_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS( base_ptr, bmlocal4911_my_ptr, bmlocal4912_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4911_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4911_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4911_my_ptr, bmlocal4912_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// FwMonDmParams_L2RangingTraceGroup_rangingStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_rangingStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// FwMonDmParams_L2RangingTraceGroup_rangingStatus: IS_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_rangingStatus: SET_RESET accessor is not defined because no reset value was specified.
// FwMonDmParams_L2RangingTraceGroup_rangingStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FwMonDmParams_L2RangingTraceGroup_rangingStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	EDMRangingRspStatus bmlocal4913_out_val;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET( base_ptr, bmlocal4913_out_val );\
	if( bmlocal4913_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_UNKNOWN", 1);\
	}\
	if( bmlocal4913_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_CONTINUE", 1);\
	}\
	if( bmlocal4913_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_ABORT", 1);\
	}\
	if( bmlocal4913_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "rangingStatus", "DM_RNG_RSP_STATUS_SUCCESS", 1);\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4914_my_ptr;\
	UINT bmlocal4915_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_POS( base_ptr, bmlocal4914_my_ptr, bmlocal4915_my_bitoff );\
	(*((UINT8*)bmlocal4914_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4915_my_bitoff );\
}

// FwMonDmParams_L2RangingTraceGroup_rangingStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4916_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_GET_SIZE( base_ptr, out_bytes, bmlocal4916_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4916_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_BYTES_SIZE 1

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4919_acc_bytes;\
	UINT bmlocal4920_acc_bits;\
	PVOID bmlocal4921_parent_out_ptr;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_POS( base_ptr, bmlocal4921_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4921_parent_out_ptr;\
	bmlocal4919_acc_bytes = 25;\
	bmlocal4920_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4919_acc_bytes );\
	out_bitoff += bmlocal4920_acc_bits;\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4922_tmp_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_POS( base_ptr, out_ptr, bmlocal4922_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4922_tmp_bitoff);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_POS_ALIGNED 73

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4923_my_ptr;\
	UINT bmlocal4924_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_POS( base_ptr, bmlocal4923_my_ptr, bmlocal4924_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4923_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4923_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4923_my_ptr, bmlocal4924_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4925_my_ptr;\
	UINT bmlocal4926_my_bitoff;\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_POS( base_ptr, bmlocal4925_my_ptr, bmlocal4926_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4925_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4925_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4925_my_ptr, bmlocal4926_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal4927_out_bytes;\
	UINT bmlocal4928_out_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_SIZE( base_ptr, bmlocal4927_out_bytes, bmlocal4928_out_bits );\
	bmlocal4928_out_bits += bmlocal4927_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal4928_out_bits), "%d", 1);\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4929_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal4929_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4929_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_reserved1_BYTES_SIZE 3

#define BM_FwMonDmParams_L2RangingTraceGroup_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4932_tmp_bits;\
	BM_FwMonDmParams_L2RangingTraceGroup_GET_SIZE( base_ptr, out_bytes, bmlocal4932_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4932_tmp_bits );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_BYTES_SIZE 28

#define BM_FwMonDmParams_L2RangingTraceGroup_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L2RangingTraceGroup", 1);\
	BM_FwMonDmParams_L2RangingTraceGroup_DilloCdmaAttributes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_RangingType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_TimingAdjustment_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_PowerLevelAdjust_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_InvitingRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_ContentionRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_rangingStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_L2RangingTraceGroup_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_L2RangingTraceGroup_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FwMonDmParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 76;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4935_tmp_bits;\
	BM_FwMonDmParams_GET_SIZE( base_ptr, out_bytes, bmlocal4935_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4935_tmp_bits );\
}

#define BM_FwMonDmParams_BYTES_SIZE 76

#define BM_FwMonDmParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FwMonDmParams", 1);\
	BM_FwMonDmParams_BasicStatusGroup_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_BurstStatusGroup_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_CdmaBwrGroup_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FwMonDmParams_L2RangingTraceGroup_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FwMonDmParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FwMonDmParams_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PDUInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numberOfTxedPDUs;
	UINT32 _totalBytes;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_PDUInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT32 _totalBytes;
	UINT32 _numberOfTxedPDUs;
} BMS_PDUInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PDUInfo' Type: 'PDUInfo', Top-level, Non-instance, No bitoff root
#define BM_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PDUInfo_numberOfTxedPDUs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4936_tmp_bitoff;\
	BM_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, out_ptr, bmlocal4936_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4936_tmp_bitoff);\
}

#define BM_PDUInfo_numberOfTxedPDUs_POS_ALIGNED 0

// Alignment of PDUInfo_numberOfTxedPDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PDUInfo_numberOfTxedPDUs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4937_my_ptr;\
	UINT bmlocal4938_my_bitoff;\
	BM_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, bmlocal4937_my_ptr, bmlocal4938_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4937_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4937_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4937_my_ptr, bmlocal4938_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PDUInfo_numberOfTxedPDUs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4939_my_ptr;\
	UINT bmlocal4940_my_bitoff;\
	BM_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, bmlocal4939_my_ptr, bmlocal4940_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4939_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4939_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4939_my_ptr, bmlocal4940_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PDUInfo_numberOfTxedPDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// PDUInfo_numberOfTxedPDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// PDUInfo_numberOfTxedPDUs: IS_RESET accessor is not defined because no reset value was specified.
// PDUInfo_numberOfTxedPDUs: SET_RESET accessor is not defined because no reset value was specified.
// PDUInfo_numberOfTxedPDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PDUInfo_numberOfTxedPDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4941_out_val;\
	BM_PDUInfo_numberOfTxedPDUs_GET( base_ptr, bmlocal4941_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfTxedPDUs", 32, (UINT)(bmlocal4941_out_val), "%d", 1);\
}

#define BM_PDUInfo_numberOfTxedPDUs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PDUInfo_numberOfTxedPDUs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4942_my_ptr;\
	UINT bmlocal4943_my_bitoff;\
	BM_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, bmlocal4942_my_ptr, bmlocal4943_my_bitoff );\
	(*((UINT32*)bmlocal4942_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4943_my_bitoff );\
}

// PDUInfo_numberOfTxedPDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_PDUInfo_numberOfTxedPDUs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4944_tmp_bits;\
	BM_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, out_bytes, bmlocal4944_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4944_tmp_bits );\
}

#define BM_PDUInfo_numberOfTxedPDUs_BYTES_SIZE 4

#define BM_PDUInfo_totalBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4947_acc_bytes;\
	UINT bmlocal4948_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4947_acc_bytes = 4;\
	bmlocal4948_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4947_acc_bytes );\
	out_bitoff += bmlocal4948_acc_bits;\
}

#define BM_PDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4949_tmp_bitoff;\
	BM_PDUInfo_totalBytes_GET_POS( base_ptr, out_ptr, bmlocal4949_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4949_tmp_bitoff);\
}

#define BM_PDUInfo_totalBytes_POS_ALIGNED 4

// Alignment of PDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PDUInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PDUInfo_totalBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4950_my_ptr;\
	UINT bmlocal4951_my_bitoff;\
	BM_PDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4950_my_ptr, bmlocal4951_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4950_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4950_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4950_my_ptr, bmlocal4951_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PDUInfo_totalBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4952_my_ptr;\
	UINT bmlocal4953_my_bitoff;\
	BM_PDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4952_my_ptr, bmlocal4953_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4952_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4952_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4952_my_ptr, bmlocal4953_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4954_out_val;\
	BM_PDUInfo_totalBytes_GET( base_ptr, bmlocal4954_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal4954_out_val), "%d", 1);\
}

#define BM_PDUInfo_totalBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PDUInfo_totalBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4955_my_ptr;\
	UINT bmlocal4956_my_bitoff;\
	BM_PDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4955_my_ptr, bmlocal4956_my_bitoff );\
	(*((UINT32*)bmlocal4955_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4956_my_bitoff );\
}

// PDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4957_tmp_bits;\
	BM_PDUInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4957_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4957_tmp_bits );\
}

#define BM_PDUInfo_totalBytes_BYTES_SIZE 4

#define BM_PDUInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4960_acc_bytes;\
	UINT bmlocal4961_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4960_acc_bytes = 8;\
	bmlocal4961_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4960_acc_bytes );\
	out_bitoff += bmlocal4961_acc_bits;\
}

#define BM_PDUInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4962_tmp_bitoff;\
	BM_PDUInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal4962_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4962_tmp_bitoff);\
}

#define BM_PDUInfo_r2_POS_ALIGNED 8

#define BM_PDUInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PDUInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PDUInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4965_tmp_bits;\
	BM_PDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal4965_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4965_tmp_bits );\
}

#define BM_PDUInfo_BYTES_SIZE 8

#define BM_PDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PDUInfo", 1);\
	BM_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PDUInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SDUInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numberOfAgedSDUs;
	UINT32 _totalBytes;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_SDUInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT32 _totalBytes;
	UINT32 _numberOfAgedSDUs;
} BMS_SDUInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'SDUInfo' Type: 'SDUInfo', Top-level, Non-instance, No bitoff root
#define BM_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SDUInfo_numberOfAgedSDUs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4966_tmp_bitoff;\
	BM_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, out_ptr, bmlocal4966_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4966_tmp_bitoff);\
}

#define BM_SDUInfo_numberOfAgedSDUs_POS_ALIGNED 0

// Alignment of SDUInfo_numberOfAgedSDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SDUInfo_numberOfAgedSDUs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4967_my_ptr;\
	UINT bmlocal4968_my_bitoff;\
	BM_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, bmlocal4967_my_ptr, bmlocal4968_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4967_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4967_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4967_my_ptr, bmlocal4968_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SDUInfo_numberOfAgedSDUs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4969_my_ptr;\
	UINT bmlocal4970_my_bitoff;\
	BM_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, bmlocal4969_my_ptr, bmlocal4970_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4969_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4969_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4969_my_ptr, bmlocal4970_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SDUInfo_numberOfAgedSDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// SDUInfo_numberOfAgedSDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// SDUInfo_numberOfAgedSDUs: IS_RESET accessor is not defined because no reset value was specified.
// SDUInfo_numberOfAgedSDUs: SET_RESET accessor is not defined because no reset value was specified.
// SDUInfo_numberOfAgedSDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SDUInfo_numberOfAgedSDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4971_out_val;\
	BM_SDUInfo_numberOfAgedSDUs_GET( base_ptr, bmlocal4971_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfAgedSDUs", 32, (UINT)(bmlocal4971_out_val), "%d", 1);\
}

#define BM_SDUInfo_numberOfAgedSDUs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SDUInfo_numberOfAgedSDUs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4972_my_ptr;\
	UINT bmlocal4973_my_bitoff;\
	BM_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, bmlocal4972_my_ptr, bmlocal4973_my_bitoff );\
	(*((UINT32*)bmlocal4972_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4973_my_bitoff );\
}

// SDUInfo_numberOfAgedSDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_SDUInfo_numberOfAgedSDUs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4974_tmp_bits;\
	BM_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, out_bytes, bmlocal4974_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4974_tmp_bits );\
}

#define BM_SDUInfo_numberOfAgedSDUs_BYTES_SIZE 4

#define BM_SDUInfo_totalBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4977_acc_bytes;\
	UINT bmlocal4978_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4977_acc_bytes = 4;\
	bmlocal4978_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4977_acc_bytes );\
	out_bitoff += bmlocal4978_acc_bits;\
}

#define BM_SDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4979_tmp_bitoff;\
	BM_SDUInfo_totalBytes_GET_POS( base_ptr, out_ptr, bmlocal4979_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4979_tmp_bitoff);\
}

#define BM_SDUInfo_totalBytes_POS_ALIGNED 4

// Alignment of SDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SDUInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SDUInfo_totalBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4980_my_ptr;\
	UINT bmlocal4981_my_bitoff;\
	BM_SDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4980_my_ptr, bmlocal4981_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4980_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4980_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4980_my_ptr, bmlocal4981_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SDUInfo_totalBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4982_my_ptr;\
	UINT bmlocal4983_my_bitoff;\
	BM_SDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4982_my_ptr, bmlocal4983_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4982_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4982_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4982_my_ptr, bmlocal4983_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// SDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// SDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// SDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// SDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal4984_out_val;\
	BM_SDUInfo_totalBytes_GET( base_ptr, bmlocal4984_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal4984_out_val), "%d", 1);\
}

#define BM_SDUInfo_totalBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SDUInfo_totalBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4985_my_ptr;\
	UINT bmlocal4986_my_bitoff;\
	BM_SDUInfo_totalBytes_GET_POS( base_ptr, bmlocal4985_my_ptr, bmlocal4986_my_bitoff );\
	(*((UINT32*)bmlocal4985_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4986_my_bitoff );\
}

// SDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_SDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4987_tmp_bits;\
	BM_SDUInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, bmlocal4987_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4987_tmp_bits );\
}

#define BM_SDUInfo_totalBytes_BYTES_SIZE 4

#define BM_SDUInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4990_acc_bytes;\
	UINT bmlocal4991_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal4990_acc_bytes = 8;\
	bmlocal4991_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4990_acc_bytes );\
	out_bitoff += bmlocal4991_acc_bits;\
}

#define BM_SDUInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4992_tmp_bitoff;\
	BM_SDUInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal4992_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4992_tmp_bitoff);\
}

#define BM_SDUInfo_r2_POS_ALIGNED 8

#define BM_SDUInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SDUInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SDUInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_SDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4995_tmp_bits;\
	BM_SDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal4995_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4995_tmp_bits );\
}

#define BM_SDUInfo_BYTES_SIZE 8

#define BM_SDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SDUInfo", 1);\
	BM_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SDUInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BWRInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numberOfBWRs;
	UINT32 _totalBytes;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_BWRInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT32 _totalBytes;
	UINT32 _numberOfBWRs;
} BMS_BWRInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BWRInfo' Type: 'BWRInfo', Top-level, Non-instance, No bitoff root
#define BM_BWRInfo_numberOfBWRs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BWRInfo_numberOfBWRs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4996_tmp_bitoff;\
	BM_BWRInfo_numberOfBWRs_GET_POS( base_ptr, out_ptr, bmlocal4996_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4996_tmp_bitoff);\
}

#define BM_BWRInfo_numberOfBWRs_POS_ALIGNED 0

// Alignment of BWRInfo_numberOfBWRs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BWRInfo_numberOfBWRs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BWRInfo_numberOfBWRs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4997_my_ptr;\
	UINT bmlocal4998_my_bitoff;\
	BM_BWRInfo_numberOfBWRs_GET_POS( base_ptr, bmlocal4997_my_ptr, bmlocal4998_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4997_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4997_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4997_my_ptr, bmlocal4998_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BWRInfo_numberOfBWRs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4999_my_ptr;\
	UINT bmlocal5000_my_bitoff;\
	BM_BWRInfo_numberOfBWRs_GET_POS( base_ptr, bmlocal4999_my_ptr, bmlocal5000_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4999_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4999_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4999_my_ptr, bmlocal5000_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BWRInfo_numberOfBWRs: IS_DEFAULT accessor is not defined because no default value was specified.
// BWRInfo_numberOfBWRs: SET_DEFAULT accessor is not defined because no default value was specified.
// BWRInfo_numberOfBWRs: IS_RESET accessor is not defined because no reset value was specified.
// BWRInfo_numberOfBWRs: SET_RESET accessor is not defined because no reset value was specified.
// BWRInfo_numberOfBWRs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BWRInfo_numberOfBWRs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5001_out_val;\
	BM_BWRInfo_numberOfBWRs_GET( base_ptr, bmlocal5001_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfBWRs", 32, (UINT)(bmlocal5001_out_val), "%d", 1);\
}

#define BM_BWRInfo_numberOfBWRs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BWRInfo_numberOfBWRs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5002_my_ptr;\
	UINT bmlocal5003_my_bitoff;\
	BM_BWRInfo_numberOfBWRs_GET_POS( base_ptr, bmlocal5002_my_ptr, bmlocal5003_my_bitoff );\
	(*((UINT32*)bmlocal5002_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5003_my_bitoff );\
}

// BWRInfo_numberOfBWRs: Validation accessors are not defined because validation condition was not specified.
#define BM_BWRInfo_numberOfBWRs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5004_tmp_bits;\
	BM_BWRInfo_numberOfBWRs_GET_SIZE( base_ptr, out_bytes, bmlocal5004_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5004_tmp_bits );\
}

#define BM_BWRInfo_numberOfBWRs_BYTES_SIZE 4

#define BM_BWRInfo_totalBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5007_acc_bytes;\
	UINT bmlocal5008_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5007_acc_bytes = 4;\
	bmlocal5008_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5007_acc_bytes );\
	out_bitoff += bmlocal5008_acc_bits;\
}

#define BM_BWRInfo_totalBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5009_tmp_bitoff;\
	BM_BWRInfo_totalBytes_GET_POS( base_ptr, out_ptr, bmlocal5009_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5009_tmp_bitoff);\
}

#define BM_BWRInfo_totalBytes_POS_ALIGNED 4

// Alignment of BWRInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BWRInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BWRInfo_totalBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5010_my_ptr;\
	UINT bmlocal5011_my_bitoff;\
	BM_BWRInfo_totalBytes_GET_POS( base_ptr, bmlocal5010_my_ptr, bmlocal5011_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5010_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5010_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5010_my_ptr, bmlocal5011_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BWRInfo_totalBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5012_my_ptr;\
	UINT bmlocal5013_my_bitoff;\
	BM_BWRInfo_totalBytes_GET_POS( base_ptr, bmlocal5012_my_ptr, bmlocal5013_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5012_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5012_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5012_my_ptr, bmlocal5013_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BWRInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// BWRInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// BWRInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// BWRInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// BWRInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BWRInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BWRInfo_totalBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5014_out_val;\
	BM_BWRInfo_totalBytes_GET( base_ptr, bmlocal5014_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5014_out_val), "%d", 1);\
}

#define BM_BWRInfo_totalBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BWRInfo_totalBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BWRInfo_totalBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5015_my_ptr;\
	UINT bmlocal5016_my_bitoff;\
	BM_BWRInfo_totalBytes_GET_POS( base_ptr, bmlocal5015_my_ptr, bmlocal5016_my_bitoff );\
	(*((UINT32*)bmlocal5015_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5016_my_bitoff );\
}

// BWRInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_BWRInfo_totalBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5017_tmp_bits;\
	BM_BWRInfo_totalBytes_GET_SIZE( base_ptr, out_bytes, bmlocal5017_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5017_tmp_bits );\
}

#define BM_BWRInfo_totalBytes_BYTES_SIZE 4

#define BM_BWRInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5020_acc_bytes;\
	UINT bmlocal5021_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5020_acc_bytes = 8;\
	bmlocal5021_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5020_acc_bytes );\
	out_bitoff += bmlocal5021_acc_bits;\
}

#define BM_BWRInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5022_tmp_bitoff;\
	BM_BWRInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal5022_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5022_tmp_bitoff);\
}

#define BM_BWRInfo_r2_POS_ALIGNED 8

#define BM_BWRInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BWRInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BWRInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_BWRInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BWRInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5025_tmp_bits;\
	BM_BWRInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5025_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5025_tmp_bits );\
}

#define BM_BWRInfo_BYTES_SIZE 8

#define BM_BWRInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BWRInfo", 1);\
	BM_BWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BWRInfo_totalBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BWRInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BWRInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BWRInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 VQInfo[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _totalBytesPendingInQ;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_VQInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT32 _totalBytesPendingInQ;
} BMS_VQInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'VQInfo' Type: 'VQInfo', Top-level, Non-instance, No bitoff root
#define BM_VQInfo_totalBytesPendingInQ_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_VQInfo_totalBytesPendingInQ_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5026_tmp_bitoff;\
	BM_VQInfo_totalBytesPendingInQ_GET_POS( base_ptr, out_ptr, bmlocal5026_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5026_tmp_bitoff);\
}

#define BM_VQInfo_totalBytesPendingInQ_POS_ALIGNED 0

// Alignment of VQInfo_totalBytesPendingInQ: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_VQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_VQInfo_totalBytesPendingInQ_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5027_my_ptr;\
	UINT bmlocal5028_my_bitoff;\
	BM_VQInfo_totalBytesPendingInQ_GET_POS( base_ptr, bmlocal5027_my_ptr, bmlocal5028_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5027_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5027_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5027_my_ptr, bmlocal5028_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_VQInfo_totalBytesPendingInQ_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5029_my_ptr;\
	UINT bmlocal5030_my_bitoff;\
	BM_VQInfo_totalBytesPendingInQ_GET_POS( base_ptr, bmlocal5029_my_ptr, bmlocal5030_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5029_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5029_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5029_my_ptr, bmlocal5030_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// VQInfo_totalBytesPendingInQ: IS_DEFAULT accessor is not defined because no default value was specified.
// VQInfo_totalBytesPendingInQ: SET_DEFAULT accessor is not defined because no default value was specified.
// VQInfo_totalBytesPendingInQ: IS_RESET accessor is not defined because no reset value was specified.
// VQInfo_totalBytesPendingInQ: SET_RESET accessor is not defined because no reset value was specified.
// VQInfo_totalBytesPendingInQ: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// VQInfo_totalBytesPendingInQ: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_VQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5031_out_val;\
	BM_VQInfo_totalBytesPendingInQ_GET( base_ptr, bmlocal5031_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytesPendingInQ", 32, (UINT)(bmlocal5031_out_val), "%d", 1);\
}

#define BM_VQInfo_totalBytesPendingInQ_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_VQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_VQInfo_totalBytesPendingInQ_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5032_my_ptr;\
	UINT bmlocal5033_my_bitoff;\
	BM_VQInfo_totalBytesPendingInQ_GET_POS( base_ptr, bmlocal5032_my_ptr, bmlocal5033_my_bitoff );\
	(*((UINT32*)bmlocal5032_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5033_my_bitoff );\
}

// VQInfo_totalBytesPendingInQ: Validation accessors are not defined because validation condition was not specified.
#define BM_VQInfo_totalBytesPendingInQ_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5034_tmp_bits;\
	BM_VQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, out_bytes, bmlocal5034_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5034_tmp_bits );\
}

#define BM_VQInfo_totalBytesPendingInQ_BYTES_SIZE 4

#define BM_VQInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5037_acc_bytes;\
	UINT bmlocal5038_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5037_acc_bytes = 4;\
	bmlocal5038_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5037_acc_bytes );\
	out_bitoff += bmlocal5038_acc_bits;\
}

#define BM_VQInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5039_tmp_bitoff;\
	BM_VQInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal5039_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5039_tmp_bitoff);\
}

#define BM_VQInfo_r2_POS_ALIGNED 4

#define BM_VQInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_VQInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_VQInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_VQInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_VQInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5042_tmp_bits;\
	BM_VQInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5042_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5042_tmp_bits );\
}

#define BM_VQInfo_BYTES_SIZE 4

#define BM_VQInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "VQInfo", 1);\
	BM_VQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_VQInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_VQInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_VQInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PerCIN_xDUStatus[256];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_PDUInfo _PDUInfo[16];
	BMS_SDUInfo _SDUInfo[16];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_PerCIN_xDUStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_SDUInfo _SDUInfo[16];
	BMS_PDUInfo _PDUInfo[16];
} BMS_PerCIN_xDUStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PerCIN_xDUStatus' Type: 'PerCIN_xDUStatus', Top-level, Non-instance, No bitoff root
#define BM_PerCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PerCIN_xDUStatus_PDUInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5043_tmp_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, out_ptr, bmlocal5043_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5043_tmp_bitoff);\
}

#define BM_PerCIN_xDUStatus_PDUInfo_POS_ALIGNED 0

// ARRAY: PerCIN_xDUStatus_PDUInfo
#define BM_PerCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5044_out_ptr;\
	UINT bmlocal5045_out_bitoff;\
	UINT bmlocal5046_element_size_bytes;\
	UINT bmlocal5047_element_size_bits;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, bmlocal5044_out_ptr, bmlocal5045_out_bitoff );\
	bmlocal5046_element_size_bytes = 8;\
	bmlocal5047_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5044_out_ptr) + (idx0) * bmlocal5046_element_size_bytes );\
	out_bitoff = bmlocal5045_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5047_element_size_bits );\
}

// COMPOSITE: Full name: 'PerCIN_xDUStatus_PDUInfo' Type: 'PDUInfo', Inner, Non-instance, No bitoff root
#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5048_parent_out_ptr;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5048_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5048_parent_out_ptr;\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5049_tmp_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5049_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5049_tmp_bitoff);\
}

// Alignment of PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5050_my_ptr;\
	UINT bmlocal5051_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5050_my_ptr, bmlocal5051_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5050_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5050_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5050_my_ptr, bmlocal5051_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5052_my_ptr;\
	UINT bmlocal5053_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5052_my_ptr, bmlocal5053_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5052_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5052_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5052_my_ptr, bmlocal5053_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5054_out_val;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET( base_ptr, idx0, bmlocal5054_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfTxedPDUs", 32, (UINT)(bmlocal5054_out_val), "%d", 1);\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5055_my_ptr;\
	UINT bmlocal5056_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5055_my_ptr, bmlocal5056_my_bitoff );\
	(*((UINT32*)bmlocal5055_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5056_my_bitoff );\
}

// PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5057_tmp_bits;\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5057_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5057_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_BYTES_SIZE 4

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5060_acc_bytes;\
	UINT bmlocal5061_acc_bits;\
	PVOID bmlocal5062_parent_out_ptr;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5062_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5062_parent_out_ptr;\
	bmlocal5060_acc_bytes = 4;\
	bmlocal5061_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5060_acc_bytes );\
	out_bitoff += bmlocal5061_acc_bits;\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5063_tmp_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5063_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5063_tmp_bitoff);\
}

// Alignment of PerCIN_xDUStatus_PDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5064_my_ptr;\
	UINT bmlocal5065_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5064_my_ptr, bmlocal5065_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5064_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5064_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5064_my_ptr, bmlocal5065_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5066_my_ptr;\
	UINT bmlocal5067_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5066_my_ptr, bmlocal5067_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5066_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5066_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5066_my_ptr, bmlocal5067_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_xDUStatus_PDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_PDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_PDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_PDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_PDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_xDUStatus_PDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5068_out_val;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET( base_ptr, idx0, bmlocal5068_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5068_out_val), "%d", 1);\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5069_my_ptr;\
	UINT bmlocal5070_my_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5069_my_ptr, bmlocal5070_my_bitoff );\
	(*((UINT32*)bmlocal5069_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5070_my_bitoff );\
}

// PerCIN_xDUStatus_PDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5071_tmp_bits;\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5071_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5071_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_totalBytes_BYTES_SIZE 4

#define BM_PerCIN_xDUStatus_PDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5074_acc_bytes;\
	UINT bmlocal5075_acc_bits;\
	PVOID bmlocal5076_parent_out_ptr;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5076_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5076_parent_out_ptr;\
	bmlocal5074_acc_bytes = 8;\
	bmlocal5075_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5074_acc_bytes );\
	out_bitoff += bmlocal5075_acc_bits;\
}

#define BM_PerCIN_xDUStatus_PDUInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5077_tmp_bitoff;\
	BM_PerCIN_xDUStatus_PDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5077_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5077_tmp_bitoff);\
}

#define BM_PerCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PerCIN_xDUStatus_PDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5080_tmp_bits;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5080_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5080_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_BYTES_CELL_SIZE 8

#define BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5081_dim_size0;\
	UINT bmlocal5082_idx0;\
	bmlocal5081_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PDUInfo", 1);\
	for( bmlocal5082_idx0=0; bmlocal5082_idx0<bmlocal5081_dim_size0; bmlocal5082_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5082_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5082_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5083_tmp_bits;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5083_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5083_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_PDUInfo_BYTES_SIZE 128

#define BM_PerCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5084_tmp_bytes = 0;\
	UINT bmlocal5085_tmp_bits = 0;\
	UINT bmlocal5086_acc_bytes;\
	UINT bmlocal5087_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5086_acc_bytes = 0;\
	bmlocal5087_acc_bits = 0;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5084_tmp_bytes, bmlocal5085_tmp_bits );\
	bmlocal5086_acc_bytes += bmlocal5084_tmp_bytes;\
	bmlocal5087_acc_bits += bmlocal5085_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5086_acc_bytes );\
	out_bitoff += bmlocal5087_acc_bits;\
}

#define BM_PerCIN_xDUStatus_SDUInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5088_tmp_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, out_ptr, bmlocal5088_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5088_tmp_bitoff);\
}

#define BM_PerCIN_xDUStatus_SDUInfo_POS_ALIGNED 128

// ARRAY: PerCIN_xDUStatus_SDUInfo
#define BM_PerCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5089_out_ptr;\
	UINT bmlocal5090_out_bitoff;\
	UINT bmlocal5091_element_size_bytes;\
	UINT bmlocal5092_element_size_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, bmlocal5089_out_ptr, bmlocal5090_out_bitoff );\
	bmlocal5091_element_size_bytes = 8;\
	bmlocal5092_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5089_out_ptr) + (idx0) * bmlocal5091_element_size_bytes );\
	out_bitoff = bmlocal5090_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5092_element_size_bits );\
}

// COMPOSITE: Full name: 'PerCIN_xDUStatus_SDUInfo' Type: 'SDUInfo', Inner, Non-instance, No bitoff root
#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5093_parent_out_ptr;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5093_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5093_parent_out_ptr;\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5094_tmp_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5094_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5094_tmp_bitoff);\
}

// Alignment of PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5095_my_ptr;\
	UINT bmlocal5096_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5095_my_ptr, bmlocal5096_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5095_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5095_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5095_my_ptr, bmlocal5096_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5097_my_ptr;\
	UINT bmlocal5098_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5097_my_ptr, bmlocal5098_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5097_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5097_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5097_my_ptr, bmlocal5098_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5099_out_val;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET( base_ptr, idx0, bmlocal5099_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfAgedSDUs", 32, (UINT)(bmlocal5099_out_val), "%d", 1);\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5100_my_ptr;\
	UINT bmlocal5101_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5100_my_ptr, bmlocal5101_my_bitoff );\
	(*((UINT32*)bmlocal5100_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5101_my_bitoff );\
}

// PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5102_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5102_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5102_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_BYTES_SIZE 4

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5105_acc_bytes;\
	UINT bmlocal5106_acc_bits;\
	PVOID bmlocal5107_parent_out_ptr;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5107_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5107_parent_out_ptr;\
	bmlocal5105_acc_bytes = 4;\
	bmlocal5106_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5105_acc_bytes );\
	out_bitoff += bmlocal5106_acc_bits;\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5108_tmp_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5108_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5108_tmp_bitoff);\
}

// Alignment of PerCIN_xDUStatus_SDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5109_my_ptr;\
	UINT bmlocal5110_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5109_my_ptr, bmlocal5110_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5109_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5109_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5109_my_ptr, bmlocal5110_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5111_my_ptr;\
	UINT bmlocal5112_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5111_my_ptr, bmlocal5112_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5111_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5111_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5111_my_ptr, bmlocal5112_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_xDUStatus_SDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_SDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_xDUStatus_SDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_SDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_xDUStatus_SDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_xDUStatus_SDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5113_out_val;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET( base_ptr, idx0, bmlocal5113_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5113_out_val), "%d", 1);\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5114_my_ptr;\
	UINT bmlocal5115_my_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5114_my_ptr, bmlocal5115_my_bitoff );\
	(*((UINT32*)bmlocal5114_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5115_my_bitoff );\
}

// PerCIN_xDUStatus_SDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5116_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5116_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5116_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_totalBytes_BYTES_SIZE 4

#define BM_PerCIN_xDUStatus_SDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5119_acc_bytes;\
	UINT bmlocal5120_acc_bits;\
	PVOID bmlocal5121_parent_out_ptr;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5121_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5121_parent_out_ptr;\
	bmlocal5119_acc_bytes = 8;\
	bmlocal5120_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5119_acc_bytes );\
	out_bitoff += bmlocal5120_acc_bits;\
}

#define BM_PerCIN_xDUStatus_SDUInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5122_tmp_bitoff;\
	BM_PerCIN_xDUStatus_SDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5122_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5122_tmp_bitoff);\
}

#define BM_PerCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PerCIN_xDUStatus_SDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5125_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5125_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5125_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_BYTES_CELL_SIZE 8

#define BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5126_dim_size0;\
	UINT bmlocal5127_idx0;\
	bmlocal5126_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SDUInfo", 1);\
	for( bmlocal5127_idx0=0; bmlocal5127_idx0<bmlocal5126_dim_size0; bmlocal5127_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5127_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5127_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5128_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5128_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5128_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_SDUInfo_BYTES_SIZE 128

#define BM_PerCIN_xDUStatus_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5129_tmp_bytes = 0;\
	UINT bmlocal5130_tmp_bits = 0;\
	UINT bmlocal5131_acc_bytes;\
	UINT bmlocal5132_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5131_acc_bytes = 0;\
	bmlocal5132_acc_bits = 0;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5129_tmp_bytes, bmlocal5130_tmp_bits );\
	bmlocal5131_acc_bytes += bmlocal5129_tmp_bytes;\
	bmlocal5132_acc_bits += bmlocal5130_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, bmlocal5129_tmp_bytes, bmlocal5130_tmp_bits );\
	bmlocal5131_acc_bytes += bmlocal5129_tmp_bytes;\
	bmlocal5132_acc_bits += bmlocal5130_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5131_acc_bytes );\
	out_bitoff += bmlocal5132_acc_bits;\
}

#define BM_PerCIN_xDUStatus_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5133_tmp_bitoff;\
	BM_PerCIN_xDUStatus_r2_GET_POS( base_ptr, out_ptr, bmlocal5133_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5133_tmp_bitoff);\
}

#define BM_PerCIN_xDUStatus_r2_POS_ALIGNED 256

#define BM_PerCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PerCIN_xDUStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5134_tmp_bytes = 0;\
	UINT bmlocal5135_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PerCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5134_tmp_bytes, bmlocal5135_tmp_bits );\
	out_bytes += bmlocal5134_tmp_bytes;\
	out_bits += bmlocal5135_tmp_bits;\
	BM_PerCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, bmlocal5134_tmp_bytes, bmlocal5135_tmp_bits );\
	out_bytes += bmlocal5134_tmp_bytes;\
	out_bits += bmlocal5135_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PerCIN_xDUStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5136_tmp_bits;\
	BM_PerCIN_xDUStatus_GET_SIZE( base_ptr, out_bytes, bmlocal5136_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5136_tmp_bits );\
}

#define BM_PerCIN_xDUStatus_BYTES_SIZE 256

#define BM_PerCIN_xDUStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PerCIN_xDUStatus", 1);\
	BM_PerCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PerCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PerCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_xDUStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_xDUStatus_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PerCIN_BWRStatus[256];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BWRInfo _AggregatedBWRInfo[16];
	BMS_BWRInfo _IncrementalBWRInfo[16];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_PerCIN_BWRStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_BWRInfo _IncrementalBWRInfo[16];
	BMS_BWRInfo _AggregatedBWRInfo[16];
} BMS_PerCIN_BWRStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PerCIN_BWRStatus' Type: 'PerCIN_BWRStatus', Top-level, Non-instance, No bitoff root
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5137_tmp_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, out_ptr, bmlocal5137_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5137_tmp_bitoff);\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_POS_ALIGNED 0

// ARRAY: PerCIN_BWRStatus_AggregatedBWRInfo
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5138_out_ptr;\
	UINT bmlocal5139_out_bitoff;\
	UINT bmlocal5140_element_size_bytes;\
	UINT bmlocal5141_element_size_bits;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, bmlocal5138_out_ptr, bmlocal5139_out_bitoff );\
	bmlocal5140_element_size_bytes = 8;\
	bmlocal5141_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5138_out_ptr) + (idx0) * bmlocal5140_element_size_bytes );\
	out_bitoff = bmlocal5139_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5141_element_size_bits );\
}

// COMPOSITE: Full name: 'PerCIN_BWRStatus_AggregatedBWRInfo' Type: 'BWRInfo', Inner, Non-instance, No bitoff root
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5142_parent_out_ptr;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5142_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5142_parent_out_ptr;\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5143_tmp_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5143_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5143_tmp_bitoff);\
}

// Alignment of PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5144_my_ptr;\
	UINT bmlocal5145_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5144_my_ptr, bmlocal5145_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5144_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5144_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5144_my_ptr, bmlocal5145_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5146_my_ptr;\
	UINT bmlocal5147_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5146_my_ptr, bmlocal5147_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5146_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5146_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5146_my_ptr, bmlocal5147_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5148_out_val;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET( base_ptr, idx0, bmlocal5148_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfBWRs", 32, (UINT)(bmlocal5148_out_val), "%d", 1);\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5149_my_ptr;\
	UINT bmlocal5150_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5149_my_ptr, bmlocal5150_my_bitoff );\
	(*((UINT32*)bmlocal5149_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5150_my_bitoff );\
}

// PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5151_tmp_bits;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5151_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5151_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_BYTES_SIZE 4

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5154_acc_bytes;\
	UINT bmlocal5155_acc_bits;\
	PVOID bmlocal5156_parent_out_ptr;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5156_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5156_parent_out_ptr;\
	bmlocal5154_acc_bytes = 4;\
	bmlocal5155_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5154_acc_bytes );\
	out_bitoff += bmlocal5155_acc_bits;\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5157_tmp_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5157_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5157_tmp_bitoff);\
}

// Alignment of PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5158_my_ptr;\
	UINT bmlocal5159_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5158_my_ptr, bmlocal5159_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5158_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5158_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5158_my_ptr, bmlocal5159_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5160_my_ptr;\
	UINT bmlocal5161_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5160_my_ptr, bmlocal5161_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5160_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5160_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5160_my_ptr, bmlocal5161_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5162_out_val;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET( base_ptr, idx0, bmlocal5162_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5162_out_val), "%d", 1);\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5163_my_ptr;\
	UINT bmlocal5164_my_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5163_my_ptr, bmlocal5164_my_bitoff );\
	(*((UINT32*)bmlocal5163_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5164_my_bitoff );\
}

// PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5165_tmp_bits;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5165_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5165_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_BYTES_SIZE 4

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5168_acc_bytes;\
	UINT bmlocal5169_acc_bits;\
	PVOID bmlocal5170_parent_out_ptr;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5170_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5170_parent_out_ptr;\
	bmlocal5168_acc_bytes = 8;\
	bmlocal5169_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5168_acc_bytes );\
	out_bitoff += bmlocal5169_acc_bits;\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5171_tmp_bitoff;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5171_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5171_tmp_bitoff);\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5174_tmp_bits;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5174_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5174_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_BYTES_CELL_SIZE 8

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5175_dim_size0;\
	UINT bmlocal5176_idx0;\
	bmlocal5175_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AggregatedBWRInfo", 1);\
	for( bmlocal5176_idx0=0; bmlocal5176_idx0<bmlocal5175_dim_size0; bmlocal5176_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5176_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5176_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5177_tmp_bits;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5177_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5177_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_AggregatedBWRInfo_BYTES_SIZE 128

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5178_tmp_bytes = 0;\
	UINT bmlocal5179_tmp_bits = 0;\
	UINT bmlocal5180_acc_bytes;\
	UINT bmlocal5181_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5180_acc_bytes = 0;\
	bmlocal5181_acc_bits = 0;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5178_tmp_bytes, bmlocal5179_tmp_bits );\
	bmlocal5180_acc_bytes += bmlocal5178_tmp_bytes;\
	bmlocal5181_acc_bits += bmlocal5179_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5180_acc_bytes );\
	out_bitoff += bmlocal5181_acc_bits;\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5182_tmp_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, out_ptr, bmlocal5182_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5182_tmp_bitoff);\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_POS_ALIGNED 128

// ARRAY: PerCIN_BWRStatus_IncrementalBWRInfo
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5183_out_ptr;\
	UINT bmlocal5184_out_bitoff;\
	UINT bmlocal5185_element_size_bytes;\
	UINT bmlocal5186_element_size_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, bmlocal5183_out_ptr, bmlocal5184_out_bitoff );\
	bmlocal5185_element_size_bytes = 8;\
	bmlocal5186_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5183_out_ptr) + (idx0) * bmlocal5185_element_size_bytes );\
	out_bitoff = bmlocal5184_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5186_element_size_bits );\
}

// COMPOSITE: Full name: 'PerCIN_BWRStatus_IncrementalBWRInfo' Type: 'BWRInfo', Inner, Non-instance, No bitoff root
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5187_parent_out_ptr;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5187_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5187_parent_out_ptr;\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5188_tmp_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5188_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5188_tmp_bitoff);\
}

// Alignment of PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5189_my_ptr;\
	UINT bmlocal5190_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5189_my_ptr, bmlocal5190_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5189_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5189_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5189_my_ptr, bmlocal5190_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5191_my_ptr;\
	UINT bmlocal5192_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5191_my_ptr, bmlocal5192_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5191_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5191_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5191_my_ptr, bmlocal5192_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5193_out_val;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET( base_ptr, idx0, bmlocal5193_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfBWRs", 32, (UINT)(bmlocal5193_out_val), "%d", 1);\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5194_my_ptr;\
	UINT bmlocal5195_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5194_my_ptr, bmlocal5195_my_bitoff );\
	(*((UINT32*)bmlocal5194_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5195_my_bitoff );\
}

// PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5196_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5196_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5196_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_BYTES_SIZE 4

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5199_acc_bytes;\
	UINT bmlocal5200_acc_bits;\
	PVOID bmlocal5201_parent_out_ptr;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5201_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5201_parent_out_ptr;\
	bmlocal5199_acc_bytes = 4;\
	bmlocal5200_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5199_acc_bytes );\
	out_bitoff += bmlocal5200_acc_bits;\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5202_tmp_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5202_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5202_tmp_bitoff);\
}

// Alignment of PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5203_my_ptr;\
	UINT bmlocal5204_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5203_my_ptr, bmlocal5204_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5203_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5203_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5203_my_ptr, bmlocal5204_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5205_my_ptr;\
	UINT bmlocal5206_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5205_my_ptr, bmlocal5206_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5205_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5205_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5205_my_ptr, bmlocal5206_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5207_out_val;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET( base_ptr, idx0, bmlocal5207_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5207_out_val), "%d", 1);\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5208_my_ptr;\
	UINT bmlocal5209_my_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5208_my_ptr, bmlocal5209_my_bitoff );\
	(*((UINT32*)bmlocal5208_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5209_my_bitoff );\
}

// PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5210_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5210_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5210_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_BYTES_SIZE 4

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5213_acc_bytes;\
	UINT bmlocal5214_acc_bits;\
	PVOID bmlocal5215_parent_out_ptr;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5215_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5215_parent_out_ptr;\
	bmlocal5213_acc_bytes = 8;\
	bmlocal5214_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5213_acc_bytes );\
	out_bitoff += bmlocal5214_acc_bits;\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5216_tmp_bitoff;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5216_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5216_tmp_bitoff);\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5219_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5219_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5219_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_BYTES_CELL_SIZE 8

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5220_dim_size0;\
	UINT bmlocal5221_idx0;\
	bmlocal5220_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "IncrementalBWRInfo", 1);\
	for( bmlocal5221_idx0=0; bmlocal5221_idx0<bmlocal5220_dim_size0; bmlocal5221_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5221_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5221_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5222_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5222_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5222_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_IncrementalBWRInfo_BYTES_SIZE 128

#define BM_PerCIN_BWRStatus_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5223_tmp_bytes = 0;\
	UINT bmlocal5224_tmp_bits = 0;\
	UINT bmlocal5225_acc_bytes;\
	UINT bmlocal5226_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5225_acc_bytes = 0;\
	bmlocal5226_acc_bits = 0;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5223_tmp_bytes, bmlocal5224_tmp_bits );\
	bmlocal5225_acc_bytes += bmlocal5223_tmp_bytes;\
	bmlocal5226_acc_bits += bmlocal5224_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, bmlocal5223_tmp_bytes, bmlocal5224_tmp_bits );\
	bmlocal5225_acc_bytes += bmlocal5223_tmp_bytes;\
	bmlocal5226_acc_bits += bmlocal5224_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5225_acc_bytes );\
	out_bitoff += bmlocal5226_acc_bits;\
}

#define BM_PerCIN_BWRStatus_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5227_tmp_bitoff;\
	BM_PerCIN_BWRStatus_r2_GET_POS( base_ptr, out_ptr, bmlocal5227_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5227_tmp_bitoff);\
}

#define BM_PerCIN_BWRStatus_r2_POS_ALIGNED 256

#define BM_PerCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PerCIN_BWRStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5228_tmp_bytes = 0;\
	UINT bmlocal5229_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5228_tmp_bytes, bmlocal5229_tmp_bits );\
	out_bytes += bmlocal5228_tmp_bytes;\
	out_bits += bmlocal5229_tmp_bits;\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, bmlocal5228_tmp_bytes, bmlocal5229_tmp_bits );\
	out_bytes += bmlocal5228_tmp_bytes;\
	out_bits += bmlocal5229_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PerCIN_BWRStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5230_tmp_bits;\
	BM_PerCIN_BWRStatus_GET_SIZE( base_ptr, out_bytes, bmlocal5230_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5230_tmp_bits );\
}

#define BM_PerCIN_BWRStatus_BYTES_SIZE 256

#define BM_PerCIN_BWRStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PerCIN_BWRStatus", 1);\
	BM_PerCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PerCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PerCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_BWRStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_BWRStatus_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PerCIN_VQInfo[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_VQInfo _currentVQInfo[16];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_PerCIN_VQInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_VQInfo _currentVQInfo[16];
} BMS_PerCIN_VQInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PerCIN_VQInfo' Type: 'PerCIN_VQInfo', Top-level, Non-instance, No bitoff root
#define BM_PerCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PerCIN_VQInfo_currentVQInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5231_tmp_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, out_ptr, bmlocal5231_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5231_tmp_bitoff);\
}

#define BM_PerCIN_VQInfo_currentVQInfo_POS_ALIGNED 0

// ARRAY: PerCIN_VQInfo_currentVQInfo
#define BM_PerCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5232_out_ptr;\
	UINT bmlocal5233_out_bitoff;\
	UINT bmlocal5234_element_size_bytes;\
	UINT bmlocal5235_element_size_bits;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, bmlocal5232_out_ptr, bmlocal5233_out_bitoff );\
	bmlocal5234_element_size_bytes = 4;\
	bmlocal5235_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5232_out_ptr) + (idx0) * bmlocal5234_element_size_bytes );\
	out_bitoff = bmlocal5233_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5235_element_size_bits );\
}

// COMPOSITE: Full name: 'PerCIN_VQInfo_currentVQInfo' Type: 'VQInfo', Inner, Non-instance, No bitoff root
#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5236_parent_out_ptr;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5236_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5236_parent_out_ptr;\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5237_tmp_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, out_ptr, bmlocal5237_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5237_tmp_bitoff);\
}

// Alignment of PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5238_my_ptr;\
	UINT bmlocal5239_my_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5238_my_ptr, bmlocal5239_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5238_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5238_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5238_my_ptr, bmlocal5239_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5240_my_ptr;\
	UINT bmlocal5241_my_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5240_my_ptr, bmlocal5241_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5240_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5240_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5240_my_ptr, bmlocal5241_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: IS_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET_DEFAULT accessor is not defined because no default value was specified.
// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: IS_RESET accessor is not defined because no reset value was specified.
// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET_RESET accessor is not defined because no reset value was specified.
// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5242_out_val;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET( base_ptr, idx0, bmlocal5242_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytesPendingInQ", 32, (UINT)(bmlocal5242_out_val), "%d", 1);\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5243_my_ptr;\
	UINT bmlocal5244_my_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5243_my_ptr, bmlocal5244_my_bitoff );\
	(*((UINT32*)bmlocal5243_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5244_my_bitoff );\
}

// PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: Validation accessors are not defined because validation condition was not specified.
#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5245_tmp_bits;\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5245_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5245_tmp_bits );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_BYTES_SIZE 4

#define BM_PerCIN_VQInfo_currentVQInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5248_acc_bytes;\
	UINT bmlocal5249_acc_bits;\
	PVOID bmlocal5250_parent_out_ptr;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5250_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5250_parent_out_ptr;\
	bmlocal5248_acc_bytes = 4;\
	bmlocal5249_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5248_acc_bytes );\
	out_bitoff += bmlocal5249_acc_bits;\
}

#define BM_PerCIN_VQInfo_currentVQInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5251_tmp_bitoff;\
	BM_PerCIN_VQInfo_currentVQInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5251_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5251_tmp_bitoff);\
}

#define BM_PerCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PerCIN_VQInfo_currentVQInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5254_tmp_bits;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5254_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5254_tmp_bits );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_BYTES_CELL_SIZE 4

#define BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PerCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5255_dim_size0;\
	UINT bmlocal5256_idx0;\
	bmlocal5255_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "currentVQInfo", 1);\
	for( bmlocal5256_idx0=0; bmlocal5256_idx0<bmlocal5255_dim_size0; bmlocal5256_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5256_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5256_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5257_tmp_bits;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5257_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5257_tmp_bits );\
}

#define BM_PerCIN_VQInfo_currentVQInfo_BYTES_SIZE 64

#define BM_PerCIN_VQInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5258_tmp_bytes = 0;\
	UINT bmlocal5259_tmp_bits = 0;\
	UINT bmlocal5260_acc_bytes;\
	UINT bmlocal5261_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5260_acc_bytes = 0;\
	bmlocal5261_acc_bits = 0;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, bmlocal5258_tmp_bytes, bmlocal5259_tmp_bits );\
	bmlocal5260_acc_bytes += bmlocal5258_tmp_bytes;\
	bmlocal5261_acc_bits += bmlocal5259_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5260_acc_bytes );\
	out_bitoff += bmlocal5261_acc_bits;\
}

#define BM_PerCIN_VQInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5262_tmp_bitoff;\
	BM_PerCIN_VQInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal5262_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5262_tmp_bitoff);\
}

#define BM_PerCIN_VQInfo_r2_POS_ALIGNED 64

#define BM_PerCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_VQInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PerCIN_VQInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5263_tmp_bytes = 0;\
	UINT bmlocal5264_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PerCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, bmlocal5263_tmp_bytes, bmlocal5264_tmp_bits );\
	out_bytes += bmlocal5263_tmp_bytes;\
	out_bits += bmlocal5264_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PerCIN_VQInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5265_tmp_bits;\
	BM_PerCIN_VQInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5265_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5265_tmp_bits );\
}

#define BM_PerCIN_VQInfo_BYTES_SIZE 64

#define BM_PerCIN_VQInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PerCIN_VQInfo", 1);\
	BM_PerCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PerCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PerCIN_VQInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PerCIN_VQInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PER_CIN_MonitorInfo_L2[576];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_PerCIN_xDUStatus _perCIN_xDUStatus;
	BMS_PerCIN_BWRStatus _perCIN_BWRStatus;
	BMS_PerCIN_VQInfo _perCIN_VQInfo;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_PER_CIN_MonitorInfo_L2;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_PerCIN_VQInfo _perCIN_VQInfo;
	BMS_PerCIN_BWRStatus _perCIN_BWRStatus;
	BMS_PerCIN_xDUStatus _perCIN_xDUStatus;
} BMS_PER_CIN_MonitorInfo_L2;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2' Type: 'PER_CIN_MonitorInfo_L2', Top-level, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5266_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS( base_ptr, out_ptr, bmlocal5266_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5266_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_POS_ALIGNED 0

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_xDUStatus' Type: 'PerCIN_xDUStatus', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5267_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS( base_ptr, bmlocal5267_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5267_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5268_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, out_ptr, bmlocal5268_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5268_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_POS_ALIGNED 0

// ARRAY: PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5269_out_ptr;\
	UINT bmlocal5270_out_bitoff;\
	UINT bmlocal5271_element_size_bytes;\
	UINT bmlocal5272_element_size_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_POS( base_ptr, bmlocal5269_out_ptr, bmlocal5270_out_bitoff );\
	bmlocal5271_element_size_bytes = 8;\
	bmlocal5272_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5269_out_ptr) + (idx0) * bmlocal5271_element_size_bytes );\
	out_bitoff = bmlocal5270_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5272_element_size_bits );\
}

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo' Type: 'PDUInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5273_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5273_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5273_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5274_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5274_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5274_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5275_my_ptr;\
	UINT bmlocal5276_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5275_my_ptr, bmlocal5276_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5275_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5275_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5275_my_ptr, bmlocal5276_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5277_my_ptr;\
	UINT bmlocal5278_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5277_my_ptr, bmlocal5278_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5277_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5277_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5277_my_ptr, bmlocal5278_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5279_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET( base_ptr, idx0, bmlocal5279_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfTxedPDUs", 32, (UINT)(bmlocal5279_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5280_my_ptr;\
	UINT bmlocal5281_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_POS( base_ptr, idx0, bmlocal5280_my_ptr, bmlocal5281_my_bitoff );\
	(*((UINT32*)bmlocal5280_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5281_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5282_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5282_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5285_acc_bytes;\
	UINT bmlocal5286_acc_bits;\
	PVOID bmlocal5287_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5287_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5287_parent_out_ptr;\
	bmlocal5285_acc_bytes = 4;\
	bmlocal5286_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5285_acc_bytes );\
	out_bitoff += bmlocal5286_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5288_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5288_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5288_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5289_my_ptr;\
	UINT bmlocal5290_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5289_my_ptr, bmlocal5290_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5289_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5289_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5289_my_ptr, bmlocal5290_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5291_my_ptr;\
	UINT bmlocal5292_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5291_my_ptr, bmlocal5292_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5291_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5291_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5291_my_ptr, bmlocal5292_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5293_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET( base_ptr, idx0, bmlocal5293_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5293_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5294_my_ptr;\
	UINT bmlocal5295_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5294_my_ptr, bmlocal5295_my_bitoff );\
	(*((UINT32*)bmlocal5294_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5295_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5296_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5296_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5296_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5299_acc_bytes;\
	UINT bmlocal5300_acc_bits;\
	PVOID bmlocal5301_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5301_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5301_parent_out_ptr;\
	bmlocal5299_acc_bytes = 8;\
	bmlocal5300_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5299_acc_bytes );\
	out_bitoff += bmlocal5300_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5302_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5302_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5302_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5305_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5305_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5305_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_BYTES_CELL_SIZE 8

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_numberOfTxedPDUs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5306_dim_size0;\
	UINT bmlocal5307_idx0;\
	bmlocal5306_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PDUInfo", 1);\
	for( bmlocal5307_idx0=0; bmlocal5307_idx0<bmlocal5306_dim_size0; bmlocal5307_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5307_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5307_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5308_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5308_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5308_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_BYTES_SIZE 128

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5309_tmp_bytes = 0;\
	UINT bmlocal5310_tmp_bits = 0;\
	UINT bmlocal5311_acc_bytes;\
	UINT bmlocal5312_acc_bits;\
	PVOID bmlocal5313_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS( base_ptr, bmlocal5313_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5313_parent_out_ptr;\
	bmlocal5311_acc_bytes = 0;\
	bmlocal5312_acc_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5309_tmp_bytes, bmlocal5310_tmp_bits );\
	bmlocal5311_acc_bytes += bmlocal5309_tmp_bytes;\
	bmlocal5312_acc_bits += bmlocal5310_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5311_acc_bytes );\
	out_bitoff += bmlocal5312_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5314_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, out_ptr, bmlocal5314_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5314_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_POS_ALIGNED 128

// ARRAY: PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5315_out_ptr;\
	UINT bmlocal5316_out_bitoff;\
	UINT bmlocal5317_element_size_bytes;\
	UINT bmlocal5318_element_size_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_POS( base_ptr, bmlocal5315_out_ptr, bmlocal5316_out_bitoff );\
	bmlocal5317_element_size_bytes = 8;\
	bmlocal5318_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5315_out_ptr) + (idx0) * bmlocal5317_element_size_bytes );\
	out_bitoff = bmlocal5316_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5318_element_size_bits );\
}

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo' Type: 'SDUInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5319_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5319_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5319_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5320_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5320_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5320_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5321_my_ptr;\
	UINT bmlocal5322_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5321_my_ptr, bmlocal5322_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5321_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5321_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5321_my_ptr, bmlocal5322_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5323_my_ptr;\
	UINT bmlocal5324_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5323_my_ptr, bmlocal5324_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5323_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5323_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5323_my_ptr, bmlocal5324_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5325_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET( base_ptr, idx0, bmlocal5325_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfAgedSDUs", 32, (UINT)(bmlocal5325_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5326_my_ptr;\
	UINT bmlocal5327_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_POS( base_ptr, idx0, bmlocal5326_my_ptr, bmlocal5327_my_bitoff );\
	(*((UINT32*)bmlocal5326_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5327_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5328_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5328_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5328_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5331_acc_bytes;\
	UINT bmlocal5332_acc_bits;\
	PVOID bmlocal5333_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5333_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5333_parent_out_ptr;\
	bmlocal5331_acc_bytes = 4;\
	bmlocal5332_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5331_acc_bytes );\
	out_bitoff += bmlocal5332_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5334_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5334_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5334_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5335_my_ptr;\
	UINT bmlocal5336_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5335_my_ptr, bmlocal5336_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5335_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5335_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5335_my_ptr, bmlocal5336_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5337_my_ptr;\
	UINT bmlocal5338_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5337_my_ptr, bmlocal5338_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5337_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5337_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5337_my_ptr, bmlocal5338_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5339_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET( base_ptr, idx0, bmlocal5339_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5339_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5340_my_ptr;\
	UINT bmlocal5341_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5340_my_ptr, bmlocal5341_my_bitoff );\
	(*((UINT32*)bmlocal5340_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5341_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5342_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5342_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5342_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5345_acc_bytes;\
	UINT bmlocal5346_acc_bits;\
	PVOID bmlocal5347_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5347_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5347_parent_out_ptr;\
	bmlocal5345_acc_bytes = 8;\
	bmlocal5346_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5345_acc_bytes );\
	out_bitoff += bmlocal5346_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5348_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5348_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5348_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5351_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5351_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5351_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_BYTES_CELL_SIZE 8

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_numberOfAgedSDUs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5352_dim_size0;\
	UINT bmlocal5353_idx0;\
	bmlocal5352_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SDUInfo", 1);\
	for( bmlocal5353_idx0=0; bmlocal5353_idx0<bmlocal5352_dim_size0; bmlocal5353_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5353_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5353_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5354_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5354_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5354_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_BYTES_SIZE 128

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5355_tmp_bytes = 0;\
	UINT bmlocal5356_tmp_bits = 0;\
	UINT bmlocal5357_acc_bytes;\
	UINT bmlocal5358_acc_bits;\
	PVOID bmlocal5359_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_POS( base_ptr, bmlocal5359_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5359_parent_out_ptr;\
	bmlocal5357_acc_bytes = 0;\
	bmlocal5358_acc_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5355_tmp_bytes, bmlocal5356_tmp_bits );\
	bmlocal5357_acc_bytes += bmlocal5355_tmp_bytes;\
	bmlocal5358_acc_bits += bmlocal5356_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, bmlocal5355_tmp_bytes, bmlocal5356_tmp_bits );\
	bmlocal5357_acc_bytes += bmlocal5355_tmp_bytes;\
	bmlocal5358_acc_bits += bmlocal5356_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5357_acc_bytes );\
	out_bitoff += bmlocal5358_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5360_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_GET_POS( base_ptr, out_ptr, bmlocal5360_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5360_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_POS_ALIGNED 256

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5361_tmp_bytes = 0;\
	UINT bmlocal5362_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_GET_SIZE( base_ptr, bmlocal5361_tmp_bytes, bmlocal5362_tmp_bits );\
	out_bytes += bmlocal5361_tmp_bytes;\
	out_bits += bmlocal5362_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_GET_SIZE( base_ptr, bmlocal5361_tmp_bytes, bmlocal5362_tmp_bits );\
	out_bytes += bmlocal5361_tmp_bytes;\
	out_bits += bmlocal5362_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5363_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_GET_SIZE( base_ptr, out_bytes, bmlocal5363_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5363_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_BYTES_SIZE 256

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "perCIN_xDUStatus", 1);\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_PDUInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_SDUInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5366_acc_bytes;\
	UINT bmlocal5367_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5366_acc_bytes = 256;\
	bmlocal5367_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5366_acc_bytes );\
	out_bitoff += bmlocal5367_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5368_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS( base_ptr, out_ptr, bmlocal5368_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5368_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_POS_ALIGNED 256

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_BWRStatus' Type: 'PerCIN_BWRStatus', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5369_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS( base_ptr, bmlocal5369_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5369_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5370_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, out_ptr, bmlocal5370_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5370_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_POS_ALIGNED 256

// ARRAY: PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5371_out_ptr;\
	UINT bmlocal5372_out_bitoff;\
	UINT bmlocal5373_element_size_bytes;\
	UINT bmlocal5374_element_size_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_POS( base_ptr, bmlocal5371_out_ptr, bmlocal5372_out_bitoff );\
	bmlocal5373_element_size_bytes = 8;\
	bmlocal5374_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5371_out_ptr) + (idx0) * bmlocal5373_element_size_bytes );\
	out_bitoff = bmlocal5372_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5374_element_size_bits );\
}

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo' Type: 'BWRInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5375_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5375_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5375_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5376_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5376_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5376_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5377_my_ptr;\
	UINT bmlocal5378_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5377_my_ptr, bmlocal5378_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5377_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5377_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5377_my_ptr, bmlocal5378_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5379_my_ptr;\
	UINT bmlocal5380_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5379_my_ptr, bmlocal5380_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5379_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5379_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5379_my_ptr, bmlocal5380_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5381_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET( base_ptr, idx0, bmlocal5381_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfBWRs", 32, (UINT)(bmlocal5381_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5382_my_ptr;\
	UINT bmlocal5383_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5382_my_ptr, bmlocal5383_my_bitoff );\
	(*((UINT32*)bmlocal5382_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5383_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5384_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5384_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5384_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5387_acc_bytes;\
	UINT bmlocal5388_acc_bits;\
	PVOID bmlocal5389_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5389_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5389_parent_out_ptr;\
	bmlocal5387_acc_bytes = 4;\
	bmlocal5388_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5387_acc_bytes );\
	out_bitoff += bmlocal5388_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5390_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5390_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5390_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5391_my_ptr;\
	UINT bmlocal5392_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5391_my_ptr, bmlocal5392_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5391_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5391_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5391_my_ptr, bmlocal5392_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5393_my_ptr;\
	UINT bmlocal5394_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5393_my_ptr, bmlocal5394_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5393_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5393_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5393_my_ptr, bmlocal5394_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5395_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET( base_ptr, idx0, bmlocal5395_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5395_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5396_my_ptr;\
	UINT bmlocal5397_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5396_my_ptr, bmlocal5397_my_bitoff );\
	(*((UINT32*)bmlocal5396_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5397_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5398_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5398_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5398_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5401_acc_bytes;\
	UINT bmlocal5402_acc_bits;\
	PVOID bmlocal5403_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5403_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5403_parent_out_ptr;\
	bmlocal5401_acc_bytes = 8;\
	bmlocal5402_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5401_acc_bytes );\
	out_bitoff += bmlocal5402_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5404_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5404_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5404_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5407_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5407_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5407_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_BYTES_CELL_SIZE 8

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5408_dim_size0;\
	UINT bmlocal5409_idx0;\
	bmlocal5408_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AggregatedBWRInfo", 1);\
	for( bmlocal5409_idx0=0; bmlocal5409_idx0<bmlocal5408_dim_size0; bmlocal5409_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5409_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5409_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5410_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5410_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5410_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_BYTES_SIZE 128

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5411_tmp_bytes = 0;\
	UINT bmlocal5412_tmp_bits = 0;\
	UINT bmlocal5413_acc_bytes;\
	UINT bmlocal5414_acc_bits;\
	PVOID bmlocal5415_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS( base_ptr, bmlocal5415_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5415_parent_out_ptr;\
	bmlocal5413_acc_bytes = 0;\
	bmlocal5414_acc_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5411_tmp_bytes, bmlocal5412_tmp_bits );\
	bmlocal5413_acc_bytes += bmlocal5411_tmp_bytes;\
	bmlocal5414_acc_bits += bmlocal5412_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5413_acc_bytes );\
	out_bitoff += bmlocal5414_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5416_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, out_ptr, bmlocal5416_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5416_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_POS_ALIGNED 384

// ARRAY: PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 128;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5417_out_ptr;\
	UINT bmlocal5418_out_bitoff;\
	UINT bmlocal5419_element_size_bytes;\
	UINT bmlocal5420_element_size_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_POS( base_ptr, bmlocal5417_out_ptr, bmlocal5418_out_bitoff );\
	bmlocal5419_element_size_bytes = 8;\
	bmlocal5420_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5417_out_ptr) + (idx0) * bmlocal5419_element_size_bytes );\
	out_bitoff = bmlocal5418_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5420_element_size_bits );\
}

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo' Type: 'BWRInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5421_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5421_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5421_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5422_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, out_ptr, bmlocal5422_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5422_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5423_my_ptr;\
	UINT bmlocal5424_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5423_my_ptr, bmlocal5424_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5423_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5423_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5423_my_ptr, bmlocal5424_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5425_my_ptr;\
	UINT bmlocal5426_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5425_my_ptr, bmlocal5426_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5425_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5425_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5425_my_ptr, bmlocal5426_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5427_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET( base_ptr, idx0, bmlocal5427_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfBWRs", 32, (UINT)(bmlocal5427_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5428_my_ptr;\
	UINT bmlocal5429_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_POS( base_ptr, idx0, bmlocal5428_my_ptr, bmlocal5429_my_bitoff );\
	(*((UINT32*)bmlocal5428_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5429_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5430_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5430_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5430_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5433_acc_bytes;\
	UINT bmlocal5434_acc_bits;\
	PVOID bmlocal5435_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5435_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5435_parent_out_ptr;\
	bmlocal5433_acc_bytes = 4;\
	bmlocal5434_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5433_acc_bytes );\
	out_bitoff += bmlocal5434_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5436_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal5436_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5436_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5437_my_ptr;\
	UINT bmlocal5438_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5437_my_ptr, bmlocal5438_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5437_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5437_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5437_my_ptr, bmlocal5438_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5439_my_ptr;\
	UINT bmlocal5440_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5439_my_ptr, bmlocal5440_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5439_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5439_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5439_my_ptr, bmlocal5440_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5441_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET( base_ptr, idx0, bmlocal5441_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytes", 32, (UINT)(bmlocal5441_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5442_my_ptr;\
	UINT bmlocal5443_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_POS( base_ptr, idx0, bmlocal5442_my_ptr, bmlocal5443_my_bitoff );\
	(*((UINT32*)bmlocal5442_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5443_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5444_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5444_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5444_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5447_acc_bytes;\
	UINT bmlocal5448_acc_bits;\
	PVOID bmlocal5449_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5449_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5449_parent_out_ptr;\
	bmlocal5447_acc_bytes = 8;\
	bmlocal5448_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5447_acc_bytes );\
	out_bitoff += bmlocal5448_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5450_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5450_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5450_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5453_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5453_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5453_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_BYTES_CELL_SIZE 8

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_numberOfBWRs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_totalBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5454_dim_size0;\
	UINT bmlocal5455_idx0;\
	bmlocal5454_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "IncrementalBWRInfo", 1);\
	for( bmlocal5455_idx0=0; bmlocal5455_idx0<bmlocal5454_dim_size0; bmlocal5455_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5455_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5455_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5456_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5456_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5456_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_BYTES_SIZE 128

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5457_tmp_bytes = 0;\
	UINT bmlocal5458_tmp_bits = 0;\
	UINT bmlocal5459_acc_bytes;\
	UINT bmlocal5460_acc_bits;\
	PVOID bmlocal5461_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_POS( base_ptr, bmlocal5461_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5461_parent_out_ptr;\
	bmlocal5459_acc_bytes = 0;\
	bmlocal5460_acc_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5457_tmp_bytes, bmlocal5458_tmp_bits );\
	bmlocal5459_acc_bytes += bmlocal5457_tmp_bytes;\
	bmlocal5460_acc_bits += bmlocal5458_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, bmlocal5457_tmp_bytes, bmlocal5458_tmp_bits );\
	bmlocal5459_acc_bytes += bmlocal5457_tmp_bytes;\
	bmlocal5460_acc_bits += bmlocal5458_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5459_acc_bytes );\
	out_bitoff += bmlocal5460_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5462_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_GET_POS( base_ptr, out_ptr, bmlocal5462_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5462_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_POS_ALIGNED 512

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5463_tmp_bytes = 0;\
	UINT bmlocal5464_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_GET_SIZE( base_ptr, bmlocal5463_tmp_bytes, bmlocal5464_tmp_bits );\
	out_bytes += bmlocal5463_tmp_bytes;\
	out_bits += bmlocal5464_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_GET_SIZE( base_ptr, bmlocal5463_tmp_bytes, bmlocal5464_tmp_bits );\
	out_bytes += bmlocal5463_tmp_bytes;\
	out_bits += bmlocal5464_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5465_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_GET_SIZE( base_ptr, out_bytes, bmlocal5465_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5465_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_BYTES_SIZE 256

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "perCIN_BWRStatus", 1);\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_AggregatedBWRInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_IncrementalBWRInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5468_acc_bytes;\
	UINT bmlocal5469_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5468_acc_bytes = 512;\
	bmlocal5469_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5468_acc_bytes );\
	out_bitoff += bmlocal5469_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5470_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_POS( base_ptr, out_ptr, bmlocal5470_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5470_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_POS_ALIGNED 512

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_VQInfo' Type: 'PerCIN_VQInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5471_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_POS( base_ptr, bmlocal5471_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5471_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5472_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, out_ptr, bmlocal5472_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5472_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_POS_ALIGNED 512

// ARRAY: PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5473_out_ptr;\
	UINT bmlocal5474_out_bitoff;\
	UINT bmlocal5475_element_size_bytes;\
	UINT bmlocal5476_element_size_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_POS( base_ptr, bmlocal5473_out_ptr, bmlocal5474_out_bitoff );\
	bmlocal5475_element_size_bytes = 4;\
	bmlocal5476_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5473_out_ptr) + (idx0) * bmlocal5475_element_size_bytes );\
	out_bitoff = bmlocal5474_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5476_element_size_bits );\
}

// COMPOSITE: Full name: 'PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo' Type: 'VQInfo', Inner, Non-instance, No bitoff root
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5477_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5477_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5477_parent_out_ptr;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5478_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, out_ptr, bmlocal5478_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5478_tmp_bitoff);\
}

// Alignment of PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5479_my_ptr;\
	UINT bmlocal5480_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5479_my_ptr, bmlocal5480_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5479_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5479_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5479_my_ptr, bmlocal5480_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5481_my_ptr;\
	UINT bmlocal5482_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5481_my_ptr, bmlocal5482_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5481_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5481_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5481_my_ptr, bmlocal5482_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: IS_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET_DEFAULT accessor is not defined because no default value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: IS_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET_RESET accessor is not defined because no reset value was specified.
// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5483_out_val;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET( base_ptr, idx0, bmlocal5483_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalBytesPendingInQ", 32, (UINT)(bmlocal5483_out_val), "%d", 1);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5484_my_ptr;\
	UINT bmlocal5485_my_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_POS( base_ptr, idx0, bmlocal5484_my_ptr, bmlocal5485_my_bitoff );\
	(*((UINT32*)bmlocal5484_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5485_my_bitoff );\
}

// PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ: Validation accessors are not defined because validation condition was not specified.
#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5486_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5486_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5486_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_BYTES_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5489_acc_bytes;\
	UINT bmlocal5490_acc_bits;\
	PVOID bmlocal5491_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5491_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5491_parent_out_ptr;\
	bmlocal5489_acc_bytes = 4;\
	bmlocal5490_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5489_acc_bytes );\
	out_bitoff += bmlocal5490_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5492_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal5492_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5492_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5495_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5495_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5495_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_BYTES_CELL_SIZE 4

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_totalBytesPendingInQ_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5496_dim_size0;\
	UINT bmlocal5497_idx0;\
	bmlocal5496_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "currentVQInfo", 1);\
	for( bmlocal5497_idx0=0; bmlocal5497_idx0<bmlocal5496_dim_size0; bmlocal5497_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5497_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal5497_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5498_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5498_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5498_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_BYTES_SIZE 64

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5499_tmp_bytes = 0;\
	UINT bmlocal5500_tmp_bits = 0;\
	UINT bmlocal5501_acc_bytes;\
	UINT bmlocal5502_acc_bits;\
	PVOID bmlocal5503_parent_out_ptr;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_POS( base_ptr, bmlocal5503_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5503_parent_out_ptr;\
	bmlocal5501_acc_bytes = 0;\
	bmlocal5502_acc_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, bmlocal5499_tmp_bytes, bmlocal5500_tmp_bits );\
	bmlocal5501_acc_bytes += bmlocal5499_tmp_bytes;\
	bmlocal5502_acc_bits += bmlocal5500_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5501_acc_bytes );\
	out_bitoff += bmlocal5502_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5504_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal5504_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5504_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_POS_ALIGNED 576

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5505_tmp_bytes = 0;\
	UINT bmlocal5506_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_GET_SIZE( base_ptr, bmlocal5505_tmp_bytes, bmlocal5506_tmp_bits );\
	out_bytes += bmlocal5505_tmp_bytes;\
	out_bits += bmlocal5506_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5507_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5507_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5507_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_BYTES_SIZE 64

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "perCIN_VQInfo", 1);\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_currentVQInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5510_acc_bytes;\
	UINT bmlocal5511_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5510_acc_bytes = 576;\
	bmlocal5511_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5510_acc_bytes );\
	out_bitoff += bmlocal5511_acc_bits;\
}

#define BM_PER_CIN_MonitorInfo_L2_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5512_tmp_bitoff;\
	BM_PER_CIN_MonitorInfo_L2_r2_GET_POS( base_ptr, out_ptr, bmlocal5512_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5512_tmp_bitoff);\
}

#define BM_PER_CIN_MonitorInfo_L2_r2_POS_ALIGNED 576

#define BM_PER_CIN_MonitorInfo_L2_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PER_CIN_MonitorInfo_L2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 576;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5515_tmp_bits;\
	BM_PER_CIN_MonitorInfo_L2_GET_SIZE( base_ptr, out_bytes, bmlocal5515_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5515_tmp_bits );\
}

#define BM_PER_CIN_MonitorInfo_L2_BYTES_SIZE 576

#define BM_PER_CIN_MonitorInfo_L2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PER_CIN_MonitorInfo_L2", 1);\
	BM_PER_CIN_MonitorInfo_L2_perCIN_xDUStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_BWRStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_perCIN_VQInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PER_CIN_MonitorInfo_L2_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PER_CIN_MonitorInfo_L2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PER_CIN_MonitorInfo_L2_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CQIParams[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _FrameNumber; //FrameNumber when the transmitted
	INT32 _CQI_Measurement;
	UINT8 _ChannelID : 8;
	UINT8 _IsMIMOReportFlag : 8; //When flag is 0 this is CQI report and when set to 1 this is a MIMO report
	UINT32 : 0;
} BMS_CQIParams; //CQI Params as part of PHY Performance parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0;
	UINT8 _IsMIMOReportFlag : 8; //When flag is 0 this is CQI report and when set to 1 this is a MIMO report
	UINT8 _ChannelID : 8;
	INT32 _CQI_Measurement;
	UINT32 _FrameNumber; //FrameNumber when the transmitted
} BMS_CQIParams; //CQI Params as part of PHY Performance parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'CQIParams' Type: 'CQIParams', Top-level, Non-instance, No bitoff root
#define BM_CQIParams_FrameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CQIParams_FrameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5516_tmp_bitoff;\
	BM_CQIParams_FrameNumber_GET_POS( base_ptr, out_ptr, bmlocal5516_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5516_tmp_bitoff);\
}

#define BM_CQIParams_FrameNumber_POS_ALIGNED 0

// Alignment of CQIParams_FrameNumber: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CQIParams_FrameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_FrameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5517_my_ptr;\
	UINT bmlocal5518_my_bitoff;\
	BM_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5517_my_ptr, bmlocal5518_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5517_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5517_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5517_my_ptr, bmlocal5518_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CQIParams_FrameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5519_my_ptr;\
	UINT bmlocal5520_my_bitoff;\
	BM_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5519_my_ptr, bmlocal5520_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5519_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5519_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5519_my_ptr, bmlocal5520_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CQIParams_FrameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_FrameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_FrameNumber: IS_RESET accessor is not defined because no reset value was specified.
// CQIParams_FrameNumber: SET_RESET accessor is not defined because no reset value was specified.
// CQIParams_FrameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CQIParams_FrameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5521_out_val;\
	BM_CQIParams_FrameNumber_GET( base_ptr, bmlocal5521_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameNumber", 32, (UINT)(bmlocal5521_out_val), "%d", 1);\
}

#define BM_CQIParams_FrameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CQIParams_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5522_my_ptr;\
	UINT bmlocal5523_my_bitoff;\
	BM_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5522_my_ptr, bmlocal5523_my_bitoff );\
	(*((UINT32*)bmlocal5522_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5523_my_bitoff );\
}

// CQIParams_FrameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_CQIParams_FrameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5524_tmp_bits;\
	BM_CQIParams_FrameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal5524_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5524_tmp_bits );\
}

#define BM_CQIParams_FrameNumber_BYTES_SIZE 4

#define BM_CQIParams_CQI_Measurement_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5527_acc_bytes;\
	UINT bmlocal5528_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5527_acc_bytes = 4;\
	bmlocal5528_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5527_acc_bytes );\
	out_bitoff += bmlocal5528_acc_bits;\
}

#define BM_CQIParams_CQI_Measurement_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5529_tmp_bitoff;\
	BM_CQIParams_CQI_Measurement_GET_POS( base_ptr, out_ptr, bmlocal5529_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5529_tmp_bitoff);\
}

#define BM_CQIParams_CQI_Measurement_POS_ALIGNED 4

// Alignment of CQIParams_CQI_Measurement: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CQIParams_CQI_Measurement_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_CQI_Measurement_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5530_my_ptr;\
	UINT bmlocal5531_my_bitoff;\
	BM_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5530_my_ptr, bmlocal5531_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5530_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5530_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5530_my_ptr, bmlocal5531_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_CQIParams_CQI_Measurement_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5532_my_ptr;\
	UINT bmlocal5533_my_bitoff;\
	BM_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5532_my_ptr, bmlocal5533_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5532_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5532_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5532_my_ptr, bmlocal5533_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CQIParams_CQI_Measurement: IS_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_CQI_Measurement: SET_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_CQI_Measurement: IS_RESET accessor is not defined because no reset value was specified.
// CQIParams_CQI_Measurement: SET_RESET accessor is not defined because no reset value was specified.
// CQIParams_CQI_Measurement: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CQIParams_CQI_Measurement: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal5534_out_val;\
	BM_CQIParams_CQI_Measurement_GET( base_ptr, bmlocal5534_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CQI_Measurement", 32, (UINT)(bmlocal5534_out_val), "%d", 1);\
}

#define BM_CQIParams_CQI_Measurement_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CQIParams_CQI_Measurement_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5535_my_ptr;\
	UINT bmlocal5536_my_bitoff;\
	BM_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5535_my_ptr, bmlocal5536_my_bitoff );\
	(*((UINT32*)bmlocal5535_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5536_my_bitoff );\
}

// CQIParams_CQI_Measurement: Validation accessors are not defined because validation condition was not specified.
#define BM_CQIParams_CQI_Measurement_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5537_tmp_bits;\
	BM_CQIParams_CQI_Measurement_GET_SIZE( base_ptr, out_bytes, bmlocal5537_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5537_tmp_bits );\
}

#define BM_CQIParams_CQI_Measurement_BYTES_SIZE 4

#define BM_CQIParams_ChannelID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5540_acc_bytes;\
	UINT bmlocal5541_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5540_acc_bytes = 8;\
	bmlocal5541_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5540_acc_bytes );\
	out_bitoff += bmlocal5541_acc_bits;\
}

#define BM_CQIParams_ChannelID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5542_tmp_bitoff;\
	BM_CQIParams_ChannelID_GET_POS( base_ptr, out_ptr, bmlocal5542_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5542_tmp_bitoff);\
}

#define BM_CQIParams_ChannelID_POS_ALIGNED 8

// Alignment of CQIParams_ChannelID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CQIParams_ChannelID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_ChannelID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5543_my_ptr;\
	UINT bmlocal5544_my_bitoff;\
	BM_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5543_my_ptr, bmlocal5544_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5543_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5543_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5543_my_ptr, bmlocal5544_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_CQIParams_ChannelID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5545_my_ptr;\
	UINT bmlocal5546_my_bitoff;\
	BM_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5545_my_ptr, bmlocal5546_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5545_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5545_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5545_my_ptr, bmlocal5546_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// CQIParams_ChannelID: IS_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_ChannelID: SET_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_ChannelID: IS_RESET accessor is not defined because no reset value was specified.
// CQIParams_ChannelID: SET_RESET accessor is not defined because no reset value was specified.
// CQIParams_ChannelID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CQIParams_ChannelID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5547_out_val;\
	BM_CQIParams_ChannelID_GET( base_ptr, bmlocal5547_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ChannelID", 8, (UINT)(bmlocal5547_out_val), "%d", 1);\
}

#define BM_CQIParams_ChannelID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CQIParams_ChannelID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5548_my_ptr;\
	UINT bmlocal5549_my_bitoff;\
	BM_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5548_my_ptr, bmlocal5549_my_bitoff );\
	(*((UINT8*)bmlocal5548_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5549_my_bitoff );\
}

// CQIParams_ChannelID: Validation accessors are not defined because validation condition was not specified.
#define BM_CQIParams_ChannelID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5550_tmp_bits;\
	BM_CQIParams_ChannelID_GET_SIZE( base_ptr, out_bytes, bmlocal5550_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5550_tmp_bits );\
}

#define BM_CQIParams_ChannelID_BYTES_SIZE 1

#define BM_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5553_acc_bytes;\
	UINT bmlocal5554_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5553_acc_bytes = 9;\
	bmlocal5554_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5553_acc_bytes );\
	out_bitoff += bmlocal5554_acc_bits;\
}

#define BM_CQIParams_IsMIMOReportFlag_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5555_tmp_bitoff;\
	BM_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, out_ptr, bmlocal5555_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5555_tmp_bitoff);\
}

#define BM_CQIParams_IsMIMOReportFlag_POS_ALIGNED 9

// Alignment of CQIParams_IsMIMOReportFlag: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CQIParams_IsMIMOReportFlag_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_IsMIMOReportFlag_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5556_my_ptr;\
	UINT bmlocal5557_my_bitoff;\
	BM_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5556_my_ptr, bmlocal5557_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5556_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5556_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5556_my_ptr, bmlocal5557_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_CQIParams_IsMIMOReportFlag_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5558_my_ptr;\
	UINT bmlocal5559_my_bitoff;\
	BM_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5558_my_ptr, bmlocal5559_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5558_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5558_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5558_my_ptr, bmlocal5559_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// CQIParams_IsMIMOReportFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_IsMIMOReportFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// CQIParams_IsMIMOReportFlag: IS_RESET accessor is not defined because no reset value was specified.
// CQIParams_IsMIMOReportFlag: SET_RESET accessor is not defined because no reset value was specified.
// CQIParams_IsMIMOReportFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CQIParams_IsMIMOReportFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5560_out_val;\
	BM_CQIParams_IsMIMOReportFlag_GET( base_ptr, bmlocal5560_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "IsMIMOReportFlag", 8, (UINT)(bmlocal5560_out_val), "%d", 1);\
}

#define BM_CQIParams_IsMIMOReportFlag_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CQIParams_IsMIMOReportFlag_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5561_my_ptr;\
	UINT bmlocal5562_my_bitoff;\
	BM_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5561_my_ptr, bmlocal5562_my_bitoff );\
	(*((UINT8*)bmlocal5561_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5562_my_bitoff );\
}

// CQIParams_IsMIMOReportFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_CQIParams_IsMIMOReportFlag_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5563_tmp_bits;\
	BM_CQIParams_IsMIMOReportFlag_GET_SIZE( base_ptr, out_bytes, bmlocal5563_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5563_tmp_bits );\
}

#define BM_CQIParams_IsMIMOReportFlag_BYTES_SIZE 1

#define BM_CQIParams_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5566_acc_bytes;\
	UINT bmlocal5567_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5566_acc_bytes = 10;\
	bmlocal5567_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5566_acc_bytes );\
	out_bitoff += bmlocal5567_acc_bits;\
}

#define BM_CQIParams_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5568_tmp_bitoff;\
	BM_CQIParams_Reserved_GET_POS( base_ptr, out_ptr, bmlocal5568_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5568_tmp_bitoff);\
}

#define BM_CQIParams_Reserved_POS_ALIGNED 10

#define BM_CQIParams_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-Reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_CQIParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5571_tmp_bits;\
	BM_CQIParams_GET_SIZE( base_ptr, out_bytes, bmlocal5571_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5571_tmp_bits );\
}

#define BM_CQIParams_BYTES_SIZE 12

#define BM_CQIParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CQIParams", 1);\
	BM_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CQIParams_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CQIParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CQIParams_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 L2_LAM_Events_MonitorInfo[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_CQIParams _CQIParams;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_L2_LAM_Events_MonitorInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_CQIParams _CQIParams;
} BMS_L2_LAM_Events_MonitorInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L2_LAM_Events_MonitorInfo' Type: 'L2_LAM_Events_MonitorInfo', Top-level, Non-instance, No bitoff root
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5572_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, out_ptr, bmlocal5572_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5572_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_POS_ALIGNED 0

// COMPOSITE: Full name: 'L2_LAM_Events_MonitorInfo_CQIParams' Type: 'CQIParams', Inner, Non-instance, No bitoff root
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5573_parent_out_ptr;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, bmlocal5573_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5573_parent_out_ptr;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5574_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS( base_ptr, out_ptr, bmlocal5574_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5574_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_POS_ALIGNED 0

// Alignment of L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5575_my_ptr;\
	UINT bmlocal5576_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5575_my_ptr, bmlocal5576_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5575_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5575_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5575_my_ptr, bmlocal5576_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5577_my_ptr;\
	UINT bmlocal5578_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5577_my_ptr, bmlocal5578_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5577_my_ptr, bmlocal5578_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: IS_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: SET_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5579_out_val;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET( base_ptr, bmlocal5579_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameNumber", 32, (UINT)(bmlocal5579_out_val), "%d", 1);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5580_my_ptr;\
	UINT bmlocal5581_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_POS( base_ptr, bmlocal5580_my_ptr, bmlocal5581_my_bitoff );\
	(*((UINT32*)bmlocal5580_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5581_my_bitoff );\
}

// L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5582_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal5582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5582_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_BYTES_SIZE 4

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5585_acc_bytes;\
	UINT bmlocal5586_acc_bits;\
	PVOID bmlocal5587_parent_out_ptr;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, bmlocal5587_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5587_parent_out_ptr;\
	bmlocal5585_acc_bytes = 4;\
	bmlocal5586_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5585_acc_bytes );\
	out_bitoff += bmlocal5586_acc_bits;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5588_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS( base_ptr, out_ptr, bmlocal5588_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5588_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_POS_ALIGNED 4

// Alignment of L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5589_my_ptr;\
	UINT bmlocal5590_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5589_my_ptr, bmlocal5590_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5589_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5589_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5589_my_ptr, bmlocal5590_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5591_my_ptr;\
	UINT bmlocal5592_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5591_my_ptr, bmlocal5592_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5591_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5591_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5591_my_ptr, bmlocal5592_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: IS_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: SET_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal5593_out_val;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET( base_ptr, bmlocal5593_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CQI_Measurement", 32, (UINT)(bmlocal5593_out_val), "%d", 1);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5594_my_ptr;\
	UINT bmlocal5595_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_POS( base_ptr, bmlocal5594_my_ptr, bmlocal5595_my_bitoff );\
	(*((UINT32*)bmlocal5594_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5595_my_bitoff );\
}

// L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5596_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_GET_SIZE( base_ptr, out_bytes, bmlocal5596_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5596_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_BYTES_SIZE 4

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5599_acc_bytes;\
	UINT bmlocal5600_acc_bits;\
	PVOID bmlocal5601_parent_out_ptr;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, bmlocal5601_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5601_parent_out_ptr;\
	bmlocal5599_acc_bytes = 8;\
	bmlocal5600_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5599_acc_bytes );\
	out_bitoff += bmlocal5600_acc_bits;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5602_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS( base_ptr, out_ptr, bmlocal5602_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5602_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_POS_ALIGNED 8

// Alignment of L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5603_my_ptr;\
	UINT bmlocal5604_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5603_my_ptr, bmlocal5604_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5603_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5603_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5603_my_ptr, bmlocal5604_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5605_my_ptr;\
	UINT bmlocal5606_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5605_my_ptr, bmlocal5606_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5605_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5605_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5605_my_ptr, bmlocal5606_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: IS_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: SET_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5607_out_val;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET( base_ptr, bmlocal5607_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ChannelID", 8, (UINT)(bmlocal5607_out_val), "%d", 1);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5608_my_ptr;\
	UINT bmlocal5609_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_POS( base_ptr, bmlocal5608_my_ptr, bmlocal5609_my_bitoff );\
	(*((UINT8*)bmlocal5608_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5609_my_bitoff );\
}

// L2_LAM_Events_MonitorInfo_CQIParams_ChannelID: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5610_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_GET_SIZE( base_ptr, out_bytes, bmlocal5610_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5610_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_BYTES_SIZE 1

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5613_acc_bytes;\
	UINT bmlocal5614_acc_bits;\
	PVOID bmlocal5615_parent_out_ptr;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, bmlocal5615_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5615_parent_out_ptr;\
	bmlocal5613_acc_bytes = 9;\
	bmlocal5614_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5613_acc_bytes );\
	out_bitoff += bmlocal5614_acc_bits;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5616_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, out_ptr, bmlocal5616_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5616_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_POS_ALIGNED 9

// Alignment of L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5617_my_ptr;\
	UINT bmlocal5618_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5617_my_ptr, bmlocal5618_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5617_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5617_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5617_my_ptr, bmlocal5618_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5619_my_ptr;\
	UINT bmlocal5620_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5619_my_ptr, bmlocal5620_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5619_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5619_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5619_my_ptr, bmlocal5620_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: IS_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: SET_RESET accessor is not defined because no reset value was specified.
// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5621_out_val;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET( base_ptr, bmlocal5621_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "IsMIMOReportFlag", 8, (UINT)(bmlocal5621_out_val), "%d", 1);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5622_my_ptr;\
	UINT bmlocal5623_my_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_POS( base_ptr, bmlocal5622_my_ptr, bmlocal5623_my_bitoff );\
	(*((UINT8*)bmlocal5622_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5623_my_bitoff );\
}

// L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5624_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_GET_SIZE( base_ptr, out_bytes, bmlocal5624_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5624_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_BYTES_SIZE 1

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5627_acc_bytes;\
	UINT bmlocal5628_acc_bits;\
	PVOID bmlocal5629_parent_out_ptr;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_POS( base_ptr, bmlocal5629_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5629_parent_out_ptr;\
	bmlocal5627_acc_bytes = 10;\
	bmlocal5628_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5627_acc_bytes );\
	out_bitoff += bmlocal5628_acc_bits;\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5630_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_GET_POS( base_ptr, out_ptr, bmlocal5630_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5630_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_POS_ALIGNED 10

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-Reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5633_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_GET_SIZE( base_ptr, out_bytes, bmlocal5633_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5633_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_BYTES_SIZE 12

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CQIParams", 1);\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_FrameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_CQI_Measurement_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_ChannelID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_IsMIMOReportFlag_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_CQIParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_LAM_Events_MonitorInfo_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5636_acc_bytes;\
	UINT bmlocal5637_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5636_acc_bytes = 12;\
	bmlocal5637_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5636_acc_bytes );\
	out_bitoff += bmlocal5637_acc_bits;\
}

#define BM_L2_LAM_Events_MonitorInfo_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5638_tmp_bitoff;\
	BM_L2_LAM_Events_MonitorInfo_r2_GET_POS( base_ptr, out_ptr, bmlocal5638_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5638_tmp_bitoff);\
}

#define BM_L2_LAM_Events_MonitorInfo_r2_POS_ALIGNED 12

#define BM_L2_LAM_Events_MonitorInfo_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L2_LAM_Events_MonitorInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5641_tmp_bits;\
	BM_L2_LAM_Events_MonitorInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5641_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5641_tmp_bits );\
}

#define BM_L2_LAM_Events_MonitorInfo_BYTES_SIZE 12

#define BM_L2_LAM_Events_MonitorInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L2_LAM_Events_MonitorInfo", 1);\
	BM_L2_LAM_Events_MonitorInfo_CQIParams_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L2_LAM_Events_MonitorInfo_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L2_LAM_Events_MonitorInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L2_LAM_Events_MonitorInfo_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L2DMMONITORGROUPS_H_ */

