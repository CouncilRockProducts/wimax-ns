/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:08 AM
 *
 * Project : Ofer
 * Module  : LTA Interface
 * Author  : Brill Oran, Ben-Senior Udi, Elad Ben-Israel
 * Date    : 14/5/2006
 * Purpose : Application (ChipLab) interface to L1 test agent
 *****************************************************************************/

#if !defined(_BITMAN_MONITORFILTER_H_)
#define _BITMAN_MONITORFILTER_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef UINT8 Moc_L1MonFilter[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _MonitorType; //0 - burstInfo, 1 - frameStartInfo, 2 - frameEndInfo, 3 - phy1Info, 4 - phy2Info, 5 - phy3Info
	UINT32 _ReportRate;
} BMS_Moc_L1MonFilter;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _ReportRate;
	UINT32 _MonitorType; //0 - burstInfo, 1 - frameStartInfo, 2 - frameEndInfo, 3 - phy1Info, 4 - phy2Info, 5 - phy3Info
} BMS_Moc_L1MonFilter;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'Moc_L1MonFilter' Type: 'Moc_L1MonFilter', Top-level, Non-instance, No bitoff root
#define BM_Moc_L1MonFilter_MonitorType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Moc_L1MonFilter_MonitorType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal0_tmp_bitoff;\
	BM_Moc_L1MonFilter_MonitorType_GET_POS( base_ptr, out_ptr, bmlocal0_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal0_tmp_bitoff);\
}

#define BM_Moc_L1MonFilter_MonitorType_POS_ALIGNED 0

// Alignment of Moc_L1MonFilter_MonitorType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Moc_L1MonFilter_MonitorType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Moc_L1MonFilter_MonitorType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1_my_ptr;\
	UINT bmlocal2_my_bitoff;\
	BM_Moc_L1MonFilter_MonitorType_GET_POS( base_ptr, bmlocal1_my_ptr, bmlocal2_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1_my_ptr, bmlocal2_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_Moc_L1MonFilter_MonitorType_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal3_tmp_var;
	BM_Moc_L1MonFilter_MonitorType_GET( base_ptr, bmlocal3_tmp_var );
	return bmlocal3_tmp_var;
}

#define BM_Moc_L1MonFilter_MonitorType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4_my_ptr;\
	UINT bmlocal5_my_bitoff;\
	BM_Moc_L1MonFilter_MonitorType_GET_POS( base_ptr, bmlocal4_my_ptr, bmlocal5_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4_my_ptr, bmlocal5_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Moc_L1MonFilter_MonitorType: IS_DEFAULT accessor is not defined because no default value was specified.
// Moc_L1MonFilter_MonitorType: SET_DEFAULT accessor is not defined because no default value was specified.
// Moc_L1MonFilter_MonitorType: IS_RESET accessor is not defined because no reset value was specified.
// Moc_L1MonFilter_MonitorType: SET_RESET accessor is not defined because no reset value was specified.
// Moc_L1MonFilter_MonitorType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Moc_L1MonFilter_MonitorType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Moc_L1MonFilter_MonitorType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6_out_val;\
	BM_Moc_L1MonFilter_MonitorType_GET( base_ptr, bmlocal6_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MonitorType", 32, (UINT)(bmlocal6_out_val), "%d", 1);\
}

#define BM_Moc_L1MonFilter_MonitorType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Moc_L1MonFilter_MonitorType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Moc_L1MonFilter_MonitorType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7_my_ptr;\
	UINT bmlocal8_my_bitoff;\
	BM_Moc_L1MonFilter_MonitorType_GET_POS( base_ptr, bmlocal7_my_ptr, bmlocal8_my_bitoff );\
	(*((UINT32*)bmlocal7_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8_my_bitoff );\
}

// Moc_L1MonFilter_MonitorType: Validation accessors are not defined because validation condition was not specified.
#define BM_Moc_L1MonFilter_MonitorType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9_tmp_bits;\
	BM_Moc_L1MonFilter_MonitorType_GET_SIZE( base_ptr, out_bytes, bmlocal9_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9_tmp_bits );\
}

#define BM_Moc_L1MonFilter_MonitorType_BYTES_SIZE 4

#define BM_Moc_L1MonFilter_ReportRate_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12_acc_bytes;\
	UINT bmlocal13_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12_acc_bytes = 4;\
	bmlocal13_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12_acc_bytes );\
	out_bitoff += bmlocal13_acc_bits;\
}

#define BM_Moc_L1MonFilter_ReportRate_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14_tmp_bitoff;\
	BM_Moc_L1MonFilter_ReportRate_GET_POS( base_ptr, out_ptr, bmlocal14_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14_tmp_bitoff);\
}

#define BM_Moc_L1MonFilter_ReportRate_POS_ALIGNED 4

// Alignment of Moc_L1MonFilter_ReportRate: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Moc_L1MonFilter_ReportRate_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Moc_L1MonFilter_ReportRate_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal15_my_ptr;\
	UINT bmlocal16_my_bitoff;\
	BM_Moc_L1MonFilter_ReportRate_GET_POS( base_ptr, bmlocal15_my_ptr, bmlocal16_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal15_my_ptr, bmlocal16_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_Moc_L1MonFilter_ReportRate_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal17_tmp_var;
	BM_Moc_L1MonFilter_ReportRate_GET( base_ptr, bmlocal17_tmp_var );
	return bmlocal17_tmp_var;
}

#define BM_Moc_L1MonFilter_ReportRate_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal18_my_ptr;\
	UINT bmlocal19_my_bitoff;\
	BM_Moc_L1MonFilter_ReportRate_GET_POS( base_ptr, bmlocal18_my_ptr, bmlocal19_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal18_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal18_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal18_my_ptr, bmlocal19_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Moc_L1MonFilter_ReportRate: IS_DEFAULT accessor is not defined because no default value was specified.
// Moc_L1MonFilter_ReportRate: SET_DEFAULT accessor is not defined because no default value was specified.
// Moc_L1MonFilter_ReportRate: IS_RESET accessor is not defined because no reset value was specified.
// Moc_L1MonFilter_ReportRate: SET_RESET accessor is not defined because no reset value was specified.
// Moc_L1MonFilter_ReportRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Moc_L1MonFilter_ReportRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Moc_L1MonFilter_ReportRate_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal20_out_val;\
	BM_Moc_L1MonFilter_ReportRate_GET( base_ptr, bmlocal20_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ReportRate", 32, (UINT)(bmlocal20_out_val), "%d", 1);\
}

#define BM_Moc_L1MonFilter_ReportRate_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Moc_L1MonFilter_ReportRate_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Moc_L1MonFilter_ReportRate_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal21_my_ptr;\
	UINT bmlocal22_my_bitoff;\
	BM_Moc_L1MonFilter_ReportRate_GET_POS( base_ptr, bmlocal21_my_ptr, bmlocal22_my_bitoff );\
	(*((UINT32*)bmlocal21_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal22_my_bitoff );\
}

// Moc_L1MonFilter_ReportRate: Validation accessors are not defined because validation condition was not specified.
#define BM_Moc_L1MonFilter_ReportRate_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal23_tmp_bits;\
	BM_Moc_L1MonFilter_ReportRate_GET_SIZE( base_ptr, out_bytes, bmlocal23_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal23_tmp_bits );\
}

#define BM_Moc_L1MonFilter_ReportRate_BYTES_SIZE 4

#define BM_Moc_L1MonFilter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Moc_L1MonFilter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal26_tmp_bits;\
	BM_Moc_L1MonFilter_GET_SIZE( base_ptr, out_bytes, bmlocal26_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal26_tmp_bits );\
}

#define BM_Moc_L1MonFilter_BYTES_SIZE 8

#define BM_Moc_L1MonFilter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Moc_L1MonFilter", 1);\
	BM_Moc_L1MonFilter_MonitorType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Moc_L1MonFilter_ReportRate_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Moc_L1MonFilter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Moc_L1MonFilter_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_MONITORFILTER_H_ */

