/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:07 AM
 *
 * Project : Ofer
 * Module  : Monitor General
 * Author  : Nir BM
 * Date    : 14/5/2006
 *****************************************************************************/

#if !defined(_BITMAN_MONITORGENERAL_H_)
#define _BITMAN_MONITORGENERAL_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "L3L4TlvTypes.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define TRACE_SEVERITIES_TABLE_SIZE (256)

#define MONITOR_FILTER_TABLE_SIZE ((L3L4_TLV_TYPE_MONITOR_END - L3L4_TLV_TYPE_MONITOR_START - 1))

#define MONITOR_FIRST_FILTER_TYPE ((L3L4_TLV_TYPE_MONITOR_START + 1))

typedef UINT8 BSTComplete[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _FrameNumber; //Frame resolution timer
	UINT32 _uSecInFrame; //Micro Second within a frame
} BMS_BSTComplete;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _uSecInFrame; //Micro Second within a frame
	UINT32 _FrameNumber; //Frame resolution timer
} BMS_BSTComplete;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BSTComplete' Type: 'BSTComplete', Top-level, Non-instance, No bitoff root
#define BM_BSTComplete_FrameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BSTComplete_FrameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal0_tmp_bitoff;\
	BM_BSTComplete_FrameNumber_GET_POS( base_ptr, out_ptr, bmlocal0_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal0_tmp_bitoff);\
}

#define BM_BSTComplete_FrameNumber_POS_ALIGNED 0

// Alignment of BSTComplete_FrameNumber: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BSTComplete_FrameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTComplete_FrameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1_my_ptr;\
	UINT bmlocal2_my_bitoff;\
	BM_BSTComplete_FrameNumber_GET_POS( base_ptr, bmlocal1_my_ptr, bmlocal2_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+1) ), 0, 8, 8));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+2) ), 0, 8, 16));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+3) ), 0, 8, 24));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+1) ), 0, 8, 8));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+2) ), 0, 8, 16));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1_my_ptr)+3) ), 0, 8, 24));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1_my_ptr, bmlocal2_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_BSTComplete_FrameNumber_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal3_tmp_var;
	BM_BSTComplete_FrameNumber_GET( base_ptr, bmlocal3_tmp_var );
	return bmlocal3_tmp_var;
}

#define BM_BSTComplete_FrameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4_my_ptr;\
	UINT bmlocal5_my_bitoff;\
	BM_BSTComplete_FrameNumber_GET_POS( base_ptr, bmlocal4_my_ptr, bmlocal5_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+2 ), (in_val), 0, 16, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+2 ), (in_val), 0, 16, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4_my_ptr, bmlocal5_my_bitoff, 32, in_val, 0xFFFFFFFF );\
	}\
}

// BSTComplete_FrameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// BSTComplete_FrameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// BSTComplete_FrameNumber: IS_RESET accessor is not defined because no reset value was specified.
// BSTComplete_FrameNumber: SET_RESET accessor is not defined because no reset value was specified.
// BSTComplete_FrameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BSTComplete_FrameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BSTComplete_FrameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6_out_val;\
	BM_BSTComplete_FrameNumber_GET( base_ptr, bmlocal6_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameNumber", 32, (UINT)(bmlocal6_out_val), "%d", 1);\
}

#define BM_BSTComplete_FrameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTComplete_FrameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_BSTComplete_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7_val;\
	BM_BSTComplete_FrameNumber_GET( base_ptr, bmlocal7_val );\
	(bmlocal7_val)++;\
	BM_BSTComplete_FrameNumber_SET( base_ptr, bmlocal7_val );\
}

#else // NOT __arm || __arc
#define BM_BSTComplete_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8_my_ptr;\
	UINT bmlocal9_my_bitoff;\
	BM_BSTComplete_FrameNumber_GET_POS( base_ptr, bmlocal8_my_ptr, bmlocal9_my_bitoff );\
	(*((UINT32*)bmlocal8_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9_my_bitoff );\
}

#endif
// BSTComplete_FrameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_BSTComplete_FrameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10_tmp_bits;\
	BM_BSTComplete_FrameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal10_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10_tmp_bits );\
}

#define BM_BSTComplete_FrameNumber_BYTES_SIZE 4

#define BM_BSTComplete_uSecInFrame_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13_acc_bytes;\
	UINT bmlocal14_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13_acc_bytes = 4;\
	bmlocal14_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13_acc_bytes );\
	out_bitoff += bmlocal14_acc_bits;\
}

#define BM_BSTComplete_uSecInFrame_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal15_tmp_bitoff;\
	BM_BSTComplete_uSecInFrame_GET_POS( base_ptr, out_ptr, bmlocal15_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal15_tmp_bitoff);\
}

#define BM_BSTComplete_uSecInFrame_POS_ALIGNED 4

// Alignment of BSTComplete_uSecInFrame: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BSTComplete_uSecInFrame_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTComplete_uSecInFrame_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal16_my_ptr;\
	UINT bmlocal17_my_bitoff;\
	BM_BSTComplete_uSecInFrame_GET_POS( base_ptr, bmlocal16_my_ptr, bmlocal17_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+1) ), 0, 8, 8));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+2) ), 0, 8, 16));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+3) ), 0, 8, 24));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+1) ), 0, 8, 8));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+2) ), 0, 8, 16));\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal16_my_ptr)+3) ), 0, 8, 24));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal16_my_ptr, bmlocal17_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_BSTComplete_uSecInFrame_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal18_tmp_var;
	BM_BSTComplete_uSecInFrame_GET( base_ptr, bmlocal18_tmp_var );
	return bmlocal18_tmp_var;
}

#define BM_BSTComplete_uSecInFrame_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal19_my_ptr;\
	UINT bmlocal20_my_bitoff;\
	BM_BSTComplete_uSecInFrame_GET_POS( base_ptr, bmlocal19_my_ptr, bmlocal20_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+2 ), (in_val), 0, 16, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+2 ), (in_val), 0, 16, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal19_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal19_my_ptr, bmlocal20_my_bitoff, 32, in_val, 0xFFFFFFFF );\
	}\
}

// BSTComplete_uSecInFrame: IS_DEFAULT accessor is not defined because no default value was specified.
// BSTComplete_uSecInFrame: SET_DEFAULT accessor is not defined because no default value was specified.
// BSTComplete_uSecInFrame: IS_RESET accessor is not defined because no reset value was specified.
// BSTComplete_uSecInFrame: SET_RESET accessor is not defined because no reset value was specified.
// BSTComplete_uSecInFrame: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BSTComplete_uSecInFrame: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BSTComplete_uSecInFrame_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal21_out_val;\
	BM_BSTComplete_uSecInFrame_GET( base_ptr, bmlocal21_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "uSecInFrame", 32, (UINT)(bmlocal21_out_val), "%d", 1);\
}

#define BM_BSTComplete_uSecInFrame_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTComplete_uSecInFrame_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_BSTComplete_uSecInFrame_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal22_val;\
	BM_BSTComplete_uSecInFrame_GET( base_ptr, bmlocal22_val );\
	(bmlocal22_val)++;\
	BM_BSTComplete_uSecInFrame_SET( base_ptr, bmlocal22_val );\
}

#else // NOT __arm || __arc
#define BM_BSTComplete_uSecInFrame_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal23_my_ptr;\
	UINT bmlocal24_my_bitoff;\
	BM_BSTComplete_uSecInFrame_GET_POS( base_ptr, bmlocal23_my_ptr, bmlocal24_my_bitoff );\
	(*((UINT32*)bmlocal23_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal24_my_bitoff );\
}

#endif
// BSTComplete_uSecInFrame: Validation accessors are not defined because validation condition was not specified.
#define BM_BSTComplete_uSecInFrame_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal25_tmp_bits;\
	BM_BSTComplete_uSecInFrame_GET_SIZE( base_ptr, out_bytes, bmlocal25_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal25_tmp_bits );\
}

#define BM_BSTComplete_uSecInFrame_BYTES_SIZE 4

#define BM_BSTComplete_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTComplete_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal28_tmp_bits;\
	BM_BSTComplete_GET_SIZE( base_ptr, out_bytes, bmlocal28_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal28_tmp_bits );\
}

#define BM_BSTComplete_BYTES_SIZE 8

#define BM_BSTComplete_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BSTComplete", 1);\
	BM_BSTComplete_FrameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BSTComplete_uSecInFrame_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTComplete_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTComplete_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BSTCompleteSlim[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _FrameNumber : 16; //Frame resolution timer
	UINT16 _uSecInFrame : 16; //Micro Second within a frame
} BMS_BSTCompleteSlim;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _uSecInFrame : 16; //Micro Second within a frame
	UINT16 _FrameNumber : 16; //Frame resolution timer
} BMS_BSTCompleteSlim;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BSTCompleteSlim' Type: 'BSTCompleteSlim', Top-level, Non-instance, No bitoff root
#define BM_BSTCompleteSlim_FrameNumber_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BSTCompleteSlim_FrameNumber_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal29_tmp_bitoff;\
	BM_BSTCompleteSlim_FrameNumber_GET_POS( base_ptr, out_ptr, bmlocal29_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal29_tmp_bitoff);\
}

#define BM_BSTCompleteSlim_FrameNumber_POS_ALIGNED 0

// Alignment of BSTCompleteSlim_FrameNumber: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BSTCompleteSlim_FrameNumber_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTCompleteSlim_FrameNumber_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal30_my_ptr;\
	UINT bmlocal31_my_bitoff;\
	BM_BSTCompleteSlim_FrameNumber_GET_POS( base_ptr, bmlocal30_my_ptr, bmlocal31_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal30_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal30_my_ptr)+1) ), 0, 8, 8));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal30_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal30_my_ptr)+1) ), 0, 8, 8));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal30_my_ptr, bmlocal31_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_BSTCompleteSlim_FrameNumber_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal32_tmp_var;
	BM_BSTCompleteSlim_FrameNumber_GET( base_ptr, bmlocal32_tmp_var );
	return bmlocal32_tmp_var;
}

#define BM_BSTCompleteSlim_FrameNumber_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal33_my_ptr;\
	UINT bmlocal34_my_bitoff;\
	BM_BSTCompleteSlim_FrameNumber_GET_POS( base_ptr, bmlocal33_my_ptr, bmlocal34_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal33_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal33_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal33_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal33_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal33_my_ptr, bmlocal34_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// BSTCompleteSlim_FrameNumber: IS_DEFAULT accessor is not defined because no default value was specified.
// BSTCompleteSlim_FrameNumber: SET_DEFAULT accessor is not defined because no default value was specified.
// BSTCompleteSlim_FrameNumber: IS_RESET accessor is not defined because no reset value was specified.
// BSTCompleteSlim_FrameNumber: SET_RESET accessor is not defined because no reset value was specified.
// BSTCompleteSlim_FrameNumber: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BSTCompleteSlim_FrameNumber: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BSTCompleteSlim_FrameNumber_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal35_out_val;\
	BM_BSTCompleteSlim_FrameNumber_GET( base_ptr, bmlocal35_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameNumber", 16, (UINT)(bmlocal35_out_val), "%d", 1);\
}

#define BM_BSTCompleteSlim_FrameNumber_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTCompleteSlim_FrameNumber_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_BSTCompleteSlim_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal36_val;\
	BM_BSTCompleteSlim_FrameNumber_GET( base_ptr, bmlocal36_val );\
	(bmlocal36_val)++;\
	BM_BSTCompleteSlim_FrameNumber_SET( base_ptr, bmlocal36_val );\
}

#else // NOT __arm || __arc
#define BM_BSTCompleteSlim_FrameNumber_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal37_my_ptr;\
	UINT bmlocal38_my_bitoff;\
	BM_BSTCompleteSlim_FrameNumber_GET_POS( base_ptr, bmlocal37_my_ptr, bmlocal38_my_bitoff );\
	(*((UINT16*)bmlocal37_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal38_my_bitoff );\
}

#endif
// BSTCompleteSlim_FrameNumber: Validation accessors are not defined because validation condition was not specified.
#define BM_BSTCompleteSlim_FrameNumber_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal39_tmp_bits;\
	BM_BSTCompleteSlim_FrameNumber_GET_SIZE( base_ptr, out_bytes, bmlocal39_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal39_tmp_bits );\
}

#define BM_BSTCompleteSlim_FrameNumber_BYTES_SIZE 2

#define BM_BSTCompleteSlim_uSecInFrame_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal42_acc_bytes;\
	UINT bmlocal43_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal42_acc_bytes = 2;\
	bmlocal43_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal42_acc_bytes );\
	out_bitoff += bmlocal43_acc_bits;\
}

#define BM_BSTCompleteSlim_uSecInFrame_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal44_tmp_bitoff;\
	BM_BSTCompleteSlim_uSecInFrame_GET_POS( base_ptr, out_ptr, bmlocal44_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal44_tmp_bitoff);\
}

#define BM_BSTCompleteSlim_uSecInFrame_POS_ALIGNED 2

// Alignment of BSTCompleteSlim_uSecInFrame: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BSTCompleteSlim_uSecInFrame_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTCompleteSlim_uSecInFrame_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal45_my_ptr;\
	UINT bmlocal46_my_bitoff;\
	BM_BSTCompleteSlim_uSecInFrame_GET_POS( base_ptr, bmlocal45_my_ptr, bmlocal46_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal45_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal45_my_ptr)+1) ), 0, 8, 8));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal45_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal45_my_ptr)+1) ), 0, 8, 8));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal45_my_ptr, bmlocal46_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_BSTCompleteSlim_uSecInFrame_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal47_tmp_var;
	BM_BSTCompleteSlim_uSecInFrame_GET( base_ptr, bmlocal47_tmp_var );
	return bmlocal47_tmp_var;
}

#define BM_BSTCompleteSlim_uSecInFrame_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal48_my_ptr;\
	UINT bmlocal49_my_bitoff;\
	BM_BSTCompleteSlim_uSecInFrame_GET_POS( base_ptr, bmlocal48_my_ptr, bmlocal49_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal48_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal48_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal48_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal48_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal48_my_ptr, bmlocal49_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// BSTCompleteSlim_uSecInFrame: IS_DEFAULT accessor is not defined because no default value was specified.
// BSTCompleteSlim_uSecInFrame: SET_DEFAULT accessor is not defined because no default value was specified.
// BSTCompleteSlim_uSecInFrame: IS_RESET accessor is not defined because no reset value was specified.
// BSTCompleteSlim_uSecInFrame: SET_RESET accessor is not defined because no reset value was specified.
// BSTCompleteSlim_uSecInFrame: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BSTCompleteSlim_uSecInFrame: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BSTCompleteSlim_uSecInFrame_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal50_out_val;\
	BM_BSTCompleteSlim_uSecInFrame_GET( base_ptr, bmlocal50_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "uSecInFrame", 16, (UINT)(bmlocal50_out_val), "%d", 1);\
}

#define BM_BSTCompleteSlim_uSecInFrame_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTCompleteSlim_uSecInFrame_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_BSTCompleteSlim_uSecInFrame_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal51_val;\
	BM_BSTCompleteSlim_uSecInFrame_GET( base_ptr, bmlocal51_val );\
	(bmlocal51_val)++;\
	BM_BSTCompleteSlim_uSecInFrame_SET( base_ptr, bmlocal51_val );\
}

#else // NOT __arm || __arc
#define BM_BSTCompleteSlim_uSecInFrame_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal52_my_ptr;\
	UINT bmlocal53_my_bitoff;\
	BM_BSTCompleteSlim_uSecInFrame_GET_POS( base_ptr, bmlocal52_my_ptr, bmlocal53_my_bitoff );\
	(*((UINT16*)bmlocal52_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal53_my_bitoff );\
}

#endif
// BSTCompleteSlim_uSecInFrame: Validation accessors are not defined because validation condition was not specified.
#define BM_BSTCompleteSlim_uSecInFrame_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal54_tmp_bits;\
	BM_BSTCompleteSlim_uSecInFrame_GET_SIZE( base_ptr, out_bytes, bmlocal54_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal54_tmp_bits );\
}

#define BM_BSTCompleteSlim_uSecInFrame_BYTES_SIZE 2

#define BM_BSTCompleteSlim_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTCompleteSlim_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal57_tmp_bits;\
	BM_BSTCompleteSlim_GET_SIZE( base_ptr, out_bytes, bmlocal57_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal57_tmp_bits );\
}

#define BM_BSTCompleteSlim_BYTES_SIZE 4

#define BM_BSTCompleteSlim_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BSTCompleteSlim", 1);\
	BM_BSTCompleteSlim_FrameNumber_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BSTCompleteSlim_uSecInFrame_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BSTCompleteSlim_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BSTCompleteSlim_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 GenericTlv[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Generic_Type : 16;
	UINT16 _Generic_Length : 16;
} BMS_GenericTlv;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Generic_Length : 16;
	UINT16 _Generic_Type : 16;
} BMS_GenericTlv;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'GenericTlv' Type: 'GenericTlv', Top-level, Non-instance, No bitoff root
#define BM_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_GenericTlv_Generic_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal58_tmp_bitoff;\
	BM_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, bmlocal58_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal58_tmp_bitoff);\
}

#define BM_GenericTlv_Generic_Type_POS_ALIGNED 0

// Alignment of GenericTlv_Generic_Type: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_GenericTlv_Generic_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal59_my_ptr;\
	UINT bmlocal60_my_bitoff;\
	BM_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal59_my_ptr, bmlocal60_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal59_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal59_my_ptr)+1) ), 0, 8, 8));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal59_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal59_my_ptr)+1) ), 0, 8, 8));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal59_my_ptr, bmlocal60_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_GenericTlv_Generic_Type_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal61_tmp_var;
	BM_GenericTlv_Generic_Type_GET( base_ptr, bmlocal61_tmp_var );
	return bmlocal61_tmp_var;
}

#define BM_GenericTlv_Generic_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal62_my_ptr;\
	UINT bmlocal63_my_bitoff;\
	BM_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal62_my_ptr, bmlocal63_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal62_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal62_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal62_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal62_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal62_my_ptr, bmlocal63_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// GenericTlv_Generic_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// GenericTlv_Generic_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// GenericTlv_Generic_Type: IS_RESET accessor is not defined because no reset value was specified.
// GenericTlv_Generic_Type: SET_RESET accessor is not defined because no reset value was specified.
// GenericTlv_Generic_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// GenericTlv_Generic_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal64_out_val;\
	BM_GenericTlv_Generic_Type_GET( base_ptr, bmlocal64_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Type", 16, (UINT)(bmlocal64_out_val), "%d", 1);\
}

#define BM_GenericTlv_Generic_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_GenericTlv_Generic_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal65_val;\
	BM_GenericTlv_Generic_Type_GET( base_ptr, bmlocal65_val );\
	(bmlocal65_val)++;\
	BM_GenericTlv_Generic_Type_SET( base_ptr, bmlocal65_val );\
}

#else // NOT __arm || __arc
#define BM_GenericTlv_Generic_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal66_my_ptr;\
	UINT bmlocal67_my_bitoff;\
	BM_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal66_my_ptr, bmlocal67_my_bitoff );\
	(*((UINT16*)bmlocal66_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal67_my_bitoff );\
}

#endif
// GenericTlv_Generic_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_GenericTlv_Generic_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal68_tmp_bits;\
	BM_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, bmlocal68_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal68_tmp_bits );\
}

#define BM_GenericTlv_Generic_Type_BYTES_SIZE 2

#define BM_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal71_acc_bytes;\
	UINT bmlocal72_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal71_acc_bytes = 2;\
	bmlocal72_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal71_acc_bytes );\
	out_bitoff += bmlocal72_acc_bits;\
}

#define BM_GenericTlv_Generic_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal73_tmp_bitoff;\
	BM_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, bmlocal73_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal73_tmp_bitoff);\
}

#define BM_GenericTlv_Generic_Length_POS_ALIGNED 2

// Alignment of GenericTlv_Generic_Length: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_GenericTlv_Generic_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal74_my_ptr;\
	UINT bmlocal75_my_bitoff;\
	BM_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal74_my_ptr, bmlocal75_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal74_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal74_my_ptr)+1) ), 0, 8, 8));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal74_my_ptr)) ), 0, 8, 0);\
		(out_val) = (UINT16)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal74_my_ptr)+1) ), 0, 8, 8));\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal74_my_ptr, bmlocal75_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_GenericTlv_Generic_Length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal76_tmp_var;
	BM_GenericTlv_Generic_Length_GET( base_ptr, bmlocal76_tmp_var );
	return bmlocal76_tmp_var;
}

#define BM_GenericTlv_Generic_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal77_my_ptr;\
	UINT bmlocal78_my_bitoff;\
	BM_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal77_my_ptr, bmlocal78_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal77_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal77_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal77_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal77_my_ptr)+1 ), (in_val), 0, 8, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal77_my_ptr, bmlocal78_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// GenericTlv_Generic_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// GenericTlv_Generic_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// GenericTlv_Generic_Length: IS_RESET accessor is not defined because no reset value was specified.
// GenericTlv_Generic_Length: SET_RESET accessor is not defined because no reset value was specified.
// GenericTlv_Generic_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// GenericTlv_Generic_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal79_out_val;\
	BM_GenericTlv_Generic_Length_GET( base_ptr, bmlocal79_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Length", 16, (UINT)(bmlocal79_out_val), "%d", 1);\
}

#define BM_GenericTlv_Generic_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_GenericTlv_Generic_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal80_val;\
	BM_GenericTlv_Generic_Length_GET( base_ptr, bmlocal80_val );\
	(bmlocal80_val)++;\
	BM_GenericTlv_Generic_Length_SET( base_ptr, bmlocal80_val );\
}

#else // NOT __arm || __arc
#define BM_GenericTlv_Generic_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal81_my_ptr;\
	UINT bmlocal82_my_bitoff;\
	BM_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal81_my_ptr, bmlocal82_my_bitoff );\
	(*((UINT16*)bmlocal81_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal82_my_bitoff );\
}

#endif
// GenericTlv_Generic_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_GenericTlv_Generic_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal83_tmp_bits;\
	BM_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, bmlocal83_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal83_tmp_bits );\
}

#define BM_GenericTlv_Generic_Length_BYTES_SIZE 2

#define BM_GenericTlv_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_GenericTlv_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal86_tmp_bits;\
	BM_GenericTlv_GET_SIZE( base_ptr, out_bytes, bmlocal86_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal86_tmp_bits );\
}

#define BM_GenericTlv_BYTES_SIZE 4

#define BM_GenericTlv_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "GenericTlv", 1);\
	BM_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_GenericTlv_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_GenericTlv_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorLoss[1];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Target : 8;
} BMS_MonitorLoss; //Empty Monitor Event structure.

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Target : 8;
} BMS_MonitorLoss; //Empty Monitor Event structure.

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorLoss' Type: 'MonitorLoss', Top-level, Non-instance, Including bitoff root
#define BM_MonitorLoss_Target_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of MonitorLoss_Target: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorLoss_Target_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_MonitorLoss_Target_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal87_my_ptr;\
	UINT bmlocal88_my_bitoff;\
	BM_MonitorLoss_Target_GET_POS( base_ptr, base_bitoff, bmlocal87_my_ptr, bmlocal88_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal87_my_ptr, bmlocal88_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_MonitorLoss_Target_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal89_tmp_var;
	BM_MonitorLoss_Target_GET( base_ptr, base_bitoff, bmlocal89_tmp_var );
	return bmlocal89_tmp_var;
}

#define BM_MonitorLoss_Target_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal90_my_ptr;\
	UINT bmlocal91_my_bitoff;\
	BM_MonitorLoss_Target_GET_POS( base_ptr, base_bitoff, bmlocal90_my_ptr, bmlocal91_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal90_my_ptr, bmlocal91_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorLoss_Target: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorLoss_Target: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorLoss_Target: IS_RESET accessor is not defined because no reset value was specified.
// MonitorLoss_Target: SET_RESET accessor is not defined because no reset value was specified.
// MonitorLoss_Target: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorLoss_Target: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorLoss_Target_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal92_out_val;\
	BM_MonitorLoss_Target_GET( base_ptr, base_bitoff, bmlocal92_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Target", 8, (UINT)(bmlocal92_out_val), "%d", 1);\
}

#define BM_MonitorLoss_Target_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_MonitorLoss_Target_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_MonitorLoss_Target_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal93_val;\
	BM_MonitorLoss_Target_GET( base_ptr, base_bitoff, bmlocal93_val );\
	(bmlocal93_val)++;\
	BM_MonitorLoss_Target_SET( base_ptr, base_bitoff, bmlocal93_val );\
}

// MonitorLoss_Target: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorLoss_Target_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal94_tmp_bits;\
	BM_MonitorLoss_Target_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal94_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal94_tmp_bits );\
}

#define BM_MonitorLoss_Target_BYTES_SIZE 1

#define BM_MonitorLoss_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_MonitorLoss_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal97_tmp_bits;\
	BM_MonitorLoss_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal97_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal97_tmp_bits );\
}

#define BM_MonitorLoss_BYTES_SIZE 1

#define BM_MonitorLoss_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorLoss", 1);\
	BM_MonitorLoss_Target_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_MonitorLoss_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_MonitorLoss_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_MONITORGENERAL_H_ */

