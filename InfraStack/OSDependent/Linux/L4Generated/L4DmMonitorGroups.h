/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:01 AM
 *
 * Project : Ofer
 * Module  : L4DmMonitorGroups (L4 Dm Statistics)
 * Author  : Erez Nir
 * Purpose : L4 internal statistics to be reported out for debug use.
 *****************************************************************************/

#if !defined(_BITMAN_L4DMMONITORGROUPS_H_)
#define _BITMAN_L4DMMONITORGROUPS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "L4Common.h"
#include "BM_Chiplab_Common.h"

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define BM_WMX_SUBSCRIBER_ID_MAX_SIZE (100)

#define BM_MAX_EAP_PASSWORD_SIZE (32)

#define BM_WMX_NSP_REALM_MAX_SIZE (100)

#define BM_MAX_TAG_NAME_SIZE (100)

#define BM_MAX_PREAMBLE_SIZE (15)

#define BM_MAX_FILE_NAME_SIZE (50)

#define BM_MAX_PATH (260)

#define BM_MAX_DEV_TYPE_SIZE (64)

#define BM_MAX_VERSION_SIZE (64)

#define BM_MAX_MAN_NAME_SIZE (64)

#define BM_MAX_MOD_NAME_SIZE (64)

#define BM_MAX_DEV_ID_SIZE (64)

#define BM_WMX_NSP_NAME_MAX_SIZE (100)

#define BM_MAX_LOCK_SIZE (176)

typedef enum
{
	BMV_SessionWaitingForBootstrap = 0,
	BMV_SessionBootstrapArrived = 1,
	BMV_SessionStart = 2,
	BMV_SessionEndSuccess = 3,
	BMV_SessionEndFailure = 4,
	BMV_SessionUpdateFailedNetworkDisconnect = 5,
	BMV_SessionUpdateFailedBadAuthentication = 6
} BME_OMAStatus;

typedef enum
{
	BM_EAP_TLS = 13,
	BM_EAP_TTLS = 21,
	BM_EAP_AKA = 23,
	BM_PLAIN_MSCHAPv2 = 256,
	BM_EAP_MSCHAPv2 = 1000,
	BM_CHAP = 7
} BM_EAPType;

typedef enum
{
	BMV_Reserved = 1,
	BMV_OnlyList = 2,
	BMV_ListFirst = 3,
	BMV_Any = 4
} BME_Any;

typedef enum
{
	BMV_FFT_512 = 1,
	BMV_FFT_1024 = 2
} BME_FFT;

typedef enum
{
	BMV_BW_3_5 = 1,
	BMV_BW_5 = 2,
	BMV_BW_7_5 = 3,
	BMV_BW_8_75 = 4,
	BMV_BW_10 = 5,
	BMV_BW_14 = 6,
	BMV_BW_20 = 7
} BME_BW;

typedef enum
{
	BM_StartInd = 1,
	BM_EndInd = 2
} BM_StartEndInd;

typedef enum
{
	BM_dsDownloadIdle = 10,
	BM_dsDownloadFailed = 20,
	BM_dsDownloadProgressing = 30,
	BM_dsDownloadComplete = 40,
	BM_dsReadyToUpdate = 50,
	BM_dsUpdateProgressing = 60,
	BM_dsUpdateFailedHaveData = 70,
	BM_dsUpdateFailedNoData = 80,
	BM_dsUpdateSuccessfulHaveData = 90,
	BM_dsUpdateSuccessfulNoData = 100
} DOWNLOAD_STATE;

typedef enum
{
	BMV_LinkLossType_Short = 0,
	BMV_LinkLossType_Long = 1,
	BMV_LinkLossType_Infinite = 2
} BME_LinkLossInd;

typedef enum
{
	BMV_InstallingMonitorInit = 0,
	BMV_InstallingMonitorSuccess = 1,
	BMV_InstallingMonitorResetRegKey = 2
} BME_MonitorInstallingInd;

typedef UINT8 PreamblesMember[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _Preambles[15];
	UINT8 _Reserved_1 : 8; //Reserved to get to 4 Byte Alignment
} BMS_PreamblesMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Reserved_1 : 8; //Reserved to get to 4 Byte Alignment
	BMS_LittleEndianness_Uint8 _Preambles[15];
} BMS_PreamblesMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PreamblesMember' Type: 'PreamblesMember', Top-level, Non-instance, No bitoff root
#define BM_PreamblesMember_Preambles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PreamblesMember_Preambles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9661_tmp_bitoff;\
	BM_PreamblesMember_Preambles_GET_POS( base_ptr, out_ptr, bmlocal9661_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9661_tmp_bitoff);\
}

#define BM_PreamblesMember_Preambles_POS_ALIGNED 0

// ARRAY: PreamblesMember_Preambles
#define BM_PreamblesMember_Preambles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PreamblesMember_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PreamblesMember_Preambles_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9662_out_ptr;\
	UINT bmlocal9663_out_bitoff;\
	UINT bmlocal9664_element_size_bytes;\
	UINT bmlocal9665_element_size_bits;\
	BM_PreamblesMember_Preambles_GET_POS( base_ptr, bmlocal9662_out_ptr, bmlocal9663_out_bitoff );\
	bmlocal9664_element_size_bytes = 1;\
	bmlocal9665_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9662_out_ptr) + (idx0) * bmlocal9664_element_size_bytes );\
	out_bitoff = bmlocal9663_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9665_element_size_bits );\
}

// COMPOSITE: Full name: 'PreamblesMember_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_PreamblesMember_Preambles_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9666_parent_out_ptr;\
	BM_PreamblesMember_Preambles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9666_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9666_parent_out_ptr;\
}

// Alignment of PreamblesMember_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_PreamblesMember_Preambles_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PreamblesMember_Preambles_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9667_my_ptr;\
	UINT bmlocal9668_my_bitoff;\
	BM_PreamblesMember_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9667_my_ptr, bmlocal9668_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9667_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9667_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9667_my_ptr, bmlocal9668_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_PreamblesMember_Preambles_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9669_my_ptr;\
	UINT bmlocal9670_my_bitoff;\
	BM_PreamblesMember_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9669_my_ptr, bmlocal9670_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9669_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9669_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9669_my_ptr, bmlocal9670_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// PreamblesMember_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// PreamblesMember_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// PreamblesMember_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// PreamblesMember_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// PreamblesMember_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PreamblesMember_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PreamblesMember_Preambles_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9671_out_val;\
	BM_PreamblesMember_Preambles_value_GET( base_ptr, idx0, bmlocal9671_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal9671_out_val), "%u", 1);\
}

#define BM_PreamblesMember_Preambles_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_Preambles_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_PreamblesMember_Preambles_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9672_my_ptr;\
	UINT bmlocal9673_my_bitoff;\
	BM_PreamblesMember_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9672_my_ptr, bmlocal9673_my_bitoff );\
	(*((UINT8*)bmlocal9672_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9673_my_bitoff );\
}

// PreamblesMember_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_PreamblesMember_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9674_tmp_bits;\
	BM_PreamblesMember_Preambles_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9674_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9674_tmp_bits );\
}

#define BM_PreamblesMember_Preambles_value_BYTES_SIZE 1

#define BM_PreamblesMember_Preambles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PreamblesMember_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9677_tmp_bits;\
	BM_PreamblesMember_Preambles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9677_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9677_tmp_bits );\
}

#define BM_PreamblesMember_Preambles_BYTES_CELL_SIZE 1

#define BM_PreamblesMember_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_Preambles_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_PreamblesMember_Preambles_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_PreamblesMember_Preambles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9678_dim_size0;\
	UINT bmlocal9679_idx0;\
	bmlocal9678_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal9679_idx0=0; bmlocal9679_idx0<bmlocal9678_dim_size0; bmlocal9679_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9679_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_PreamblesMember_Preambles_DUMP_DEPTH_IDX( base_ptr, bmlocal9679_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PreamblesMember_Preambles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_Preambles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PreamblesMember_Preambles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9680_tmp_bits;\
	BM_PreamblesMember_Preambles_GET_SIZE( base_ptr, out_bytes, bmlocal9680_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9680_tmp_bits );\
}

#define BM_PreamblesMember_Preambles_BYTES_SIZE 15

#define BM_PreamblesMember_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9681_tmp_bytes = 0;\
	UINT bmlocal9682_tmp_bits = 0;\
	UINT bmlocal9683_acc_bytes;\
	UINT bmlocal9684_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9683_acc_bytes = 0;\
	bmlocal9684_acc_bits = 0;\
	BM_PreamblesMember_Preambles_GET_SIZE( base_ptr, bmlocal9681_tmp_bytes, bmlocal9682_tmp_bits );\
	bmlocal9683_acc_bytes += bmlocal9681_tmp_bytes;\
	bmlocal9684_acc_bits += bmlocal9682_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9683_acc_bytes );\
	out_bitoff += bmlocal9684_acc_bits;\
}

#define BM_PreamblesMember_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9685_tmp_bitoff;\
	BM_PreamblesMember_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal9685_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9685_tmp_bitoff);\
}

#define BM_PreamblesMember_Reserved_1_POS_ALIGNED 15

// Alignment of PreamblesMember_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PreamblesMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PreamblesMember_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9686_my_ptr;\
	UINT bmlocal9687_my_bitoff;\
	BM_PreamblesMember_Reserved_1_GET_POS( base_ptr, bmlocal9686_my_ptr, bmlocal9687_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9686_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9686_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9686_my_ptr, bmlocal9687_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_PreamblesMember_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9688_my_ptr;\
	UINT bmlocal9689_my_bitoff;\
	BM_PreamblesMember_Reserved_1_GET_POS( base_ptr, bmlocal9688_my_ptr, bmlocal9689_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9688_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9688_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9688_my_ptr, bmlocal9689_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// PreamblesMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// PreamblesMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// PreamblesMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// PreamblesMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// PreamblesMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PreamblesMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PreamblesMember_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9690_out_val;\
	BM_PreamblesMember_Reserved_1_GET( base_ptr, bmlocal9690_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal9690_out_val), "%d", 1);\
}

#define BM_PreamblesMember_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PreamblesMember_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9691_my_ptr;\
	UINT bmlocal9692_my_bitoff;\
	BM_PreamblesMember_Reserved_1_GET_POS( base_ptr, bmlocal9691_my_ptr, bmlocal9692_my_bitoff );\
	(*((UINT8*)bmlocal9691_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9692_my_bitoff );\
}

// PreamblesMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_PreamblesMember_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9693_tmp_bits;\
	BM_PreamblesMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal9693_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9693_tmp_bits );\
}

#define BM_PreamblesMember_Reserved_1_BYTES_SIZE 1

#define BM_PreamblesMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9694_tmp_bytes = 0;\
	UINT bmlocal9695_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_PreamblesMember_Preambles_GET_SIZE( base_ptr, bmlocal9694_tmp_bytes, bmlocal9695_tmp_bits );\
	out_bytes += bmlocal9694_tmp_bytes;\
	out_bits += bmlocal9695_tmp_bits;\
}

#define BM_PreamblesMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9696_tmp_bits;\
	BM_PreamblesMember_GET_SIZE( base_ptr, out_bytes, bmlocal9696_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9696_tmp_bits );\
}

#define BM_PreamblesMember_BYTES_SIZE 16

#define BM_PreamblesMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PreamblesMember", 1);\
	BM_PreamblesMember_Preambles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PreamblesMember_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PreamblesMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PreamblesMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ChannelMember[28];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _frequency;
	BME_BW _bw;
	BME_FFT _fft;
	BMS_PreamblesMember _Preambles;
} BMS_ChannelMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_PreamblesMember _Preambles;
	BME_FFT _fft;
	BME_BW _bw;
	UINT32 _frequency;
} BMS_ChannelMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ChannelMember' Type: 'ChannelMember', Top-level, Non-instance, No bitoff root
#define BM_ChannelMember_frequency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ChannelMember_frequency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9697_tmp_bitoff;\
	BM_ChannelMember_frequency_GET_POS( base_ptr, out_ptr, bmlocal9697_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9697_tmp_bitoff);\
}

#define BM_ChannelMember_frequency_POS_ALIGNED 0

// Alignment of ChannelMember_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelMember_frequency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_frequency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9698_my_ptr;\
	UINT bmlocal9699_my_bitoff;\
	BM_ChannelMember_frequency_GET_POS( base_ptr, bmlocal9698_my_ptr, bmlocal9699_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9698_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9698_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9698_my_ptr, bmlocal9699_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelMember_frequency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9700_my_ptr;\
	UINT bmlocal9701_my_bitoff;\
	BM_ChannelMember_frequency_GET_POS( base_ptr, bmlocal9700_my_ptr, bmlocal9701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9700_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9700_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9700_my_ptr, bmlocal9701_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelMember_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_frequency: IS_RESET accessor is not defined because no reset value was specified.
// ChannelMember_frequency: SET_RESET accessor is not defined because no reset value was specified.
// ChannelMember_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelMember_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelMember_frequency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9702_out_val;\
	BM_ChannelMember_frequency_GET( base_ptr, bmlocal9702_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal9702_out_val), "%d", 1);\
}

#define BM_ChannelMember_frequency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_frequency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelMember_frequency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9703_my_ptr;\
	UINT bmlocal9704_my_bitoff;\
	BM_ChannelMember_frequency_GET_POS( base_ptr, bmlocal9703_my_ptr, bmlocal9704_my_bitoff );\
	(*((UINT32*)bmlocal9703_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9704_my_bitoff );\
}

// ChannelMember_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelMember_frequency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9705_tmp_bits;\
	BM_ChannelMember_frequency_GET_SIZE( base_ptr, out_bytes, bmlocal9705_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9705_tmp_bits );\
}

#define BM_ChannelMember_frequency_BYTES_SIZE 4

#define BM_ChannelMember_bw_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9708_acc_bytes;\
	UINT bmlocal9709_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9708_acc_bytes = 4;\
	bmlocal9709_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9708_acc_bytes );\
	out_bitoff += bmlocal9709_acc_bits;\
}

#define BM_ChannelMember_bw_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9710_tmp_bitoff;\
	BM_ChannelMember_bw_GET_POS( base_ptr, out_ptr, bmlocal9710_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9710_tmp_bitoff);\
}

#define BM_ChannelMember_bw_POS_ALIGNED 4

// Alignment of ChannelMember_bw: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelMember_bw_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_bw_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9711_my_ptr;\
	UINT bmlocal9712_my_bitoff;\
	BM_ChannelMember_bw_GET_POS( base_ptr, bmlocal9711_my_ptr, bmlocal9712_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9711_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9711_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9711_my_ptr, bmlocal9712_my_bitoff, 32, BME_BW, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelMember_bw_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9713_my_ptr;\
	UINT bmlocal9714_my_bitoff;\
	BM_ChannelMember_bw_GET_POS( base_ptr, bmlocal9713_my_ptr, bmlocal9714_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9713_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9713_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9713_my_ptr, bmlocal9714_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelMember_bw: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_bw: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_bw: IS_RESET accessor is not defined because no reset value was specified.
// ChannelMember_bw: SET_RESET accessor is not defined because no reset value was specified.
// ChannelMember_bw: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelMember_bw: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelMember_bw_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_BW bmlocal9715_out_val;\
	BM_ChannelMember_bw_GET( base_ptr, bmlocal9715_out_val );\
	if( bmlocal9715_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_3_5", 1);\
	}\
	if( bmlocal9715_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_5", 1);\
	}\
	if( bmlocal9715_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_7_5", 1);\
	}\
	if( bmlocal9715_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_8_75", 1);\
	}\
	if( bmlocal9715_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_10", 1);\
	}\
	if( bmlocal9715_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_14", 1);\
	}\
	if( bmlocal9715_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_20", 1);\
	}\
}

#define BM_ChannelMember_bw_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_bw_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelMember_bw_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9716_my_ptr;\
	UINT bmlocal9717_my_bitoff;\
	BM_ChannelMember_bw_GET_POS( base_ptr, bmlocal9716_my_ptr, bmlocal9717_my_bitoff );\
	(*((UINT32*)bmlocal9716_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9717_my_bitoff );\
}

// ChannelMember_bw: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelMember_bw_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9718_tmp_bits;\
	BM_ChannelMember_bw_GET_SIZE( base_ptr, out_bytes, bmlocal9718_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9718_tmp_bits );\
}

#define BM_ChannelMember_bw_BYTES_SIZE 4

#define BM_ChannelMember_fft_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9721_acc_bytes;\
	UINT bmlocal9722_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9721_acc_bytes = 8;\
	bmlocal9722_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9721_acc_bytes );\
	out_bitoff += bmlocal9722_acc_bits;\
}

#define BM_ChannelMember_fft_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9723_tmp_bitoff;\
	BM_ChannelMember_fft_GET_POS( base_ptr, out_ptr, bmlocal9723_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9723_tmp_bitoff);\
}

#define BM_ChannelMember_fft_POS_ALIGNED 8

// Alignment of ChannelMember_fft: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelMember_fft_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_fft_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9724_my_ptr;\
	UINT bmlocal9725_my_bitoff;\
	BM_ChannelMember_fft_GET_POS( base_ptr, bmlocal9724_my_ptr, bmlocal9725_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9724_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9724_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9724_my_ptr, bmlocal9725_my_bitoff, 32, BME_FFT, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelMember_fft_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9726_my_ptr;\
	UINT bmlocal9727_my_bitoff;\
	BM_ChannelMember_fft_GET_POS( base_ptr, bmlocal9726_my_ptr, bmlocal9727_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9726_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9726_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9726_my_ptr, bmlocal9727_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelMember_fft: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_fft: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_fft: IS_RESET accessor is not defined because no reset value was specified.
// ChannelMember_fft: SET_RESET accessor is not defined because no reset value was specified.
// ChannelMember_fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelMember_fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelMember_fft_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_FFT bmlocal9728_out_val;\
	BM_ChannelMember_fft_GET( base_ptr, bmlocal9728_out_val );\
	if( bmlocal9728_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_512", 1);\
	}\
	if( bmlocal9728_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_1024", 1);\
	}\
}

#define BM_ChannelMember_fft_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_fft_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelMember_fft_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9729_my_ptr;\
	UINT bmlocal9730_my_bitoff;\
	BM_ChannelMember_fft_GET_POS( base_ptr, bmlocal9729_my_ptr, bmlocal9730_my_bitoff );\
	(*((UINT32*)bmlocal9729_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9730_my_bitoff );\
}

// ChannelMember_fft: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelMember_fft_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9731_tmp_bits;\
	BM_ChannelMember_fft_GET_SIZE( base_ptr, out_bytes, bmlocal9731_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9731_tmp_bits );\
}

#define BM_ChannelMember_fft_BYTES_SIZE 4

#define BM_ChannelMember_Preambles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9734_acc_bytes;\
	UINT bmlocal9735_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9734_acc_bytes = 12;\
	bmlocal9735_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9734_acc_bytes );\
	out_bitoff += bmlocal9735_acc_bits;\
}

#define BM_ChannelMember_Preambles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9736_tmp_bitoff;\
	BM_ChannelMember_Preambles_GET_POS( base_ptr, out_ptr, bmlocal9736_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9736_tmp_bitoff);\
}

#define BM_ChannelMember_Preambles_POS_ALIGNED 12

// COMPOSITE: Full name: 'ChannelMember_Preambles' Type: 'PreamblesMember', Inner, Non-instance, No bitoff root
#define BM_ChannelMember_Preambles_Preambles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9737_parent_out_ptr;\
	BM_ChannelMember_Preambles_GET_POS( base_ptr, bmlocal9737_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9737_parent_out_ptr;\
}

#define BM_ChannelMember_Preambles_Preambles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9738_tmp_bitoff;\
	BM_ChannelMember_Preambles_Preambles_GET_POS( base_ptr, out_ptr, bmlocal9738_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9738_tmp_bitoff);\
}

#define BM_ChannelMember_Preambles_Preambles_POS_ALIGNED 12

// ARRAY: ChannelMember_Preambles_Preambles
#define BM_ChannelMember_Preambles_Preambles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_Preambles_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9739_out_ptr;\
	UINT bmlocal9740_out_bitoff;\
	UINT bmlocal9741_element_size_bytes;\
	UINT bmlocal9742_element_size_bits;\
	BM_ChannelMember_Preambles_Preambles_GET_POS( base_ptr, bmlocal9739_out_ptr, bmlocal9740_out_bitoff );\
	bmlocal9741_element_size_bytes = 1;\
	bmlocal9742_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9739_out_ptr) + (idx0) * bmlocal9741_element_size_bytes );\
	out_bitoff = bmlocal9740_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9742_element_size_bits );\
}

// COMPOSITE: Full name: 'ChannelMember_Preambles_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_ChannelMember_Preambles_Preambles_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9743_parent_out_ptr;\
	BM_ChannelMember_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9743_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9743_parent_out_ptr;\
}

// Alignment of ChannelMember_Preambles_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_ChannelMember_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelMember_Preambles_Preambles_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9744_my_ptr;\
	UINT bmlocal9745_my_bitoff;\
	BM_ChannelMember_Preambles_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9744_my_ptr, bmlocal9745_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9744_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9744_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9744_my_ptr, bmlocal9745_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_ChannelMember_Preambles_Preambles_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9746_my_ptr;\
	UINT bmlocal9747_my_bitoff;\
	BM_ChannelMember_Preambles_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9746_my_ptr, bmlocal9747_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9746_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9746_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9746_my_ptr, bmlocal9747_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// ChannelMember_Preambles_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_Preambles_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_Preambles_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// ChannelMember_Preambles_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// ChannelMember_Preambles_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelMember_Preambles_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelMember_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9748_out_val;\
	BM_ChannelMember_Preambles_Preambles_value_GET( base_ptr, idx0, bmlocal9748_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal9748_out_val), "%u", 1);\
}

#define BM_ChannelMember_Preambles_Preambles_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelMember_Preambles_Preambles_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9749_my_ptr;\
	UINT bmlocal9750_my_bitoff;\
	BM_ChannelMember_Preambles_Preambles_value_GET_POS( base_ptr, idx0, bmlocal9749_my_ptr, bmlocal9750_my_bitoff );\
	(*((UINT8*)bmlocal9749_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9750_my_bitoff );\
}

// ChannelMember_Preambles_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelMember_Preambles_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9751_tmp_bits;\
	BM_ChannelMember_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9751_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9751_tmp_bits );\
}

#define BM_ChannelMember_Preambles_Preambles_value_BYTES_SIZE 1

#define BM_ChannelMember_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelMember_Preambles_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9754_tmp_bits;\
	BM_ChannelMember_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9754_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9754_tmp_bits );\
}

#define BM_ChannelMember_Preambles_Preambles_BYTES_CELL_SIZE 1

#define BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelMember_Preambles_Preambles_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9755_dim_size0;\
	UINT bmlocal9756_idx0;\
	bmlocal9755_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal9756_idx0=0; bmlocal9756_idx0<bmlocal9755_dim_size0; bmlocal9756_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9756_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, bmlocal9756_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_Preambles_Preambles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelMember_Preambles_Preambles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9757_tmp_bits;\
	BM_ChannelMember_Preambles_Preambles_GET_SIZE( base_ptr, out_bytes, bmlocal9757_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9757_tmp_bits );\
}

#define BM_ChannelMember_Preambles_Preambles_BYTES_SIZE 15

#define BM_ChannelMember_Preambles_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9758_tmp_bytes = 0;\
	UINT bmlocal9759_tmp_bits = 0;\
	UINT bmlocal9760_acc_bytes;\
	UINT bmlocal9761_acc_bits;\
	PVOID bmlocal9762_parent_out_ptr;\
	BM_ChannelMember_Preambles_GET_POS( base_ptr, bmlocal9762_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9762_parent_out_ptr;\
	bmlocal9760_acc_bytes = 0;\
	bmlocal9761_acc_bits = 0;\
	BM_ChannelMember_Preambles_Preambles_GET_SIZE( base_ptr, bmlocal9758_tmp_bytes, bmlocal9759_tmp_bits );\
	bmlocal9760_acc_bytes += bmlocal9758_tmp_bytes;\
	bmlocal9761_acc_bits += bmlocal9759_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9760_acc_bytes );\
	out_bitoff += bmlocal9761_acc_bits;\
}

#define BM_ChannelMember_Preambles_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9763_tmp_bitoff;\
	BM_ChannelMember_Preambles_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal9763_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9763_tmp_bitoff);\
}

#define BM_ChannelMember_Preambles_Reserved_1_POS_ALIGNED 27

// Alignment of ChannelMember_Preambles_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelMember_Preambles_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_Preambles_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9764_my_ptr;\
	UINT bmlocal9765_my_bitoff;\
	BM_ChannelMember_Preambles_Reserved_1_GET_POS( base_ptr, bmlocal9764_my_ptr, bmlocal9765_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9764_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9764_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9764_my_ptr, bmlocal9765_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ChannelMember_Preambles_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9766_my_ptr;\
	UINT bmlocal9767_my_bitoff;\
	BM_ChannelMember_Preambles_Reserved_1_GET_POS( base_ptr, bmlocal9766_my_ptr, bmlocal9767_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9766_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9766_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9766_my_ptr, bmlocal9767_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ChannelMember_Preambles_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_Preambles_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelMember_Preambles_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// ChannelMember_Preambles_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// ChannelMember_Preambles_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelMember_Preambles_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelMember_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9768_out_val;\
	BM_ChannelMember_Preambles_Reserved_1_GET( base_ptr, bmlocal9768_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal9768_out_val), "%d", 1);\
}

#define BM_ChannelMember_Preambles_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelMember_Preambles_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9769_my_ptr;\
	UINT bmlocal9770_my_bitoff;\
	BM_ChannelMember_Preambles_Reserved_1_GET_POS( base_ptr, bmlocal9769_my_ptr, bmlocal9770_my_bitoff );\
	(*((UINT8*)bmlocal9769_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9770_my_bitoff );\
}

// ChannelMember_Preambles_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelMember_Preambles_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9771_tmp_bits;\
	BM_ChannelMember_Preambles_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal9771_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9771_tmp_bits );\
}

#define BM_ChannelMember_Preambles_Reserved_1_BYTES_SIZE 1

#define BM_ChannelMember_Preambles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9772_tmp_bytes = 0;\
	UINT bmlocal9773_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_ChannelMember_Preambles_Preambles_GET_SIZE( base_ptr, bmlocal9772_tmp_bytes, bmlocal9773_tmp_bits );\
	out_bytes += bmlocal9772_tmp_bytes;\
	out_bits += bmlocal9773_tmp_bits;\
}

#define BM_ChannelMember_Preambles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9774_tmp_bits;\
	BM_ChannelMember_Preambles_GET_SIZE( base_ptr, out_bytes, bmlocal9774_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9774_tmp_bits );\
}

#define BM_ChannelMember_Preambles_BYTES_SIZE 16

#define BM_ChannelMember_Preambles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	BM_ChannelMember_Preambles_Preambles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ChannelMember_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_Preambles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_Preambles_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_ChannelMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9777_tmp_bits;\
	BM_ChannelMember_GET_SIZE( base_ptr, out_bytes, bmlocal9777_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9777_tmp_bits );\
}

#define BM_ChannelMember_BYTES_SIZE 28

#define BM_ChannelMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelMember", 1);\
	BM_ChannelMember_frequency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ChannelMember_bw_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ChannelMember_fft_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ChannelMember_Preambles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ChannelInfoArr[4];

// COMPOSITE: Full name: 'ChannelInfoArr' Type: 'ChannelInfoArr', Top-level, Non-instance, No bitoff root
#define BM_ChannelInfoArr_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ChannelInfoArr_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9778_tmp_bitoff;\
	BM_ChannelInfoArr_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal9778_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9778_tmp_bitoff);\
}

#define BM_ChannelInfoArr_NumOfChannels_POS_ALIGNED 0

// Alignment of ChannelInfoArr_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelInfoArr_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9779_my_ptr;\
	UINT bmlocal9780_my_bitoff;\
	BM_ChannelInfoArr_NumOfChannels_GET_POS( base_ptr, bmlocal9779_my_ptr, bmlocal9780_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9779_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9779_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9779_my_ptr, bmlocal9780_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelInfoArr_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9781_my_ptr;\
	UINT bmlocal9782_my_bitoff;\
	BM_ChannelInfoArr_NumOfChannels_GET_POS( base_ptr, bmlocal9781_my_ptr, bmlocal9782_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9781_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9781_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9781_my_ptr, bmlocal9782_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelInfoArr_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9783_out_val;\
	BM_ChannelInfoArr_NumOfChannels_GET( base_ptr, bmlocal9783_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal9783_out_val), "%d", 1);\
}

#define BM_ChannelInfoArr_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelInfoArr_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9784_my_ptr;\
	UINT bmlocal9785_my_bitoff;\
	BM_ChannelInfoArr_NumOfChannels_GET_POS( base_ptr, bmlocal9784_my_ptr, bmlocal9785_my_bitoff );\
	(*((UINT32*)bmlocal9784_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9785_my_bitoff );\
}

// ChannelInfoArr_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9786_tmp_bits;\
	BM_ChannelInfoArr_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal9786_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9786_tmp_bits );\
}

#define BM_ChannelInfoArr_NumOfChannels_BYTES_SIZE 4

#define BM_ChannelInfoArr_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9789_acc_bytes;\
	UINT bmlocal9790_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9789_acc_bytes = 4;\
	bmlocal9790_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9789_acc_bytes );\
	out_bitoff += bmlocal9790_acc_bits;\
}

#define BM_ChannelInfoArr_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9791_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_GET_POS( base_ptr, out_ptr, bmlocal9791_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9791_tmp_bitoff);\
}

#define BM_ChannelInfoArr_Channels_POS_ALIGNED 4

// ARRAY: ChannelInfoArr_Channels
#define BM_ChannelInfoArr_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal9792_var0;\
		BM_ChannelInfoArr_NumOfChannels_GET( base_ptr, bmlocal9792_var0 );\
		out_bytes = (UINT)(28*(1*bmlocal9792_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal9793_var0;\
			BM_ChannelInfoArr_NumOfChannels_GET( base_ptr, bmlocal9793_var0 );\
			out_element_count = (UINT)(bmlocal9793_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9794_out_ptr;\
	UINT bmlocal9795_out_bitoff;\
	UINT bmlocal9796_element_size_bytes;\
	UINT bmlocal9797_element_size_bits;\
	BM_ChannelInfoArr_Channels_GET_POS( base_ptr, bmlocal9794_out_ptr, bmlocal9795_out_bitoff );\
	bmlocal9796_element_size_bytes = 28;\
	bmlocal9797_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9794_out_ptr) + (idx0) * bmlocal9796_element_size_bytes );\
	out_bitoff = bmlocal9795_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9797_element_size_bits );\
}

// COMPOSITE: Full name: 'ChannelInfoArr_Channels' Type: 'ChannelMember', Inner, Non-instance, No bitoff root
#define BM_ChannelInfoArr_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9798_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9798_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9798_parent_out_ptr;\
}

#define BM_ChannelInfoArr_Channels_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9799_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal9799_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9799_tmp_bitoff);\
}

// Alignment of ChannelInfoArr_Channels_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelInfoArr_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9800_my_ptr;\
	UINT bmlocal9801_my_bitoff;\
	BM_ChannelInfoArr_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal9800_my_ptr, bmlocal9801_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9800_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9800_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9800_my_ptr, bmlocal9801_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelInfoArr_Channels_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9802_my_ptr;\
	UINT bmlocal9803_my_bitoff;\
	BM_ChannelInfoArr_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal9802_my_ptr, bmlocal9803_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9802_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9802_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9802_my_ptr, bmlocal9803_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelInfoArr_Channels_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_frequency: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_frequency: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_Channels_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9804_out_val;\
	BM_ChannelInfoArr_Channels_frequency_GET( base_ptr, idx0, bmlocal9804_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal9804_out_val), "%d", 1);\
}

#define BM_ChannelInfoArr_Channels_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9805_my_ptr;\
	UINT bmlocal9806_my_bitoff;\
	BM_ChannelInfoArr_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal9805_my_ptr, bmlocal9806_my_bitoff );\
	(*((UINT32*)bmlocal9805_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9806_my_bitoff );\
}

// ChannelInfoArr_Channels_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_Channels_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9807_tmp_bits;\
	BM_ChannelInfoArr_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9807_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9807_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_frequency_BYTES_SIZE 4

#define BM_ChannelInfoArr_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9810_acc_bytes;\
	UINT bmlocal9811_acc_bits;\
	PVOID bmlocal9812_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9812_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9812_parent_out_ptr;\
	bmlocal9810_acc_bytes = 4;\
	bmlocal9811_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9810_acc_bytes );\
	out_bitoff += bmlocal9811_acc_bits;\
}

#define BM_ChannelInfoArr_Channels_bw_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9813_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, bmlocal9813_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9813_tmp_bitoff);\
}

// Alignment of ChannelInfoArr_Channels_bw: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelInfoArr_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_bw_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9814_my_ptr;\
	UINT bmlocal9815_my_bitoff;\
	BM_ChannelInfoArr_Channels_bw_GET_POS( base_ptr, idx0, bmlocal9814_my_ptr, bmlocal9815_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9814_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9814_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9814_my_ptr, bmlocal9815_my_bitoff, 32, BME_BW, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelInfoArr_Channels_bw_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9816_my_ptr;\
	UINT bmlocal9817_my_bitoff;\
	BM_ChannelInfoArr_Channels_bw_GET_POS( base_ptr, idx0, bmlocal9816_my_ptr, bmlocal9817_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9816_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9816_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9816_my_ptr, bmlocal9817_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelInfoArr_Channels_bw: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_bw: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_bw: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_bw: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_bw: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_Channels_bw: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_Channels_bw_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_BW bmlocal9818_out_val;\
	BM_ChannelInfoArr_Channels_bw_GET( base_ptr, idx0, bmlocal9818_out_val );\
	if( bmlocal9818_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_3_5", 1);\
	}\
	if( bmlocal9818_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_5", 1);\
	}\
	if( bmlocal9818_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_7_5", 1);\
	}\
	if( bmlocal9818_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_8_75", 1);\
	}\
	if( bmlocal9818_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_10", 1);\
	}\
	if( bmlocal9818_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_14", 1);\
	}\
	if( bmlocal9818_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_20", 1);\
	}\
}

#define BM_ChannelInfoArr_Channels_bw_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_bw_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_bw_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9819_my_ptr;\
	UINT bmlocal9820_my_bitoff;\
	BM_ChannelInfoArr_Channels_bw_GET_POS( base_ptr, idx0, bmlocal9819_my_ptr, bmlocal9820_my_bitoff );\
	(*((UINT32*)bmlocal9819_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9820_my_bitoff );\
}

// ChannelInfoArr_Channels_bw: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_Channels_bw_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9821_tmp_bits;\
	BM_ChannelInfoArr_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9821_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9821_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_bw_BYTES_SIZE 4

#define BM_ChannelInfoArr_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9824_acc_bytes;\
	UINT bmlocal9825_acc_bits;\
	PVOID bmlocal9826_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9826_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9826_parent_out_ptr;\
	bmlocal9824_acc_bytes = 8;\
	bmlocal9825_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9824_acc_bytes );\
	out_bitoff += bmlocal9825_acc_bits;\
}

#define BM_ChannelInfoArr_Channels_fft_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9827_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, bmlocal9827_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9827_tmp_bitoff);\
}

// Alignment of ChannelInfoArr_Channels_fft: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelInfoArr_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9828_my_ptr;\
	UINT bmlocal9829_my_bitoff;\
	BM_ChannelInfoArr_Channels_fft_GET_POS( base_ptr, idx0, bmlocal9828_my_ptr, bmlocal9829_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9828_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9828_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9828_my_ptr, bmlocal9829_my_bitoff, 32, BME_FFT, out_val, 0x00000000 );\
	}\
}

#define BM_ChannelInfoArr_Channels_fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9830_my_ptr;\
	UINT bmlocal9831_my_bitoff;\
	BM_ChannelInfoArr_Channels_fft_GET_POS( base_ptr, idx0, bmlocal9830_my_ptr, bmlocal9831_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9830_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9830_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9830_my_ptr, bmlocal9831_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ChannelInfoArr_Channels_fft: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_fft: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_fft: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_fft: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_Channels_fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_Channels_fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_FFT bmlocal9832_out_val;\
	BM_ChannelInfoArr_Channels_fft_GET( base_ptr, idx0, bmlocal9832_out_val );\
	if( bmlocal9832_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_512", 1);\
	}\
	if( bmlocal9832_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_1024", 1);\
	}\
}

#define BM_ChannelInfoArr_Channels_fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9833_my_ptr;\
	UINT bmlocal9834_my_bitoff;\
	BM_ChannelInfoArr_Channels_fft_GET_POS( base_ptr, idx0, bmlocal9833_my_ptr, bmlocal9834_my_bitoff );\
	(*((UINT32*)bmlocal9833_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9834_my_bitoff );\
}

// ChannelInfoArr_Channels_fft: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_Channels_fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9835_tmp_bits;\
	BM_ChannelInfoArr_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9835_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9835_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_fft_BYTES_SIZE 4

#define BM_ChannelInfoArr_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9838_acc_bytes;\
	UINT bmlocal9839_acc_bits;\
	PVOID bmlocal9840_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9840_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9840_parent_out_ptr;\
	bmlocal9838_acc_bytes = 12;\
	bmlocal9839_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9838_acc_bytes );\
	out_bitoff += bmlocal9839_acc_bits;\
}

#define BM_ChannelInfoArr_Channels_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9841_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal9841_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9841_tmp_bitoff);\
}

// COMPOSITE: Full name: 'ChannelInfoArr_Channels_Preambles' Type: 'PreamblesMember', Inner, Non-instance, No bitoff root
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9842_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal9842_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9842_parent_out_ptr;\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9843_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal9843_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9843_tmp_bitoff);\
}

// ARRAY: ChannelInfoArr_Channels_Preambles_Preambles
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9844_out_ptr;\
	UINT bmlocal9845_out_bitoff;\
	UINT bmlocal9846_element_size_bytes;\
	UINT bmlocal9847_element_size_bits;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, bmlocal9844_out_ptr, bmlocal9845_out_bitoff );\
	bmlocal9846_element_size_bytes = 1;\
	bmlocal9847_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9844_out_ptr) + (idx1) * bmlocal9846_element_size_bytes );\
	out_bitoff = bmlocal9845_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9847_element_size_bits );\
}

// COMPOSITE: Full name: 'ChannelInfoArr_Channels_Preambles_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9848_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal9848_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9848_parent_out_ptr;\
}

// Alignment of ChannelInfoArr_Channels_Preambles_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9849_my_ptr;\
	UINT bmlocal9850_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal9849_my_ptr, bmlocal9850_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9849_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9849_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9849_my_ptr, bmlocal9850_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9851_my_ptr;\
	UINT bmlocal9852_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal9851_my_ptr, bmlocal9852_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9851_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9851_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9851_my_ptr, bmlocal9852_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// ChannelInfoArr_Channels_Preambles_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_Preambles_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_Preambles_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_Preambles_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_Preambles_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_Channels_Preambles_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9853_out_val;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal9853_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal9853_out_val), "%u", 1);\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9854_my_ptr;\
	UINT bmlocal9855_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal9854_my_ptr, bmlocal9855_my_bitoff );\
	(*((UINT8*)bmlocal9854_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9855_my_bitoff );\
}

// ChannelInfoArr_Channels_Preambles_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9856_tmp_bits;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal9856_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9856_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_value_BYTES_SIZE 1

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9859_tmp_bits;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal9859_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9859_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_BYTES_CELL_SIZE 1

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9860_dim_size0;\
	UINT bmlocal9861_idx0;\
	bmlocal9860_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal9861_idx0=0; bmlocal9861_idx0<bmlocal9860_dim_size0; bmlocal9861_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9861_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal9861_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9862_tmp_bits;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9862_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9862_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Preambles_BYTES_SIZE 15

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9863_tmp_bytes = 0;\
	UINT bmlocal9864_tmp_bits = 0;\
	UINT bmlocal9865_acc_bytes;\
	UINT bmlocal9866_acc_bits;\
	PVOID bmlocal9867_parent_out_ptr;\
	BM_ChannelInfoArr_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal9867_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9867_parent_out_ptr;\
	bmlocal9865_acc_bytes = 0;\
	bmlocal9866_acc_bits = 0;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal9863_tmp_bytes, bmlocal9864_tmp_bits );\
	bmlocal9865_acc_bytes += bmlocal9863_tmp_bytes;\
	bmlocal9866_acc_bits += bmlocal9864_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9865_acc_bytes );\
	out_bitoff += bmlocal9866_acc_bits;\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9868_tmp_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal9868_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9868_tmp_bitoff);\
}

// Alignment of ChannelInfoArr_Channels_Preambles_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9869_my_ptr;\
	UINT bmlocal9870_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal9869_my_ptr, bmlocal9870_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9869_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9869_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9869_my_ptr, bmlocal9870_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9871_my_ptr;\
	UINT bmlocal9872_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal9871_my_ptr, bmlocal9872_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9871_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9871_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9871_my_ptr, bmlocal9872_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ChannelInfoArr_Channels_Preambles_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_Preambles_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArr_Channels_Preambles_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_Preambles_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArr_Channels_Preambles_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArr_Channels_Preambles_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9873_out_val;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, bmlocal9873_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal9873_out_val), "%d", 1);\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9874_my_ptr;\
	UINT bmlocal9875_my_bitoff;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal9874_my_ptr, bmlocal9875_my_bitoff );\
	(*((UINT8*)bmlocal9874_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9875_my_bitoff );\
}

// ChannelInfoArr_Channels_Preambles_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9876_tmp_bits;\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9876_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9876_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_Preambles_Reserved_1_BYTES_SIZE 1

#define BM_ChannelInfoArr_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9877_tmp_bytes = 0;\
	UINT bmlocal9878_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal9877_tmp_bytes, bmlocal9878_tmp_bits );\
	out_bytes += bmlocal9877_tmp_bytes;\
	out_bits += bmlocal9878_tmp_bits;\
}

#define BM_ChannelInfoArr_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9879_tmp_bits;\
	BM_ChannelInfoArr_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9879_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9879_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_Preambles_BYTES_SIZE 16

#define BM_ChannelInfoArr_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	BM_ChannelInfoArr_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ChannelInfoArr_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_ChannelInfoArr_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9882_tmp_bits;\
	BM_ChannelInfoArr_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9882_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9882_tmp_bits );\
}

#define BM_ChannelInfoArr_Channels_BYTES_CELL_SIZE 28

#define BM_ChannelInfoArr_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ChannelInfoArr_Channels_bw_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ChannelInfoArr_Channels_fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ChannelInfoArr_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArr_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_ChannelInfoArr_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9883_dim_size0;\
	UINT bmlocal9884_idx0;\
	{\
		UINT32 bmlocal9885_var0;\
		BM_ChannelInfoArr_NumOfChannels_GET( base_ptr, bmlocal9885_var0 );\
		bmlocal9883_dim_size0 = (UINT)(bmlocal9885_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal9884_idx0=0; bmlocal9884_idx0<bmlocal9883_dim_size0; bmlocal9884_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9884_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ChannelInfoArr_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal9884_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ChannelInfoArr_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9886_tmp_bits;\
	BM_ChannelInfoArr_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal9886_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9886_tmp_bits );\
}


#define BM_ChannelInfoArr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9887_tmp_bytes = 0;\
	UINT bmlocal9888_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_ChannelInfoArr_Channels_GET_SIZE( base_ptr, bmlocal9887_tmp_bytes, bmlocal9888_tmp_bits );\
	out_bytes += bmlocal9887_tmp_bytes;\
	out_bits += bmlocal9888_tmp_bits;\
}

#define BM_ChannelInfoArr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9889_tmp_bits;\
	BM_ChannelInfoArr_GET_SIZE( base_ptr, out_bytes, bmlocal9889_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9889_tmp_bits );\
}

#define BM_ChannelInfoArr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelInfoArr", 1);\
	BM_ChannelInfoArr_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ChannelInfoArr_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ChannelInfoArr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArr_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Time[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _wHour : 16;
	UINT16 _wMinute : 16;
	UINT16 _wSecond : 16;
	UINT16 _wMilliseconds : 16;
} BMS_Time;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _wMilliseconds : 16;
	UINT16 _wSecond : 16;
	UINT16 _wMinute : 16;
	UINT16 _wHour : 16;
} BMS_Time;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'Time' Type: 'Time', Top-level, Non-instance, No bitoff root
#define BM_Time_wHour_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Time_wHour_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9890_tmp_bitoff;\
	BM_Time_wHour_GET_POS( base_ptr, out_ptr, bmlocal9890_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9890_tmp_bitoff);\
}

#define BM_Time_wHour_POS_ALIGNED 0

// Alignment of Time_wHour: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Time_wHour_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_wHour_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9891_my_ptr;\
	UINT bmlocal9892_my_bitoff;\
	BM_Time_wHour_GET_POS( base_ptr, bmlocal9891_my_ptr, bmlocal9892_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9891_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9891_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9891_my_ptr, bmlocal9892_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_Time_wHour_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9893_my_ptr;\
	UINT bmlocal9894_my_bitoff;\
	BM_Time_wHour_GET_POS( base_ptr, bmlocal9893_my_ptr, bmlocal9894_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9893_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9893_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9893_my_ptr, bmlocal9894_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// Time_wHour: IS_DEFAULT accessor is not defined because no default value was specified.
// Time_wHour: SET_DEFAULT accessor is not defined because no default value was specified.
// Time_wHour: IS_RESET accessor is not defined because no reset value was specified.
// Time_wHour: SET_RESET accessor is not defined because no reset value was specified.
// Time_wHour: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Time_wHour: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Time_wHour_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal9895_out_val;\
	BM_Time_wHour_GET( base_ptr, bmlocal9895_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wHour", 16, (UINT)(bmlocal9895_out_val), "%d", 1);\
}

#define BM_Time_wHour_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Time_wHour_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Time_wHour_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9896_my_ptr;\
	UINT bmlocal9897_my_bitoff;\
	BM_Time_wHour_GET_POS( base_ptr, bmlocal9896_my_ptr, bmlocal9897_my_bitoff );\
	(*((UINT16*)bmlocal9896_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9897_my_bitoff );\
}

// Time_wHour: Validation accessors are not defined because validation condition was not specified.
#define BM_Time_wHour_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9898_tmp_bits;\
	BM_Time_wHour_GET_SIZE( base_ptr, out_bytes, bmlocal9898_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9898_tmp_bits );\
}

#define BM_Time_wHour_BYTES_SIZE 2

#define BM_Time_wMinute_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9901_acc_bytes;\
	UINT bmlocal9902_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9901_acc_bytes = 2;\
	bmlocal9902_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9901_acc_bytes );\
	out_bitoff += bmlocal9902_acc_bits;\
}

#define BM_Time_wMinute_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9903_tmp_bitoff;\
	BM_Time_wMinute_GET_POS( base_ptr, out_ptr, bmlocal9903_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9903_tmp_bitoff);\
}

#define BM_Time_wMinute_POS_ALIGNED 2

// Alignment of Time_wMinute: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Time_wMinute_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_wMinute_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9904_my_ptr;\
	UINT bmlocal9905_my_bitoff;\
	BM_Time_wMinute_GET_POS( base_ptr, bmlocal9904_my_ptr, bmlocal9905_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9904_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9904_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9904_my_ptr, bmlocal9905_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_Time_wMinute_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9906_my_ptr;\
	UINT bmlocal9907_my_bitoff;\
	BM_Time_wMinute_GET_POS( base_ptr, bmlocal9906_my_ptr, bmlocal9907_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9906_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9906_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9906_my_ptr, bmlocal9907_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// Time_wMinute: IS_DEFAULT accessor is not defined because no default value was specified.
// Time_wMinute: SET_DEFAULT accessor is not defined because no default value was specified.
// Time_wMinute: IS_RESET accessor is not defined because no reset value was specified.
// Time_wMinute: SET_RESET accessor is not defined because no reset value was specified.
// Time_wMinute: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Time_wMinute: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Time_wMinute_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal9908_out_val;\
	BM_Time_wMinute_GET( base_ptr, bmlocal9908_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wMinute", 16, (UINT)(bmlocal9908_out_val), "%d", 1);\
}

#define BM_Time_wMinute_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Time_wMinute_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Time_wMinute_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9909_my_ptr;\
	UINT bmlocal9910_my_bitoff;\
	BM_Time_wMinute_GET_POS( base_ptr, bmlocal9909_my_ptr, bmlocal9910_my_bitoff );\
	(*((UINT16*)bmlocal9909_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9910_my_bitoff );\
}

// Time_wMinute: Validation accessors are not defined because validation condition was not specified.
#define BM_Time_wMinute_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9911_tmp_bits;\
	BM_Time_wMinute_GET_SIZE( base_ptr, out_bytes, bmlocal9911_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9911_tmp_bits );\
}

#define BM_Time_wMinute_BYTES_SIZE 2

#define BM_Time_wSecond_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9914_acc_bytes;\
	UINT bmlocal9915_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9914_acc_bytes = 4;\
	bmlocal9915_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9914_acc_bytes );\
	out_bitoff += bmlocal9915_acc_bits;\
}

#define BM_Time_wSecond_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9916_tmp_bitoff;\
	BM_Time_wSecond_GET_POS( base_ptr, out_ptr, bmlocal9916_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9916_tmp_bitoff);\
}

#define BM_Time_wSecond_POS_ALIGNED 4

// Alignment of Time_wSecond: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Time_wSecond_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_wSecond_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9917_my_ptr;\
	UINT bmlocal9918_my_bitoff;\
	BM_Time_wSecond_GET_POS( base_ptr, bmlocal9917_my_ptr, bmlocal9918_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9917_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9917_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9917_my_ptr, bmlocal9918_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_Time_wSecond_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9919_my_ptr;\
	UINT bmlocal9920_my_bitoff;\
	BM_Time_wSecond_GET_POS( base_ptr, bmlocal9919_my_ptr, bmlocal9920_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9919_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9919_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9919_my_ptr, bmlocal9920_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// Time_wSecond: IS_DEFAULT accessor is not defined because no default value was specified.
// Time_wSecond: SET_DEFAULT accessor is not defined because no default value was specified.
// Time_wSecond: IS_RESET accessor is not defined because no reset value was specified.
// Time_wSecond: SET_RESET accessor is not defined because no reset value was specified.
// Time_wSecond: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Time_wSecond: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Time_wSecond_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal9921_out_val;\
	BM_Time_wSecond_GET( base_ptr, bmlocal9921_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wSecond", 16, (UINT)(bmlocal9921_out_val), "%d", 1);\
}

#define BM_Time_wSecond_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Time_wSecond_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Time_wSecond_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9922_my_ptr;\
	UINT bmlocal9923_my_bitoff;\
	BM_Time_wSecond_GET_POS( base_ptr, bmlocal9922_my_ptr, bmlocal9923_my_bitoff );\
	(*((UINT16*)bmlocal9922_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9923_my_bitoff );\
}

// Time_wSecond: Validation accessors are not defined because validation condition was not specified.
#define BM_Time_wSecond_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9924_tmp_bits;\
	BM_Time_wSecond_GET_SIZE( base_ptr, out_bytes, bmlocal9924_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9924_tmp_bits );\
}

#define BM_Time_wSecond_BYTES_SIZE 2

#define BM_Time_wMilliseconds_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9927_acc_bytes;\
	UINT bmlocal9928_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9927_acc_bytes = 6;\
	bmlocal9928_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9927_acc_bytes );\
	out_bitoff += bmlocal9928_acc_bits;\
}

#define BM_Time_wMilliseconds_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9929_tmp_bitoff;\
	BM_Time_wMilliseconds_GET_POS( base_ptr, out_ptr, bmlocal9929_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9929_tmp_bitoff);\
}

#define BM_Time_wMilliseconds_POS_ALIGNED 6

// Alignment of Time_wMilliseconds: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Time_wMilliseconds_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_wMilliseconds_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9930_my_ptr;\
	UINT bmlocal9931_my_bitoff;\
	BM_Time_wMilliseconds_GET_POS( base_ptr, bmlocal9930_my_ptr, bmlocal9931_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9930_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9930_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9930_my_ptr, bmlocal9931_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_Time_wMilliseconds_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9932_my_ptr;\
	UINT bmlocal9933_my_bitoff;\
	BM_Time_wMilliseconds_GET_POS( base_ptr, bmlocal9932_my_ptr, bmlocal9933_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9932_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9932_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9932_my_ptr, bmlocal9933_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// Time_wMilliseconds: IS_DEFAULT accessor is not defined because no default value was specified.
// Time_wMilliseconds: SET_DEFAULT accessor is not defined because no default value was specified.
// Time_wMilliseconds: IS_RESET accessor is not defined because no reset value was specified.
// Time_wMilliseconds: SET_RESET accessor is not defined because no reset value was specified.
// Time_wMilliseconds: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Time_wMilliseconds: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Time_wMilliseconds_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal9934_out_val;\
	BM_Time_wMilliseconds_GET( base_ptr, bmlocal9934_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wMilliseconds", 16, (UINT)(bmlocal9934_out_val), "%d", 1);\
}

#define BM_Time_wMilliseconds_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Time_wMilliseconds_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Time_wMilliseconds_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9935_my_ptr;\
	UINT bmlocal9936_my_bitoff;\
	BM_Time_wMilliseconds_GET_POS( base_ptr, bmlocal9935_my_ptr, bmlocal9936_my_bitoff );\
	(*((UINT16*)bmlocal9935_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9936_my_bitoff );\
}

// Time_wMilliseconds: Validation accessors are not defined because validation condition was not specified.
#define BM_Time_wMilliseconds_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9937_tmp_bits;\
	BM_Time_wMilliseconds_GET_SIZE( base_ptr, out_bytes, bmlocal9937_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9937_tmp_bits );\
}

#define BM_Time_wMilliseconds_BYTES_SIZE 2

#define BM_Time_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9940_tmp_bits;\
	BM_Time_GET_SIZE( base_ptr, out_bytes, bmlocal9940_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9940_tmp_bits );\
}

#define BM_Time_BYTES_SIZE 8

#define BM_Time_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Time", 1);\
	BM_Time_wHour_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Time_wMinute_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Time_wSecond_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Time_wMilliseconds_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Time_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Time_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 fwVersionMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _fwVersion[64];
} BMS_fwVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _fwVersion[64];
} BMS_fwVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'fwVersionMember' Type: 'fwVersionMember', Top-level, Non-instance, No bitoff root
#define BM_fwVersionMember_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_fwVersionMember_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9941_tmp_bitoff;\
	BM_fwVersionMember_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal9941_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9941_tmp_bitoff);\
}

#define BM_fwVersionMember_fwVersion_POS_ALIGNED 0

// ARRAY: fwVersionMember_fwVersion
#define BM_fwVersionMember_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_fwVersionMember_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_fwVersionMember_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9942_out_ptr;\
	UINT bmlocal9943_out_bitoff;\
	UINT bmlocal9944_element_size_bytes;\
	UINT bmlocal9945_element_size_bits;\
	BM_fwVersionMember_fwVersion_GET_POS( base_ptr, bmlocal9942_out_ptr, bmlocal9943_out_bitoff );\
	bmlocal9944_element_size_bytes = 1;\
	bmlocal9945_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9942_out_ptr) + (idx0) * bmlocal9944_element_size_bytes );\
	out_bitoff = bmlocal9943_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9945_element_size_bits );\
}

// COMPOSITE: Full name: 'fwVersionMember_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_fwVersionMember_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9946_parent_out_ptr;\
	BM_fwVersionMember_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9946_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9946_parent_out_ptr;\
}

#define BM_fwVersionMember_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9947_tmp_bitoff;\
	BM_fwVersionMember_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal9947_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9947_tmp_bitoff);\
}

// Alignment of fwVersionMember_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_fwVersionMember_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_fwVersionMember_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9948_my_ptr;\
	UINT bmlocal9949_my_bitoff;\
	BM_fwVersionMember_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9948_my_ptr, bmlocal9949_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9948_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9948_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9948_my_ptr, bmlocal9949_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_fwVersionMember_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9950_my_ptr;\
	UINT bmlocal9951_my_bitoff;\
	BM_fwVersionMember_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9950_my_ptr, bmlocal9951_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9950_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9950_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9950_my_ptr, bmlocal9951_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// fwVersionMember_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// fwVersionMember_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// fwVersionMember_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// fwVersionMember_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// fwVersionMember_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// fwVersionMember_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_fwVersionMember_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9952_out_val;\
	BM_fwVersionMember_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal9952_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal9952_out_val), "%d", 1);\
}

#define BM_fwVersionMember_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_fwVersionMember_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_fwVersionMember_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9953_my_ptr;\
	UINT bmlocal9954_my_bitoff;\
	BM_fwVersionMember_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9953_my_ptr, bmlocal9954_my_bitoff );\
	(*((UINT8*)bmlocal9953_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9954_my_bitoff );\
}

// fwVersionMember_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_fwVersionMember_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9955_tmp_bits;\
	BM_fwVersionMember_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9955_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9955_tmp_bits );\
}

#define BM_fwVersionMember_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_fwVersionMember_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_fwVersionMember_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9958_tmp_bits;\
	BM_fwVersionMember_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9958_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9958_tmp_bits );\
}

#define BM_fwVersionMember_fwVersion_BYTES_CELL_SIZE 1

#define BM_fwVersionMember_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_fwVersionMember_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_fwVersionMember_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_fwVersionMember_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_fwVersionMember_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9959_dim_size0;\
	UINT bmlocal9960_idx0;\
	bmlocal9959_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal9960_idx0=0; bmlocal9960_idx0<bmlocal9959_dim_size0; bmlocal9960_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9960_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_fwVersionMember_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal9960_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_fwVersionMember_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_fwVersionMember_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_fwVersionMember_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9961_tmp_bits;\
	BM_fwVersionMember_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal9961_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9961_tmp_bits );\
}

#define BM_fwVersionMember_fwVersion_BYTES_SIZE 64

#define BM_fwVersionMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9962_tmp_bytes = 0;\
	UINT bmlocal9963_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_fwVersionMember_fwVersion_GET_SIZE( base_ptr, bmlocal9962_tmp_bytes, bmlocal9963_tmp_bits );\
	out_bytes += bmlocal9962_tmp_bytes;\
	out_bits += bmlocal9963_tmp_bits;\
}

#define BM_fwVersionMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9964_tmp_bits;\
	BM_fwVersionMember_GET_SIZE( base_ptr, out_bytes, bmlocal9964_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9964_tmp_bits );\
}

#define BM_fwVersionMember_BYTES_SIZE 64

#define BM_fwVersionMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersionMember", 1);\
	BM_fwVersionMember_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_fwVersionMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_fwVersionMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 swVersionMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _swVersion[64];
} BMS_swVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _swVersion[64];
} BMS_swVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'swVersionMember' Type: 'swVersionMember', Top-level, Non-instance, No bitoff root
#define BM_swVersionMember_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_swVersionMember_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9965_tmp_bitoff;\
	BM_swVersionMember_swVersion_GET_POS( base_ptr, out_ptr, bmlocal9965_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9965_tmp_bitoff);\
}

#define BM_swVersionMember_swVersion_POS_ALIGNED 0

// ARRAY: swVersionMember_swVersion
#define BM_swVersionMember_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_swVersionMember_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_swVersionMember_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9966_out_ptr;\
	UINT bmlocal9967_out_bitoff;\
	UINT bmlocal9968_element_size_bytes;\
	UINT bmlocal9969_element_size_bits;\
	BM_swVersionMember_swVersion_GET_POS( base_ptr, bmlocal9966_out_ptr, bmlocal9967_out_bitoff );\
	bmlocal9968_element_size_bytes = 1;\
	bmlocal9969_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9966_out_ptr) + (idx0) * bmlocal9968_element_size_bytes );\
	out_bitoff = bmlocal9967_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9969_element_size_bits );\
}

// COMPOSITE: Full name: 'swVersionMember_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_swVersionMember_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9970_parent_out_ptr;\
	BM_swVersionMember_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9970_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9970_parent_out_ptr;\
}

#define BM_swVersionMember_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9971_tmp_bitoff;\
	BM_swVersionMember_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal9971_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9971_tmp_bitoff);\
}

// Alignment of swVersionMember_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_swVersionMember_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_swVersionMember_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9972_my_ptr;\
	UINT bmlocal9973_my_bitoff;\
	BM_swVersionMember_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9972_my_ptr, bmlocal9973_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9972_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9972_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9972_my_ptr, bmlocal9973_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_swVersionMember_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9974_my_ptr;\
	UINT bmlocal9975_my_bitoff;\
	BM_swVersionMember_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9974_my_ptr, bmlocal9975_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9974_my_ptr, bmlocal9975_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// swVersionMember_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// swVersionMember_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// swVersionMember_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// swVersionMember_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// swVersionMember_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// swVersionMember_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_swVersionMember_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal9976_out_val;\
	BM_swVersionMember_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal9976_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal9976_out_val), "%d", 1);\
}

#define BM_swVersionMember_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_swVersionMember_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_swVersionMember_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9977_my_ptr;\
	UINT bmlocal9978_my_bitoff;\
	BM_swVersionMember_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9977_my_ptr, bmlocal9978_my_bitoff );\
	(*((UINT8*)bmlocal9977_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9978_my_bitoff );\
}

// swVersionMember_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_swVersionMember_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9979_tmp_bits;\
	BM_swVersionMember_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9979_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9979_tmp_bits );\
}

#define BM_swVersionMember_swVersion_BufferByte_BYTES_SIZE 1

#define BM_swVersionMember_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_swVersionMember_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9982_tmp_bits;\
	BM_swVersionMember_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9982_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9982_tmp_bits );\
}

#define BM_swVersionMember_swVersion_BYTES_CELL_SIZE 1

#define BM_swVersionMember_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_swVersionMember_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_swVersionMember_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_swVersionMember_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_swVersionMember_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9983_dim_size0;\
	UINT bmlocal9984_idx0;\
	bmlocal9983_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal9984_idx0=0; bmlocal9984_idx0<bmlocal9983_dim_size0; bmlocal9984_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9984_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_swVersionMember_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal9984_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_swVersionMember_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_swVersionMember_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_swVersionMember_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9985_tmp_bits;\
	BM_swVersionMember_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal9985_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9985_tmp_bits );\
}

#define BM_swVersionMember_swVersion_BYTES_SIZE 64

#define BM_swVersionMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9986_tmp_bytes = 0;\
	UINT bmlocal9987_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_swVersionMember_swVersion_GET_SIZE( base_ptr, bmlocal9986_tmp_bytes, bmlocal9987_tmp_bits );\
	out_bytes += bmlocal9986_tmp_bytes;\
	out_bits += bmlocal9987_tmp_bits;\
}

#define BM_swVersionMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9988_tmp_bits;\
	BM_swVersionMember_GET_SIZE( base_ptr, out_bytes, bmlocal9988_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9988_tmp_bits );\
}

#define BM_swVersionMember_BYTES_SIZE 64

#define BM_swVersionMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersionMember", 1);\
	BM_swVersionMember_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_swVersionMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_swVersionMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 hwVersionMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _hwVersion[64];
} BMS_hwVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _hwVersion[64];
} BMS_hwVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'hwVersionMember' Type: 'hwVersionMember', Top-level, Non-instance, No bitoff root
#define BM_hwVersionMember_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_hwVersionMember_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9989_tmp_bitoff;\
	BM_hwVersionMember_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal9989_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9989_tmp_bitoff);\
}

#define BM_hwVersionMember_hwVersion_POS_ALIGNED 0

// ARRAY: hwVersionMember_hwVersion
#define BM_hwVersionMember_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_hwVersionMember_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_hwVersionMember_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9990_out_ptr;\
	UINT bmlocal9991_out_bitoff;\
	UINT bmlocal9992_element_size_bytes;\
	UINT bmlocal9993_element_size_bits;\
	BM_hwVersionMember_hwVersion_GET_POS( base_ptr, bmlocal9990_out_ptr, bmlocal9991_out_bitoff );\
	bmlocal9992_element_size_bytes = 1;\
	bmlocal9993_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9990_out_ptr) + (idx0) * bmlocal9992_element_size_bytes );\
	out_bitoff = bmlocal9991_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9993_element_size_bits );\
}

// COMPOSITE: Full name: 'hwVersionMember_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_hwVersionMember_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9994_parent_out_ptr;\
	BM_hwVersionMember_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9994_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9994_parent_out_ptr;\
}

#define BM_hwVersionMember_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9995_tmp_bitoff;\
	BM_hwVersionMember_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal9995_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9995_tmp_bitoff);\
}

// Alignment of hwVersionMember_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_hwVersionMember_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_hwVersionMember_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9996_my_ptr;\
	UINT bmlocal9997_my_bitoff;\
	BM_hwVersionMember_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9996_my_ptr, bmlocal9997_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9996_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9996_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9996_my_ptr, bmlocal9997_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_hwVersionMember_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9998_my_ptr;\
	UINT bmlocal9999_my_bitoff;\
	BM_hwVersionMember_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal9998_my_ptr, bmlocal9999_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9998_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9998_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9998_my_ptr, bmlocal9999_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// hwVersionMember_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// hwVersionMember_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// hwVersionMember_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// hwVersionMember_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// hwVersionMember_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// hwVersionMember_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_hwVersionMember_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10000_out_val;\
	BM_hwVersionMember_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal10000_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10000_out_val), "%d", 1);\
}

#define BM_hwVersionMember_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_hwVersionMember_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_hwVersionMember_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10001_my_ptr;\
	UINT bmlocal10002_my_bitoff;\
	BM_hwVersionMember_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal10001_my_ptr, bmlocal10002_my_bitoff );\
	(*((UINT8*)bmlocal10001_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10002_my_bitoff );\
}

// hwVersionMember_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_hwVersionMember_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10003_tmp_bits;\
	BM_hwVersionMember_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10003_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10003_tmp_bits );\
}

#define BM_hwVersionMember_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_hwVersionMember_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_hwVersionMember_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10006_tmp_bits;\
	BM_hwVersionMember_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10006_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10006_tmp_bits );\
}

#define BM_hwVersionMember_hwVersion_BYTES_CELL_SIZE 1

#define BM_hwVersionMember_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_hwVersionMember_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_hwVersionMember_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_hwVersionMember_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_hwVersionMember_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10007_dim_size0;\
	UINT bmlocal10008_idx0;\
	bmlocal10007_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal10008_idx0=0; bmlocal10008_idx0<bmlocal10007_dim_size0; bmlocal10008_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10008_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_hwVersionMember_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal10008_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_hwVersionMember_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_hwVersionMember_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_hwVersionMember_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10009_tmp_bits;\
	BM_hwVersionMember_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal10009_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10009_tmp_bits );\
}

#define BM_hwVersionMember_hwVersion_BYTES_SIZE 64

#define BM_hwVersionMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10010_tmp_bytes = 0;\
	UINT bmlocal10011_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_hwVersionMember_hwVersion_GET_SIZE( base_ptr, bmlocal10010_tmp_bytes, bmlocal10011_tmp_bits );\
	out_bytes += bmlocal10010_tmp_bytes;\
	out_bits += bmlocal10011_tmp_bits;\
}

#define BM_hwVersionMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10012_tmp_bits;\
	BM_hwVersionMember_GET_SIZE( base_ptr, out_bytes, bmlocal10012_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10012_tmp_bits );\
}

#define BM_hwVersionMember_BYTES_SIZE 64

#define BM_hwVersionMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersionMember", 1);\
	BM_hwVersionMember_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_hwVersionMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_hwVersionMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 manufacturerMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _manufacturer[64];
} BMS_manufacturerMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _manufacturer[64];
} BMS_manufacturerMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'manufacturerMember' Type: 'manufacturerMember', Top-level, Non-instance, No bitoff root
#define BM_manufacturerMember_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_manufacturerMember_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10013_tmp_bitoff;\
	BM_manufacturerMember_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal10013_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10013_tmp_bitoff);\
}

#define BM_manufacturerMember_manufacturer_POS_ALIGNED 0

// ARRAY: manufacturerMember_manufacturer
#define BM_manufacturerMember_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_manufacturerMember_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_manufacturerMember_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10014_out_ptr;\
	UINT bmlocal10015_out_bitoff;\
	UINT bmlocal10016_element_size_bytes;\
	UINT bmlocal10017_element_size_bits;\
	BM_manufacturerMember_manufacturer_GET_POS( base_ptr, bmlocal10014_out_ptr, bmlocal10015_out_bitoff );\
	bmlocal10016_element_size_bytes = 1;\
	bmlocal10017_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10014_out_ptr) + (idx0) * bmlocal10016_element_size_bytes );\
	out_bitoff = bmlocal10015_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10017_element_size_bits );\
}

// COMPOSITE: Full name: 'manufacturerMember_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_manufacturerMember_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10018_parent_out_ptr;\
	BM_manufacturerMember_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10018_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10018_parent_out_ptr;\
}

#define BM_manufacturerMember_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10019_tmp_bitoff;\
	BM_manufacturerMember_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10019_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10019_tmp_bitoff);\
}

// Alignment of manufacturerMember_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_manufacturerMember_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_manufacturerMember_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10020_my_ptr;\
	UINT bmlocal10021_my_bitoff;\
	BM_manufacturerMember_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal10020_my_ptr, bmlocal10021_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10020_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10020_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10020_my_ptr, bmlocal10021_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_manufacturerMember_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10022_my_ptr;\
	UINT bmlocal10023_my_bitoff;\
	BM_manufacturerMember_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal10022_my_ptr, bmlocal10023_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10022_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10022_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10022_my_ptr, bmlocal10023_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// manufacturerMember_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// manufacturerMember_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// manufacturerMember_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// manufacturerMember_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// manufacturerMember_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// manufacturerMember_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_manufacturerMember_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10024_out_val;\
	BM_manufacturerMember_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal10024_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10024_out_val), "%d", 1);\
}

#define BM_manufacturerMember_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_manufacturerMember_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_manufacturerMember_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10025_my_ptr;\
	UINT bmlocal10026_my_bitoff;\
	BM_manufacturerMember_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal10025_my_ptr, bmlocal10026_my_bitoff );\
	(*((UINT8*)bmlocal10025_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10026_my_bitoff );\
}

// manufacturerMember_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_manufacturerMember_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10027_tmp_bits;\
	BM_manufacturerMember_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10027_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10027_tmp_bits );\
}

#define BM_manufacturerMember_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_manufacturerMember_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_manufacturerMember_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10030_tmp_bits;\
	BM_manufacturerMember_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10030_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10030_tmp_bits );\
}

#define BM_manufacturerMember_manufacturer_BYTES_CELL_SIZE 1

#define BM_manufacturerMember_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_manufacturerMember_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_manufacturerMember_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_manufacturerMember_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_manufacturerMember_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10031_dim_size0;\
	UINT bmlocal10032_idx0;\
	bmlocal10031_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal10032_idx0=0; bmlocal10032_idx0<bmlocal10031_dim_size0; bmlocal10032_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10032_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_manufacturerMember_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal10032_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_manufacturerMember_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_manufacturerMember_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_manufacturerMember_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10033_tmp_bits;\
	BM_manufacturerMember_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal10033_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10033_tmp_bits );\
}

#define BM_manufacturerMember_manufacturer_BYTES_SIZE 64

#define BM_manufacturerMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10034_tmp_bytes = 0;\
	UINT bmlocal10035_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_manufacturerMember_manufacturer_GET_SIZE( base_ptr, bmlocal10034_tmp_bytes, bmlocal10035_tmp_bits );\
	out_bytes += bmlocal10034_tmp_bytes;\
	out_bits += bmlocal10035_tmp_bits;\
}

#define BM_manufacturerMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10036_tmp_bits;\
	BM_manufacturerMember_GET_SIZE( base_ptr, out_bytes, bmlocal10036_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10036_tmp_bits );\
}

#define BM_manufacturerMember_BYTES_SIZE 64

#define BM_manufacturerMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturerMember", 1);\
	BM_manufacturerMember_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_manufacturerMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_manufacturerMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 modelMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _model[64];
} BMS_modelMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _model[64];
} BMS_modelMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'modelMember' Type: 'modelMember', Top-level, Non-instance, No bitoff root
#define BM_modelMember_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_modelMember_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10037_tmp_bitoff;\
	BM_modelMember_model_GET_POS( base_ptr, out_ptr, bmlocal10037_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10037_tmp_bitoff);\
}

#define BM_modelMember_model_POS_ALIGNED 0

// ARRAY: modelMember_model
#define BM_modelMember_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_modelMember_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_modelMember_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10038_out_ptr;\
	UINT bmlocal10039_out_bitoff;\
	UINT bmlocal10040_element_size_bytes;\
	UINT bmlocal10041_element_size_bits;\
	BM_modelMember_model_GET_POS( base_ptr, bmlocal10038_out_ptr, bmlocal10039_out_bitoff );\
	bmlocal10040_element_size_bytes = 1;\
	bmlocal10041_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10038_out_ptr) + (idx0) * bmlocal10040_element_size_bytes );\
	out_bitoff = bmlocal10039_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10041_element_size_bits );\
}

// COMPOSITE: Full name: 'modelMember_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_modelMember_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10042_parent_out_ptr;\
	BM_modelMember_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10042_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10042_parent_out_ptr;\
}

#define BM_modelMember_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10043_tmp_bitoff;\
	BM_modelMember_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10043_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10043_tmp_bitoff);\
}

// Alignment of modelMember_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_modelMember_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_modelMember_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10044_my_ptr;\
	UINT bmlocal10045_my_bitoff;\
	BM_modelMember_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal10044_my_ptr, bmlocal10045_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10044_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10044_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10044_my_ptr, bmlocal10045_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_modelMember_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10046_my_ptr;\
	UINT bmlocal10047_my_bitoff;\
	BM_modelMember_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal10046_my_ptr, bmlocal10047_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10046_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10046_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10046_my_ptr, bmlocal10047_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// modelMember_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// modelMember_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// modelMember_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// modelMember_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// modelMember_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// modelMember_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_modelMember_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10048_out_val;\
	BM_modelMember_model_BufferByte_GET( base_ptr, idx0, bmlocal10048_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10048_out_val), "%d", 1);\
}

#define BM_modelMember_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_modelMember_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_modelMember_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10049_my_ptr;\
	UINT bmlocal10050_my_bitoff;\
	BM_modelMember_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal10049_my_ptr, bmlocal10050_my_bitoff );\
	(*((UINT8*)bmlocal10049_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10050_my_bitoff );\
}

// modelMember_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_modelMember_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10051_tmp_bits;\
	BM_modelMember_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10051_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10051_tmp_bits );\
}

#define BM_modelMember_model_BufferByte_BYTES_SIZE 1

#define BM_modelMember_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_modelMember_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10054_tmp_bits;\
	BM_modelMember_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10054_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10054_tmp_bits );\
}

#define BM_modelMember_model_BYTES_CELL_SIZE 1

#define BM_modelMember_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_modelMember_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_modelMember_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_modelMember_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_modelMember_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10055_dim_size0;\
	UINT bmlocal10056_idx0;\
	bmlocal10055_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal10056_idx0=0; bmlocal10056_idx0<bmlocal10055_dim_size0; bmlocal10056_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10056_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_modelMember_model_DUMP_DEPTH_IDX( base_ptr, bmlocal10056_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_modelMember_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_modelMember_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_modelMember_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10057_tmp_bits;\
	BM_modelMember_model_GET_SIZE( base_ptr, out_bytes, bmlocal10057_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10057_tmp_bits );\
}

#define BM_modelMember_model_BYTES_SIZE 64

#define BM_modelMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10058_tmp_bytes = 0;\
	UINT bmlocal10059_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_modelMember_model_GET_SIZE( base_ptr, bmlocal10058_tmp_bytes, bmlocal10059_tmp_bits );\
	out_bytes += bmlocal10058_tmp_bytes;\
	out_bits += bmlocal10059_tmp_bits;\
}

#define BM_modelMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10060_tmp_bits;\
	BM_modelMember_GET_SIZE( base_ptr, out_bytes, bmlocal10060_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10060_tmp_bits );\
}

#define BM_modelMember_BYTES_SIZE 64

#define BM_modelMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "modelMember", 1);\
	BM_modelMember_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_modelMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_modelMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 macAddressMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _macAddress[64];
} BMS_macAddressMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _macAddress[64];
} BMS_macAddressMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'macAddressMember' Type: 'macAddressMember', Top-level, Non-instance, No bitoff root
#define BM_macAddressMember_macAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_macAddressMember_macAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10061_tmp_bitoff;\
	BM_macAddressMember_macAddress_GET_POS( base_ptr, out_ptr, bmlocal10061_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10061_tmp_bitoff);\
}

#define BM_macAddressMember_macAddress_POS_ALIGNED 0

// ARRAY: macAddressMember_macAddress
#define BM_macAddressMember_macAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_macAddressMember_macAddress_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_macAddressMember_macAddress_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10062_out_ptr;\
	UINT bmlocal10063_out_bitoff;\
	UINT bmlocal10064_element_size_bytes;\
	UINT bmlocal10065_element_size_bits;\
	BM_macAddressMember_macAddress_GET_POS( base_ptr, bmlocal10062_out_ptr, bmlocal10063_out_bitoff );\
	bmlocal10064_element_size_bytes = 1;\
	bmlocal10065_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10062_out_ptr) + (idx0) * bmlocal10064_element_size_bytes );\
	out_bitoff = bmlocal10063_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10065_element_size_bits );\
}

// COMPOSITE: Full name: 'macAddressMember_macAddress' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_macAddressMember_macAddress_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10066_parent_out_ptr;\
	BM_macAddressMember_macAddress_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10066_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10066_parent_out_ptr;\
}

#define BM_macAddressMember_macAddress_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10067_tmp_bitoff;\
	BM_macAddressMember_macAddress_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10067_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10067_tmp_bitoff);\
}

// Alignment of macAddressMember_macAddress_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_macAddressMember_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_macAddressMember_macAddress_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10068_my_ptr;\
	UINT bmlocal10069_my_bitoff;\
	BM_macAddressMember_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal10068_my_ptr, bmlocal10069_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10068_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10068_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10068_my_ptr, bmlocal10069_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_macAddressMember_macAddress_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10070_my_ptr;\
	UINT bmlocal10071_my_bitoff;\
	BM_macAddressMember_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal10070_my_ptr, bmlocal10071_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10070_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10070_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10070_my_ptr, bmlocal10071_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// macAddressMember_macAddress_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// macAddressMember_macAddress_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// macAddressMember_macAddress_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// macAddressMember_macAddress_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// macAddressMember_macAddress_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// macAddressMember_macAddress_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_macAddressMember_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10072_out_val;\
	BM_macAddressMember_macAddress_BufferByte_GET( base_ptr, idx0, bmlocal10072_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10072_out_val), "%d", 1);\
}

#define BM_macAddressMember_macAddress_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_macAddressMember_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_macAddressMember_macAddress_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10073_my_ptr;\
	UINT bmlocal10074_my_bitoff;\
	BM_macAddressMember_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal10073_my_ptr, bmlocal10074_my_bitoff );\
	(*((UINT8*)bmlocal10073_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10074_my_bitoff );\
}

// macAddressMember_macAddress_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_macAddressMember_macAddress_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10075_tmp_bits;\
	BM_macAddressMember_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10075_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10075_tmp_bits );\
}

#define BM_macAddressMember_macAddress_BufferByte_BYTES_SIZE 1

#define BM_macAddressMember_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_macAddressMember_macAddress_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10078_tmp_bits;\
	BM_macAddressMember_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10078_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10078_tmp_bits );\
}

#define BM_macAddressMember_macAddress_BYTES_CELL_SIZE 1

#define BM_macAddressMember_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_macAddressMember_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_macAddressMember_macAddress_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_macAddressMember_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_macAddressMember_macAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10079_dim_size0;\
	UINT bmlocal10080_idx0;\
	bmlocal10079_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	for( bmlocal10080_idx0=0; bmlocal10080_idx0<bmlocal10079_dim_size0; bmlocal10080_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10080_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_macAddressMember_macAddress_DUMP_DEPTH_IDX( base_ptr, bmlocal10080_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_macAddressMember_macAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_macAddressMember_macAddress_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_macAddressMember_macAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10081_tmp_bits;\
	BM_macAddressMember_macAddress_GET_SIZE( base_ptr, out_bytes, bmlocal10081_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10081_tmp_bits );\
}

#define BM_macAddressMember_macAddress_BYTES_SIZE 64

#define BM_macAddressMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10082_tmp_bytes = 0;\
	UINT bmlocal10083_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_macAddressMember_macAddress_GET_SIZE( base_ptr, bmlocal10082_tmp_bytes, bmlocal10083_tmp_bits );\
	out_bytes += bmlocal10082_tmp_bytes;\
	out_bits += bmlocal10083_tmp_bits;\
}

#define BM_macAddressMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10084_tmp_bits;\
	BM_macAddressMember_GET_SIZE( base_ptr, out_bytes, bmlocal10084_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10084_tmp_bits );\
}

#define BM_macAddressMember_BYTES_SIZE 64

#define BM_macAddressMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddressMember", 1);\
	BM_macAddressMember_macAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_macAddressMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_macAddressMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 devTypeMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _devType[64];
} BMS_devTypeMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _devType[64];
} BMS_devTypeMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'devTypeMember' Type: 'devTypeMember', Top-level, Non-instance, No bitoff root
#define BM_devTypeMember_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_devTypeMember_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10085_tmp_bitoff;\
	BM_devTypeMember_devType_GET_POS( base_ptr, out_ptr, bmlocal10085_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10085_tmp_bitoff);\
}

#define BM_devTypeMember_devType_POS_ALIGNED 0

// ARRAY: devTypeMember_devType
#define BM_devTypeMember_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devTypeMember_devType_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devTypeMember_devType_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10086_out_ptr;\
	UINT bmlocal10087_out_bitoff;\
	UINT bmlocal10088_element_size_bytes;\
	UINT bmlocal10089_element_size_bits;\
	BM_devTypeMember_devType_GET_POS( base_ptr, bmlocal10086_out_ptr, bmlocal10087_out_bitoff );\
	bmlocal10088_element_size_bytes = 1;\
	bmlocal10089_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10086_out_ptr) + (idx0) * bmlocal10088_element_size_bytes );\
	out_bitoff = bmlocal10087_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10089_element_size_bits );\
}

// COMPOSITE: Full name: 'devTypeMember_devType' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_devTypeMember_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10090_parent_out_ptr;\
	BM_devTypeMember_devType_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10090_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10090_parent_out_ptr;\
}

#define BM_devTypeMember_devType_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10091_tmp_bitoff;\
	BM_devTypeMember_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10091_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10091_tmp_bitoff);\
}

// Alignment of devTypeMember_devType_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_devTypeMember_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devTypeMember_devType_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10092_my_ptr;\
	UINT bmlocal10093_my_bitoff;\
	BM_devTypeMember_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal10092_my_ptr, bmlocal10093_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10092_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10092_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10092_my_ptr, bmlocal10093_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_devTypeMember_devType_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10094_my_ptr;\
	UINT bmlocal10095_my_bitoff;\
	BM_devTypeMember_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal10094_my_ptr, bmlocal10095_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10094_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10094_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10094_my_ptr, bmlocal10095_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// devTypeMember_devType_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// devTypeMember_devType_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// devTypeMember_devType_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// devTypeMember_devType_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// devTypeMember_devType_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// devTypeMember_devType_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_devTypeMember_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10096_out_val;\
	BM_devTypeMember_devType_BufferByte_GET( base_ptr, idx0, bmlocal10096_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10096_out_val), "%d", 1);\
}

#define BM_devTypeMember_devType_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_devTypeMember_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_devTypeMember_devType_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10097_my_ptr;\
	UINT bmlocal10098_my_bitoff;\
	BM_devTypeMember_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal10097_my_ptr, bmlocal10098_my_bitoff );\
	(*((UINT8*)bmlocal10097_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10098_my_bitoff );\
}

// devTypeMember_devType_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_devTypeMember_devType_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10099_tmp_bits;\
	BM_devTypeMember_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10099_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10099_tmp_bits );\
}

#define BM_devTypeMember_devType_BufferByte_BYTES_SIZE 1

#define BM_devTypeMember_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devTypeMember_devType_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10102_tmp_bits;\
	BM_devTypeMember_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10102_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10102_tmp_bits );\
}

#define BM_devTypeMember_devType_BYTES_CELL_SIZE 1

#define BM_devTypeMember_devType_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_devTypeMember_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devTypeMember_devType_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_devTypeMember_devType_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_devTypeMember_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10103_dim_size0;\
	UINT bmlocal10104_idx0;\
	bmlocal10103_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	for( bmlocal10104_idx0=0; bmlocal10104_idx0<bmlocal10103_dim_size0; bmlocal10104_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10104_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_devTypeMember_devType_DUMP_DEPTH_IDX( base_ptr, bmlocal10104_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devTypeMember_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_devTypeMember_devType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_devTypeMember_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10105_tmp_bits;\
	BM_devTypeMember_devType_GET_SIZE( base_ptr, out_bytes, bmlocal10105_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10105_tmp_bits );\
}

#define BM_devTypeMember_devType_BYTES_SIZE 64

#define BM_devTypeMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10106_tmp_bytes = 0;\
	UINT bmlocal10107_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_devTypeMember_devType_GET_SIZE( base_ptr, bmlocal10106_tmp_bytes, bmlocal10107_tmp_bits );\
	out_bytes += bmlocal10106_tmp_bytes;\
	out_bits += bmlocal10107_tmp_bits;\
}

#define BM_devTypeMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10108_tmp_bits;\
	BM_devTypeMember_GET_SIZE( base_ptr, out_bytes, bmlocal10108_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10108_tmp_bits );\
}

#define BM_devTypeMember_BYTES_SIZE 64

#define BM_devTypeMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devTypeMember", 1);\
	BM_devTypeMember_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devTypeMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_devTypeMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 devIDMember[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _devID[64];
} BMS_devIDMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _devID[64];
} BMS_devIDMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'devIDMember' Type: 'devIDMember', Top-level, Non-instance, No bitoff root
#define BM_devIDMember_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_devIDMember_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10109_tmp_bitoff;\
	BM_devIDMember_devID_GET_POS( base_ptr, out_ptr, bmlocal10109_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10109_tmp_bitoff);\
}

#define BM_devIDMember_devID_POS_ALIGNED 0

// ARRAY: devIDMember_devID
#define BM_devIDMember_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devIDMember_devID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devIDMember_devID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10110_out_ptr;\
	UINT bmlocal10111_out_bitoff;\
	UINT bmlocal10112_element_size_bytes;\
	UINT bmlocal10113_element_size_bits;\
	BM_devIDMember_devID_GET_POS( base_ptr, bmlocal10110_out_ptr, bmlocal10111_out_bitoff );\
	bmlocal10112_element_size_bytes = 1;\
	bmlocal10113_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10110_out_ptr) + (idx0) * bmlocal10112_element_size_bytes );\
	out_bitoff = bmlocal10111_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10113_element_size_bits );\
}

// COMPOSITE: Full name: 'devIDMember_devID' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_devIDMember_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10114_parent_out_ptr;\
	BM_devIDMember_devID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10114_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10114_parent_out_ptr;\
}

#define BM_devIDMember_devID_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10115_tmp_bitoff;\
	BM_devIDMember_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10115_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10115_tmp_bitoff);\
}

// Alignment of devIDMember_devID_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_devIDMember_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devIDMember_devID_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10116_my_ptr;\
	UINT bmlocal10117_my_bitoff;\
	BM_devIDMember_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal10116_my_ptr, bmlocal10117_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10116_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10116_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10116_my_ptr, bmlocal10117_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_devIDMember_devID_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10118_my_ptr;\
	UINT bmlocal10119_my_bitoff;\
	BM_devIDMember_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal10118_my_ptr, bmlocal10119_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10118_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10118_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10118_my_ptr, bmlocal10119_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// devIDMember_devID_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// devIDMember_devID_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// devIDMember_devID_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// devIDMember_devID_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// devIDMember_devID_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// devIDMember_devID_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_devIDMember_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10120_out_val;\
	BM_devIDMember_devID_BufferByte_GET( base_ptr, idx0, bmlocal10120_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10120_out_val), "%d", 1);\
}

#define BM_devIDMember_devID_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_devIDMember_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_devIDMember_devID_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10121_my_ptr;\
	UINT bmlocal10122_my_bitoff;\
	BM_devIDMember_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal10121_my_ptr, bmlocal10122_my_bitoff );\
	(*((UINT8*)bmlocal10121_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10122_my_bitoff );\
}

// devIDMember_devID_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_devIDMember_devID_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10123_tmp_bits;\
	BM_devIDMember_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10123_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10123_tmp_bits );\
}

#define BM_devIDMember_devID_BufferByte_BYTES_SIZE 1

#define BM_devIDMember_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devIDMember_devID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10126_tmp_bits;\
	BM_devIDMember_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10126_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10126_tmp_bits );\
}

#define BM_devIDMember_devID_BYTES_CELL_SIZE 1

#define BM_devIDMember_devID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_devIDMember_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_devIDMember_devID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_devIDMember_devID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_devIDMember_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10127_dim_size0;\
	UINT bmlocal10128_idx0;\
	bmlocal10127_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	for( bmlocal10128_idx0=0; bmlocal10128_idx0<bmlocal10127_dim_size0; bmlocal10128_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10128_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_devIDMember_devID_DUMP_DEPTH_IDX( base_ptr, bmlocal10128_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devIDMember_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_devIDMember_devID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_devIDMember_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10129_tmp_bits;\
	BM_devIDMember_devID_GET_SIZE( base_ptr, out_bytes, bmlocal10129_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10129_tmp_bits );\
}

#define BM_devIDMember_devID_BYTES_SIZE 64

#define BM_devIDMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10130_tmp_bytes = 0;\
	UINT bmlocal10131_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_devIDMember_devID_GET_SIZE( base_ptr, bmlocal10130_tmp_bytes, bmlocal10131_tmp_bits );\
	out_bytes += bmlocal10130_tmp_bytes;\
	out_bits += bmlocal10131_tmp_bits;\
}

#define BM_devIDMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10132_tmp_bits;\
	BM_devIDMember_GET_SIZE( base_ptr, out_bytes, bmlocal10132_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10132_tmp_bits );\
}

#define BM_devIDMember_BYTES_SIZE 64

#define BM_devIDMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devIDMember", 1);\
	BM_devIDMember_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_devIDMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_devIDMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 NapMember[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _napID[3];
	UINT8 _Reserved_1 : 8; //Reserved to get to 4 Byte Alignment
} BMS_NapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Reserved_1 : 8; //Reserved to get to 4 Byte Alignment
	BMS_LittleEndianness_Uint8 _napID[3];
} BMS_NapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'NapMember' Type: 'NapMember', Top-level, Non-instance, No bitoff root
#define BM_NapMember_napID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_NapMember_napID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10133_tmp_bitoff;\
	BM_NapMember_napID_GET_POS( base_ptr, out_ptr, bmlocal10133_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10133_tmp_bitoff);\
}

#define BM_NapMember_napID_POS_ALIGNED 0

// ARRAY: NapMember_napID
#define BM_NapMember_napID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NapMember_napID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 3;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10134_out_ptr;\
	UINT bmlocal10135_out_bitoff;\
	UINT bmlocal10136_element_size_bytes;\
	UINT bmlocal10137_element_size_bits;\
	BM_NapMember_napID_GET_POS( base_ptr, bmlocal10134_out_ptr, bmlocal10135_out_bitoff );\
	bmlocal10136_element_size_bytes = 1;\
	bmlocal10137_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10134_out_ptr) + (idx0) * bmlocal10136_element_size_bytes );\
	out_bitoff = bmlocal10135_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10137_element_size_bits );\
}

// COMPOSITE: Full name: 'NapMember_napID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_NapMember_napID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10138_parent_out_ptr;\
	BM_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10138_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10138_parent_out_ptr;\
}

// Alignment of NapMember_napID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NapMember_napID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10139_my_ptr;\
	UINT bmlocal10140_my_bitoff;\
	BM_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal10139_my_ptr, bmlocal10140_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10139_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10139_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10139_my_ptr, bmlocal10140_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_NapMember_napID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10141_my_ptr;\
	UINT bmlocal10142_my_bitoff;\
	BM_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal10141_my_ptr, bmlocal10142_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10141_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10141_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10141_my_ptr, bmlocal10142_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// NapMember_napID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// NapMember_napID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// NapMember_napID_value: IS_RESET accessor is not defined because no reset value was specified.
// NapMember_napID_value: SET_RESET accessor is not defined because no reset value was specified.
// NapMember_napID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NapMember_napID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10143_out_val;\
	BM_NapMember_napID_value_GET( base_ptr, idx0, bmlocal10143_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10143_out_val), "%u", 1);\
}

#define BM_NapMember_napID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NapMember_napID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10144_my_ptr;\
	UINT bmlocal10145_my_bitoff;\
	BM_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal10144_my_ptr, bmlocal10145_my_bitoff );\
	(*((UINT8*)bmlocal10144_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10145_my_bitoff );\
}

// NapMember_napID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_NapMember_napID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10146_tmp_bits;\
	BM_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10146_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10146_tmp_bits );\
}

#define BM_NapMember_napID_value_BYTES_SIZE 1

#define BM_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NapMember_napID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10149_tmp_bits;\
	BM_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10149_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10149_tmp_bits );\
}

#define BM_NapMember_napID_BYTES_CELL_SIZE 1

#define BM_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NapMember_napID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_NapMember_napID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10150_dim_size0;\
	UINT bmlocal10151_idx0;\
	bmlocal10150_dim_size0 = 3;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "napID", 1);\
	for( bmlocal10151_idx0=0; bmlocal10151_idx0<bmlocal10150_dim_size0; bmlocal10151_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10151_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, bmlocal10151_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NapMember_napID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NapMember_napID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NapMember_napID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10152_tmp_bits;\
	BM_NapMember_napID_GET_SIZE( base_ptr, out_bytes, bmlocal10152_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10152_tmp_bits );\
}

#define BM_NapMember_napID_BYTES_SIZE 3

#define BM_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10153_tmp_bytes = 0;\
	UINT bmlocal10154_tmp_bits = 0;\
	UINT bmlocal10155_acc_bytes;\
	UINT bmlocal10156_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10155_acc_bytes = 0;\
	bmlocal10156_acc_bits = 0;\
	BM_NapMember_napID_GET_SIZE( base_ptr, bmlocal10153_tmp_bytes, bmlocal10154_tmp_bits );\
	bmlocal10155_acc_bytes += bmlocal10153_tmp_bytes;\
	bmlocal10156_acc_bits += bmlocal10154_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10155_acc_bytes );\
	out_bitoff += bmlocal10156_acc_bits;\
}

#define BM_NapMember_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10157_tmp_bitoff;\
	BM_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal10157_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10157_tmp_bitoff);\
}

#define BM_NapMember_Reserved_1_POS_ALIGNED 3

// Alignment of NapMember_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NapMember_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10158_my_ptr;\
	UINT bmlocal10159_my_bitoff;\
	BM_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal10158_my_ptr, bmlocal10159_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10158_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10158_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10158_my_ptr, bmlocal10159_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_NapMember_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10160_my_ptr;\
	UINT bmlocal10161_my_bitoff;\
	BM_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal10160_my_ptr, bmlocal10161_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10160_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10160_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10160_my_ptr, bmlocal10161_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// NapMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// NapMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// NapMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// NapMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// NapMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NapMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10162_out_val;\
	BM_NapMember_Reserved_1_GET( base_ptr, bmlocal10162_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal10162_out_val), "%d", 1);\
}

#define BM_NapMember_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NapMember_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10163_my_ptr;\
	UINT bmlocal10164_my_bitoff;\
	BM_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal10163_my_ptr, bmlocal10164_my_bitoff );\
	(*((UINT8*)bmlocal10163_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10164_my_bitoff );\
}

// NapMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_NapMember_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10165_tmp_bits;\
	BM_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal10165_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10165_tmp_bits );\
}

#define BM_NapMember_Reserved_1_BYTES_SIZE 1

#define BM_NapMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10166_tmp_bytes = 0;\
	UINT bmlocal10167_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_NapMember_napID_GET_SIZE( base_ptr, bmlocal10166_tmp_bytes, bmlocal10167_tmp_bits );\
	out_bytes += bmlocal10166_tmp_bytes;\
	out_bits += bmlocal10167_tmp_bits;\
}

#define BM_NapMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10168_tmp_bits;\
	BM_NapMember_GET_SIZE( base_ptr, out_bytes, bmlocal10168_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10168_tmp_bits );\
}

#define BM_NapMember_BYTES_SIZE 4

#define BM_NapMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NapMember", 1);\
	BM_NapMember_napID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NapMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NapMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 bsIDMember[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _bsID[6];
	UINT16 _Reserved_2 : 16; //Reserved to get to 4 Byte Alignment
} BMS_bsIDMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Reserved_2 : 16; //Reserved to get to 4 Byte Alignment
	BMS_LittleEndianness_Uint8 _bsID[6];
} BMS_bsIDMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'bsIDMember' Type: 'bsIDMember', Top-level, Non-instance, No bitoff root
#define BM_bsIDMember_bsID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_bsIDMember_bsID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10169_tmp_bitoff;\
	BM_bsIDMember_bsID_GET_POS( base_ptr, out_ptr, bmlocal10169_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10169_tmp_bitoff);\
}

#define BM_bsIDMember_bsID_POS_ALIGNED 0

// ARRAY: bsIDMember_bsID
#define BM_bsIDMember_bsID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDMember_bsID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDMember_bsID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10170_out_ptr;\
	UINT bmlocal10171_out_bitoff;\
	UINT bmlocal10172_element_size_bytes;\
	UINT bmlocal10173_element_size_bits;\
	BM_bsIDMember_bsID_GET_POS( base_ptr, bmlocal10170_out_ptr, bmlocal10171_out_bitoff );\
	bmlocal10172_element_size_bytes = 1;\
	bmlocal10173_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10170_out_ptr) + (idx0) * bmlocal10172_element_size_bytes );\
	out_bitoff = bmlocal10171_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10173_element_size_bits );\
}

// COMPOSITE: Full name: 'bsIDMember_bsID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_bsIDMember_bsID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10174_parent_out_ptr;\
	BM_bsIDMember_bsID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10174_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10174_parent_out_ptr;\
}

// Alignment of bsIDMember_bsID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_bsIDMember_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDMember_bsID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10175_my_ptr;\
	UINT bmlocal10176_my_bitoff;\
	BM_bsIDMember_bsID_value_GET_POS( base_ptr, idx0, bmlocal10175_my_ptr, bmlocal10176_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10175_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10175_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10175_my_ptr, bmlocal10176_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_bsIDMember_bsID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10177_my_ptr;\
	UINT bmlocal10178_my_bitoff;\
	BM_bsIDMember_bsID_value_GET_POS( base_ptr, idx0, bmlocal10177_my_ptr, bmlocal10178_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10177_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10177_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10177_my_ptr, bmlocal10178_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// bsIDMember_bsID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// bsIDMember_bsID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// bsIDMember_bsID_value: IS_RESET accessor is not defined because no reset value was specified.
// bsIDMember_bsID_value: SET_RESET accessor is not defined because no reset value was specified.
// bsIDMember_bsID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// bsIDMember_bsID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_bsIDMember_bsID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10179_out_val;\
	BM_bsIDMember_bsID_value_GET( base_ptr, idx0, bmlocal10179_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10179_out_val), "%u", 1);\
}

#define BM_bsIDMember_bsID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_bsID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_bsIDMember_bsID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10180_my_ptr;\
	UINT bmlocal10181_my_bitoff;\
	BM_bsIDMember_bsID_value_GET_POS( base_ptr, idx0, bmlocal10180_my_ptr, bmlocal10181_my_bitoff );\
	(*((UINT8*)bmlocal10180_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10181_my_bitoff );\
}

// bsIDMember_bsID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_bsIDMember_bsID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10182_tmp_bits;\
	BM_bsIDMember_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10182_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10182_tmp_bits );\
}

#define BM_bsIDMember_bsID_value_BYTES_SIZE 1

#define BM_bsIDMember_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDMember_bsID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10185_tmp_bits;\
	BM_bsIDMember_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10185_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10185_tmp_bits );\
}

#define BM_bsIDMember_bsID_BYTES_CELL_SIZE 1

#define BM_bsIDMember_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_bsID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDMember_bsID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_bsIDMember_bsID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10186_dim_size0;\
	UINT bmlocal10187_idx0;\
	bmlocal10186_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	for( bmlocal10187_idx0=0; bmlocal10187_idx0<bmlocal10186_dim_size0; bmlocal10187_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10187_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_bsIDMember_bsID_DUMP_DEPTH_IDX( base_ptr, bmlocal10187_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDMember_bsID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_bsID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_bsIDMember_bsID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10188_tmp_bits;\
	BM_bsIDMember_bsID_GET_SIZE( base_ptr, out_bytes, bmlocal10188_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10188_tmp_bits );\
}

#define BM_bsIDMember_bsID_BYTES_SIZE 6

#define BM_bsIDMember_Reserved_2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10189_tmp_bytes = 0;\
	UINT bmlocal10190_tmp_bits = 0;\
	UINT bmlocal10191_acc_bytes;\
	UINT bmlocal10192_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10191_acc_bytes = 0;\
	bmlocal10192_acc_bits = 0;\
	BM_bsIDMember_bsID_GET_SIZE( base_ptr, bmlocal10189_tmp_bytes, bmlocal10190_tmp_bits );\
	bmlocal10191_acc_bytes += bmlocal10189_tmp_bytes;\
	bmlocal10192_acc_bits += bmlocal10190_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10191_acc_bytes );\
	out_bitoff += bmlocal10192_acc_bits;\
}

#define BM_bsIDMember_Reserved_2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10193_tmp_bitoff;\
	BM_bsIDMember_Reserved_2_GET_POS( base_ptr, out_ptr, bmlocal10193_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10193_tmp_bitoff);\
}

#define BM_bsIDMember_Reserved_2_POS_ALIGNED 6

// Alignment of bsIDMember_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_bsIDMember_Reserved_2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDMember_Reserved_2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10194_my_ptr;\
	UINT bmlocal10195_my_bitoff;\
	BM_bsIDMember_Reserved_2_GET_POS( base_ptr, bmlocal10194_my_ptr, bmlocal10195_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10194_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10194_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10194_my_ptr, bmlocal10195_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_bsIDMember_Reserved_2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10196_my_ptr;\
	UINT bmlocal10197_my_bitoff;\
	BM_bsIDMember_Reserved_2_GET_POS( base_ptr, bmlocal10196_my_ptr, bmlocal10197_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10196_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10196_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10196_my_ptr, bmlocal10197_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// bsIDMember_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// bsIDMember_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// bsIDMember_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// bsIDMember_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// bsIDMember_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// bsIDMember_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_bsIDMember_Reserved_2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10198_out_val;\
	BM_bsIDMember_Reserved_2_GET( base_ptr, bmlocal10198_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10198_out_val), "%d", 1);\
}

#define BM_bsIDMember_Reserved_2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_Reserved_2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_bsIDMember_Reserved_2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10199_my_ptr;\
	UINT bmlocal10200_my_bitoff;\
	BM_bsIDMember_Reserved_2_GET_POS( base_ptr, bmlocal10199_my_ptr, bmlocal10200_my_bitoff );\
	(*((UINT16*)bmlocal10199_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10200_my_bitoff );\
}

// bsIDMember_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_bsIDMember_Reserved_2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10201_tmp_bits;\
	BM_bsIDMember_Reserved_2_GET_SIZE( base_ptr, out_bytes, bmlocal10201_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10201_tmp_bits );\
}

#define BM_bsIDMember_Reserved_2_BYTES_SIZE 2

#define BM_bsIDMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10202_tmp_bytes = 0;\
	UINT bmlocal10203_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_bsIDMember_bsID_GET_SIZE( base_ptr, bmlocal10202_tmp_bytes, bmlocal10203_tmp_bits );\
	out_bytes += bmlocal10202_tmp_bytes;\
	out_bits += bmlocal10203_tmp_bits;\
}

#define BM_bsIDMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10204_tmp_bits;\
	BM_bsIDMember_GET_SIZE( base_ptr, out_bytes, bmlocal10204_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10204_tmp_bits );\
}

#define BM_bsIDMember_BYTES_SIZE 8

#define BM_bsIDMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDMember", 1);\
	BM_bsIDMember_bsID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_bsIDMember_Reserved_2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 bsIDmaskMember[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _bsIDmask[6];
	UINT16 _Reserved_2 : 16; //Reserved to get to 4 Byte Alignment
} BMS_bsIDmaskMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Reserved_2 : 16; //Reserved to get to 4 Byte Alignment
	BMS_LittleEndianness_Uint8 _bsIDmask[6];
} BMS_bsIDmaskMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'bsIDmaskMember' Type: 'bsIDmaskMember', Top-level, Non-instance, No bitoff root
#define BM_bsIDmaskMember_bsIDmask_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_bsIDmaskMember_bsIDmask_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10205_tmp_bitoff;\
	BM_bsIDmaskMember_bsIDmask_GET_POS( base_ptr, out_ptr, bmlocal10205_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10205_tmp_bitoff);\
}

#define BM_bsIDmaskMember_bsIDmask_POS_ALIGNED 0

// ARRAY: bsIDmaskMember_bsIDmask
#define BM_bsIDmaskMember_bsIDmask_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDmaskMember_bsIDmask_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDmaskMember_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10206_out_ptr;\
	UINT bmlocal10207_out_bitoff;\
	UINT bmlocal10208_element_size_bytes;\
	UINT bmlocal10209_element_size_bits;\
	BM_bsIDmaskMember_bsIDmask_GET_POS( base_ptr, bmlocal10206_out_ptr, bmlocal10207_out_bitoff );\
	bmlocal10208_element_size_bytes = 1;\
	bmlocal10209_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10206_out_ptr) + (idx0) * bmlocal10208_element_size_bytes );\
	out_bitoff = bmlocal10207_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10209_element_size_bits );\
}

// COMPOSITE: Full name: 'bsIDmaskMember_bsIDmask' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_bsIDmaskMember_bsIDmask_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10210_parent_out_ptr;\
	BM_bsIDmaskMember_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10210_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10210_parent_out_ptr;\
}

// Alignment of bsIDmaskMember_bsIDmask_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_bsIDmaskMember_bsIDmask_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDmaskMember_bsIDmask_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10211_my_ptr;\
	UINT bmlocal10212_my_bitoff;\
	BM_bsIDmaskMember_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10211_my_ptr, bmlocal10212_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10211_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10211_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10211_my_ptr, bmlocal10212_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_bsIDmaskMember_bsIDmask_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10213_my_ptr;\
	UINT bmlocal10214_my_bitoff;\
	BM_bsIDmaskMember_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10213_my_ptr, bmlocal10214_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10213_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10213_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10213_my_ptr, bmlocal10214_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// bsIDmaskMember_bsIDmask_value: IS_DEFAULT accessor is not defined because no default value was specified.
// bsIDmaskMember_bsIDmask_value: SET_DEFAULT accessor is not defined because no default value was specified.
// bsIDmaskMember_bsIDmask_value: IS_RESET accessor is not defined because no reset value was specified.
// bsIDmaskMember_bsIDmask_value: SET_RESET accessor is not defined because no reset value was specified.
// bsIDmaskMember_bsIDmask_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// bsIDmaskMember_bsIDmask_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_bsIDmaskMember_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10215_out_val;\
	BM_bsIDmaskMember_bsIDmask_value_GET( base_ptr, idx0, bmlocal10215_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10215_out_val), "%u", 1);\
}

#define BM_bsIDmaskMember_bsIDmask_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_bsIDmaskMember_bsIDmask_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10216_my_ptr;\
	UINT bmlocal10217_my_bitoff;\
	BM_bsIDmaskMember_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10216_my_ptr, bmlocal10217_my_bitoff );\
	(*((UINT8*)bmlocal10216_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10217_my_bitoff );\
}

// bsIDmaskMember_bsIDmask_value: Validation accessors are not defined because validation condition was not specified.
#define BM_bsIDmaskMember_bsIDmask_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10218_tmp_bits;\
	BM_bsIDmaskMember_bsIDmask_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10218_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10218_tmp_bits );\
}

#define BM_bsIDmaskMember_bsIDmask_value_BYTES_SIZE 1

#define BM_bsIDmaskMember_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDmaskMember_bsIDmask_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10221_tmp_bits;\
	BM_bsIDmaskMember_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10221_tmp_bits );\
}

#define BM_bsIDmaskMember_bsIDmask_BYTES_CELL_SIZE 1

#define BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_bsIDmaskMember_bsIDmask_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10222_dim_size0;\
	UINT bmlocal10223_idx0;\
	bmlocal10222_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	for( bmlocal10223_idx0=0; bmlocal10223_idx0<bmlocal10222_dim_size0; bmlocal10223_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10223_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH_IDX( base_ptr, bmlocal10223_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDmaskMember_bsIDmask_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_bsIDmaskMember_bsIDmask_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10224_tmp_bits;\
	BM_bsIDmaskMember_bsIDmask_GET_SIZE( base_ptr, out_bytes, bmlocal10224_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10224_tmp_bits );\
}

#define BM_bsIDmaskMember_bsIDmask_BYTES_SIZE 6

#define BM_bsIDmaskMember_Reserved_2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10225_tmp_bytes = 0;\
	UINT bmlocal10226_tmp_bits = 0;\
	UINT bmlocal10227_acc_bytes;\
	UINT bmlocal10228_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10227_acc_bytes = 0;\
	bmlocal10228_acc_bits = 0;\
	BM_bsIDmaskMember_bsIDmask_GET_SIZE( base_ptr, bmlocal10225_tmp_bytes, bmlocal10226_tmp_bits );\
	bmlocal10227_acc_bytes += bmlocal10225_tmp_bytes;\
	bmlocal10228_acc_bits += bmlocal10226_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10227_acc_bytes );\
	out_bitoff += bmlocal10228_acc_bits;\
}

#define BM_bsIDmaskMember_Reserved_2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10229_tmp_bitoff;\
	BM_bsIDmaskMember_Reserved_2_GET_POS( base_ptr, out_ptr, bmlocal10229_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10229_tmp_bitoff);\
}

#define BM_bsIDmaskMember_Reserved_2_POS_ALIGNED 6

// Alignment of bsIDmaskMember_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_bsIDmaskMember_Reserved_2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDmaskMember_Reserved_2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10230_my_ptr;\
	UINT bmlocal10231_my_bitoff;\
	BM_bsIDmaskMember_Reserved_2_GET_POS( base_ptr, bmlocal10230_my_ptr, bmlocal10231_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10230_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10230_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10230_my_ptr, bmlocal10231_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_bsIDmaskMember_Reserved_2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10232_my_ptr;\
	UINT bmlocal10233_my_bitoff;\
	BM_bsIDmaskMember_Reserved_2_GET_POS( base_ptr, bmlocal10232_my_ptr, bmlocal10233_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10232_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10232_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10232_my_ptr, bmlocal10233_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// bsIDmaskMember_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// bsIDmaskMember_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// bsIDmaskMember_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// bsIDmaskMember_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// bsIDmaskMember_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// bsIDmaskMember_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_bsIDmaskMember_Reserved_2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10234_out_val;\
	BM_bsIDmaskMember_Reserved_2_GET( base_ptr, bmlocal10234_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10234_out_val), "%d", 1);\
}

#define BM_bsIDmaskMember_Reserved_2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_Reserved_2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_bsIDmaskMember_Reserved_2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10235_my_ptr;\
	UINT bmlocal10236_my_bitoff;\
	BM_bsIDmaskMember_Reserved_2_GET_POS( base_ptr, bmlocal10235_my_ptr, bmlocal10236_my_bitoff );\
	(*((UINT16*)bmlocal10235_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10236_my_bitoff );\
}

// bsIDmaskMember_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_bsIDmaskMember_Reserved_2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10237_tmp_bits;\
	BM_bsIDmaskMember_Reserved_2_GET_SIZE( base_ptr, out_bytes, bmlocal10237_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10237_tmp_bits );\
}

#define BM_bsIDmaskMember_Reserved_2_BYTES_SIZE 2

#define BM_bsIDmaskMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10238_tmp_bytes = 0;\
	UINT bmlocal10239_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_bsIDmaskMember_bsIDmask_GET_SIZE( base_ptr, bmlocal10238_tmp_bytes, bmlocal10239_tmp_bits );\
	out_bytes += bmlocal10238_tmp_bytes;\
	out_bits += bmlocal10239_tmp_bits;\
}

#define BM_bsIDmaskMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10240_tmp_bits;\
	BM_bsIDmaskMember_GET_SIZE( base_ptr, out_bytes, bmlocal10240_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10240_tmp_bits );\
}

#define BM_bsIDmaskMember_BYTES_SIZE 8

#define BM_bsIDmaskMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmaskMember", 1);\
	BM_bsIDmaskMember_bsIDmask_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_bsIDmaskMember_Reserved_2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_bsIDmaskMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_bsIDmaskMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 EapIdMember[100];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _EapId[100];
} BMS_EapIdMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _EapId[100];
} BMS_EapIdMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'EapIdMember' Type: 'EapIdMember', Top-level, Non-instance, No bitoff root
#define BM_EapIdMember_EapId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_EapIdMember_EapId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10241_tmp_bitoff;\
	BM_EapIdMember_EapId_GET_POS( base_ptr, out_ptr, bmlocal10241_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10241_tmp_bitoff);\
}

#define BM_EapIdMember_EapId_POS_ALIGNED 0

// ARRAY: EapIdMember_EapId
#define BM_EapIdMember_EapId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapIdMember_EapId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapIdMember_EapId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10242_out_ptr;\
	UINT bmlocal10243_out_bitoff;\
	UINT bmlocal10244_element_size_bytes;\
	UINT bmlocal10245_element_size_bits;\
	BM_EapIdMember_EapId_GET_POS( base_ptr, bmlocal10242_out_ptr, bmlocal10243_out_bitoff );\
	bmlocal10244_element_size_bytes = 1;\
	bmlocal10245_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10242_out_ptr) + (idx0) * bmlocal10244_element_size_bytes );\
	out_bitoff = bmlocal10243_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10245_element_size_bits );\
}

// COMPOSITE: Full name: 'EapIdMember_EapId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapIdMember_EapId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10246_parent_out_ptr;\
	BM_EapIdMember_EapId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10246_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10246_parent_out_ptr;\
}

#define BM_EapIdMember_EapId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10247_tmp_bitoff;\
	BM_EapIdMember_EapId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10247_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10247_tmp_bitoff);\
}

// Alignment of EapIdMember_EapId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapIdMember_EapId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapIdMember_EapId_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10248_my_ptr;\
	UINT bmlocal10249_my_bitoff;\
	BM_EapIdMember_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10248_my_ptr, bmlocal10249_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10248_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10248_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10248_my_ptr, bmlocal10249_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapIdMember_EapId_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10250_my_ptr;\
	UINT bmlocal10251_my_bitoff;\
	BM_EapIdMember_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10250_my_ptr, bmlocal10251_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10250_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10250_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10250_my_ptr, bmlocal10251_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapIdMember_EapId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapIdMember_EapId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapIdMember_EapId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapIdMember_EapId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapIdMember_EapId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapIdMember_EapId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapIdMember_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10252_out_val;\
	BM_EapIdMember_EapId_BufferByte_GET( base_ptr, idx0, bmlocal10252_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10252_out_val), "%d", 1);\
}

#define BM_EapIdMember_EapId_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapIdMember_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapIdMember_EapId_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10253_my_ptr;\
	UINT bmlocal10254_my_bitoff;\
	BM_EapIdMember_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10253_my_ptr, bmlocal10254_my_bitoff );\
	(*((UINT8*)bmlocal10253_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10254_my_bitoff );\
}

// EapIdMember_EapId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapIdMember_EapId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10255_tmp_bits;\
	BM_EapIdMember_EapId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10255_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10255_tmp_bits );\
}

#define BM_EapIdMember_EapId_BufferByte_BYTES_SIZE 1

#define BM_EapIdMember_EapId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapIdMember_EapId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10258_tmp_bits;\
	BM_EapIdMember_EapId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10258_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10258_tmp_bits );\
}

#define BM_EapIdMember_EapId_BYTES_CELL_SIZE 1

#define BM_EapIdMember_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapIdMember_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapIdMember_EapId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapIdMember_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapIdMember_EapId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10259_dim_size0;\
	UINT bmlocal10260_idx0;\
	bmlocal10259_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	for( bmlocal10260_idx0=0; bmlocal10260_idx0<bmlocal10259_dim_size0; bmlocal10260_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10260_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapIdMember_EapId_DUMP_DEPTH_IDX( base_ptr, bmlocal10260_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapIdMember_EapId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapIdMember_EapId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapIdMember_EapId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10261_tmp_bits;\
	BM_EapIdMember_EapId_GET_SIZE( base_ptr, out_bytes, bmlocal10261_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10261_tmp_bits );\
}

#define BM_EapIdMember_EapId_BYTES_SIZE 100

#define BM_EapIdMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10262_tmp_bytes = 0;\
	UINT bmlocal10263_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapIdMember_EapId_GET_SIZE( base_ptr, bmlocal10262_tmp_bytes, bmlocal10263_tmp_bits );\
	out_bytes += bmlocal10262_tmp_bytes;\
	out_bits += bmlocal10263_tmp_bits;\
}

#define BM_EapIdMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10264_tmp_bits;\
	BM_EapIdMember_GET_SIZE( base_ptr, out_bytes, bmlocal10264_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10264_tmp_bits );\
}

#define BM_EapIdMember_BYTES_SIZE 100

#define BM_EapIdMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapIdMember", 1);\
	BM_EapIdMember_EapId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapIdMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapIdMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 provisionedPseudoIdMember[100];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _provisionedPseudoId[100];
} BMS_provisionedPseudoIdMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _provisionedPseudoId[100];
} BMS_provisionedPseudoIdMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'provisionedPseudoIdMember' Type: 'provisionedPseudoIdMember', Top-level, Non-instance, No bitoff root
#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10265_tmp_bitoff;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_POS( base_ptr, out_ptr, bmlocal10265_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10265_tmp_bitoff);\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_POS_ALIGNED 0

// ARRAY: provisionedPseudoIdMember_provisionedPseudoId
#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10266_out_ptr;\
	UINT bmlocal10267_out_bitoff;\
	UINT bmlocal10268_element_size_bytes;\
	UINT bmlocal10269_element_size_bits;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_POS( base_ptr, bmlocal10266_out_ptr, bmlocal10267_out_bitoff );\
	bmlocal10268_element_size_bytes = 1;\
	bmlocal10269_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10266_out_ptr) + (idx0) * bmlocal10268_element_size_bytes );\
	out_bitoff = bmlocal10267_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10269_element_size_bits );\
}

// COMPOSITE: Full name: 'provisionedPseudoIdMember_provisionedPseudoId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10270_parent_out_ptr;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10270_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10270_parent_out_ptr;\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10271_tmp_bitoff;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10271_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10271_tmp_bitoff);\
}

// Alignment of provisionedPseudoIdMember_provisionedPseudoId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10272_my_ptr;\
	UINT bmlocal10273_my_bitoff;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10272_my_ptr, bmlocal10273_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10272_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10272_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10272_my_ptr, bmlocal10273_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10274_my_ptr;\
	UINT bmlocal10275_my_bitoff;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10274_my_ptr, bmlocal10275_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10274_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10274_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10274_my_ptr, bmlocal10275_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10276_out_val;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, bmlocal10276_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10276_out_val), "%d", 1);\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10277_my_ptr;\
	UINT bmlocal10278_my_bitoff;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10277_my_ptr, bmlocal10278_my_bitoff );\
	(*((UINT8*)bmlocal10277_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10278_my_bitoff );\
}

// provisionedPseudoIdMember_provisionedPseudoId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10279_tmp_bits;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10279_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10279_tmp_bits );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_BYTES_SIZE 1

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10282_tmp_bits;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10282_tmp_bits );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BYTES_CELL_SIZE 1

#define BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_provisionedPseudoIdMember_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10283_dim_size0;\
	UINT bmlocal10284_idx0;\
	bmlocal10283_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	for( bmlocal10284_idx0=0; bmlocal10284_idx0<bmlocal10283_dim_size0; bmlocal10284_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10284_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, bmlocal10284_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10285_tmp_bits;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, bmlocal10285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10285_tmp_bits );\
}

#define BM_provisionedPseudoIdMember_provisionedPseudoId_BYTES_SIZE 100

#define BM_provisionedPseudoIdMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10286_tmp_bytes = 0;\
	UINT bmlocal10287_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_provisionedPseudoIdMember_provisionedPseudoId_GET_SIZE( base_ptr, bmlocal10286_tmp_bytes, bmlocal10287_tmp_bits );\
	out_bytes += bmlocal10286_tmp_bytes;\
	out_bits += bmlocal10287_tmp_bits;\
}

#define BM_provisionedPseudoIdMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10288_tmp_bits;\
	BM_provisionedPseudoIdMember_GET_SIZE( base_ptr, out_bytes, bmlocal10288_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10288_tmp_bits );\
}

#define BM_provisionedPseudoIdMember_BYTES_SIZE 100

#define BM_provisionedPseudoIdMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoIdMember", 1);\
	BM_provisionedPseudoIdMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_provisionedPseudoIdMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_provisionedPseudoIdMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 EapPasswordMember[32];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _EapPassword[32];
} BMS_EapPasswordMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _EapPassword[32];
} BMS_EapPasswordMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'EapPasswordMember' Type: 'EapPasswordMember', Top-level, Non-instance, No bitoff root
#define BM_EapPasswordMember_EapPassword_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_EapPasswordMember_EapPassword_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10289_tmp_bitoff;\
	BM_EapPasswordMember_EapPassword_GET_POS( base_ptr, out_ptr, bmlocal10289_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10289_tmp_bitoff);\
}

#define BM_EapPasswordMember_EapPassword_POS_ALIGNED 0

// ARRAY: EapPasswordMember_EapPassword
#define BM_EapPasswordMember_EapPassword_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapPasswordMember_EapPassword_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 32;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapPasswordMember_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10290_out_ptr;\
	UINT bmlocal10291_out_bitoff;\
	UINT bmlocal10292_element_size_bytes;\
	UINT bmlocal10293_element_size_bits;\
	BM_EapPasswordMember_EapPassword_GET_POS( base_ptr, bmlocal10290_out_ptr, bmlocal10291_out_bitoff );\
	bmlocal10292_element_size_bytes = 1;\
	bmlocal10293_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10290_out_ptr) + (idx0) * bmlocal10292_element_size_bytes );\
	out_bitoff = bmlocal10291_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10293_element_size_bits );\
}

// COMPOSITE: Full name: 'EapPasswordMember_EapPassword' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapPasswordMember_EapPassword_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10294_parent_out_ptr;\
	BM_EapPasswordMember_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10294_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10294_parent_out_ptr;\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10295_tmp_bitoff;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10295_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10295_tmp_bitoff);\
}

// Alignment of EapPasswordMember_EapPassword_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapPasswordMember_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10296_my_ptr;\
	UINT bmlocal10297_my_bitoff;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10296_my_ptr, bmlocal10297_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10296_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10296_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10296_my_ptr, bmlocal10297_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10298_my_ptr;\
	UINT bmlocal10299_my_bitoff;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10298_my_ptr, bmlocal10299_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10298_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10298_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10298_my_ptr, bmlocal10299_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapPasswordMember_EapPassword_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapPasswordMember_EapPassword_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapPasswordMember_EapPassword_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapPasswordMember_EapPassword_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapPasswordMember_EapPassword_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapPasswordMember_EapPassword_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapPasswordMember_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10300_out_val;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET( base_ptr, idx0, bmlocal10300_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10300_out_val), "%d", 1);\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapPasswordMember_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10301_my_ptr;\
	UINT bmlocal10302_my_bitoff;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10301_my_ptr, bmlocal10302_my_bitoff );\
	(*((UINT8*)bmlocal10301_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10302_my_bitoff );\
}

// EapPasswordMember_EapPassword_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapPasswordMember_EapPassword_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10303_tmp_bits;\
	BM_EapPasswordMember_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10303_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10303_tmp_bits );\
}

#define BM_EapPasswordMember_EapPassword_BufferByte_BYTES_SIZE 1

#define BM_EapPasswordMember_EapPassword_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapPasswordMember_EapPassword_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10306_tmp_bits;\
	BM_EapPasswordMember_EapPassword_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10306_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10306_tmp_bits );\
}

#define BM_EapPasswordMember_EapPassword_BYTES_CELL_SIZE 1

#define BM_EapPasswordMember_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapPasswordMember_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapPasswordMember_EapPassword_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapPasswordMember_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapPasswordMember_EapPassword_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10307_dim_size0;\
	UINT bmlocal10308_idx0;\
	bmlocal10307_dim_size0 = 32;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	for( bmlocal10308_idx0=0; bmlocal10308_idx0<bmlocal10307_dim_size0; bmlocal10308_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10308_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapPasswordMember_EapPassword_DUMP_DEPTH_IDX( base_ptr, bmlocal10308_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapPasswordMember_EapPassword_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapPasswordMember_EapPassword_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapPasswordMember_EapPassword_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10309_tmp_bits;\
	BM_EapPasswordMember_EapPassword_GET_SIZE( base_ptr, out_bytes, bmlocal10309_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10309_tmp_bits );\
}

#define BM_EapPasswordMember_EapPassword_BYTES_SIZE 32

#define BM_EapPasswordMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10310_tmp_bytes = 0;\
	UINT bmlocal10311_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapPasswordMember_EapPassword_GET_SIZE( base_ptr, bmlocal10310_tmp_bytes, bmlocal10311_tmp_bits );\
	out_bytes += bmlocal10310_tmp_bytes;\
	out_bits += bmlocal10311_tmp_bits;\
}

#define BM_EapPasswordMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10312_tmp_bits;\
	BM_EapPasswordMember_GET_SIZE( base_ptr, out_bytes, bmlocal10312_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10312_tmp_bits );\
}

#define BM_EapPasswordMember_BYTES_SIZE 32

#define BM_EapPasswordMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPasswordMember", 1);\
	BM_EapPasswordMember_EapPassword_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapPasswordMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapPasswordMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 RealmMember[100];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _Realm[100];
} BMS_RealmMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _Realm[100];
} BMS_RealmMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'RealmMember' Type: 'RealmMember', Top-level, Non-instance, No bitoff root
#define BM_RealmMember_Realm_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_RealmMember_Realm_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10313_tmp_bitoff;\
	BM_RealmMember_Realm_GET_POS( base_ptr, out_ptr, bmlocal10313_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10313_tmp_bitoff);\
}

#define BM_RealmMember_Realm_POS_ALIGNED 0

// ARRAY: RealmMember_Realm
#define BM_RealmMember_Realm_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RealmMember_Realm_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RealmMember_Realm_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10314_out_ptr;\
	UINT bmlocal10315_out_bitoff;\
	UINT bmlocal10316_element_size_bytes;\
	UINT bmlocal10317_element_size_bits;\
	BM_RealmMember_Realm_GET_POS( base_ptr, bmlocal10314_out_ptr, bmlocal10315_out_bitoff );\
	bmlocal10316_element_size_bytes = 1;\
	bmlocal10317_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10314_out_ptr) + (idx0) * bmlocal10316_element_size_bytes );\
	out_bitoff = bmlocal10315_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10317_element_size_bits );\
}

// COMPOSITE: Full name: 'RealmMember_Realm' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RealmMember_Realm_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10318_parent_out_ptr;\
	BM_RealmMember_Realm_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10318_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10318_parent_out_ptr;\
}

#define BM_RealmMember_Realm_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10319_tmp_bitoff;\
	BM_RealmMember_Realm_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10319_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10319_tmp_bitoff);\
}

// Alignment of RealmMember_Realm_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RealmMember_Realm_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RealmMember_Realm_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10320_my_ptr;\
	UINT bmlocal10321_my_bitoff;\
	BM_RealmMember_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10320_my_ptr, bmlocal10321_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10320_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10320_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10320_my_ptr, bmlocal10321_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RealmMember_Realm_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10322_my_ptr;\
	UINT bmlocal10323_my_bitoff;\
	BM_RealmMember_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10322_my_ptr, bmlocal10323_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10322_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10322_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10322_my_ptr, bmlocal10323_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RealmMember_Realm_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RealmMember_Realm_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RealmMember_Realm_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RealmMember_Realm_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RealmMember_Realm_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RealmMember_Realm_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RealmMember_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10324_out_val;\
	BM_RealmMember_Realm_BufferByte_GET( base_ptr, idx0, bmlocal10324_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10324_out_val), "%d", 1);\
}

#define BM_RealmMember_Realm_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RealmMember_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RealmMember_Realm_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10325_my_ptr;\
	UINT bmlocal10326_my_bitoff;\
	BM_RealmMember_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10325_my_ptr, bmlocal10326_my_bitoff );\
	(*((UINT8*)bmlocal10325_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10326_my_bitoff );\
}

// RealmMember_Realm_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RealmMember_Realm_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10327_tmp_bits;\
	BM_RealmMember_Realm_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10327_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10327_tmp_bits );\
}

#define BM_RealmMember_Realm_BufferByte_BYTES_SIZE 1

#define BM_RealmMember_Realm_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RealmMember_Realm_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10330_tmp_bits;\
	BM_RealmMember_Realm_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10330_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10330_tmp_bits );\
}

#define BM_RealmMember_Realm_BYTES_CELL_SIZE 1

#define BM_RealmMember_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_RealmMember_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RealmMember_Realm_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RealmMember_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_RealmMember_Realm_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10331_dim_size0;\
	UINT bmlocal10332_idx0;\
	bmlocal10331_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	for( bmlocal10332_idx0=0; bmlocal10332_idx0<bmlocal10331_dim_size0; bmlocal10332_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10332_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RealmMember_Realm_DUMP_DEPTH_IDX( base_ptr, bmlocal10332_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RealmMember_Realm_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RealmMember_Realm_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RealmMember_Realm_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10333_tmp_bits;\
	BM_RealmMember_Realm_GET_SIZE( base_ptr, out_bytes, bmlocal10333_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10333_tmp_bits );\
}

#define BM_RealmMember_Realm_BYTES_SIZE 100

#define BM_RealmMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10334_tmp_bytes = 0;\
	UINT bmlocal10335_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RealmMember_Realm_GET_SIZE( base_ptr, bmlocal10334_tmp_bytes, bmlocal10335_tmp_bits );\
	out_bytes += bmlocal10334_tmp_bytes;\
	out_bits += bmlocal10335_tmp_bits;\
}

#define BM_RealmMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10336_tmp_bits;\
	BM_RealmMember_GET_SIZE( base_ptr, out_bytes, bmlocal10336_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10336_tmp_bits );\
}

#define BM_RealmMember_BYTES_SIZE 100

#define BM_RealmMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RealmMember", 1);\
	BM_RealmMember_Realm_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RealmMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RealmMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 pkgNameMember[50];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _pkgName[50];
} BMS_pkgNameMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _pkgName[50];
} BMS_pkgNameMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'pkgNameMember' Type: 'pkgNameMember', Top-level, Non-instance, No bitoff root
#define BM_pkgNameMember_pkgName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_pkgNameMember_pkgName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10337_tmp_bitoff;\
	BM_pkgNameMember_pkgName_GET_POS( base_ptr, out_ptr, bmlocal10337_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10337_tmp_bitoff);\
}

#define BM_pkgNameMember_pkgName_POS_ALIGNED 0

// ARRAY: pkgNameMember_pkgName
#define BM_pkgNameMember_pkgName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgNameMember_pkgName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgNameMember_pkgName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10338_out_ptr;\
	UINT bmlocal10339_out_bitoff;\
	UINT bmlocal10340_element_size_bytes;\
	UINT bmlocal10341_element_size_bits;\
	BM_pkgNameMember_pkgName_GET_POS( base_ptr, bmlocal10338_out_ptr, bmlocal10339_out_bitoff );\
	bmlocal10340_element_size_bytes = 1;\
	bmlocal10341_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10338_out_ptr) + (idx0) * bmlocal10340_element_size_bytes );\
	out_bitoff = bmlocal10339_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10341_element_size_bits );\
}

// COMPOSITE: Full name: 'pkgNameMember_pkgName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_pkgNameMember_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10342_parent_out_ptr;\
	BM_pkgNameMember_pkgName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10342_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10342_parent_out_ptr;\
}

#define BM_pkgNameMember_pkgName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10343_tmp_bitoff;\
	BM_pkgNameMember_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10343_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10343_tmp_bitoff);\
}

// Alignment of pkgNameMember_pkgName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_pkgNameMember_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgNameMember_pkgName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10344_my_ptr;\
	UINT bmlocal10345_my_bitoff;\
	BM_pkgNameMember_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10344_my_ptr, bmlocal10345_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10344_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10344_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10344_my_ptr, bmlocal10345_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_pkgNameMember_pkgName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10346_my_ptr;\
	UINT bmlocal10347_my_bitoff;\
	BM_pkgNameMember_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10346_my_ptr, bmlocal10347_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10346_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10346_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10346_my_ptr, bmlocal10347_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// pkgNameMember_pkgName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// pkgNameMember_pkgName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// pkgNameMember_pkgName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// pkgNameMember_pkgName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// pkgNameMember_pkgName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// pkgNameMember_pkgName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_pkgNameMember_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10348_out_val;\
	BM_pkgNameMember_pkgName_BufferByte_GET( base_ptr, idx0, bmlocal10348_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10348_out_val), "%d", 1);\
}

#define BM_pkgNameMember_pkgName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_pkgNameMember_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_pkgNameMember_pkgName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10349_my_ptr;\
	UINT bmlocal10350_my_bitoff;\
	BM_pkgNameMember_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10349_my_ptr, bmlocal10350_my_bitoff );\
	(*((UINT8*)bmlocal10349_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10350_my_bitoff );\
}

// pkgNameMember_pkgName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_pkgNameMember_pkgName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10351_tmp_bits;\
	BM_pkgNameMember_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10351_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10351_tmp_bits );\
}

#define BM_pkgNameMember_pkgName_BufferByte_BYTES_SIZE 1

#define BM_pkgNameMember_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgNameMember_pkgName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10354_tmp_bits;\
	BM_pkgNameMember_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10354_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10354_tmp_bits );\
}

#define BM_pkgNameMember_pkgName_BYTES_CELL_SIZE 1

#define BM_pkgNameMember_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_pkgNameMember_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgNameMember_pkgName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_pkgNameMember_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_pkgNameMember_pkgName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10355_dim_size0;\
	UINT bmlocal10356_idx0;\
	bmlocal10355_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgName", 1);\
	for( bmlocal10356_idx0=0; bmlocal10356_idx0<bmlocal10355_dim_size0; bmlocal10356_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10356_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_pkgNameMember_pkgName_DUMP_DEPTH_IDX( base_ptr, bmlocal10356_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgNameMember_pkgName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_pkgNameMember_pkgName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_pkgNameMember_pkgName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10357_tmp_bits;\
	BM_pkgNameMember_pkgName_GET_SIZE( base_ptr, out_bytes, bmlocal10357_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10357_tmp_bits );\
}

#define BM_pkgNameMember_pkgName_BYTES_SIZE 50

#define BM_pkgNameMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10358_tmp_bytes = 0;\
	UINT bmlocal10359_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_pkgNameMember_pkgName_GET_SIZE( base_ptr, bmlocal10358_tmp_bytes, bmlocal10359_tmp_bits );\
	out_bytes += bmlocal10358_tmp_bytes;\
	out_bits += bmlocal10359_tmp_bits;\
}

#define BM_pkgNameMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10360_tmp_bits;\
	BM_pkgNameMember_GET_SIZE( base_ptr, out_bytes, bmlocal10360_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10360_tmp_bits );\
}

#define BM_pkgNameMember_BYTES_SIZE 50

#define BM_pkgNameMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgNameMember", 1);\
	BM_pkgNameMember_pkgName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgNameMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_pkgNameMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 pkgVersionMember[50];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _pkgVersion[50];
} BMS_pkgVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _pkgVersion[50];
} BMS_pkgVersionMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'pkgVersionMember' Type: 'pkgVersionMember', Top-level, Non-instance, No bitoff root
#define BM_pkgVersionMember_pkgVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_pkgVersionMember_pkgVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10361_tmp_bitoff;\
	BM_pkgVersionMember_pkgVersion_GET_POS( base_ptr, out_ptr, bmlocal10361_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10361_tmp_bitoff);\
}

#define BM_pkgVersionMember_pkgVersion_POS_ALIGNED 0

// ARRAY: pkgVersionMember_pkgVersion
#define BM_pkgVersionMember_pkgVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgVersionMember_pkgVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgVersionMember_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10362_out_ptr;\
	UINT bmlocal10363_out_bitoff;\
	UINT bmlocal10364_element_size_bytes;\
	UINT bmlocal10365_element_size_bits;\
	BM_pkgVersionMember_pkgVersion_GET_POS( base_ptr, bmlocal10362_out_ptr, bmlocal10363_out_bitoff );\
	bmlocal10364_element_size_bytes = 1;\
	bmlocal10365_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10362_out_ptr) + (idx0) * bmlocal10364_element_size_bytes );\
	out_bitoff = bmlocal10363_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10365_element_size_bits );\
}

// COMPOSITE: Full name: 'pkgVersionMember_pkgVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10366_parent_out_ptr;\
	BM_pkgVersionMember_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10366_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10366_parent_out_ptr;\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10367_tmp_bitoff;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10367_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10367_tmp_bitoff);\
}

// Alignment of pkgVersionMember_pkgVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_pkgVersionMember_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10368_my_ptr;\
	UINT bmlocal10369_my_bitoff;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal10368_my_ptr, bmlocal10369_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10368_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10368_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10368_my_ptr, bmlocal10369_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10370_my_ptr;\
	UINT bmlocal10371_my_bitoff;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal10370_my_ptr, bmlocal10371_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10370_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10370_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10370_my_ptr, bmlocal10371_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// pkgVersionMember_pkgVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// pkgVersionMember_pkgVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// pkgVersionMember_pkgVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// pkgVersionMember_pkgVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// pkgVersionMember_pkgVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// pkgVersionMember_pkgVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_pkgVersionMember_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10372_out_val;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET( base_ptr, idx0, bmlocal10372_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10372_out_val), "%d", 1);\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_pkgVersionMember_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10373_my_ptr;\
	UINT bmlocal10374_my_bitoff;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal10373_my_ptr, bmlocal10374_my_bitoff );\
	(*((UINT8*)bmlocal10373_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10374_my_bitoff );\
}

// pkgVersionMember_pkgVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_pkgVersionMember_pkgVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10375_tmp_bits;\
	BM_pkgVersionMember_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10375_tmp_bits );\
}

#define BM_pkgVersionMember_pkgVersion_BufferByte_BYTES_SIZE 1

#define BM_pkgVersionMember_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgVersionMember_pkgVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10378_tmp_bits;\
	BM_pkgVersionMember_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10378_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10378_tmp_bits );\
}

#define BM_pkgVersionMember_pkgVersion_BYTES_CELL_SIZE 1

#define BM_pkgVersionMember_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_pkgVersionMember_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_pkgVersionMember_pkgVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_pkgVersionMember_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_pkgVersionMember_pkgVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10379_dim_size0;\
	UINT bmlocal10380_idx0;\
	bmlocal10379_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersion", 1);\
	for( bmlocal10380_idx0=0; bmlocal10380_idx0<bmlocal10379_dim_size0; bmlocal10380_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10380_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_pkgVersionMember_pkgVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal10380_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgVersionMember_pkgVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_pkgVersionMember_pkgVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_pkgVersionMember_pkgVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10381_tmp_bits;\
	BM_pkgVersionMember_pkgVersion_GET_SIZE( base_ptr, out_bytes, bmlocal10381_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10381_tmp_bits );\
}

#define BM_pkgVersionMember_pkgVersion_BYTES_SIZE 50

#define BM_pkgVersionMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10382_tmp_bytes = 0;\
	UINT bmlocal10383_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_pkgVersionMember_pkgVersion_GET_SIZE( base_ptr, bmlocal10382_tmp_bytes, bmlocal10383_tmp_bits );\
	out_bytes += bmlocal10382_tmp_bytes;\
	out_bits += bmlocal10383_tmp_bits;\
}

#define BM_pkgVersionMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10384_tmp_bits;\
	BM_pkgVersionMember_GET_SIZE( base_ptr, out_bytes, bmlocal10384_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10384_tmp_bits );\
}

#define BM_pkgVersionMember_BYTES_SIZE 50

#define BM_pkgVersionMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersionMember", 1);\
	BM_pkgVersionMember_pkgVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_pkgVersionMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_pkgVersionMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 downloadPkgURLMember[260];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _downloadPkgURL[260];
} BMS_downloadPkgURLMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _downloadPkgURL[260];
} BMS_downloadPkgURLMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'downloadPkgURLMember' Type: 'downloadPkgURLMember', Top-level, Non-instance, No bitoff root
#define BM_downloadPkgURLMember_downloadPkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_downloadPkgURLMember_downloadPkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10385_tmp_bitoff;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_POS( base_ptr, out_ptr, bmlocal10385_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10385_tmp_bitoff);\
}

#define BM_downloadPkgURLMember_downloadPkgURL_POS_ALIGNED 0

// ARRAY: downloadPkgURLMember_downloadPkgURL
#define BM_downloadPkgURLMember_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10386_out_ptr;\
	UINT bmlocal10387_out_bitoff;\
	UINT bmlocal10388_element_size_bytes;\
	UINT bmlocal10389_element_size_bits;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_POS( base_ptr, bmlocal10386_out_ptr, bmlocal10387_out_bitoff );\
	bmlocal10388_element_size_bytes = 1;\
	bmlocal10389_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10386_out_ptr) + (idx0) * bmlocal10388_element_size_bytes );\
	out_bitoff = bmlocal10387_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10389_element_size_bits );\
}

// COMPOSITE: Full name: 'downloadPkgURLMember_downloadPkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10390_parent_out_ptr;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10390_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10390_parent_out_ptr;\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10391_tmp_bitoff;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10391_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10391_tmp_bitoff);\
}

// Alignment of downloadPkgURLMember_downloadPkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10392_my_ptr;\
	UINT bmlocal10393_my_bitoff;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10392_my_ptr, bmlocal10393_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10392_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10392_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10392_my_ptr, bmlocal10393_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10394_my_ptr;\
	UINT bmlocal10395_my_bitoff;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10394_my_ptr, bmlocal10395_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10394_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10394_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10394_my_ptr, bmlocal10395_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// downloadPkgURLMember_downloadPkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// downloadPkgURLMember_downloadPkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// downloadPkgURLMember_downloadPkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// downloadPkgURLMember_downloadPkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// downloadPkgURLMember_downloadPkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// downloadPkgURLMember_downloadPkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10396_out_val;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET( base_ptr, idx0, bmlocal10396_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10396_out_val), "%d", 1);\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10397_my_ptr;\
	UINT bmlocal10398_my_bitoff;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10397_my_ptr, bmlocal10398_my_bitoff );\
	(*((UINT8*)bmlocal10397_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10398_my_bitoff );\
}

// downloadPkgURLMember_downloadPkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10399_tmp_bits;\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10399_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10399_tmp_bits );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BufferByte_BYTES_SIZE 1

#define BM_downloadPkgURLMember_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10402_tmp_bits;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10402_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10402_tmp_bits );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BYTES_CELL_SIZE 1

#define BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_downloadPkgURLMember_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10403_dim_size0;\
	UINT bmlocal10404_idx0;\
	bmlocal10403_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURL", 1);\
	for( bmlocal10404_idx0=0; bmlocal10404_idx0<bmlocal10403_dim_size0; bmlocal10404_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10404_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal10404_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10405_tmp_bits;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal10405_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10405_tmp_bits );\
}

#define BM_downloadPkgURLMember_downloadPkgURL_BYTES_SIZE 260

#define BM_downloadPkgURLMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10406_tmp_bytes = 0;\
	UINT bmlocal10407_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_downloadPkgURLMember_downloadPkgURL_GET_SIZE( base_ptr, bmlocal10406_tmp_bytes, bmlocal10407_tmp_bits );\
	out_bytes += bmlocal10406_tmp_bytes;\
	out_bits += bmlocal10407_tmp_bits;\
}

#define BM_downloadPkgURLMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10408_tmp_bits;\
	BM_downloadPkgURLMember_GET_SIZE( base_ptr, out_bytes, bmlocal10408_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10408_tmp_bits );\
}

#define BM_downloadPkgURLMember_BYTES_SIZE 260

#define BM_downloadPkgURLMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURLMember", 1);\
	BM_downloadPkgURLMember_downloadPkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadPkgURLMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_downloadPkgURLMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 downloadAndUpdatePkgURLMember[260];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _downloadAndUpdatePkgURL[260];
} BMS_downloadAndUpdatePkgURLMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _downloadAndUpdatePkgURL[260];
} BMS_downloadAndUpdatePkgURLMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'downloadAndUpdatePkgURLMember' Type: 'downloadAndUpdatePkgURLMember', Top-level, Non-instance, No bitoff root
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10409_tmp_bitoff;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, bmlocal10409_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10409_tmp_bitoff);\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_POS_ALIGNED 0

// ARRAY: downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10410_out_ptr;\
	UINT bmlocal10411_out_bitoff;\
	UINT bmlocal10412_element_size_bytes;\
	UINT bmlocal10413_element_size_bits;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, bmlocal10410_out_ptr, bmlocal10411_out_bitoff );\
	bmlocal10412_element_size_bytes = 1;\
	bmlocal10413_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10410_out_ptr) + (idx0) * bmlocal10412_element_size_bytes );\
	out_bitoff = bmlocal10411_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10413_element_size_bits );\
}

// COMPOSITE: Full name: 'downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10414_parent_out_ptr;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10414_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10414_parent_out_ptr;\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10415_tmp_bitoff;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10415_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10415_tmp_bitoff);\
}

// Alignment of downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10416_my_ptr;\
	UINT bmlocal10417_my_bitoff;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10416_my_ptr, bmlocal10417_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10416_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10416_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10416_my_ptr, bmlocal10417_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10418_my_ptr;\
	UINT bmlocal10419_my_bitoff;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10418_my_ptr, bmlocal10419_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10418_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10418_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10418_my_ptr, bmlocal10419_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10420_out_val;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, bmlocal10420_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10420_out_val), "%d", 1);\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10421_my_ptr;\
	UINT bmlocal10422_my_bitoff;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal10421_my_ptr, bmlocal10422_my_bitoff );\
	(*((UINT8*)bmlocal10421_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10422_my_bitoff );\
}

// downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10423_tmp_bits;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10423_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10423_tmp_bits );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_BYTES_SIZE 1

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10426_tmp_bits;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10426_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10426_tmp_bits );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BYTES_CELL_SIZE 1

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10427_dim_size0;\
	UINT bmlocal10428_idx0;\
	bmlocal10427_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURL", 1);\
	for( bmlocal10428_idx0=0; bmlocal10428_idx0<bmlocal10427_dim_size0; bmlocal10428_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10428_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal10428_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10429_tmp_bits;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal10429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10429_tmp_bits );\
}

#define BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_BYTES_SIZE 260

#define BM_downloadAndUpdatePkgURLMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10430_tmp_bytes = 0;\
	UINT bmlocal10431_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, bmlocal10430_tmp_bytes, bmlocal10431_tmp_bits );\
	out_bytes += bmlocal10430_tmp_bytes;\
	out_bits += bmlocal10431_tmp_bits;\
}

#define BM_downloadAndUpdatePkgURLMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10432_tmp_bits;\
	BM_downloadAndUpdatePkgURLMember_GET_SIZE( base_ptr, out_bytes, bmlocal10432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10432_tmp_bits );\
}

#define BM_downloadAndUpdatePkgURLMember_BYTES_SIZE 260

#define BM_downloadAndUpdatePkgURLMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURLMember", 1);\
	BM_downloadAndUpdatePkgURLMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_downloadAndUpdatePkgURLMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_downloadAndUpdatePkgURLMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 operatorNameMember[100];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _operatorName[100];
} BMS_operatorNameMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _operatorName[100];
} BMS_operatorNameMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'operatorNameMember' Type: 'operatorNameMember', Top-level, Non-instance, No bitoff root
#define BM_operatorNameMember_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_operatorNameMember_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10433_tmp_bitoff;\
	BM_operatorNameMember_operatorName_GET_POS( base_ptr, out_ptr, bmlocal10433_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10433_tmp_bitoff);\
}

#define BM_operatorNameMember_operatorName_POS_ALIGNED 0

// ARRAY: operatorNameMember_operatorName
#define BM_operatorNameMember_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_operatorNameMember_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_operatorNameMember_operatorName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10434_out_ptr;\
	UINT bmlocal10435_out_bitoff;\
	UINT bmlocal10436_element_size_bytes;\
	UINT bmlocal10437_element_size_bits;\
	BM_operatorNameMember_operatorName_GET_POS( base_ptr, bmlocal10434_out_ptr, bmlocal10435_out_bitoff );\
	bmlocal10436_element_size_bytes = 1;\
	bmlocal10437_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10434_out_ptr) + (idx0) * bmlocal10436_element_size_bytes );\
	out_bitoff = bmlocal10435_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10437_element_size_bits );\
}

// COMPOSITE: Full name: 'operatorNameMember_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_operatorNameMember_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10438_parent_out_ptr;\
	BM_operatorNameMember_operatorName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10438_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10438_parent_out_ptr;\
}

#define BM_operatorNameMember_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10439_tmp_bitoff;\
	BM_operatorNameMember_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10439_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10439_tmp_bitoff);\
}

// Alignment of operatorNameMember_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_operatorNameMember_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_operatorNameMember_operatorName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10440_my_ptr;\
	UINT bmlocal10441_my_bitoff;\
	BM_operatorNameMember_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10440_my_ptr, bmlocal10441_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10440_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10440_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10440_my_ptr, bmlocal10441_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_operatorNameMember_operatorName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10442_my_ptr;\
	UINT bmlocal10443_my_bitoff;\
	BM_operatorNameMember_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10442_my_ptr, bmlocal10443_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10442_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10442_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10442_my_ptr, bmlocal10443_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// operatorNameMember_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// operatorNameMember_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// operatorNameMember_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// operatorNameMember_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// operatorNameMember_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// operatorNameMember_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_operatorNameMember_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10444_out_val;\
	BM_operatorNameMember_operatorName_BufferByte_GET( base_ptr, idx0, bmlocal10444_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10444_out_val), "%d", 1);\
}

#define BM_operatorNameMember_operatorName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_operatorNameMember_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_operatorNameMember_operatorName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10445_my_ptr;\
	UINT bmlocal10446_my_bitoff;\
	BM_operatorNameMember_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal10445_my_ptr, bmlocal10446_my_bitoff );\
	(*((UINT8*)bmlocal10445_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10446_my_bitoff );\
}

// operatorNameMember_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_operatorNameMember_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10447_tmp_bits;\
	BM_operatorNameMember_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10447_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10447_tmp_bits );\
}

#define BM_operatorNameMember_operatorName_BufferByte_BYTES_SIZE 1

#define BM_operatorNameMember_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_operatorNameMember_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10450_tmp_bits;\
	BM_operatorNameMember_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10450_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10450_tmp_bits );\
}

#define BM_operatorNameMember_operatorName_BYTES_CELL_SIZE 1

#define BM_operatorNameMember_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_operatorNameMember_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_operatorNameMember_operatorName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_operatorNameMember_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_operatorNameMember_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10451_dim_size0;\
	UINT bmlocal10452_idx0;\
	bmlocal10451_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal10452_idx0=0; bmlocal10452_idx0<bmlocal10451_dim_size0; bmlocal10452_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10452_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_operatorNameMember_operatorName_DUMP_DEPTH_IDX( base_ptr, bmlocal10452_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_operatorNameMember_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_operatorNameMember_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_operatorNameMember_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10453_tmp_bits;\
	BM_operatorNameMember_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal10453_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10453_tmp_bits );\
}

#define BM_operatorNameMember_operatorName_BYTES_SIZE 100

#define BM_operatorNameMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10454_tmp_bytes = 0;\
	UINT bmlocal10455_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_operatorNameMember_operatorName_GET_SIZE( base_ptr, bmlocal10454_tmp_bytes, bmlocal10455_tmp_bits );\
	out_bytes += bmlocal10454_tmp_bytes;\
	out_bits += bmlocal10455_tmp_bits;\
}

#define BM_operatorNameMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10456_tmp_bits;\
	BM_operatorNameMember_GET_SIZE( base_ptr, out_bytes, bmlocal10456_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10456_tmp_bits );\
}

#define BM_operatorNameMember_BYTES_SIZE 100

#define BM_operatorNameMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorNameMember", 1);\
	BM_operatorNameMember_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_operatorNameMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_operatorNameMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 lockMember[176];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _lockMem[176];
} BMS_lockMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BufferString _lockMem[176];
} BMS_lockMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'lockMember' Type: 'lockMember', Top-level, Non-instance, No bitoff root
#define BM_lockMember_lockMem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_lockMember_lockMem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10457_tmp_bitoff;\
	BM_lockMember_lockMem_GET_POS( base_ptr, out_ptr, bmlocal10457_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10457_tmp_bitoff);\
}

#define BM_lockMember_lockMem_POS_ALIGNED 0

// ARRAY: lockMember_lockMem
#define BM_lockMember_lockMem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 176;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_lockMember_lockMem_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 176;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_lockMember_lockMem_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10458_out_ptr;\
	UINT bmlocal10459_out_bitoff;\
	UINT bmlocal10460_element_size_bytes;\
	UINT bmlocal10461_element_size_bits;\
	BM_lockMember_lockMem_GET_POS( base_ptr, bmlocal10458_out_ptr, bmlocal10459_out_bitoff );\
	bmlocal10460_element_size_bytes = 1;\
	bmlocal10461_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10458_out_ptr) + (idx0) * bmlocal10460_element_size_bytes );\
	out_bitoff = bmlocal10459_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10461_element_size_bits );\
}

// COMPOSITE: Full name: 'lockMember_lockMem' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_lockMember_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10462_parent_out_ptr;\
	BM_lockMember_lockMem_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10462_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10462_parent_out_ptr;\
}

#define BM_lockMember_lockMem_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10463_tmp_bitoff;\
	BM_lockMember_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10463_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10463_tmp_bitoff);\
}

// Alignment of lockMember_lockMem_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_lockMember_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_lockMember_lockMem_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10464_my_ptr;\
	UINT bmlocal10465_my_bitoff;\
	BM_lockMember_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal10464_my_ptr, bmlocal10465_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10464_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10464_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10464_my_ptr, bmlocal10465_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_lockMember_lockMem_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10466_my_ptr;\
	UINT bmlocal10467_my_bitoff;\
	BM_lockMember_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal10466_my_ptr, bmlocal10467_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10466_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10466_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10466_my_ptr, bmlocal10467_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// lockMember_lockMem_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// lockMember_lockMem_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// lockMember_lockMem_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// lockMember_lockMem_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// lockMember_lockMem_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// lockMember_lockMem_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_lockMember_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10468_out_val;\
	BM_lockMember_lockMem_BufferByte_GET( base_ptr, idx0, bmlocal10468_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10468_out_val), "%d", 1);\
}

#define BM_lockMember_lockMem_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_lockMember_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_lockMember_lockMem_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10469_my_ptr;\
	UINT bmlocal10470_my_bitoff;\
	BM_lockMember_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal10469_my_ptr, bmlocal10470_my_bitoff );\
	(*((UINT8*)bmlocal10469_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10470_my_bitoff );\
}

// lockMember_lockMem_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_lockMember_lockMem_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10471_tmp_bits;\
	BM_lockMember_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10471_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10471_tmp_bits );\
}

#define BM_lockMember_lockMem_BufferByte_BYTES_SIZE 1

#define BM_lockMember_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_lockMember_lockMem_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10474_tmp_bits;\
	BM_lockMember_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10474_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10474_tmp_bits );\
}

#define BM_lockMember_lockMem_BYTES_CELL_SIZE 1

#define BM_lockMember_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_lockMember_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_lockMember_lockMem_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_lockMember_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_lockMember_lockMem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10475_dim_size0;\
	UINT bmlocal10476_idx0;\
	bmlocal10475_dim_size0 = 176;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	for( bmlocal10476_idx0=0; bmlocal10476_idx0<bmlocal10475_dim_size0; bmlocal10476_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10476_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_lockMember_lockMem_DUMP_DEPTH_IDX( base_ptr, bmlocal10476_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_lockMember_lockMem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_lockMember_lockMem_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_lockMember_lockMem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10477_tmp_bits;\
	BM_lockMember_lockMem_GET_SIZE( base_ptr, out_bytes, bmlocal10477_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10477_tmp_bits );\
}

#define BM_lockMember_lockMem_BYTES_SIZE 176

#define BM_lockMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10478_tmp_bytes = 0;\
	UINT bmlocal10479_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_lockMember_lockMem_GET_SIZE( base_ptr, bmlocal10478_tmp_bytes, bmlocal10479_tmp_bits );\
	out_bytes += bmlocal10478_tmp_bytes;\
	out_bits += bmlocal10479_tmp_bits;\
}

#define BM_lockMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10480_tmp_bits;\
	BM_lockMember_GET_SIZE( base_ptr, out_bytes, bmlocal10480_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10480_tmp_bits );\
}

#define BM_lockMember_BYTES_SIZE 176

#define BM_lockMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMember", 1);\
	BM_lockMember_lockMem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_lockMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_lockMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 AvailableNSPsIdlist[4];

// COMPOSITE: Full name: 'AvailableNSPsIdlist' Type: 'AvailableNSPsIdlist', Top-level, Non-instance, No bitoff root
#define BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10481_tmp_bitoff;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, out_ptr, bmlocal10481_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10481_tmp_bitoff);\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_POS_ALIGNED 0

// Alignment of AvailableNSPsIdlist_NumOfNSPs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_AvailableNSPsIdlist_NumOfNSPs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10482_my_ptr;\
	UINT bmlocal10483_my_bitoff;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal10482_my_ptr, bmlocal10483_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10482_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10482_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10482_my_ptr, bmlocal10483_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10484_my_ptr;\
	UINT bmlocal10485_my_bitoff;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal10484_my_ptr, bmlocal10485_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10484_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10484_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10484_my_ptr, bmlocal10485_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// AvailableNSPsIdlist_NumOfNSPs: IS_DEFAULT accessor is not defined because no default value was specified.
// AvailableNSPsIdlist_NumOfNSPs: SET_DEFAULT accessor is not defined because no default value was specified.
// AvailableNSPsIdlist_NumOfNSPs: IS_RESET accessor is not defined because no reset value was specified.
// AvailableNSPsIdlist_NumOfNSPs: SET_RESET accessor is not defined because no reset value was specified.
// AvailableNSPsIdlist_NumOfNSPs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// AvailableNSPsIdlist_NumOfNSPs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10486_out_val;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal10486_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfNSPs", 32, (UINT)(bmlocal10486_out_val), "%d", 1);\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10487_my_ptr;\
	UINT bmlocal10488_my_bitoff;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal10487_my_ptr, bmlocal10488_my_bitoff );\
	(*((UINT32*)bmlocal10487_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10488_my_bitoff );\
}

// AvailableNSPsIdlist_NumOfNSPs: Validation accessors are not defined because validation condition was not specified.
#define BM_AvailableNSPsIdlist_NumOfNSPs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10489_tmp_bits;\
	BM_AvailableNSPsIdlist_NumOfNSPs_GET_SIZE( base_ptr, out_bytes, bmlocal10489_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10489_tmp_bits );\
}

#define BM_AvailableNSPsIdlist_NumOfNSPs_BYTES_SIZE 4

#define BM_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10492_acc_bytes;\
	UINT bmlocal10493_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10492_acc_bytes = 4;\
	bmlocal10493_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10492_acc_bytes );\
	out_bitoff += bmlocal10493_acc_bits;\
}

#define BM_AvailableNSPsIdlist_NSPID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10494_tmp_bitoff;\
	BM_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, out_ptr, bmlocal10494_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10494_tmp_bitoff);\
}

#define BM_AvailableNSPsIdlist_NSPID_POS_ALIGNED 4

// ARRAY: AvailableNSPsIdlist_NSPID
#define BM_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal10495_var0;\
		BM_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal10495_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal10495_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AvailableNSPsIdlist_NSPID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal10496_var0;\
			BM_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal10496_var0 );\
			out_element_count = (UINT)(bmlocal10496_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AvailableNSPsIdlist_NSPID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10497_out_ptr;\
	UINT bmlocal10498_out_bitoff;\
	UINT bmlocal10499_element_size_bytes;\
	UINT bmlocal10500_element_size_bits;\
	BM_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, bmlocal10497_out_ptr, bmlocal10498_out_bitoff );\
	bmlocal10499_element_size_bytes = 4;\
	bmlocal10500_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10497_out_ptr) + (idx0) * bmlocal10499_element_size_bytes );\
	out_bitoff = bmlocal10498_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10500_element_size_bits );\
}

// COMPOSITE: Full name: 'AvailableNSPsIdlist_NSPID' Type: 'Uint32', Inner, Non-instance, No bitoff root
#define BM_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10501_parent_out_ptr;\
	BM_AvailableNSPsIdlist_NSPID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10501_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10501_parent_out_ptr;\
}

#define BM_AvailableNSPsIdlist_NSPID_value_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10502_tmp_bitoff;\
	BM_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, out_ptr, bmlocal10502_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10502_tmp_bitoff);\
}

// Alignment of AvailableNSPsIdlist_NSPID_value: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_AvailableNSPsIdlist_NSPID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10503_my_ptr;\
	UINT bmlocal10504_my_bitoff;\
	BM_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal10503_my_ptr, bmlocal10504_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10503_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10503_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10503_my_ptr, bmlocal10504_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_AvailableNSPsIdlist_NSPID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10505_my_ptr;\
	UINT bmlocal10506_my_bitoff;\
	BM_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal10505_my_ptr, bmlocal10506_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10505_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10505_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10505_my_ptr, bmlocal10506_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// AvailableNSPsIdlist_NSPID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// AvailableNSPsIdlist_NSPID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// AvailableNSPsIdlist_NSPID_value: IS_RESET accessor is not defined because no reset value was specified.
// AvailableNSPsIdlist_NSPID_value: SET_RESET accessor is not defined because no reset value was specified.
// AvailableNSPsIdlist_NSPID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// AvailableNSPsIdlist_NSPID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10507_out_val;\
	BM_AvailableNSPsIdlist_NSPID_value_GET( base_ptr, idx0, bmlocal10507_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 32, (UINT)(bmlocal10507_out_val), "%u", 1);\
}

#define BM_AvailableNSPsIdlist_NSPID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10508_my_ptr;\
	UINT bmlocal10509_my_bitoff;\
	BM_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal10508_my_ptr, bmlocal10509_my_bitoff );\
	(*((UINT32*)bmlocal10508_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10509_my_bitoff );\
}

// AvailableNSPsIdlist_NSPID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_AvailableNSPsIdlist_NSPID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10510_tmp_bits;\
	BM_AvailableNSPsIdlist_NSPID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10510_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10510_tmp_bits );\
}

#define BM_AvailableNSPsIdlist_NSPID_value_BYTES_SIZE 4

#define BM_AvailableNSPsIdlist_NSPID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10513_tmp_bits;\
	BM_AvailableNSPsIdlist_NSPID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10513_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10513_tmp_bits );\
}

#define BM_AvailableNSPsIdlist_NSPID_BYTES_CELL_SIZE 4

#define BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10514_dim_size0;\
	UINT bmlocal10515_idx0;\
	{\
		UINT32 bmlocal10516_var0;\
		BM_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal10516_var0 );\
		bmlocal10514_dim_size0 = (UINT)(bmlocal10516_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NSPID", 1);\
	for( bmlocal10515_idx0=0; bmlocal10515_idx0<bmlocal10514_dim_size0; bmlocal10515_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10515_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, bmlocal10515_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AvailableNSPsIdlist_NSPID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_AvailableNSPsIdlist_NSPID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10517_tmp_bits;\
	BM_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, out_bytes, bmlocal10517_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10517_tmp_bits );\
}


#define BM_AvailableNSPsIdlist_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10518_tmp_bytes = 0;\
	UINT bmlocal10519_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, bmlocal10518_tmp_bytes, bmlocal10519_tmp_bits );\
	out_bytes += bmlocal10518_tmp_bytes;\
	out_bits += bmlocal10519_tmp_bits;\
}

#define BM_AvailableNSPsIdlist_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10520_tmp_bits;\
	BM_AvailableNSPsIdlist_GET_SIZE( base_ptr, out_bytes, bmlocal10520_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10520_tmp_bits );\
}

#define BM_AvailableNSPsIdlist_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AvailableNSPsIdlist", 1);\
	BM_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_AvailableNSPsIdlist_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_AvailableNSPsIdlist_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FullBSID[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_bsIDMember _bsID;
	BMS_bsIDmaskMember _bsIDmask;
} BMS_FullBSID;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_bsIDmaskMember _bsIDmask;
	BMS_bsIDMember _bsID;
} BMS_FullBSID;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FullBSID' Type: 'FullBSID', Top-level, Non-instance, No bitoff root
#define BM_FullBSID_bsID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FullBSID_bsID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10521_tmp_bitoff;\
	BM_FullBSID_bsID_GET_POS( base_ptr, out_ptr, bmlocal10521_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10521_tmp_bitoff);\
}

#define BM_FullBSID_bsID_POS_ALIGNED 0

// COMPOSITE: Full name: 'FullBSID_bsID' Type: 'bsIDMember', Inner, Non-instance, No bitoff root
#define BM_FullBSID_bsID_bsID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10522_parent_out_ptr;\
	BM_FullBSID_bsID_GET_POS( base_ptr, bmlocal10522_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10522_parent_out_ptr;\
}

#define BM_FullBSID_bsID_bsID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10523_tmp_bitoff;\
	BM_FullBSID_bsID_bsID_GET_POS( base_ptr, out_ptr, bmlocal10523_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10523_tmp_bitoff);\
}

#define BM_FullBSID_bsID_bsID_POS_ALIGNED 0

// ARRAY: FullBSID_bsID_bsID
#define BM_FullBSID_bsID_bsID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsID_bsID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10524_out_ptr;\
	UINT bmlocal10525_out_bitoff;\
	UINT bmlocal10526_element_size_bytes;\
	UINT bmlocal10527_element_size_bits;\
	BM_FullBSID_bsID_bsID_GET_POS( base_ptr, bmlocal10524_out_ptr, bmlocal10525_out_bitoff );\
	bmlocal10526_element_size_bytes = 1;\
	bmlocal10527_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10524_out_ptr) + (idx0) * bmlocal10526_element_size_bytes );\
	out_bitoff = bmlocal10525_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10527_element_size_bits );\
}

// COMPOSITE: Full name: 'FullBSID_bsID_bsID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10528_parent_out_ptr;\
	BM_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10528_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10528_parent_out_ptr;\
}

// Alignment of FullBSID_bsID_bsID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10529_my_ptr;\
	UINT bmlocal10530_my_bitoff;\
	BM_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, bmlocal10529_my_ptr, bmlocal10530_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10529_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10529_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10529_my_ptr, bmlocal10530_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FullBSID_bsID_bsID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10531_my_ptr;\
	UINT bmlocal10532_my_bitoff;\
	BM_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, bmlocal10531_my_ptr, bmlocal10532_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10531_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10531_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10531_my_ptr, bmlocal10532_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FullBSID_bsID_bsID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsID_bsID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsID_bsID_value: IS_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsID_bsID_value: SET_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsID_bsID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSID_bsID_bsID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10533_out_val;\
	BM_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, bmlocal10533_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10533_out_val), "%u", 1);\
}

#define BM_FullBSID_bsID_bsID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSID_bsID_bsID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10534_my_ptr;\
	UINT bmlocal10535_my_bitoff;\
	BM_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, bmlocal10534_my_ptr, bmlocal10535_my_bitoff );\
	(*((UINT8*)bmlocal10534_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10535_my_bitoff );\
}

// FullBSID_bsID_bsID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSID_bsID_bsID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10536_tmp_bits;\
	BM_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10536_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10536_tmp_bits );\
}

#define BM_FullBSID_bsID_bsID_value_BYTES_SIZE 1

#define BM_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsID_bsID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10539_tmp_bits;\
	BM_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10539_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10539_tmp_bits );\
}

#define BM_FullBSID_bsID_bsID_BYTES_CELL_SIZE 1

#define BM_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsID_bsID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10540_dim_size0;\
	UINT bmlocal10541_idx0;\
	bmlocal10540_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	for( bmlocal10541_idx0=0; bmlocal10541_idx0<bmlocal10540_dim_size0; bmlocal10541_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10541_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, bmlocal10541_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsID_bsID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSID_bsID_bsID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10542_tmp_bits;\
	BM_FullBSID_bsID_bsID_GET_SIZE( base_ptr, out_bytes, bmlocal10542_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10542_tmp_bits );\
}

#define BM_FullBSID_bsID_bsID_BYTES_SIZE 6

#define BM_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10543_tmp_bytes = 0;\
	UINT bmlocal10544_tmp_bits = 0;\
	UINT bmlocal10545_acc_bytes;\
	UINT bmlocal10546_acc_bits;\
	PVOID bmlocal10547_parent_out_ptr;\
	BM_FullBSID_bsID_GET_POS( base_ptr, bmlocal10547_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10547_parent_out_ptr;\
	bmlocal10545_acc_bytes = 0;\
	bmlocal10546_acc_bits = 0;\
	BM_FullBSID_bsID_bsID_GET_SIZE( base_ptr, bmlocal10543_tmp_bytes, bmlocal10544_tmp_bits );\
	bmlocal10545_acc_bytes += bmlocal10543_tmp_bytes;\
	bmlocal10546_acc_bits += bmlocal10544_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10545_acc_bytes );\
	out_bitoff += bmlocal10546_acc_bits;\
}

#define BM_FullBSID_bsID_Reserved_2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10548_tmp_bitoff;\
	BM_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, out_ptr, bmlocal10548_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10548_tmp_bitoff);\
}

#define BM_FullBSID_bsID_Reserved_2_POS_ALIGNED 6

// Alignment of FullBSID_bsID_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsID_Reserved_2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10549_my_ptr;\
	UINT bmlocal10550_my_bitoff;\
	BM_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, bmlocal10549_my_ptr, bmlocal10550_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10549_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10549_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10549_my_ptr, bmlocal10550_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FullBSID_bsID_Reserved_2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10551_my_ptr;\
	UINT bmlocal10552_my_bitoff;\
	BM_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, bmlocal10551_my_ptr, bmlocal10552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10551_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10551_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10551_my_ptr, bmlocal10552_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// FullBSID_bsID_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsID_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsID_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsID_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsID_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSID_bsID_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10553_out_val;\
	BM_FullBSID_bsID_Reserved_2_GET( base_ptr, bmlocal10553_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10553_out_val), "%d", 1);\
}

#define BM_FullBSID_bsID_Reserved_2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSID_bsID_Reserved_2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10554_my_ptr;\
	UINT bmlocal10555_my_bitoff;\
	BM_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, bmlocal10554_my_ptr, bmlocal10555_my_bitoff );\
	(*((UINT16*)bmlocal10554_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10555_my_bitoff );\
}

// FullBSID_bsID_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSID_bsID_Reserved_2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10556_tmp_bits;\
	BM_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, out_bytes, bmlocal10556_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10556_tmp_bits );\
}

#define BM_FullBSID_bsID_Reserved_2_BYTES_SIZE 2

#define BM_FullBSID_bsID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10557_tmp_bytes = 0;\
	UINT bmlocal10558_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_FullBSID_bsID_bsID_GET_SIZE( base_ptr, bmlocal10557_tmp_bytes, bmlocal10558_tmp_bits );\
	out_bytes += bmlocal10557_tmp_bytes;\
	out_bits += bmlocal10558_tmp_bits;\
}

#define BM_FullBSID_bsID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10559_tmp_bits;\
	BM_FullBSID_bsID_GET_SIZE( base_ptr, out_bytes, bmlocal10559_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10559_tmp_bits );\
}

#define BM_FullBSID_bsID_BYTES_SIZE 8

#define BM_FullBSID_bsID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	BM_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FullBSID_bsIDmask_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10562_acc_bytes;\
	UINT bmlocal10563_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10562_acc_bytes = 8;\
	bmlocal10563_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10562_acc_bytes );\
	out_bitoff += bmlocal10563_acc_bits;\
}

#define BM_FullBSID_bsIDmask_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10564_tmp_bitoff;\
	BM_FullBSID_bsIDmask_GET_POS( base_ptr, out_ptr, bmlocal10564_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10564_tmp_bitoff);\
}

#define BM_FullBSID_bsIDmask_POS_ALIGNED 8

// COMPOSITE: Full name: 'FullBSID_bsIDmask' Type: 'bsIDmaskMember', Inner, Non-instance, No bitoff root
#define BM_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10565_parent_out_ptr;\
	BM_FullBSID_bsIDmask_GET_POS( base_ptr, bmlocal10565_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10565_parent_out_ptr;\
}

#define BM_FullBSID_bsIDmask_bsIDmask_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10566_tmp_bitoff;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, out_ptr, bmlocal10566_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10566_tmp_bitoff);\
}

#define BM_FullBSID_bsIDmask_bsIDmask_POS_ALIGNED 8

// ARRAY: FullBSID_bsIDmask_bsIDmask
#define BM_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10567_out_ptr;\
	UINT bmlocal10568_out_bitoff;\
	UINT bmlocal10569_element_size_bytes;\
	UINT bmlocal10570_element_size_bits;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, bmlocal10567_out_ptr, bmlocal10568_out_bitoff );\
	bmlocal10569_element_size_bytes = 1;\
	bmlocal10570_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10567_out_ptr) + (idx0) * bmlocal10569_element_size_bytes );\
	out_bitoff = bmlocal10568_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10570_element_size_bits );\
}

// COMPOSITE: Full name: 'FullBSID_bsIDmask_bsIDmask' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10571_parent_out_ptr;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10571_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10571_parent_out_ptr;\
}

// Alignment of FullBSID_bsIDmask_bsIDmask_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10572_my_ptr;\
	UINT bmlocal10573_my_bitoff;\
	BM_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10572_my_ptr, bmlocal10573_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10572_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10572_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10572_my_ptr, bmlocal10573_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FullBSID_bsIDmask_bsIDmask_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10574_my_ptr;\
	UINT bmlocal10575_my_bitoff;\
	BM_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10574_my_ptr, bmlocal10575_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10574_my_ptr, bmlocal10575_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FullBSID_bsIDmask_bsIDmask_value: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsIDmask_bsIDmask_value: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsIDmask_bsIDmask_value: IS_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsIDmask_bsIDmask_value: SET_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsIDmask_bsIDmask_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSID_bsIDmask_bsIDmask_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10576_out_val;\
	BM_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, bmlocal10576_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10576_out_val), "%u", 1);\
}

#define BM_FullBSID_bsIDmask_bsIDmask_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10577_my_ptr;\
	UINT bmlocal10578_my_bitoff;\
	BM_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, bmlocal10577_my_ptr, bmlocal10578_my_bitoff );\
	(*((UINT8*)bmlocal10577_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10578_my_bitoff );\
}

// FullBSID_bsIDmask_bsIDmask_value: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSID_bsIDmask_bsIDmask_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10579_tmp_bits;\
	BM_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10579_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10579_tmp_bits );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_value_BYTES_SIZE 1

#define BM_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10582_tmp_bits;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10582_tmp_bits );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_BYTES_CELL_SIZE 1

#define BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10583_dim_size0;\
	UINT bmlocal10584_idx0;\
	bmlocal10583_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	for( bmlocal10584_idx0=0; bmlocal10584_idx0<bmlocal10583_dim_size0; bmlocal10584_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10584_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, bmlocal10584_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10585_tmp_bits;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, out_bytes, bmlocal10585_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10585_tmp_bits );\
}

#define BM_FullBSID_bsIDmask_bsIDmask_BYTES_SIZE 6

#define BM_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10586_tmp_bytes = 0;\
	UINT bmlocal10587_tmp_bits = 0;\
	UINT bmlocal10588_acc_bytes;\
	UINT bmlocal10589_acc_bits;\
	PVOID bmlocal10590_parent_out_ptr;\
	BM_FullBSID_bsIDmask_GET_POS( base_ptr, bmlocal10590_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10590_parent_out_ptr;\
	bmlocal10588_acc_bytes = 0;\
	bmlocal10589_acc_bits = 0;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, bmlocal10586_tmp_bytes, bmlocal10587_tmp_bits );\
	bmlocal10588_acc_bytes += bmlocal10586_tmp_bytes;\
	bmlocal10589_acc_bits += bmlocal10587_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10588_acc_bytes );\
	out_bitoff += bmlocal10589_acc_bits;\
}

#define BM_FullBSID_bsIDmask_Reserved_2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10591_tmp_bitoff;\
	BM_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, out_ptr, bmlocal10591_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10591_tmp_bitoff);\
}

#define BM_FullBSID_bsIDmask_Reserved_2_POS_ALIGNED 14

// Alignment of FullBSID_bsIDmask_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10592_my_ptr;\
	UINT bmlocal10593_my_bitoff;\
	BM_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, bmlocal10592_my_ptr, bmlocal10593_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10592_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10592_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10592_my_ptr, bmlocal10593_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FullBSID_bsIDmask_Reserved_2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10594_my_ptr;\
	UINT bmlocal10595_my_bitoff;\
	BM_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, bmlocal10594_my_ptr, bmlocal10595_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10594_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10594_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10594_my_ptr, bmlocal10595_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// FullBSID_bsIDmask_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsIDmask_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSID_bsIDmask_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsIDmask_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// FullBSID_bsIDmask_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSID_bsIDmask_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10596_out_val;\
	BM_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, bmlocal10596_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10596_out_val), "%d", 1);\
}

#define BM_FullBSID_bsIDmask_Reserved_2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSID_bsIDmask_Reserved_2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10597_my_ptr;\
	UINT bmlocal10598_my_bitoff;\
	BM_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, bmlocal10597_my_ptr, bmlocal10598_my_bitoff );\
	(*((UINT16*)bmlocal10597_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10598_my_bitoff );\
}

// FullBSID_bsIDmask_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSID_bsIDmask_Reserved_2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10599_tmp_bits;\
	BM_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, out_bytes, bmlocal10599_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10599_tmp_bits );\
}

#define BM_FullBSID_bsIDmask_Reserved_2_BYTES_SIZE 2

#define BM_FullBSID_bsIDmask_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10600_tmp_bytes = 0;\
	UINT bmlocal10601_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, bmlocal10600_tmp_bytes, bmlocal10601_tmp_bits );\
	out_bytes += bmlocal10600_tmp_bytes;\
	out_bits += bmlocal10601_tmp_bits;\
}

#define BM_FullBSID_bsIDmask_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10602_tmp_bits;\
	BM_FullBSID_bsIDmask_GET_SIZE( base_ptr, out_bytes, bmlocal10602_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10602_tmp_bits );\
}

#define BM_FullBSID_bsIDmask_BYTES_SIZE 8

#define BM_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	BM_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_bsIDmask_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FullBSID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10605_tmp_bits;\
	BM_FullBSID_GET_SIZE( base_ptr, out_bytes, bmlocal10605_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10605_tmp_bits );\
}

#define BM_FullBSID_BYTES_SIZE 16

#define BM_FullBSID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FullBSID", 1);\
	BM_FullBSID_bsID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSID_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FullBSIDArr[4];

// COMPOSITE: Full name: 'FullBSIDArr' Type: 'FullBSIDArr', Top-level, Non-instance, No bitoff root
#define BM_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FullBSIDArr_NumOfBSIDs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10606_tmp_bitoff;\
	BM_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, out_ptr, bmlocal10606_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10606_tmp_bitoff);\
}

#define BM_FullBSIDArr_NumOfBSIDs_POS_ALIGNED 0

// Alignment of FullBSIDArr_NumOfBSIDs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FullBSIDArr_NumOfBSIDs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_NumOfBSIDs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10607_my_ptr;\
	UINT bmlocal10608_my_bitoff;\
	BM_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, bmlocal10607_my_ptr, bmlocal10608_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10607_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10607_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10607_my_ptr, bmlocal10608_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FullBSIDArr_NumOfBSIDs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10609_my_ptr;\
	UINT bmlocal10610_my_bitoff;\
	BM_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, bmlocal10609_my_ptr, bmlocal10610_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10609_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10609_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10609_my_ptr, bmlocal10610_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FullBSIDArr_NumOfBSIDs: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_NumOfBSIDs: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_NumOfBSIDs: IS_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_NumOfBSIDs: SET_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_NumOfBSIDs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSIDArr_NumOfBSIDs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10611_out_val;\
	BM_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal10611_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfBSIDs", 32, (UINT)(bmlocal10611_out_val), "%d", 1);\
}

#define BM_FullBSIDArr_NumOfBSIDs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSIDArr_NumOfBSIDs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10612_my_ptr;\
	UINT bmlocal10613_my_bitoff;\
	BM_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, bmlocal10612_my_ptr, bmlocal10613_my_bitoff );\
	(*((UINT32*)bmlocal10612_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10613_my_bitoff );\
}

// FullBSIDArr_NumOfBSIDs: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSIDArr_NumOfBSIDs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10614_tmp_bits;\
	BM_FullBSIDArr_NumOfBSIDs_GET_SIZE( base_ptr, out_bytes, bmlocal10614_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10614_tmp_bits );\
}

#define BM_FullBSIDArr_NumOfBSIDs_BYTES_SIZE 4

#define BM_FullBSIDArr_FullBSID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10617_acc_bytes;\
	UINT bmlocal10618_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10617_acc_bytes = 4;\
	bmlocal10618_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10617_acc_bytes );\
	out_bitoff += bmlocal10618_acc_bits;\
}

#define BM_FullBSIDArr_FullBSID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10619_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_GET_POS( base_ptr, out_ptr, bmlocal10619_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10619_tmp_bitoff);\
}

#define BM_FullBSIDArr_FullBSID_POS_ALIGNED 4

// ARRAY: FullBSIDArr_FullBSID
#define BM_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal10620_var0;\
		BM_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal10620_var0 );\
		out_bytes = (UINT)(16*(1*bmlocal10620_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_FullBSID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal10621_var0;\
			BM_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal10621_var0 );\
			out_element_count = (UINT)(bmlocal10621_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10622_out_ptr;\
	UINT bmlocal10623_out_bitoff;\
	UINT bmlocal10624_element_size_bytes;\
	UINT bmlocal10625_element_size_bits;\
	BM_FullBSIDArr_FullBSID_GET_POS( base_ptr, bmlocal10622_out_ptr, bmlocal10623_out_bitoff );\
	bmlocal10624_element_size_bytes = 16;\
	bmlocal10625_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10622_out_ptr) + (idx0) * bmlocal10624_element_size_bytes );\
	out_bitoff = bmlocal10623_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10625_element_size_bits );\
}

// COMPOSITE: Full name: 'FullBSIDArr_FullBSID' Type: 'FullBSID', Inner, Non-instance, No bitoff root
#define BM_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10626_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10626_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10626_parent_out_ptr;\
}

#define BM_FullBSIDArr_FullBSID_bsID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10627_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, out_ptr, bmlocal10627_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10627_tmp_bitoff);\
}

// COMPOSITE: Full name: 'FullBSIDArr_FullBSID_bsID' Type: 'bsIDMember', Inner, Non-instance, No bitoff root
#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10628_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, bmlocal10628_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10628_parent_out_ptr;\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10629_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, out_ptr, bmlocal10629_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10629_tmp_bitoff);\
}

// ARRAY: FullBSIDArr_FullBSID_bsID_bsID
#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10630_out_ptr;\
	UINT bmlocal10631_out_bitoff;\
	UINT bmlocal10632_element_size_bytes;\
	UINT bmlocal10633_element_size_bits;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, bmlocal10630_out_ptr, bmlocal10631_out_bitoff );\
	bmlocal10632_element_size_bytes = 1;\
	bmlocal10633_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10630_out_ptr) + (idx1) * bmlocal10632_element_size_bytes );\
	out_bitoff = bmlocal10631_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10633_element_size_bits );\
}

// COMPOSITE: Full name: 'FullBSIDArr_FullBSID_bsID_bsID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10634_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal10634_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10634_parent_out_ptr;\
}

// Alignment of FullBSIDArr_FullBSID_bsID_bsID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10635_my_ptr;\
	UINT bmlocal10636_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, bmlocal10635_my_ptr, bmlocal10636_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10635_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10635_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10635_my_ptr, bmlocal10636_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10637_my_ptr;\
	UINT bmlocal10638_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, bmlocal10637_my_ptr, bmlocal10638_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10637_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10637_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10637_my_ptr, bmlocal10638_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FullBSIDArr_FullBSID_bsID_bsID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsID_bsID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsID_bsID_value: IS_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsID_bsID_value: SET_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsID_bsID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSIDArr_FullBSID_bsID_bsID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10639_out_val;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, idx1, bmlocal10639_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10639_out_val), "%u", 1);\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10640_my_ptr;\
	UINT bmlocal10641_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, bmlocal10640_my_ptr, bmlocal10641_my_bitoff );\
	(*((UINT8*)bmlocal10640_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10641_my_bitoff );\
}

// FullBSIDArr_FullBSID_bsID_bsID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10642_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal10642_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10642_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_value_BYTES_SIZE 1

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10645_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal10645_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10645_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_BYTES_CELL_SIZE 1

#define BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10646_dim_size0;\
	UINT bmlocal10647_idx0;\
	bmlocal10646_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	for( bmlocal10647_idx0=0; bmlocal10647_idx0<bmlocal10646_dim_size0; bmlocal10647_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10647_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal10647_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10648_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10648_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10648_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsID_bsID_BYTES_SIZE 6

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10649_tmp_bytes = 0;\
	UINT bmlocal10650_tmp_bits = 0;\
	UINT bmlocal10651_acc_bytes;\
	UINT bmlocal10652_acc_bits;\
	PVOID bmlocal10653_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, bmlocal10653_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10653_parent_out_ptr;\
	bmlocal10651_acc_bytes = 0;\
	bmlocal10652_acc_bits = 0;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, bmlocal10649_tmp_bytes, bmlocal10650_tmp_bits );\
	bmlocal10651_acc_bytes += bmlocal10649_tmp_bytes;\
	bmlocal10652_acc_bits += bmlocal10650_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10651_acc_bytes );\
	out_bitoff += bmlocal10652_acc_bits;\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10654_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, bmlocal10654_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10654_tmp_bitoff);\
}

// Alignment of FullBSIDArr_FullBSID_bsID_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10655_my_ptr;\
	UINT bmlocal10656_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10655_my_ptr, bmlocal10656_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10655_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10655_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10655_my_ptr, bmlocal10656_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10657_my_ptr;\
	UINT bmlocal10658_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10657_my_ptr, bmlocal10658_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10657_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10657_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10657_my_ptr, bmlocal10658_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// FullBSIDArr_FullBSID_bsID_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsID_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsID_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsID_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsID_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSIDArr_FullBSID_bsID_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10659_out_val;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET( base_ptr, idx0, bmlocal10659_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10659_out_val), "%d", 1);\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10660_my_ptr;\
	UINT bmlocal10661_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10660_my_ptr, bmlocal10661_my_bitoff );\
	(*((UINT16*)bmlocal10660_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10661_my_bitoff );\
}

// FullBSIDArr_FullBSID_bsID_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10662_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10662_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10662_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsID_Reserved_2_BYTES_SIZE 2

#define BM_FullBSIDArr_FullBSID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10663_tmp_bytes = 0;\
	UINT bmlocal10664_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, bmlocal10663_tmp_bytes, bmlocal10664_tmp_bits );\
	out_bytes += bmlocal10663_tmp_bytes;\
	out_bits += bmlocal10664_tmp_bits;\
}

#define BM_FullBSIDArr_FullBSID_bsID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10665_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10665_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10665_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsID_BYTES_SIZE 8

#define BM_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	BM_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10668_acc_bytes;\
	UINT bmlocal10669_acc_bits;\
	PVOID bmlocal10670_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10670_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10670_parent_out_ptr;\
	bmlocal10668_acc_bytes = 8;\
	bmlocal10669_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10668_acc_bytes );\
	out_bitoff += bmlocal10669_acc_bits;\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10671_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, bmlocal10671_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10671_tmp_bitoff);\
}

// COMPOSITE: Full name: 'FullBSIDArr_FullBSID_bsIDmask' Type: 'bsIDmaskMember', Inner, Non-instance, No bitoff root
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10672_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, bmlocal10672_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10672_parent_out_ptr;\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10673_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, bmlocal10673_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10673_tmp_bitoff);\
}

// ARRAY: FullBSIDArr_FullBSID_bsIDmask_bsIDmask
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10674_out_ptr;\
	UINT bmlocal10675_out_bitoff;\
	UINT bmlocal10676_element_size_bytes;\
	UINT bmlocal10677_element_size_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, bmlocal10674_out_ptr, bmlocal10675_out_bitoff );\
	bmlocal10676_element_size_bytes = 1;\
	bmlocal10677_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10674_out_ptr) + (idx1) * bmlocal10676_element_size_bytes );\
	out_bitoff = bmlocal10675_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10677_element_size_bits );\
}

// COMPOSITE: Full name: 'FullBSIDArr_FullBSID_bsIDmask_bsIDmask' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10678_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal10678_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10678_parent_out_ptr;\
}

// Alignment of FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10679_my_ptr;\
	UINT bmlocal10680_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, bmlocal10679_my_ptr, bmlocal10680_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10679_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10679_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10679_my_ptr, bmlocal10680_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10681_my_ptr;\
	UINT bmlocal10682_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, bmlocal10681_my_ptr, bmlocal10682_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10681_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10681_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10681_my_ptr, bmlocal10682_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: IS_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10683_out_val;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, idx1, bmlocal10683_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal10683_out_val), "%u", 1);\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10684_my_ptr;\
	UINT bmlocal10685_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, bmlocal10684_my_ptr, bmlocal10685_my_bitoff );\
	(*((UINT8*)bmlocal10684_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10685_my_bitoff );\
}

// FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10686_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal10686_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10686_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_BYTES_SIZE 1

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10689_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal10689_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10689_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_BYTES_CELL_SIZE 1

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10690_dim_size0;\
	UINT bmlocal10691_idx0;\
	bmlocal10690_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	for( bmlocal10691_idx0=0; bmlocal10691_idx0<bmlocal10690_dim_size0; bmlocal10691_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10691_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal10691_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10692_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10692_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10692_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_BYTES_SIZE 6

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10693_tmp_bytes = 0;\
	UINT bmlocal10694_tmp_bits = 0;\
	UINT bmlocal10695_acc_bytes;\
	UINT bmlocal10696_acc_bits;\
	PVOID bmlocal10697_parent_out_ptr;\
	BM_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, bmlocal10697_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10697_parent_out_ptr;\
	bmlocal10695_acc_bytes = 0;\
	bmlocal10696_acc_bits = 0;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, bmlocal10693_tmp_bytes, bmlocal10694_tmp_bits );\
	bmlocal10695_acc_bytes += bmlocal10693_tmp_bytes;\
	bmlocal10696_acc_bits += bmlocal10694_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10695_acc_bytes );\
	out_bitoff += bmlocal10696_acc_bits;\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10698_tmp_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, bmlocal10698_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10698_tmp_bitoff);\
}

// Alignment of FullBSIDArr_FullBSID_bsIDmask_Reserved_2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10699_my_ptr;\
	UINT bmlocal10700_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10699_my_ptr, bmlocal10700_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10699_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10699_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10699_my_ptr, bmlocal10700_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10701_my_ptr;\
	UINT bmlocal10702_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10701_my_ptr, bmlocal10702_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10701_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10701_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10701_my_ptr, bmlocal10702_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal10703_out_val;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, idx0, bmlocal10703_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal10703_out_val), "%d", 1);\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10704_my_ptr;\
	UINT bmlocal10705_my_bitoff;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, bmlocal10704_my_ptr, bmlocal10705_my_bitoff );\
	(*((UINT16*)bmlocal10704_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10705_my_bitoff );\
}

// FullBSIDArr_FullBSID_bsIDmask_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10706_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10706_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10706_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_BYTES_SIZE 2

#define BM_FullBSIDArr_FullBSID_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10707_tmp_bytes = 0;\
	UINT bmlocal10708_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, bmlocal10707_tmp_bytes, bmlocal10708_tmp_bits );\
	out_bytes += bmlocal10707_tmp_bytes;\
	out_bits += bmlocal10708_tmp_bits;\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10709_tmp_bits;\
	BM_FullBSIDArr_FullBSID_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10709_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10709_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_BYTES_SIZE 8

#define BM_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	BM_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_bsIDmask_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_FullBSIDArr_FullBSID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10712_tmp_bits;\
	BM_FullBSIDArr_FullBSID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10712_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10712_tmp_bits );\
}

#define BM_FullBSIDArr_FullBSID_BYTES_CELL_SIZE 16

#define BM_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FullBSIDArr_FullBSID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10713_dim_size0;\
	UINT bmlocal10714_idx0;\
	{\
		UINT32 bmlocal10715_var0;\
		BM_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal10715_var0 );\
		bmlocal10713_dim_size0 = (UINT)(bmlocal10715_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FullBSID", 1);\
	for( bmlocal10714_idx0=0; bmlocal10714_idx0<bmlocal10713_dim_size0; bmlocal10714_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10714_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, bmlocal10714_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_FullBSID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FullBSIDArr_FullBSID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10716_tmp_bits;\
	BM_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, out_bytes, bmlocal10716_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10716_tmp_bits );\
}


#define BM_FullBSIDArr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10717_tmp_bytes = 0;\
	UINT bmlocal10718_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, bmlocal10717_tmp_bytes, bmlocal10718_tmp_bits );\
	out_bytes += bmlocal10717_tmp_bytes;\
	out_bits += bmlocal10718_tmp_bits;\
}

#define BM_FullBSIDArr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10719_tmp_bits;\
	BM_FullBSIDArr_GET_SIZE( base_ptr, out_bytes, bmlocal10719_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10719_tmp_bits );\
}

#define BM_FullBSIDArr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FullBSIDArr", 1);\
	BM_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FullBSIDArr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FullBSIDArr_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 EapMember[352];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _usePrivacy;
	UINT32 _vendorId;
	UINT32 _vendorType;
	BM_EAPType _EAPMethod;
	BMS_EapIdMember _EapId;
	BMS_provisionedPseudoIdMember _provisionedPseudoId;
	BMS_EapPasswordMember _EapPassword;
	BMS_RealmMember _Realm;
	BM_EAPType _encaps;
} BMS_EapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BM_EAPType _encaps;
	BMS_RealmMember _Realm;
	BMS_EapPasswordMember _EapPassword;
	BMS_provisionedPseudoIdMember _provisionedPseudoId;
	BMS_EapIdMember _EapId;
	BM_EAPType _EAPMethod;
	UINT32 _vendorType;
	UINT32 _vendorId;
	UINT32 _usePrivacy;
} BMS_EapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'EapMember' Type: 'EapMember', Top-level, Non-instance, No bitoff root
#define BM_EapMember_usePrivacy_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_EapMember_usePrivacy_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10720_tmp_bitoff;\
	BM_EapMember_usePrivacy_GET_POS( base_ptr, out_ptr, bmlocal10720_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10720_tmp_bitoff);\
}

#define BM_EapMember_usePrivacy_POS_ALIGNED 0

// Alignment of EapMember_usePrivacy: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_EapMember_usePrivacy_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_usePrivacy_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10721_my_ptr;\
	UINT bmlocal10722_my_bitoff;\
	BM_EapMember_usePrivacy_GET_POS( base_ptr, bmlocal10721_my_ptr, bmlocal10722_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10721_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10721_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10721_my_ptr, bmlocal10722_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_EapMember_usePrivacy_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10723_my_ptr;\
	UINT bmlocal10724_my_bitoff;\
	BM_EapMember_usePrivacy_GET_POS( base_ptr, bmlocal10723_my_ptr, bmlocal10724_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10723_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10723_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10723_my_ptr, bmlocal10724_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// EapMember_usePrivacy: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_usePrivacy: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_usePrivacy: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_usePrivacy: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_usePrivacy: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_usePrivacy: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_usePrivacy_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10725_out_val;\
	BM_EapMember_usePrivacy_GET( base_ptr, bmlocal10725_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "usePrivacy", 32, (UINT)(bmlocal10725_out_val), "%d", 1);\
}

#define BM_EapMember_usePrivacy_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_usePrivacy_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_usePrivacy_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10726_my_ptr;\
	UINT bmlocal10727_my_bitoff;\
	BM_EapMember_usePrivacy_GET_POS( base_ptr, bmlocal10726_my_ptr, bmlocal10727_my_bitoff );\
	(*((UINT32*)bmlocal10726_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10727_my_bitoff );\
}

// EapMember_usePrivacy: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_usePrivacy_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10728_tmp_bits;\
	BM_EapMember_usePrivacy_GET_SIZE( base_ptr, out_bytes, bmlocal10728_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10728_tmp_bits );\
}

#define BM_EapMember_usePrivacy_BYTES_SIZE 4

#define BM_EapMember_vendorId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10731_acc_bytes;\
	UINT bmlocal10732_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10731_acc_bytes = 4;\
	bmlocal10732_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10731_acc_bytes );\
	out_bitoff += bmlocal10732_acc_bits;\
}

#define BM_EapMember_vendorId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10733_tmp_bitoff;\
	BM_EapMember_vendorId_GET_POS( base_ptr, out_ptr, bmlocal10733_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10733_tmp_bitoff);\
}

#define BM_EapMember_vendorId_POS_ALIGNED 4

// Alignment of EapMember_vendorId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_EapMember_vendorId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_vendorId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10734_my_ptr;\
	UINT bmlocal10735_my_bitoff;\
	BM_EapMember_vendorId_GET_POS( base_ptr, bmlocal10734_my_ptr, bmlocal10735_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10734_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10734_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10734_my_ptr, bmlocal10735_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_EapMember_vendorId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10736_my_ptr;\
	UINT bmlocal10737_my_bitoff;\
	BM_EapMember_vendorId_GET_POS( base_ptr, bmlocal10736_my_ptr, bmlocal10737_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10736_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10736_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10736_my_ptr, bmlocal10737_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// EapMember_vendorId: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_vendorId: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_vendorId: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_vendorId: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_vendorId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_vendorId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_vendorId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10738_out_val;\
	BM_EapMember_vendorId_GET( base_ptr, bmlocal10738_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorId", 32, (UINT)(bmlocal10738_out_val), "%d", 1);\
}

#define BM_EapMember_vendorId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_vendorId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_vendorId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10739_my_ptr;\
	UINT bmlocal10740_my_bitoff;\
	BM_EapMember_vendorId_GET_POS( base_ptr, bmlocal10739_my_ptr, bmlocal10740_my_bitoff );\
	(*((UINT32*)bmlocal10739_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10740_my_bitoff );\
}

// EapMember_vendorId: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_vendorId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10741_tmp_bits;\
	BM_EapMember_vendorId_GET_SIZE( base_ptr, out_bytes, bmlocal10741_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10741_tmp_bits );\
}

#define BM_EapMember_vendorId_BYTES_SIZE 4

#define BM_EapMember_vendorType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10744_acc_bytes;\
	UINT bmlocal10745_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10744_acc_bytes = 8;\
	bmlocal10745_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10744_acc_bytes );\
	out_bitoff += bmlocal10745_acc_bits;\
}

#define BM_EapMember_vendorType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10746_tmp_bitoff;\
	BM_EapMember_vendorType_GET_POS( base_ptr, out_ptr, bmlocal10746_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10746_tmp_bitoff);\
}

#define BM_EapMember_vendorType_POS_ALIGNED 8

// Alignment of EapMember_vendorType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_EapMember_vendorType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_vendorType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10747_my_ptr;\
	UINT bmlocal10748_my_bitoff;\
	BM_EapMember_vendorType_GET_POS( base_ptr, bmlocal10747_my_ptr, bmlocal10748_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10747_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10747_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10747_my_ptr, bmlocal10748_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_EapMember_vendorType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10749_my_ptr;\
	UINT bmlocal10750_my_bitoff;\
	BM_EapMember_vendorType_GET_POS( base_ptr, bmlocal10749_my_ptr, bmlocal10750_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10749_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10749_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10749_my_ptr, bmlocal10750_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// EapMember_vendorType: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_vendorType: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_vendorType: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_vendorType: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_vendorType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_vendorType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_vendorType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10751_out_val;\
	BM_EapMember_vendorType_GET( base_ptr, bmlocal10751_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorType", 32, (UINT)(bmlocal10751_out_val), "%d", 1);\
}

#define BM_EapMember_vendorType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_vendorType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_vendorType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10752_my_ptr;\
	UINT bmlocal10753_my_bitoff;\
	BM_EapMember_vendorType_GET_POS( base_ptr, bmlocal10752_my_ptr, bmlocal10753_my_bitoff );\
	(*((UINT32*)bmlocal10752_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10753_my_bitoff );\
}

// EapMember_vendorType: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_vendorType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10754_tmp_bits;\
	BM_EapMember_vendorType_GET_SIZE( base_ptr, out_bytes, bmlocal10754_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10754_tmp_bits );\
}

#define BM_EapMember_vendorType_BYTES_SIZE 4

#define BM_EapMember_EAPMethod_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10757_acc_bytes;\
	UINT bmlocal10758_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10757_acc_bytes = 12;\
	bmlocal10758_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10757_acc_bytes );\
	out_bitoff += bmlocal10758_acc_bits;\
}

#define BM_EapMember_EAPMethod_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10759_tmp_bitoff;\
	BM_EapMember_EAPMethod_GET_POS( base_ptr, out_ptr, bmlocal10759_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10759_tmp_bitoff);\
}

#define BM_EapMember_EAPMethod_POS_ALIGNED 12

// Alignment of EapMember_EAPMethod: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_EapMember_EAPMethod_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EAPMethod_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10760_my_ptr;\
	UINT bmlocal10761_my_bitoff;\
	BM_EapMember_EAPMethod_GET_POS( base_ptr, bmlocal10760_my_ptr, bmlocal10761_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10760_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10760_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10760_my_ptr, bmlocal10761_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_EapMember_EAPMethod_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10762_my_ptr;\
	UINT bmlocal10763_my_bitoff;\
	BM_EapMember_EAPMethod_GET_POS( base_ptr, bmlocal10762_my_ptr, bmlocal10763_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10762_my_ptr, bmlocal10763_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// EapMember_EAPMethod: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EAPMethod: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EAPMethod: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_EAPMethod: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_EAPMethod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_EAPMethod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_EAPMethod_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal10764_out_val;\
	BM_EapMember_EAPMethod_GET( base_ptr, bmlocal10764_out_val );\
	if( bmlocal10764_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal10764_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal10764_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal10764_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal10764_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal10764_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_CHAP", 1);\
	}\
}

#define BM_EapMember_EAPMethod_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_EAPMethod_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_EAPMethod_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10765_my_ptr;\
	UINT bmlocal10766_my_bitoff;\
	BM_EapMember_EAPMethod_GET_POS( base_ptr, bmlocal10765_my_ptr, bmlocal10766_my_bitoff );\
	(*((UINT32*)bmlocal10765_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10766_my_bitoff );\
}

// EapMember_EAPMethod: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_EAPMethod_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10767_tmp_bits;\
	BM_EapMember_EAPMethod_GET_SIZE( base_ptr, out_bytes, bmlocal10767_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10767_tmp_bits );\
}

#define BM_EapMember_EAPMethod_BYTES_SIZE 4

#define BM_EapMember_EapId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10770_acc_bytes;\
	UINT bmlocal10771_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10770_acc_bytes = 16;\
	bmlocal10771_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10770_acc_bytes );\
	out_bitoff += bmlocal10771_acc_bits;\
}

#define BM_EapMember_EapId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10772_tmp_bitoff;\
	BM_EapMember_EapId_GET_POS( base_ptr, out_ptr, bmlocal10772_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10772_tmp_bitoff);\
}

#define BM_EapMember_EapId_POS_ALIGNED 16

// COMPOSITE: Full name: 'EapMember_EapId' Type: 'EapIdMember', Inner, Non-instance, No bitoff root
#define BM_EapMember_EapId_EapId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10773_parent_out_ptr;\
	BM_EapMember_EapId_GET_POS( base_ptr, bmlocal10773_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10773_parent_out_ptr;\
}

#define BM_EapMember_EapId_EapId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10774_tmp_bitoff;\
	BM_EapMember_EapId_EapId_GET_POS( base_ptr, out_ptr, bmlocal10774_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10774_tmp_bitoff);\
}

#define BM_EapMember_EapId_EapId_POS_ALIGNED 16

// ARRAY: EapMember_EapId_EapId
#define BM_EapMember_EapId_EapId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapId_EapId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10775_out_ptr;\
	UINT bmlocal10776_out_bitoff;\
	UINT bmlocal10777_element_size_bytes;\
	UINT bmlocal10778_element_size_bits;\
	BM_EapMember_EapId_EapId_GET_POS( base_ptr, bmlocal10775_out_ptr, bmlocal10776_out_bitoff );\
	bmlocal10777_element_size_bytes = 1;\
	bmlocal10778_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10775_out_ptr) + (idx0) * bmlocal10777_element_size_bytes );\
	out_bitoff = bmlocal10776_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10778_element_size_bits );\
}

// COMPOSITE: Full name: 'EapMember_EapId_EapId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapMember_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10779_parent_out_ptr;\
	BM_EapMember_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10779_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10779_parent_out_ptr;\
}

#define BM_EapMember_EapId_EapId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10780_tmp_bitoff;\
	BM_EapMember_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10780_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10780_tmp_bitoff);\
}

// Alignment of EapMember_EapId_EapId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapMember_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapId_EapId_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10781_my_ptr;\
	UINT bmlocal10782_my_bitoff;\
	BM_EapMember_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10781_my_ptr, bmlocal10782_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10781_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10781_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10781_my_ptr, bmlocal10782_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapMember_EapId_EapId_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10783_my_ptr;\
	UINT bmlocal10784_my_bitoff;\
	BM_EapMember_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10783_my_ptr, bmlocal10784_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10783_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10783_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10783_my_ptr, bmlocal10784_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapMember_EapId_EapId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EapId_EapId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EapId_EapId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_EapId_EapId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_EapId_EapId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_EapId_EapId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10785_out_val;\
	BM_EapMember_EapId_EapId_BufferByte_GET( base_ptr, idx0, bmlocal10785_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10785_out_val), "%d", 1);\
}

#define BM_EapMember_EapId_EapId_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapMember_EapId_EapId_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10786_my_ptr;\
	UINT bmlocal10787_my_bitoff;\
	BM_EapMember_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10786_my_ptr, bmlocal10787_my_bitoff );\
	(*((UINT8*)bmlocal10786_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10787_my_bitoff );\
}

// EapMember_EapId_EapId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_EapId_EapId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10788_tmp_bits;\
	BM_EapMember_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10788_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10788_tmp_bits );\
}

#define BM_EapMember_EapId_EapId_BufferByte_BYTES_SIZE 1

#define BM_EapMember_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapId_EapId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10791_tmp_bits;\
	BM_EapMember_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10791_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10791_tmp_bits );\
}

#define BM_EapMember_EapId_EapId_BYTES_CELL_SIZE 1

#define BM_EapMember_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapId_EapId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapMember_EapId_EapId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10792_dim_size0;\
	UINT bmlocal10793_idx0;\
	bmlocal10792_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	for( bmlocal10793_idx0=0; bmlocal10793_idx0<bmlocal10792_dim_size0; bmlocal10793_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10793_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapMember_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, bmlocal10793_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapId_EapId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapId_EapId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_EapId_EapId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10794_tmp_bits;\
	BM_EapMember_EapId_EapId_GET_SIZE( base_ptr, out_bytes, bmlocal10794_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10794_tmp_bits );\
}

#define BM_EapMember_EapId_EapId_BYTES_SIZE 100

#define BM_EapMember_EapId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10795_tmp_bytes = 0;\
	UINT bmlocal10796_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapMember_EapId_EapId_GET_SIZE( base_ptr, bmlocal10795_tmp_bytes, bmlocal10796_tmp_bits );\
	out_bytes += bmlocal10795_tmp_bytes;\
	out_bits += bmlocal10796_tmp_bits;\
}

#define BM_EapMember_EapId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10797_tmp_bits;\
	BM_EapMember_EapId_GET_SIZE( base_ptr, out_bytes, bmlocal10797_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10797_tmp_bits );\
}

#define BM_EapMember_EapId_BYTES_SIZE 100

#define BM_EapMember_EapId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	BM_EapMember_EapId_EapId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapId_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_EapMember_provisionedPseudoId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10800_acc_bytes;\
	UINT bmlocal10801_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10800_acc_bytes = 116;\
	bmlocal10801_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10800_acc_bytes );\
	out_bitoff += bmlocal10801_acc_bits;\
}

#define BM_EapMember_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10802_tmp_bitoff;\
	BM_EapMember_provisionedPseudoId_GET_POS( base_ptr, out_ptr, bmlocal10802_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10802_tmp_bitoff);\
}

#define BM_EapMember_provisionedPseudoId_POS_ALIGNED 116

// COMPOSITE: Full name: 'EapMember_provisionedPseudoId' Type: 'provisionedPseudoIdMember', Inner, Non-instance, No bitoff root
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10803_parent_out_ptr;\
	BM_EapMember_provisionedPseudoId_GET_POS( base_ptr, bmlocal10803_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10803_parent_out_ptr;\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10804_tmp_bitoff;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, out_ptr, bmlocal10804_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10804_tmp_bitoff);\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_POS_ALIGNED 116

// ARRAY: EapMember_provisionedPseudoId_provisionedPseudoId
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10805_out_ptr;\
	UINT bmlocal10806_out_bitoff;\
	UINT bmlocal10807_element_size_bytes;\
	UINT bmlocal10808_element_size_bits;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, bmlocal10805_out_ptr, bmlocal10806_out_bitoff );\
	bmlocal10807_element_size_bytes = 1;\
	bmlocal10808_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10805_out_ptr) + (idx0) * bmlocal10807_element_size_bytes );\
	out_bitoff = bmlocal10806_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10808_element_size_bits );\
}

// COMPOSITE: Full name: 'EapMember_provisionedPseudoId_provisionedPseudoId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10809_parent_out_ptr;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10809_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10809_parent_out_ptr;\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10810_tmp_bitoff;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10810_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10810_tmp_bitoff);\
}

// Alignment of EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10811_my_ptr;\
	UINT bmlocal10812_my_bitoff;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10811_my_ptr, bmlocal10812_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10811_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10811_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10811_my_ptr, bmlocal10812_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10813_my_ptr;\
	UINT bmlocal10814_my_bitoff;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10813_my_ptr, bmlocal10814_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10813_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10813_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10813_my_ptr, bmlocal10814_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10815_out_val;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, bmlocal10815_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10815_out_val), "%d", 1);\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10816_my_ptr;\
	UINT bmlocal10817_my_bitoff;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, bmlocal10816_my_ptr, bmlocal10817_my_bitoff );\
	(*((UINT8*)bmlocal10816_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10817_my_bitoff );\
}

// EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10818_tmp_bits;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10818_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10818_tmp_bits );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_BYTES_SIZE 1

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10821_tmp_bits;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10821_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10821_tmp_bits );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BYTES_CELL_SIZE 1

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10822_dim_size0;\
	UINT bmlocal10823_idx0;\
	bmlocal10822_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	for( bmlocal10823_idx0=0; bmlocal10823_idx0<bmlocal10822_dim_size0; bmlocal10823_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10823_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, bmlocal10823_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10824_tmp_bits;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, bmlocal10824_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10824_tmp_bits );\
}

#define BM_EapMember_provisionedPseudoId_provisionedPseudoId_BYTES_SIZE 100

#define BM_EapMember_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10825_tmp_bytes = 0;\
	UINT bmlocal10826_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, bmlocal10825_tmp_bytes, bmlocal10826_tmp_bits );\
	out_bytes += bmlocal10825_tmp_bytes;\
	out_bits += bmlocal10826_tmp_bits;\
}

#define BM_EapMember_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10827_tmp_bits;\
	BM_EapMember_provisionedPseudoId_GET_SIZE( base_ptr, out_bytes, bmlocal10827_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10827_tmp_bits );\
}

#define BM_EapMember_provisionedPseudoId_BYTES_SIZE 100

#define BM_EapMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	BM_EapMember_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_provisionedPseudoId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_EapMember_EapPassword_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10830_acc_bytes;\
	UINT bmlocal10831_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10830_acc_bytes = 216;\
	bmlocal10831_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10830_acc_bytes );\
	out_bitoff += bmlocal10831_acc_bits;\
}

#define BM_EapMember_EapPassword_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10832_tmp_bitoff;\
	BM_EapMember_EapPassword_GET_POS( base_ptr, out_ptr, bmlocal10832_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10832_tmp_bitoff);\
}

#define BM_EapMember_EapPassword_POS_ALIGNED 216

// COMPOSITE: Full name: 'EapMember_EapPassword' Type: 'EapPasswordMember', Inner, Non-instance, No bitoff root
#define BM_EapMember_EapPassword_EapPassword_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10833_parent_out_ptr;\
	BM_EapMember_EapPassword_GET_POS( base_ptr, bmlocal10833_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10833_parent_out_ptr;\
}

#define BM_EapMember_EapPassword_EapPassword_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10834_tmp_bitoff;\
	BM_EapMember_EapPassword_EapPassword_GET_POS( base_ptr, out_ptr, bmlocal10834_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10834_tmp_bitoff);\
}

#define BM_EapMember_EapPassword_EapPassword_POS_ALIGNED 216

// ARRAY: EapMember_EapPassword_EapPassword
#define BM_EapMember_EapPassword_EapPassword_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapPassword_EapPassword_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 32;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10835_out_ptr;\
	UINT bmlocal10836_out_bitoff;\
	UINT bmlocal10837_element_size_bytes;\
	UINT bmlocal10838_element_size_bits;\
	BM_EapMember_EapPassword_EapPassword_GET_POS( base_ptr, bmlocal10835_out_ptr, bmlocal10836_out_bitoff );\
	bmlocal10837_element_size_bytes = 1;\
	bmlocal10838_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10835_out_ptr) + (idx0) * bmlocal10837_element_size_bytes );\
	out_bitoff = bmlocal10836_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10838_element_size_bits );\
}

// COMPOSITE: Full name: 'EapMember_EapPassword_EapPassword' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10839_parent_out_ptr;\
	BM_EapMember_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10839_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10839_parent_out_ptr;\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10840_tmp_bitoff;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10840_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10840_tmp_bitoff);\
}

// Alignment of EapMember_EapPassword_EapPassword_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapMember_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10841_my_ptr;\
	UINT bmlocal10842_my_bitoff;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10841_my_ptr, bmlocal10842_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10841_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10841_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10841_my_ptr, bmlocal10842_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10843_my_ptr;\
	UINT bmlocal10844_my_bitoff;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10843_my_ptr, bmlocal10844_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10843_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10843_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10843_my_ptr, bmlocal10844_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapMember_EapPassword_EapPassword_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EapPassword_EapPassword_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_EapPassword_EapPassword_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_EapPassword_EapPassword_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_EapPassword_EapPassword_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_EapPassword_EapPassword_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10845_out_val;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, bmlocal10845_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10845_out_val), "%d", 1);\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10846_my_ptr;\
	UINT bmlocal10847_my_bitoff;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, bmlocal10846_my_ptr, bmlocal10847_my_bitoff );\
	(*((UINT8*)bmlocal10846_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10847_my_bitoff );\
}

// EapMember_EapPassword_EapPassword_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_EapPassword_EapPassword_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10848_tmp_bits;\
	BM_EapMember_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10848_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10848_tmp_bits );\
}

#define BM_EapMember_EapPassword_EapPassword_BufferByte_BYTES_SIZE 1

#define BM_EapMember_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapPassword_EapPassword_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10851_tmp_bits;\
	BM_EapMember_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10851_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10851_tmp_bits );\
}

#define BM_EapMember_EapPassword_EapPassword_BYTES_CELL_SIZE 1

#define BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_EapPassword_EapPassword_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10852_dim_size0;\
	UINT bmlocal10853_idx0;\
	bmlocal10852_dim_size0 = 32;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	for( bmlocal10853_idx0=0; bmlocal10853_idx0<bmlocal10852_dim_size0; bmlocal10853_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10853_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, bmlocal10853_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapPassword_EapPassword_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_EapPassword_EapPassword_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10854_tmp_bits;\
	BM_EapMember_EapPassword_EapPassword_GET_SIZE( base_ptr, out_bytes, bmlocal10854_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10854_tmp_bits );\
}

#define BM_EapMember_EapPassword_EapPassword_BYTES_SIZE 32

#define BM_EapMember_EapPassword_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10855_tmp_bytes = 0;\
	UINT bmlocal10856_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapMember_EapPassword_EapPassword_GET_SIZE( base_ptr, bmlocal10855_tmp_bytes, bmlocal10856_tmp_bits );\
	out_bytes += bmlocal10855_tmp_bytes;\
	out_bits += bmlocal10856_tmp_bits;\
}

#define BM_EapMember_EapPassword_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10857_tmp_bits;\
	BM_EapMember_EapPassword_GET_SIZE( base_ptr, out_bytes, bmlocal10857_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10857_tmp_bits );\
}

#define BM_EapMember_EapPassword_BYTES_SIZE 32

#define BM_EapMember_EapPassword_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	BM_EapMember_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_EapPassword_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_EapPassword_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_EapMember_Realm_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10860_acc_bytes;\
	UINT bmlocal10861_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10860_acc_bytes = 248;\
	bmlocal10861_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10860_acc_bytes );\
	out_bitoff += bmlocal10861_acc_bits;\
}

#define BM_EapMember_Realm_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10862_tmp_bitoff;\
	BM_EapMember_Realm_GET_POS( base_ptr, out_ptr, bmlocal10862_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10862_tmp_bitoff);\
}

#define BM_EapMember_Realm_POS_ALIGNED 248

// COMPOSITE: Full name: 'EapMember_Realm' Type: 'RealmMember', Inner, Non-instance, No bitoff root
#define BM_EapMember_Realm_Realm_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10863_parent_out_ptr;\
	BM_EapMember_Realm_GET_POS( base_ptr, bmlocal10863_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10863_parent_out_ptr;\
}

#define BM_EapMember_Realm_Realm_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10864_tmp_bitoff;\
	BM_EapMember_Realm_Realm_GET_POS( base_ptr, out_ptr, bmlocal10864_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10864_tmp_bitoff);\
}

#define BM_EapMember_Realm_Realm_POS_ALIGNED 248

// ARRAY: EapMember_Realm_Realm
#define BM_EapMember_Realm_Realm_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_Realm_Realm_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10865_out_ptr;\
	UINT bmlocal10866_out_bitoff;\
	UINT bmlocal10867_element_size_bytes;\
	UINT bmlocal10868_element_size_bits;\
	BM_EapMember_Realm_Realm_GET_POS( base_ptr, bmlocal10865_out_ptr, bmlocal10866_out_bitoff );\
	bmlocal10867_element_size_bytes = 1;\
	bmlocal10868_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10865_out_ptr) + (idx0) * bmlocal10867_element_size_bytes );\
	out_bitoff = bmlocal10866_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10868_element_size_bits );\
}

// COMPOSITE: Full name: 'EapMember_Realm_Realm' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_EapMember_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10869_parent_out_ptr;\
	BM_EapMember_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10869_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10869_parent_out_ptr;\
}

#define BM_EapMember_Realm_Realm_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10870_tmp_bitoff;\
	BM_EapMember_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal10870_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10870_tmp_bitoff);\
}

// Alignment of EapMember_Realm_Realm_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_EapMember_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_Realm_Realm_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10871_my_ptr;\
	UINT bmlocal10872_my_bitoff;\
	BM_EapMember_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10871_my_ptr, bmlocal10872_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10871_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10871_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10871_my_ptr, bmlocal10872_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_EapMember_Realm_Realm_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10873_my_ptr;\
	UINT bmlocal10874_my_bitoff;\
	BM_EapMember_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10873_my_ptr, bmlocal10874_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10873_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10873_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10873_my_ptr, bmlocal10874_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// EapMember_Realm_Realm_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_Realm_Realm_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_Realm_Realm_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_Realm_Realm_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_Realm_Realm_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_Realm_Realm_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10875_out_val;\
	BM_EapMember_Realm_Realm_BufferByte_GET( base_ptr, idx0, bmlocal10875_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10875_out_val), "%d", 1);\
}

#define BM_EapMember_Realm_Realm_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_EapMember_Realm_Realm_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10876_my_ptr;\
	UINT bmlocal10877_my_bitoff;\
	BM_EapMember_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, bmlocal10876_my_ptr, bmlocal10877_my_bitoff );\
	(*((UINT8*)bmlocal10876_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10877_my_bitoff );\
}

// EapMember_Realm_Realm_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_Realm_Realm_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10878_tmp_bits;\
	BM_EapMember_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10878_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10878_tmp_bits );\
}

#define BM_EapMember_Realm_Realm_BufferByte_BYTES_SIZE 1

#define BM_EapMember_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_Realm_Realm_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10881_tmp_bits;\
	BM_EapMember_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal10881_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10881_tmp_bits );\
}

#define BM_EapMember_Realm_Realm_BYTES_CELL_SIZE 1

#define BM_EapMember_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EapMember_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_EapMember_Realm_Realm_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_EapMember_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_EapMember_Realm_Realm_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal10882_dim_size0;\
	UINT bmlocal10883_idx0;\
	bmlocal10882_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	for( bmlocal10883_idx0=0; bmlocal10883_idx0<bmlocal10882_dim_size0; bmlocal10883_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal10883_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_EapMember_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, bmlocal10883_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_Realm_Realm_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_Realm_Realm_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_Realm_Realm_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10884_tmp_bits;\
	BM_EapMember_Realm_Realm_GET_SIZE( base_ptr, out_bytes, bmlocal10884_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10884_tmp_bits );\
}

#define BM_EapMember_Realm_Realm_BYTES_SIZE 100

#define BM_EapMember_Realm_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal10885_tmp_bytes = 0;\
	UINT bmlocal10886_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_EapMember_Realm_Realm_GET_SIZE( base_ptr, bmlocal10885_tmp_bytes, bmlocal10886_tmp_bits );\
	out_bytes += bmlocal10885_tmp_bytes;\
	out_bits += bmlocal10886_tmp_bits;\
}

#define BM_EapMember_Realm_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10887_tmp_bits;\
	BM_EapMember_Realm_GET_SIZE( base_ptr, out_bytes, bmlocal10887_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10887_tmp_bits );\
}

#define BM_EapMember_Realm_BYTES_SIZE 100

#define BM_EapMember_Realm_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	BM_EapMember_Realm_Realm_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_Realm_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_Realm_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_EapMember_encaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10890_acc_bytes;\
	UINT bmlocal10891_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10890_acc_bytes = 348;\
	bmlocal10891_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10890_acc_bytes );\
	out_bitoff += bmlocal10891_acc_bits;\
}

#define BM_EapMember_encaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10892_tmp_bitoff;\
	BM_EapMember_encaps_GET_POS( base_ptr, out_ptr, bmlocal10892_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10892_tmp_bitoff);\
}

#define BM_EapMember_encaps_POS_ALIGNED 348

// Alignment of EapMember_encaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_EapMember_encaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_encaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10893_my_ptr;\
	UINT bmlocal10894_my_bitoff;\
	BM_EapMember_encaps_GET_POS( base_ptr, bmlocal10893_my_ptr, bmlocal10894_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10893_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10893_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10893_my_ptr, bmlocal10894_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_EapMember_encaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10895_my_ptr;\
	UINT bmlocal10896_my_bitoff;\
	BM_EapMember_encaps_GET_POS( base_ptr, bmlocal10895_my_ptr, bmlocal10896_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10895_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10895_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10895_my_ptr, bmlocal10896_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// EapMember_encaps: IS_DEFAULT accessor is not defined because no default value was specified.
// EapMember_encaps: SET_DEFAULT accessor is not defined because no default value was specified.
// EapMember_encaps: IS_RESET accessor is not defined because no reset value was specified.
// EapMember_encaps: SET_RESET accessor is not defined because no reset value was specified.
// EapMember_encaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// EapMember_encaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_EapMember_encaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal10897_out_val;\
	BM_EapMember_encaps_GET( base_ptr, bmlocal10897_out_val );\
	if( bmlocal10897_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal10897_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal10897_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal10897_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal10897_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal10897_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_CHAP", 1);\
	}\
}

#define BM_EapMember_encaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_encaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_EapMember_encaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10898_my_ptr;\
	UINT bmlocal10899_my_bitoff;\
	BM_EapMember_encaps_GET_POS( base_ptr, bmlocal10898_my_ptr, bmlocal10899_my_bitoff );\
	(*((UINT32*)bmlocal10898_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10899_my_bitoff );\
}

// EapMember_encaps: Validation accessors are not defined because validation condition was not specified.
#define BM_EapMember_encaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10900_tmp_bits;\
	BM_EapMember_encaps_GET_SIZE( base_ptr, out_bytes, bmlocal10900_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10900_tmp_bits );\
}

#define BM_EapMember_encaps_BYTES_SIZE 4

#define BM_EapMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 352;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10903_tmp_bits;\
	BM_EapMember_GET_SIZE( base_ptr, out_bytes, bmlocal10903_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10903_tmp_bits );\
}

#define BM_EapMember_BYTES_SIZE 352

#define BM_EapMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapMember", 1);\
	BM_EapMember_usePrivacy_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_vendorId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_vendorType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_EAPMethod_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_EapId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_provisionedPseudoId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_EapPassword_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_Realm_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_EapMember_encaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_EapMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_EapMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Eaps[4];

// COMPOSITE: Full name: 'Eaps' Type: 'Eaps', Top-level, Non-instance, No bitoff root
#define BM_Eaps_NumOfEaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Eaps_NumOfEaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10904_tmp_bitoff;\
	BM_Eaps_NumOfEaps_GET_POS( base_ptr, out_ptr, bmlocal10904_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10904_tmp_bitoff);\
}

#define BM_Eaps_NumOfEaps_POS_ALIGNED 0

// Alignment of Eaps_NumOfEaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_NumOfEaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_NumOfEaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10905_my_ptr;\
	UINT bmlocal10906_my_bitoff;\
	BM_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal10905_my_ptr, bmlocal10906_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10905_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10905_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10905_my_ptr, bmlocal10906_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_NumOfEaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10907_my_ptr;\
	UINT bmlocal10908_my_bitoff;\
	BM_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal10907_my_ptr, bmlocal10908_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10907_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10907_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10907_my_ptr, bmlocal10908_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_NumOfEaps: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_NumOfEaps: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_NumOfEaps: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_NumOfEaps: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_NumOfEaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_NumOfEaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10909_out_val;\
	BM_Eaps_NumOfEaps_GET( base_ptr, bmlocal10909_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfEaps", 32, (UINT)(bmlocal10909_out_val), "%d", 1);\
}

#define BM_Eaps_NumOfEaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Eaps_NumOfEaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10910_my_ptr;\
	UINT bmlocal10911_my_bitoff;\
	BM_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal10910_my_ptr, bmlocal10911_my_bitoff );\
	(*((UINT32*)bmlocal10910_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10911_my_bitoff );\
}

// Eaps_NumOfEaps: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_NumOfEaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10912_tmp_bits;\
	BM_Eaps_NumOfEaps_GET_SIZE( base_ptr, out_bytes, bmlocal10912_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10912_tmp_bits );\
}

#define BM_Eaps_NumOfEaps_BYTES_SIZE 4

#define BM_Eaps_EapList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10915_acc_bytes;\
	UINT bmlocal10916_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal10915_acc_bytes = 4;\
	bmlocal10916_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10915_acc_bytes );\
	out_bitoff += bmlocal10916_acc_bits;\
}

#define BM_Eaps_EapList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10917_tmp_bitoff;\
	BM_Eaps_EapList_GET_POS( base_ptr, out_ptr, bmlocal10917_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10917_tmp_bitoff);\
}

#define BM_Eaps_EapList_POS_ALIGNED 4

// ARRAY: Eaps_EapList
#define BM_Eaps_EapList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal10918_var0;\
		BM_Eaps_NumOfEaps_GET( base_ptr, bmlocal10918_var0 );\
		out_bytes = (UINT)(352*(1*bmlocal10918_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal10919_var0;\
			BM_Eaps_NumOfEaps_GET( base_ptr, bmlocal10919_var0 );\
			out_element_count = (UINT)(bmlocal10919_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10920_out_ptr;\
	UINT bmlocal10921_out_bitoff;\
	UINT bmlocal10922_element_size_bytes;\
	UINT bmlocal10923_element_size_bits;\
	BM_Eaps_EapList_GET_POS( base_ptr, bmlocal10920_out_ptr, bmlocal10921_out_bitoff );\
	bmlocal10922_element_size_bytes = 352;\
	bmlocal10923_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10920_out_ptr) + (idx0) * bmlocal10922_element_size_bytes );\
	out_bitoff = bmlocal10921_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10923_element_size_bits );\
}

// COMPOSITE: Full name: 'Eaps_EapList' Type: 'EapMember', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10924_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10924_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10924_parent_out_ptr;\
}

#define BM_Eaps_EapList_usePrivacy_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10925_tmp_bitoff;\
	BM_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, out_ptr, bmlocal10925_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10925_tmp_bitoff);\
}

// Alignment of Eaps_EapList_usePrivacy: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_EapList_usePrivacy_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_usePrivacy_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10926_my_ptr;\
	UINT bmlocal10927_my_bitoff;\
	BM_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal10926_my_ptr, bmlocal10927_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10926_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10926_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10926_my_ptr, bmlocal10927_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_EapList_usePrivacy_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10928_my_ptr;\
	UINT bmlocal10929_my_bitoff;\
	BM_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal10928_my_ptr, bmlocal10929_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10928_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10928_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10928_my_ptr, bmlocal10929_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_EapList_usePrivacy: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_usePrivacy: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_usePrivacy: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_usePrivacy: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_usePrivacy: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_usePrivacy: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10930_out_val;\
	BM_Eaps_EapList_usePrivacy_GET( base_ptr, idx0, bmlocal10930_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "usePrivacy", 32, (UINT)(bmlocal10930_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_usePrivacy_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_usePrivacy_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10931_my_ptr;\
	UINT bmlocal10932_my_bitoff;\
	BM_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal10931_my_ptr, bmlocal10932_my_bitoff );\
	(*((UINT32*)bmlocal10931_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10932_my_bitoff );\
}

// Eaps_EapList_usePrivacy: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_usePrivacy_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10933_tmp_bits;\
	BM_Eaps_EapList_usePrivacy_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10933_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10933_tmp_bits );\
}

#define BM_Eaps_EapList_usePrivacy_BYTES_SIZE 4

#define BM_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10936_acc_bytes;\
	UINT bmlocal10937_acc_bits;\
	PVOID bmlocal10938_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10938_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10938_parent_out_ptr;\
	bmlocal10936_acc_bytes = 4;\
	bmlocal10937_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10936_acc_bytes );\
	out_bitoff += bmlocal10937_acc_bits;\
}

#define BM_Eaps_EapList_vendorId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10939_tmp_bitoff;\
	BM_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, out_ptr, bmlocal10939_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10939_tmp_bitoff);\
}

// Alignment of Eaps_EapList_vendorId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_EapList_vendorId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_vendorId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10940_my_ptr;\
	UINT bmlocal10941_my_bitoff;\
	BM_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal10940_my_ptr, bmlocal10941_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10940_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10940_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10940_my_ptr, bmlocal10941_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_EapList_vendorId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10942_my_ptr;\
	UINT bmlocal10943_my_bitoff;\
	BM_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal10942_my_ptr, bmlocal10943_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10942_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10942_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10942_my_ptr, bmlocal10943_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_EapList_vendorId: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_vendorId: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_vendorId: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_vendorId: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_vendorId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_vendorId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10944_out_val;\
	BM_Eaps_EapList_vendorId_GET( base_ptr, idx0, bmlocal10944_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorId", 32, (UINT)(bmlocal10944_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_vendorId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_vendorId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10945_my_ptr;\
	UINT bmlocal10946_my_bitoff;\
	BM_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal10945_my_ptr, bmlocal10946_my_bitoff );\
	(*((UINT32*)bmlocal10945_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10946_my_bitoff );\
}

// Eaps_EapList_vendorId: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_vendorId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10947_tmp_bits;\
	BM_Eaps_EapList_vendorId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10947_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10947_tmp_bits );\
}

#define BM_Eaps_EapList_vendorId_BYTES_SIZE 4

#define BM_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10950_acc_bytes;\
	UINT bmlocal10951_acc_bits;\
	PVOID bmlocal10952_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10952_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10952_parent_out_ptr;\
	bmlocal10950_acc_bytes = 8;\
	bmlocal10951_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10950_acc_bytes );\
	out_bitoff += bmlocal10951_acc_bits;\
}

#define BM_Eaps_EapList_vendorType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10953_tmp_bitoff;\
	BM_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, out_ptr, bmlocal10953_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10953_tmp_bitoff);\
}

// Alignment of Eaps_EapList_vendorType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_EapList_vendorType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_vendorType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10954_my_ptr;\
	UINT bmlocal10955_my_bitoff;\
	BM_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal10954_my_ptr, bmlocal10955_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10954_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10954_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10954_my_ptr, bmlocal10955_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_EapList_vendorType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10956_my_ptr;\
	UINT bmlocal10957_my_bitoff;\
	BM_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal10956_my_ptr, bmlocal10957_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10956_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10956_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10956_my_ptr, bmlocal10957_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_EapList_vendorType: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_vendorType: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_vendorType: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_vendorType: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_vendorType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_vendorType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal10958_out_val;\
	BM_Eaps_EapList_vendorType_GET( base_ptr, idx0, bmlocal10958_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorType", 32, (UINT)(bmlocal10958_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_vendorType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_vendorType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10959_my_ptr;\
	UINT bmlocal10960_my_bitoff;\
	BM_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal10959_my_ptr, bmlocal10960_my_bitoff );\
	(*((UINT32*)bmlocal10959_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10960_my_bitoff );\
}

// Eaps_EapList_vendorType: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_vendorType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10961_tmp_bits;\
	BM_Eaps_EapList_vendorType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10961_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10961_tmp_bits );\
}

#define BM_Eaps_EapList_vendorType_BYTES_SIZE 4

#define BM_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10964_acc_bytes;\
	UINT bmlocal10965_acc_bits;\
	PVOID bmlocal10966_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10966_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10966_parent_out_ptr;\
	bmlocal10964_acc_bytes = 12;\
	bmlocal10965_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10964_acc_bytes );\
	out_bitoff += bmlocal10965_acc_bits;\
}

#define BM_Eaps_EapList_EAPMethod_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10967_tmp_bitoff;\
	BM_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, out_ptr, bmlocal10967_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10967_tmp_bitoff);\
}

// Alignment of Eaps_EapList_EAPMethod: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_EapList_EAPMethod_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EAPMethod_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10968_my_ptr;\
	UINT bmlocal10969_my_bitoff;\
	BM_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal10968_my_ptr, bmlocal10969_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10968_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10968_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10968_my_ptr, bmlocal10969_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_EapList_EAPMethod_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10970_my_ptr;\
	UINT bmlocal10971_my_bitoff;\
	BM_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal10970_my_ptr, bmlocal10971_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10970_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10970_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10970_my_ptr, bmlocal10971_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_EapList_EAPMethod: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EAPMethod: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EAPMethod: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EAPMethod: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EAPMethod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_EAPMethod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal10972_out_val;\
	BM_Eaps_EapList_EAPMethod_GET( base_ptr, idx0, bmlocal10972_out_val );\
	if( bmlocal10972_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal10972_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal10972_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal10972_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal10972_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal10972_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_CHAP", 1);\
	}\
}

#define BM_Eaps_EapList_EAPMethod_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_EAPMethod_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10973_my_ptr;\
	UINT bmlocal10974_my_bitoff;\
	BM_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal10973_my_ptr, bmlocal10974_my_bitoff );\
	(*((UINT32*)bmlocal10973_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10974_my_bitoff );\
}

// Eaps_EapList_EAPMethod: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_EAPMethod_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10975_tmp_bits;\
	BM_Eaps_EapList_EAPMethod_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal10975_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10975_tmp_bits );\
}

#define BM_Eaps_EapList_EAPMethod_BYTES_SIZE 4

#define BM_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal10978_acc_bytes;\
	UINT bmlocal10979_acc_bits;\
	PVOID bmlocal10980_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal10980_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10980_parent_out_ptr;\
	bmlocal10978_acc_bytes = 16;\
	bmlocal10979_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal10978_acc_bytes );\
	out_bitoff += bmlocal10979_acc_bits;\
}

#define BM_Eaps_EapList_EapId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10981_tmp_bitoff;\
	BM_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, out_ptr, bmlocal10981_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10981_tmp_bitoff);\
}

// COMPOSITE: Full name: 'Eaps_EapList_EapId' Type: 'EapIdMember', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10982_parent_out_ptr;\
	BM_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, bmlocal10982_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10982_parent_out_ptr;\
}

#define BM_Eaps_EapList_EapId_EapId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10983_tmp_bitoff;\
	BM_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, out_ptr, bmlocal10983_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10983_tmp_bitoff);\
}

// ARRAY: Eaps_EapList_EapId_EapId
#define BM_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapId_EapId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10984_out_ptr;\
	UINT bmlocal10985_out_bitoff;\
	UINT bmlocal10986_element_size_bytes;\
	UINT bmlocal10987_element_size_bits;\
	BM_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, bmlocal10984_out_ptr, bmlocal10985_out_bitoff );\
	bmlocal10986_element_size_bytes = 1;\
	bmlocal10987_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal10984_out_ptr) + (idx1) * bmlocal10986_element_size_bytes );\
	out_bitoff = bmlocal10985_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal10987_element_size_bits );\
}

// COMPOSITE: Full name: 'Eaps_EapList_EapId_EapId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10988_parent_out_ptr;\
	BM_Eaps_EapList_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal10988_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal10988_parent_out_ptr;\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal10989_tmp_bitoff;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal10989_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal10989_tmp_bitoff);\
}

// Alignment of Eaps_EapList_EapId_EapId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_Eaps_EapList_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10990_my_ptr;\
	UINT bmlocal10991_my_bitoff;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal10990_my_ptr, bmlocal10991_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10990_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10990_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal10990_my_ptr, bmlocal10991_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10992_my_ptr;\
	UINT bmlocal10993_my_bitoff;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal10992_my_ptr, bmlocal10993_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10992_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal10992_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal10992_my_ptr, bmlocal10993_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// Eaps_EapList_EapId_EapId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EapId_EapId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EapId_EapId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EapId_EapId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EapId_EapId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_EapId_EapId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal10994_out_val;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET( base_ptr, idx0, idx1, bmlocal10994_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal10994_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal10995_my_ptr;\
	UINT bmlocal10996_my_bitoff;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal10995_my_ptr, bmlocal10996_my_bitoff );\
	(*((UINT8*)bmlocal10995_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal10996_my_bitoff );\
}

// Eaps_EapList_EapId_EapId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_EapId_EapId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal10997_tmp_bits;\
	BM_Eaps_EapList_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal10997_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal10997_tmp_bits );\
}

#define BM_Eaps_EapList_EapId_EapId_BufferByte_BYTES_SIZE 1

#define BM_Eaps_EapList_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapId_EapId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11000_tmp_bits;\
	BM_Eaps_EapList_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11000_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11000_tmp_bits );\
}

#define BM_Eaps_EapList_EapId_EapId_BYTES_CELL_SIZE 1

#define BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapId_EapId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11001_dim_size0;\
	UINT bmlocal11002_idx0;\
	bmlocal11001_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	for( bmlocal11002_idx0=0; bmlocal11002_idx0<bmlocal11001_dim_size0; bmlocal11002_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11002_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal11002_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_EapId_EapId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_EapId_EapId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11003_tmp_bits;\
	BM_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11003_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11003_tmp_bits );\
}

#define BM_Eaps_EapList_EapId_EapId_BYTES_SIZE 100

#define BM_Eaps_EapList_EapId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11004_tmp_bytes = 0;\
	UINT bmlocal11005_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, bmlocal11004_tmp_bytes, bmlocal11005_tmp_bits );\
	out_bytes += bmlocal11004_tmp_bytes;\
	out_bits += bmlocal11005_tmp_bits;\
}

#define BM_Eaps_EapList_EapId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11006_tmp_bits;\
	BM_Eaps_EapList_EapId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11006_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11006_tmp_bits );\
}

#define BM_Eaps_EapList_EapId_BYTES_SIZE 100

#define BM_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	BM_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11009_acc_bytes;\
	UINT bmlocal11010_acc_bits;\
	PVOID bmlocal11011_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11011_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11011_parent_out_ptr;\
	bmlocal11009_acc_bytes = 116;\
	bmlocal11010_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11009_acc_bytes );\
	out_bitoff += bmlocal11010_acc_bits;\
}

#define BM_Eaps_EapList_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11012_tmp_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, bmlocal11012_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11012_tmp_bitoff);\
}

// COMPOSITE: Full name: 'Eaps_EapList_provisionedPseudoId' Type: 'provisionedPseudoIdMember', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11013_parent_out_ptr;\
	BM_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, bmlocal11013_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11013_parent_out_ptr;\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11014_tmp_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, bmlocal11014_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11014_tmp_bitoff);\
}

// ARRAY: Eaps_EapList_provisionedPseudoId_provisionedPseudoId
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11015_out_ptr;\
	UINT bmlocal11016_out_bitoff;\
	UINT bmlocal11017_element_size_bytes;\
	UINT bmlocal11018_element_size_bits;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, bmlocal11015_out_ptr, bmlocal11016_out_bitoff );\
	bmlocal11017_element_size_bytes = 1;\
	bmlocal11018_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11015_out_ptr) + (idx1) * bmlocal11017_element_size_bytes );\
	out_bitoff = bmlocal11016_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11018_element_size_bits );\
}

// COMPOSITE: Full name: 'Eaps_EapList_provisionedPseudoId_provisionedPseudoId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11019_parent_out_ptr;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal11019_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11019_parent_out_ptr;\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11020_tmp_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal11020_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11020_tmp_bitoff);\
}

// Alignment of Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11021_my_ptr;\
	UINT bmlocal11022_my_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11021_my_ptr, bmlocal11022_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11021_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11021_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11021_my_ptr, bmlocal11022_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11023_my_ptr;\
	UINT bmlocal11024_my_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11023_my_ptr, bmlocal11024_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11023_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11023_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11023_my_ptr, bmlocal11024_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11025_out_val;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, idx1, bmlocal11025_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11025_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11026_my_ptr;\
	UINT bmlocal11027_my_bitoff;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11026_my_ptr, bmlocal11027_my_bitoff );\
	(*((UINT8*)bmlocal11026_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11027_my_bitoff );\
}

// Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11028_tmp_bits;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11028_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11028_tmp_bits );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_BYTES_SIZE 1

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11031_tmp_bits;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11031_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11031_tmp_bits );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BYTES_CELL_SIZE 1

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11032_dim_size0;\
	UINT bmlocal11033_idx0;\
	bmlocal11032_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	for( bmlocal11033_idx0=0; bmlocal11033_idx0<bmlocal11032_dim_size0; bmlocal11033_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11033_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal11033_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11034_tmp_bits;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11034_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11034_tmp_bits );\
}

#define BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BYTES_SIZE 100

#define BM_Eaps_EapList_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11035_tmp_bytes = 0;\
	UINT bmlocal11036_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, bmlocal11035_tmp_bytes, bmlocal11036_tmp_bits );\
	out_bytes += bmlocal11035_tmp_bytes;\
	out_bits += bmlocal11036_tmp_bits;\
}

#define BM_Eaps_EapList_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11037_tmp_bits;\
	BM_Eaps_EapList_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11037_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11037_tmp_bits );\
}

#define BM_Eaps_EapList_provisionedPseudoId_BYTES_SIZE 100

#define BM_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	BM_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_provisionedPseudoId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11040_acc_bytes;\
	UINT bmlocal11041_acc_bits;\
	PVOID bmlocal11042_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11042_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11042_parent_out_ptr;\
	bmlocal11040_acc_bytes = 216;\
	bmlocal11041_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11040_acc_bytes );\
	out_bitoff += bmlocal11041_acc_bits;\
}

#define BM_Eaps_EapList_EapPassword_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11043_tmp_bitoff;\
	BM_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, out_ptr, bmlocal11043_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11043_tmp_bitoff);\
}

// COMPOSITE: Full name: 'Eaps_EapList_EapPassword' Type: 'EapPasswordMember', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11044_parent_out_ptr;\
	BM_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, bmlocal11044_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11044_parent_out_ptr;\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11045_tmp_bitoff;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, out_ptr, bmlocal11045_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11045_tmp_bitoff);\
}

// ARRAY: Eaps_EapList_EapPassword_EapPassword
#define BM_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 32;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11046_out_ptr;\
	UINT bmlocal11047_out_bitoff;\
	UINT bmlocal11048_element_size_bytes;\
	UINT bmlocal11049_element_size_bits;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, bmlocal11046_out_ptr, bmlocal11047_out_bitoff );\
	bmlocal11048_element_size_bytes = 1;\
	bmlocal11049_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11046_out_ptr) + (idx1) * bmlocal11048_element_size_bytes );\
	out_bitoff = bmlocal11047_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11049_element_size_bits );\
}

// COMPOSITE: Full name: 'Eaps_EapList_EapPassword_EapPassword' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11050_parent_out_ptr;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal11050_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11050_parent_out_ptr;\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11051_tmp_bitoff;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal11051_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11051_tmp_bitoff);\
}

// Alignment of Eaps_EapList_EapPassword_EapPassword_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11052_my_ptr;\
	UINT bmlocal11053_my_bitoff;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11052_my_ptr, bmlocal11053_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11052_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11052_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11052_my_ptr, bmlocal11053_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11054_my_ptr;\
	UINT bmlocal11055_my_bitoff;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11054_my_ptr, bmlocal11055_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11054_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11054_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11054_my_ptr, bmlocal11055_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// Eaps_EapList_EapPassword_EapPassword_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EapPassword_EapPassword_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_EapPassword_EapPassword_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EapPassword_EapPassword_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_EapPassword_EapPassword_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_EapPassword_EapPassword_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11056_out_val;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, idx1, bmlocal11056_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11056_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11057_my_ptr;\
	UINT bmlocal11058_my_bitoff;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11057_my_ptr, bmlocal11058_my_bitoff );\
	(*((UINT8*)bmlocal11057_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11058_my_bitoff );\
}

// Eaps_EapList_EapPassword_EapPassword_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11059_tmp_bits;\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11059_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11059_tmp_bits );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_BYTES_SIZE 1

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11062_tmp_bits;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11062_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11062_tmp_bits );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BYTES_CELL_SIZE 1

#define BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11063_dim_size0;\
	UINT bmlocal11064_idx0;\
	bmlocal11063_dim_size0 = 32;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	for( bmlocal11064_idx0=0; bmlocal11064_idx0<bmlocal11063_dim_size0; bmlocal11064_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11064_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal11064_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11065_tmp_bits;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11065_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11065_tmp_bits );\
}

#define BM_Eaps_EapList_EapPassword_EapPassword_BYTES_SIZE 32

#define BM_Eaps_EapList_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11066_tmp_bytes = 0;\
	UINT bmlocal11067_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, bmlocal11066_tmp_bytes, bmlocal11067_tmp_bits );\
	out_bytes += bmlocal11066_tmp_bytes;\
	out_bits += bmlocal11067_tmp_bits;\
}

#define BM_Eaps_EapList_EapPassword_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11068_tmp_bits;\
	BM_Eaps_EapList_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11068_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11068_tmp_bits );\
}

#define BM_Eaps_EapList_EapPassword_BYTES_SIZE 32

#define BM_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	BM_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_EapPassword_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11071_acc_bytes;\
	UINT bmlocal11072_acc_bits;\
	PVOID bmlocal11073_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11073_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11073_parent_out_ptr;\
	bmlocal11071_acc_bytes = 248;\
	bmlocal11072_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11071_acc_bytes );\
	out_bitoff += bmlocal11072_acc_bits;\
}

#define BM_Eaps_EapList_Realm_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11074_tmp_bitoff;\
	BM_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, out_ptr, bmlocal11074_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11074_tmp_bitoff);\
}

// COMPOSITE: Full name: 'Eaps_EapList_Realm' Type: 'RealmMember', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11075_parent_out_ptr;\
	BM_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, bmlocal11075_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11075_parent_out_ptr;\
}

#define BM_Eaps_EapList_Realm_Realm_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11076_tmp_bitoff;\
	BM_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, out_ptr, bmlocal11076_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11076_tmp_bitoff);\
}

// ARRAY: Eaps_EapList_Realm_Realm
#define BM_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_Realm_Realm_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11077_out_ptr;\
	UINT bmlocal11078_out_bitoff;\
	UINT bmlocal11079_element_size_bytes;\
	UINT bmlocal11080_element_size_bits;\
	BM_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, bmlocal11077_out_ptr, bmlocal11078_out_bitoff );\
	bmlocal11079_element_size_bytes = 1;\
	bmlocal11080_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11077_out_ptr) + (idx1) * bmlocal11079_element_size_bytes );\
	out_bitoff = bmlocal11078_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11080_element_size_bits );\
}

// COMPOSITE: Full name: 'Eaps_EapList_Realm_Realm' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11081_parent_out_ptr;\
	BM_Eaps_EapList_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal11081_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11081_parent_out_ptr;\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11082_tmp_bitoff;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal11082_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11082_tmp_bitoff);\
}

// Alignment of Eaps_EapList_Realm_Realm_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_Eaps_EapList_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11083_my_ptr;\
	UINT bmlocal11084_my_bitoff;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11083_my_ptr, bmlocal11084_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11083_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11083_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11083_my_ptr, bmlocal11084_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11085_my_ptr;\
	UINT bmlocal11086_my_bitoff;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11085_my_ptr, bmlocal11086_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11085_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11085_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11085_my_ptr, bmlocal11086_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// Eaps_EapList_Realm_Realm_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_Realm_Realm_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_Realm_Realm_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_Realm_Realm_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_Realm_Realm_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_Realm_Realm_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11087_out_val;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET( base_ptr, idx0, idx1, bmlocal11087_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11087_out_val), "%d", 1);\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11088_my_ptr;\
	UINT bmlocal11089_my_bitoff;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal11088_my_ptr, bmlocal11089_my_bitoff );\
	(*((UINT8*)bmlocal11088_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11089_my_bitoff );\
}

// Eaps_EapList_Realm_Realm_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_Realm_Realm_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11090_tmp_bits;\
	BM_Eaps_EapList_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11090_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11090_tmp_bits );\
}

#define BM_Eaps_EapList_Realm_Realm_BufferByte_BYTES_SIZE 1

#define BM_Eaps_EapList_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_Realm_Realm_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11093_tmp_bits;\
	BM_Eaps_EapList_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11093_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11093_tmp_bits );\
}

#define BM_Eaps_EapList_Realm_Realm_BYTES_CELL_SIZE 1

#define BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_Eaps_EapList_Realm_Realm_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11094_dim_size0;\
	UINT bmlocal11095_idx0;\
	bmlocal11094_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	for( bmlocal11095_idx0=0; bmlocal11095_idx0<bmlocal11094_dim_size0; bmlocal11095_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11095_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal11095_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_Realm_Realm_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_Realm_Realm_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11096_tmp_bits;\
	BM_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11096_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11096_tmp_bits );\
}

#define BM_Eaps_EapList_Realm_Realm_BYTES_SIZE 100

#define BM_Eaps_EapList_Realm_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11097_tmp_bytes = 0;\
	UINT bmlocal11098_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, bmlocal11097_tmp_bytes, bmlocal11098_tmp_bits );\
	out_bytes += bmlocal11097_tmp_bytes;\
	out_bits += bmlocal11098_tmp_bits;\
}

#define BM_Eaps_EapList_Realm_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11099_tmp_bits;\
	BM_Eaps_EapList_Realm_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11099_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11099_tmp_bits );\
}

#define BM_Eaps_EapList_Realm_BYTES_SIZE 100

#define BM_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	BM_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_Realm_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11102_acc_bytes;\
	UINT bmlocal11103_acc_bits;\
	PVOID bmlocal11104_parent_out_ptr;\
	BM_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11104_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11104_parent_out_ptr;\
	bmlocal11102_acc_bytes = 348;\
	bmlocal11103_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11102_acc_bytes );\
	out_bitoff += bmlocal11103_acc_bits;\
}

#define BM_Eaps_EapList_encaps_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11105_tmp_bitoff;\
	BM_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, out_ptr, bmlocal11105_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11105_tmp_bitoff);\
}

// Alignment of Eaps_EapList_encaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Eaps_EapList_encaps_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_encaps_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11106_my_ptr;\
	UINT bmlocal11107_my_bitoff;\
	BM_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal11106_my_ptr, bmlocal11107_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11106_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11106_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11106_my_ptr, bmlocal11107_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_Eaps_EapList_encaps_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11108_my_ptr;\
	UINT bmlocal11109_my_bitoff;\
	BM_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal11108_my_ptr, bmlocal11109_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11108_my_ptr, bmlocal11109_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Eaps_EapList_encaps: IS_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_encaps: SET_DEFAULT accessor is not defined because no default value was specified.
// Eaps_EapList_encaps: IS_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_encaps: SET_RESET accessor is not defined because no reset value was specified.
// Eaps_EapList_encaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Eaps_EapList_encaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal11110_out_val;\
	BM_Eaps_EapList_encaps_GET( base_ptr, idx0, bmlocal11110_out_val );\
	if( bmlocal11110_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal11110_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal11110_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal11110_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal11110_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal11110_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_CHAP", 1);\
	}\
}

#define BM_Eaps_EapList_encaps_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_encaps_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11111_my_ptr;\
	UINT bmlocal11112_my_bitoff;\
	BM_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal11111_my_ptr, bmlocal11112_my_bitoff );\
	(*((UINT32*)bmlocal11111_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11112_my_bitoff );\
}

// Eaps_EapList_encaps: Validation accessors are not defined because validation condition was not specified.
#define BM_Eaps_EapList_encaps_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11113_tmp_bits;\
	BM_Eaps_EapList_encaps_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11113_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11113_tmp_bits );\
}

#define BM_Eaps_EapList_encaps_BYTES_SIZE 4

#define BM_Eaps_EapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 352;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11116_tmp_bits;\
	BM_Eaps_EapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11116_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11116_tmp_bits );\
}

#define BM_Eaps_EapList_BYTES_CELL_SIZE 352

#define BM_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Eaps_EapList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_Eaps_EapList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11117_dim_size0;\
	UINT bmlocal11118_idx0;\
	{\
		UINT32 bmlocal11119_var0;\
		BM_Eaps_NumOfEaps_GET( base_ptr, bmlocal11119_var0 );\
		bmlocal11117_dim_size0 = (UINT)(bmlocal11119_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapList", 1);\
	for( bmlocal11118_idx0=0; bmlocal11118_idx0<bmlocal11117_dim_size0; bmlocal11118_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11118_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, bmlocal11118_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_EapList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Eaps_EapList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Eaps_EapList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11120_tmp_bits;\
	BM_Eaps_EapList_GET_SIZE( base_ptr, out_bytes, bmlocal11120_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11120_tmp_bits );\
}


#define BM_Eaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11121_tmp_bytes = 0;\
	UINT bmlocal11122_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_Eaps_EapList_GET_SIZE( base_ptr, bmlocal11121_tmp_bytes, bmlocal11122_tmp_bits );\
	out_bytes += bmlocal11121_tmp_bytes;\
	out_bits += bmlocal11122_tmp_bits;\
}

#define BM_Eaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11123_tmp_bits;\
	BM_Eaps_GET_SIZE( base_ptr, out_bytes, bmlocal11123_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11123_tmp_bits );\
}

#define BM_Eaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Eaps", 1);\
	BM_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Eaps_EapList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Eaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Eaps_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CaplNapMember[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _priority;
	BMS_NapMember _NapMember;
} BMS_CaplNapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_NapMember _NapMember;
	UINT32 _priority;
} BMS_CaplNapMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'CaplNapMember' Type: 'CaplNapMember', Top-level, Non-instance, No bitoff root
#define BM_CaplNapMember_priority_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CaplNapMember_priority_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11124_tmp_bitoff;\
	BM_CaplNapMember_priority_GET_POS( base_ptr, out_ptr, bmlocal11124_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11124_tmp_bitoff);\
}

#define BM_CaplNapMember_priority_POS_ALIGNED 0

// Alignment of CaplNapMember_priority: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CaplNapMember_priority_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_priority_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11125_my_ptr;\
	UINT bmlocal11126_my_bitoff;\
	BM_CaplNapMember_priority_GET_POS( base_ptr, bmlocal11125_my_ptr, bmlocal11126_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11125_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11125_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11125_my_ptr, bmlocal11126_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CaplNapMember_priority_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11127_my_ptr;\
	UINT bmlocal11128_my_bitoff;\
	BM_CaplNapMember_priority_GET_POS( base_ptr, bmlocal11127_my_ptr, bmlocal11128_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11127_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11127_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11127_my_ptr, bmlocal11128_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CaplNapMember_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_priority: IS_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_priority: SET_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplNapMember_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplNapMember_priority_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11129_out_val;\
	BM_CaplNapMember_priority_GET( base_ptr, bmlocal11129_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal11129_out_val), "%d", 1);\
}

#define BM_CaplNapMember_priority_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_priority_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CaplNapMember_priority_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11130_my_ptr;\
	UINT bmlocal11131_my_bitoff;\
	BM_CaplNapMember_priority_GET_POS( base_ptr, bmlocal11130_my_ptr, bmlocal11131_my_bitoff );\
	(*((UINT32*)bmlocal11130_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11131_my_bitoff );\
}

// CaplNapMember_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplNapMember_priority_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11132_tmp_bits;\
	BM_CaplNapMember_priority_GET_SIZE( base_ptr, out_bytes, bmlocal11132_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11132_tmp_bits );\
}

#define BM_CaplNapMember_priority_BYTES_SIZE 4

#define BM_CaplNapMember_NapMember_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11135_acc_bytes;\
	UINT bmlocal11136_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11135_acc_bytes = 4;\
	bmlocal11136_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11135_acc_bytes );\
	out_bitoff += bmlocal11136_acc_bits;\
}

#define BM_CaplNapMember_NapMember_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11137_tmp_bitoff;\
	BM_CaplNapMember_NapMember_GET_POS( base_ptr, out_ptr, bmlocal11137_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11137_tmp_bitoff);\
}

#define BM_CaplNapMember_NapMember_POS_ALIGNED 4

// COMPOSITE: Full name: 'CaplNapMember_NapMember' Type: 'NapMember', Inner, Non-instance, No bitoff root
#define BM_CaplNapMember_NapMember_napID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11138_parent_out_ptr;\
	BM_CaplNapMember_NapMember_GET_POS( base_ptr, bmlocal11138_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11138_parent_out_ptr;\
}

#define BM_CaplNapMember_NapMember_napID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11139_tmp_bitoff;\
	BM_CaplNapMember_NapMember_napID_GET_POS( base_ptr, out_ptr, bmlocal11139_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11139_tmp_bitoff);\
}

#define BM_CaplNapMember_NapMember_napID_POS_ALIGNED 4

// ARRAY: CaplNapMember_NapMember_napID
#define BM_CaplNapMember_NapMember_napID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_NapMember_napID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 3;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11140_out_ptr;\
	UINT bmlocal11141_out_bitoff;\
	UINT bmlocal11142_element_size_bytes;\
	UINT bmlocal11143_element_size_bits;\
	BM_CaplNapMember_NapMember_napID_GET_POS( base_ptr, bmlocal11140_out_ptr, bmlocal11141_out_bitoff );\
	bmlocal11142_element_size_bytes = 1;\
	bmlocal11143_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11140_out_ptr) + (idx0) * bmlocal11142_element_size_bytes );\
	out_bitoff = bmlocal11141_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11143_element_size_bits );\
}

// COMPOSITE: Full name: 'CaplNapMember_NapMember_napID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_CaplNapMember_NapMember_napID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11144_parent_out_ptr;\
	BM_CaplNapMember_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11144_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11144_parent_out_ptr;\
}

// Alignment of CaplNapMember_NapMember_napID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_CaplNapMember_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplNapMember_NapMember_napID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11145_my_ptr;\
	UINT bmlocal11146_my_bitoff;\
	BM_CaplNapMember_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal11145_my_ptr, bmlocal11146_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11145_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11145_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11145_my_ptr, bmlocal11146_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_CaplNapMember_NapMember_napID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11147_my_ptr;\
	UINT bmlocal11148_my_bitoff;\
	BM_CaplNapMember_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal11147_my_ptr, bmlocal11148_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11147_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11147_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11147_my_ptr, bmlocal11148_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// CaplNapMember_NapMember_napID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_NapMember_napID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_NapMember_napID_value: IS_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_NapMember_napID_value: SET_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_NapMember_napID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplNapMember_NapMember_napID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplNapMember_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11149_out_val;\
	BM_CaplNapMember_NapMember_napID_value_GET( base_ptr, idx0, bmlocal11149_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal11149_out_val), "%u", 1);\
}

#define BM_CaplNapMember_NapMember_napID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CaplNapMember_NapMember_napID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11150_my_ptr;\
	UINT bmlocal11151_my_bitoff;\
	BM_CaplNapMember_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal11150_my_ptr, bmlocal11151_my_bitoff );\
	(*((UINT8*)bmlocal11150_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11151_my_bitoff );\
}

// CaplNapMember_NapMember_napID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplNapMember_NapMember_napID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11152_tmp_bits;\
	BM_CaplNapMember_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11152_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11152_tmp_bits );\
}

#define BM_CaplNapMember_NapMember_napID_value_BYTES_SIZE 1

#define BM_CaplNapMember_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplNapMember_NapMember_napID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11155_tmp_bits;\
	BM_CaplNapMember_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11155_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11155_tmp_bits );\
}

#define BM_CaplNapMember_NapMember_napID_BYTES_CELL_SIZE 1

#define BM_CaplNapMember_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplNapMember_NapMember_napID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_CaplNapMember_NapMember_napID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11156_dim_size0;\
	UINT bmlocal11157_idx0;\
	bmlocal11156_dim_size0 = 3;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "napID", 1);\
	for( bmlocal11157_idx0=0; bmlocal11157_idx0<bmlocal11156_dim_size0; bmlocal11157_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11157_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CaplNapMember_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, bmlocal11157_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_NapMember_napID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_napID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CaplNapMember_NapMember_napID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11158_tmp_bits;\
	BM_CaplNapMember_NapMember_napID_GET_SIZE( base_ptr, out_bytes, bmlocal11158_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11158_tmp_bits );\
}

#define BM_CaplNapMember_NapMember_napID_BYTES_SIZE 3

#define BM_CaplNapMember_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11159_tmp_bytes = 0;\
	UINT bmlocal11160_tmp_bits = 0;\
	UINT bmlocal11161_acc_bytes;\
	UINT bmlocal11162_acc_bits;\
	PVOID bmlocal11163_parent_out_ptr;\
	BM_CaplNapMember_NapMember_GET_POS( base_ptr, bmlocal11163_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11163_parent_out_ptr;\
	bmlocal11161_acc_bytes = 0;\
	bmlocal11162_acc_bits = 0;\
	BM_CaplNapMember_NapMember_napID_GET_SIZE( base_ptr, bmlocal11159_tmp_bytes, bmlocal11160_tmp_bits );\
	bmlocal11161_acc_bytes += bmlocal11159_tmp_bytes;\
	bmlocal11162_acc_bits += bmlocal11160_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11161_acc_bytes );\
	out_bitoff += bmlocal11162_acc_bits;\
}

#define BM_CaplNapMember_NapMember_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11164_tmp_bitoff;\
	BM_CaplNapMember_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal11164_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11164_tmp_bitoff);\
}

#define BM_CaplNapMember_NapMember_Reserved_1_POS_ALIGNED 7

// Alignment of CaplNapMember_NapMember_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CaplNapMember_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_NapMember_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11165_my_ptr;\
	UINT bmlocal11166_my_bitoff;\
	BM_CaplNapMember_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal11165_my_ptr, bmlocal11166_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11165_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11165_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11165_my_ptr, bmlocal11166_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_CaplNapMember_NapMember_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11167_my_ptr;\
	UINT bmlocal11168_my_bitoff;\
	BM_CaplNapMember_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal11167_my_ptr, bmlocal11168_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11167_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11167_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11167_my_ptr, bmlocal11168_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// CaplNapMember_NapMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_NapMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplNapMember_NapMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_NapMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// CaplNapMember_NapMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplNapMember_NapMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplNapMember_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11169_out_val;\
	BM_CaplNapMember_NapMember_Reserved_1_GET( base_ptr, bmlocal11169_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal11169_out_val), "%d", 1);\
}

#define BM_CaplNapMember_NapMember_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CaplNapMember_NapMember_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11170_my_ptr;\
	UINT bmlocal11171_my_bitoff;\
	BM_CaplNapMember_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal11170_my_ptr, bmlocal11171_my_bitoff );\
	(*((UINT8*)bmlocal11170_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11171_my_bitoff );\
}

// CaplNapMember_NapMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplNapMember_NapMember_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11172_tmp_bits;\
	BM_CaplNapMember_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal11172_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11172_tmp_bits );\
}

#define BM_CaplNapMember_NapMember_Reserved_1_BYTES_SIZE 1

#define BM_CaplNapMember_NapMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11173_tmp_bytes = 0;\
	UINT bmlocal11174_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_CaplNapMember_NapMember_napID_GET_SIZE( base_ptr, bmlocal11173_tmp_bytes, bmlocal11174_tmp_bits );\
	out_bytes += bmlocal11173_tmp_bytes;\
	out_bits += bmlocal11174_tmp_bits;\
}

#define BM_CaplNapMember_NapMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11175_tmp_bits;\
	BM_CaplNapMember_NapMember_GET_SIZE( base_ptr, out_bytes, bmlocal11175_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11175_tmp_bits );\
}

#define BM_CaplNapMember_NapMember_BYTES_SIZE 4

#define BM_CaplNapMember_NapMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NapMember", 1);\
	BM_CaplNapMember_NapMember_napID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CaplNapMember_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_NapMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_NapMember_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_CaplNapMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11178_tmp_bits;\
	BM_CaplNapMember_GET_SIZE( base_ptr, out_bytes, bmlocal11178_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11178_tmp_bits );\
}

#define BM_CaplNapMember_BYTES_SIZE 8

#define BM_CaplNapMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CaplNapMember", 1);\
	BM_CaplNapMember_priority_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CaplNapMember_NapMember_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplNapMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplNapMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CaplMember[4];

// COMPOSITE: Full name: 'CaplMember' Type: 'CaplMember', Top-level, Non-instance, No bitoff root
#define BM_CaplMember_NumOfNaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CaplMember_NumOfNaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11179_tmp_bitoff;\
	BM_CaplMember_NumOfNaps_GET_POS( base_ptr, out_ptr, bmlocal11179_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11179_tmp_bitoff);\
}

#define BM_CaplMember_NumOfNaps_POS_ALIGNED 0

// Alignment of CaplMember_NumOfNaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CaplMember_NumOfNaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_NumOfNaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11180_my_ptr;\
	UINT bmlocal11181_my_bitoff;\
	BM_CaplMember_NumOfNaps_GET_POS( base_ptr, bmlocal11180_my_ptr, bmlocal11181_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11180_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11180_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11180_my_ptr, bmlocal11181_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CaplMember_NumOfNaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11182_my_ptr;\
	UINT bmlocal11183_my_bitoff;\
	BM_CaplMember_NumOfNaps_GET_POS( base_ptr, bmlocal11182_my_ptr, bmlocal11183_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11182_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11182_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11182_my_ptr, bmlocal11183_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CaplMember_NumOfNaps: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_NumOfNaps: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_NumOfNaps: IS_RESET accessor is not defined because no reset value was specified.
// CaplMember_NumOfNaps: SET_RESET accessor is not defined because no reset value was specified.
// CaplMember_NumOfNaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplMember_NumOfNaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplMember_NumOfNaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11184_out_val;\
	BM_CaplMember_NumOfNaps_GET( base_ptr, bmlocal11184_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfNaps", 32, (UINT)(bmlocal11184_out_val), "%d", 1);\
}

#define BM_CaplMember_NumOfNaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplMember_NumOfNaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CaplMember_NumOfNaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11185_my_ptr;\
	UINT bmlocal11186_my_bitoff;\
	BM_CaplMember_NumOfNaps_GET_POS( base_ptr, bmlocal11185_my_ptr, bmlocal11186_my_bitoff );\
	(*((UINT32*)bmlocal11185_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11186_my_bitoff );\
}

// CaplMember_NumOfNaps: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplMember_NumOfNaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11187_tmp_bits;\
	BM_CaplMember_NumOfNaps_GET_SIZE( base_ptr, out_bytes, bmlocal11187_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11187_tmp_bits );\
}

#define BM_CaplMember_NumOfNaps_BYTES_SIZE 4

#define BM_CaplMember_CaplNapList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11190_acc_bytes;\
	UINT bmlocal11191_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11190_acc_bytes = 4;\
	bmlocal11191_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11190_acc_bytes );\
	out_bitoff += bmlocal11191_acc_bits;\
}

#define BM_CaplMember_CaplNapList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11192_tmp_bitoff;\
	BM_CaplMember_CaplNapList_GET_POS( base_ptr, out_ptr, bmlocal11192_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11192_tmp_bitoff);\
}

#define BM_CaplMember_CaplNapList_POS_ALIGNED 4

// ARRAY: CaplMember_CaplNapList
#define BM_CaplMember_CaplNapList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal11193_var0;\
		BM_CaplMember_NumOfNaps_GET( base_ptr, bmlocal11193_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal11193_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_CaplNapList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal11194_var0;\
			BM_CaplMember_NumOfNaps_GET( base_ptr, bmlocal11194_var0 );\
			out_element_count = (UINT)(bmlocal11194_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11195_out_ptr;\
	UINT bmlocal11196_out_bitoff;\
	UINT bmlocal11197_element_size_bytes;\
	UINT bmlocal11198_element_size_bits;\
	BM_CaplMember_CaplNapList_GET_POS( base_ptr, bmlocal11195_out_ptr, bmlocal11196_out_bitoff );\
	bmlocal11197_element_size_bytes = 8;\
	bmlocal11198_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11195_out_ptr) + (idx0) * bmlocal11197_element_size_bytes );\
	out_bitoff = bmlocal11196_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11198_element_size_bits );\
}

// COMPOSITE: Full name: 'CaplMember_CaplNapList' Type: 'CaplNapMember', Inner, Non-instance, No bitoff root
#define BM_CaplMember_CaplNapList_priority_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11199_parent_out_ptr;\
	BM_CaplMember_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11199_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11199_parent_out_ptr;\
}

#define BM_CaplMember_CaplNapList_priority_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11200_tmp_bitoff;\
	BM_CaplMember_CaplNapList_priority_GET_POS( base_ptr, idx0, out_ptr, bmlocal11200_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11200_tmp_bitoff);\
}

// Alignment of CaplMember_CaplNapList_priority: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CaplMember_CaplNapList_priority_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_priority_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11201_my_ptr;\
	UINT bmlocal11202_my_bitoff;\
	BM_CaplMember_CaplNapList_priority_GET_POS( base_ptr, idx0, bmlocal11201_my_ptr, bmlocal11202_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11201_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11201_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11201_my_ptr, bmlocal11202_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CaplMember_CaplNapList_priority_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11203_my_ptr;\
	UINT bmlocal11204_my_bitoff;\
	BM_CaplMember_CaplNapList_priority_GET_POS( base_ptr, idx0, bmlocal11203_my_ptr, bmlocal11204_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11203_my_ptr, bmlocal11204_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CaplMember_CaplNapList_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_priority: IS_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_priority: SET_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplMember_CaplNapList_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplMember_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11205_out_val;\
	BM_CaplMember_CaplNapList_priority_GET( base_ptr, idx0, bmlocal11205_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal11205_out_val), "%d", 1);\
}

#define BM_CaplMember_CaplNapList_priority_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CaplMember_CaplNapList_priority_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11206_my_ptr;\
	UINT bmlocal11207_my_bitoff;\
	BM_CaplMember_CaplNapList_priority_GET_POS( base_ptr, idx0, bmlocal11206_my_ptr, bmlocal11207_my_bitoff );\
	(*((UINT32*)bmlocal11206_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11207_my_bitoff );\
}

// CaplMember_CaplNapList_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplMember_CaplNapList_priority_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11208_tmp_bits;\
	BM_CaplMember_CaplNapList_priority_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11208_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11208_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_priority_BYTES_SIZE 4

#define BM_CaplMember_CaplNapList_NapMember_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11211_acc_bytes;\
	UINT bmlocal11212_acc_bits;\
	PVOID bmlocal11213_parent_out_ptr;\
	BM_CaplMember_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11213_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11213_parent_out_ptr;\
	bmlocal11211_acc_bytes = 4;\
	bmlocal11212_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11211_acc_bytes );\
	out_bitoff += bmlocal11212_acc_bits;\
}

#define BM_CaplMember_CaplNapList_NapMember_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11214_tmp_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_GET_POS( base_ptr, idx0, out_ptr, bmlocal11214_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11214_tmp_bitoff);\
}

// COMPOSITE: Full name: 'CaplMember_CaplNapList_NapMember' Type: 'NapMember', Inner, Non-instance, No bitoff root
#define BM_CaplMember_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11215_parent_out_ptr;\
	BM_CaplMember_CaplNapList_NapMember_GET_POS( base_ptr, idx0, bmlocal11215_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11215_parent_out_ptr;\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11216_tmp_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, out_ptr, bmlocal11216_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11216_tmp_bitoff);\
}

// ARRAY: CaplMember_CaplNapList_NapMember_napID
#define BM_CaplMember_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 3;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11217_out_ptr;\
	UINT bmlocal11218_out_bitoff;\
	UINT bmlocal11219_element_size_bytes;\
	UINT bmlocal11220_element_size_bits;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, bmlocal11217_out_ptr, bmlocal11218_out_bitoff );\
	bmlocal11219_element_size_bytes = 1;\
	bmlocal11220_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11217_out_ptr) + (idx1) * bmlocal11219_element_size_bytes );\
	out_bitoff = bmlocal11218_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11220_element_size_bits );\
}

// COMPOSITE: Full name: 'CaplMember_CaplNapList_NapMember_napID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_CaplMember_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11221_parent_out_ptr;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal11221_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11221_parent_out_ptr;\
}

// Alignment of CaplMember_CaplNapList_NapMember_napID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_CaplMember_CaplNapList_NapMember_napID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11222_my_ptr;\
	UINT bmlocal11223_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, bmlocal11222_my_ptr, bmlocal11223_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11222_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11222_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11222_my_ptr, bmlocal11223_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11224_my_ptr;\
	UINT bmlocal11225_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, bmlocal11224_my_ptr, bmlocal11225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11224_my_ptr, bmlocal11225_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// CaplMember_CaplNapList_NapMember_napID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_NapMember_napID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_NapMember_napID_value: IS_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_NapMember_napID_value: SET_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_NapMember_napID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplMember_CaplNapList_NapMember_napID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplMember_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11226_out_val;\
	BM_CaplMember_CaplNapList_NapMember_napID_value_GET( base_ptr, idx0, idx1, bmlocal11226_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal11226_out_val), "%u", 1);\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11227_my_ptr;\
	UINT bmlocal11228_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, bmlocal11227_my_ptr, bmlocal11228_my_bitoff );\
	(*((UINT8*)bmlocal11227_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11228_my_bitoff );\
}

// CaplMember_CaplNapList_NapMember_napID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplMember_CaplNapList_NapMember_napID_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11229_tmp_bits;\
	BM_CaplMember_CaplNapList_NapMember_napID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11229_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11229_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_value_BYTES_SIZE 1

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11232_tmp_bits;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal11232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11232_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_BYTES_CELL_SIZE 1

#define BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11233_dim_size0;\
	UINT bmlocal11234_idx0;\
	bmlocal11233_dim_size0 = 3;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "napID", 1);\
	for( bmlocal11234_idx0=0; bmlocal11234_idx0<bmlocal11233_dim_size0; bmlocal11234_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11234_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal11234_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11235_tmp_bits;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11235_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11235_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_NapMember_napID_BYTES_SIZE 3

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11236_tmp_bytes = 0;\
	UINT bmlocal11237_tmp_bits = 0;\
	UINT bmlocal11238_acc_bytes;\
	UINT bmlocal11239_acc_bits;\
	PVOID bmlocal11240_parent_out_ptr;\
	BM_CaplMember_CaplNapList_NapMember_GET_POS( base_ptr, idx0, bmlocal11240_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11240_parent_out_ptr;\
	bmlocal11238_acc_bytes = 0;\
	bmlocal11239_acc_bits = 0;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, bmlocal11236_tmp_bytes, bmlocal11237_tmp_bits );\
	bmlocal11238_acc_bytes += bmlocal11236_tmp_bytes;\
	bmlocal11239_acc_bits += bmlocal11237_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11238_acc_bytes );\
	out_bitoff += bmlocal11239_acc_bits;\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11241_tmp_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal11241_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11241_tmp_bitoff);\
}

// Alignment of CaplMember_CaplNapList_NapMember_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11242_my_ptr;\
	UINT bmlocal11243_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, bmlocal11242_my_ptr, bmlocal11243_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11242_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11242_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11242_my_ptr, bmlocal11243_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11244_my_ptr;\
	UINT bmlocal11245_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, bmlocal11244_my_ptr, bmlocal11245_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11244_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11244_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11244_my_ptr, bmlocal11245_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// CaplMember_CaplNapList_NapMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_NapMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// CaplMember_CaplNapList_NapMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_NapMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// CaplMember_CaplNapList_NapMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CaplMember_CaplNapList_NapMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11246_out_val;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET( base_ptr, idx0, bmlocal11246_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal11246_out_val), "%d", 1);\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11247_my_ptr;\
	UINT bmlocal11248_my_bitoff;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, bmlocal11247_my_ptr, bmlocal11248_my_bitoff );\
	(*((UINT8*)bmlocal11247_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11248_my_bitoff );\
}

// CaplMember_CaplNapList_NapMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11249_tmp_bits;\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11249_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11249_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_NapMember_Reserved_1_BYTES_SIZE 1

#define BM_CaplMember_CaplNapList_NapMember_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11250_tmp_bytes = 0;\
	UINT bmlocal11251_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_CaplMember_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, bmlocal11250_tmp_bytes, bmlocal11251_tmp_bits );\
	out_bytes += bmlocal11250_tmp_bytes;\
	out_bits += bmlocal11251_tmp_bits;\
}

#define BM_CaplMember_CaplNapList_NapMember_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11252_tmp_bits;\
	BM_CaplMember_CaplNapList_NapMember_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11252_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11252_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_NapMember_BYTES_SIZE 4

#define BM_CaplMember_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NapMember", 1);\
	BM_CaplMember_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_CaplMember_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_NapMember_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_CaplMember_CaplNapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11255_tmp_bits;\
	BM_CaplMember_CaplNapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11255_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11255_tmp_bits );\
}

#define BM_CaplMember_CaplNapList_BYTES_CELL_SIZE 8

#define BM_CaplMember_CaplNapList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_CaplMember_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CaplMember_CaplNapList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_CaplMember_CaplNapList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11256_dim_size0;\
	UINT bmlocal11257_idx0;\
	{\
		UINT32 bmlocal11258_var0;\
		BM_CaplMember_NumOfNaps_GET( base_ptr, bmlocal11258_var0 );\
		bmlocal11256_dim_size0 = (UINT)(bmlocal11258_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CaplNapList", 1);\
	for( bmlocal11257_idx0=0; bmlocal11257_idx0<bmlocal11256_dim_size0; bmlocal11257_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11257_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CaplMember_CaplNapList_DUMP_DEPTH_IDX( base_ptr, bmlocal11257_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_CaplNapList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplMember_CaplNapList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CaplMember_CaplNapList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11259_tmp_bits;\
	BM_CaplMember_CaplNapList_GET_SIZE( base_ptr, out_bytes, bmlocal11259_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11259_tmp_bits );\
}


#define BM_CaplMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11260_tmp_bytes = 0;\
	UINT bmlocal11261_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_CaplMember_CaplNapList_GET_SIZE( base_ptr, bmlocal11260_tmp_bytes, bmlocal11261_tmp_bits );\
	out_bytes += bmlocal11260_tmp_bytes;\
	out_bits += bmlocal11261_tmp_bits;\
}

#define BM_CaplMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11262_tmp_bits;\
	BM_CaplMember_GET_SIZE( base_ptr, out_bytes, bmlocal11262_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11262_tmp_bits );\
}

#define BM_CaplMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CaplMember", 1);\
	BM_CaplMember_NumOfNaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CaplMember_CaplNapList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CaplMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CaplMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 RoamingPartnerInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _vNspID;
	UINT32 _priority;
} BMS_RoamingPartnerInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _priority;
	UINT32 _vNspID;
} BMS_RoamingPartnerInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'RoamingPartnerInfo' Type: 'RoamingPartnerInfo', Top-level, Non-instance, No bitoff root
#define BM_RoamingPartnerInfo_vNspID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_RoamingPartnerInfo_vNspID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11263_tmp_bitoff;\
	BM_RoamingPartnerInfo_vNspID_GET_POS( base_ptr, out_ptr, bmlocal11263_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11263_tmp_bitoff);\
}

#define BM_RoamingPartnerInfo_vNspID_POS_ALIGNED 0

// Alignment of RoamingPartnerInfo_vNspID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RoamingPartnerInfo_vNspID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RoamingPartnerInfo_vNspID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11264_my_ptr;\
	UINT bmlocal11265_my_bitoff;\
	BM_RoamingPartnerInfo_vNspID_GET_POS( base_ptr, bmlocal11264_my_ptr, bmlocal11265_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11264_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11264_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11264_my_ptr, bmlocal11265_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RoamingPartnerInfo_vNspID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11266_my_ptr;\
	UINT bmlocal11267_my_bitoff;\
	BM_RoamingPartnerInfo_vNspID_GET_POS( base_ptr, bmlocal11266_my_ptr, bmlocal11267_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11266_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11266_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11266_my_ptr, bmlocal11267_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RoamingPartnerInfo_vNspID: IS_DEFAULT accessor is not defined because no default value was specified.
// RoamingPartnerInfo_vNspID: SET_DEFAULT accessor is not defined because no default value was specified.
// RoamingPartnerInfo_vNspID: IS_RESET accessor is not defined because no reset value was specified.
// RoamingPartnerInfo_vNspID: SET_RESET accessor is not defined because no reset value was specified.
// RoamingPartnerInfo_vNspID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RoamingPartnerInfo_vNspID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RoamingPartnerInfo_vNspID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11268_out_val;\
	BM_RoamingPartnerInfo_vNspID_GET( base_ptr, bmlocal11268_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vNspID", 32, (UINT)(bmlocal11268_out_val), "%d", 1);\
}

#define BM_RoamingPartnerInfo_vNspID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RoamingPartnerInfo_vNspID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RoamingPartnerInfo_vNspID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11269_my_ptr;\
	UINT bmlocal11270_my_bitoff;\
	BM_RoamingPartnerInfo_vNspID_GET_POS( base_ptr, bmlocal11269_my_ptr, bmlocal11270_my_bitoff );\
	(*((UINT32*)bmlocal11269_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11270_my_bitoff );\
}

// RoamingPartnerInfo_vNspID: Validation accessors are not defined because validation condition was not specified.
#define BM_RoamingPartnerInfo_vNspID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11271_tmp_bits;\
	BM_RoamingPartnerInfo_vNspID_GET_SIZE( base_ptr, out_bytes, bmlocal11271_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11271_tmp_bits );\
}

#define BM_RoamingPartnerInfo_vNspID_BYTES_SIZE 4

#define BM_RoamingPartnerInfo_priority_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11274_acc_bytes;\
	UINT bmlocal11275_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11274_acc_bytes = 4;\
	bmlocal11275_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11274_acc_bytes );\
	out_bitoff += bmlocal11275_acc_bits;\
}

#define BM_RoamingPartnerInfo_priority_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11276_tmp_bitoff;\
	BM_RoamingPartnerInfo_priority_GET_POS( base_ptr, out_ptr, bmlocal11276_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11276_tmp_bitoff);\
}

#define BM_RoamingPartnerInfo_priority_POS_ALIGNED 4

// Alignment of RoamingPartnerInfo_priority: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RoamingPartnerInfo_priority_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RoamingPartnerInfo_priority_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11277_my_ptr;\
	UINT bmlocal11278_my_bitoff;\
	BM_RoamingPartnerInfo_priority_GET_POS( base_ptr, bmlocal11277_my_ptr, bmlocal11278_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11277_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11277_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11277_my_ptr, bmlocal11278_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RoamingPartnerInfo_priority_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11279_my_ptr;\
	UINT bmlocal11280_my_bitoff;\
	BM_RoamingPartnerInfo_priority_GET_POS( base_ptr, bmlocal11279_my_ptr, bmlocal11280_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11279_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11279_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11279_my_ptr, bmlocal11280_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RoamingPartnerInfo_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// RoamingPartnerInfo_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// RoamingPartnerInfo_priority: IS_RESET accessor is not defined because no reset value was specified.
// RoamingPartnerInfo_priority: SET_RESET accessor is not defined because no reset value was specified.
// RoamingPartnerInfo_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RoamingPartnerInfo_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RoamingPartnerInfo_priority_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11281_out_val;\
	BM_RoamingPartnerInfo_priority_GET( base_ptr, bmlocal11281_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal11281_out_val), "%d", 1);\
}

#define BM_RoamingPartnerInfo_priority_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RoamingPartnerInfo_priority_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RoamingPartnerInfo_priority_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11282_my_ptr;\
	UINT bmlocal11283_my_bitoff;\
	BM_RoamingPartnerInfo_priority_GET_POS( base_ptr, bmlocal11282_my_ptr, bmlocal11283_my_bitoff );\
	(*((UINT32*)bmlocal11282_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11283_my_bitoff );\
}

// RoamingPartnerInfo_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_RoamingPartnerInfo_priority_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11284_tmp_bits;\
	BM_RoamingPartnerInfo_priority_GET_SIZE( base_ptr, out_bytes, bmlocal11284_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11284_tmp_bits );\
}

#define BM_RoamingPartnerInfo_priority_BYTES_SIZE 4

#define BM_RoamingPartnerInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RoamingPartnerInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11287_tmp_bits;\
	BM_RoamingPartnerInfo_GET_SIZE( base_ptr, out_bytes, bmlocal11287_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11287_tmp_bits );\
}

#define BM_RoamingPartnerInfo_BYTES_SIZE 8

#define BM_RoamingPartnerInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RoamingPartnerInfo", 1);\
	BM_RoamingPartnerInfo_vNspID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_RoamingPartnerInfo_priority_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RoamingPartnerInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RoamingPartnerInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 RaplMember[8];

// COMPOSITE: Full name: 'RaplMember' Type: 'RaplMember', Top-level, Non-instance, No bitoff root
#define BM_RaplMember_NumOfRoamingPartners_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_RaplMember_NumOfRoamingPartners_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11288_tmp_bitoff;\
	BM_RaplMember_NumOfRoamingPartners_GET_POS( base_ptr, out_ptr, bmlocal11288_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11288_tmp_bitoff);\
}

#define BM_RaplMember_NumOfRoamingPartners_POS_ALIGNED 0

// Alignment of RaplMember_NumOfRoamingPartners: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RaplMember_NumOfRoamingPartners_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_NumOfRoamingPartners_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11289_my_ptr;\
	UINT bmlocal11290_my_bitoff;\
	BM_RaplMember_NumOfRoamingPartners_GET_POS( base_ptr, bmlocal11289_my_ptr, bmlocal11290_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11289_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11289_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11289_my_ptr, bmlocal11290_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RaplMember_NumOfRoamingPartners_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11291_my_ptr;\
	UINT bmlocal11292_my_bitoff;\
	BM_RaplMember_NumOfRoamingPartners_GET_POS( base_ptr, bmlocal11291_my_ptr, bmlocal11292_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11291_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11291_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11291_my_ptr, bmlocal11292_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RaplMember_NumOfRoamingPartners: IS_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_NumOfRoamingPartners: SET_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_NumOfRoamingPartners: IS_RESET accessor is not defined because no reset value was specified.
// RaplMember_NumOfRoamingPartners: SET_RESET accessor is not defined because no reset value was specified.
// RaplMember_NumOfRoamingPartners: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RaplMember_NumOfRoamingPartners: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RaplMember_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11293_out_val;\
	BM_RaplMember_NumOfRoamingPartners_GET( base_ptr, bmlocal11293_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfRoamingPartners", 32, (UINT)(bmlocal11293_out_val), "%d", 1);\
}

#define BM_RaplMember_NumOfRoamingPartners_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RaplMember_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RaplMember_NumOfRoamingPartners_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11294_my_ptr;\
	UINT bmlocal11295_my_bitoff;\
	BM_RaplMember_NumOfRoamingPartners_GET_POS( base_ptr, bmlocal11294_my_ptr, bmlocal11295_my_bitoff );\
	(*((UINT32*)bmlocal11294_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11295_my_bitoff );\
}

// RaplMember_NumOfRoamingPartners: Validation accessors are not defined because validation condition was not specified.
#define BM_RaplMember_NumOfRoamingPartners_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11296_tmp_bits;\
	BM_RaplMember_NumOfRoamingPartners_GET_SIZE( base_ptr, out_bytes, bmlocal11296_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11296_tmp_bits );\
}

#define BM_RaplMember_NumOfRoamingPartners_BYTES_SIZE 4

#define BM_RaplMember_RaplList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11299_acc_bytes;\
	UINT bmlocal11300_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11299_acc_bytes = 4;\
	bmlocal11300_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11299_acc_bytes );\
	out_bitoff += bmlocal11300_acc_bits;\
}

#define BM_RaplMember_RaplList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11301_tmp_bitoff;\
	BM_RaplMember_RaplList_GET_POS( base_ptr, out_ptr, bmlocal11301_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11301_tmp_bitoff);\
}

#define BM_RaplMember_RaplList_POS_ALIGNED 4

// ARRAY: RaplMember_RaplList
#define BM_RaplMember_RaplList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal11302_var0;\
		BM_RaplMember_NumOfRoamingPartners_GET( base_ptr, bmlocal11302_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal11302_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_RaplList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal11303_var0;\
			BM_RaplMember_NumOfRoamingPartners_GET( base_ptr, bmlocal11303_var0 );\
			out_element_count = (UINT)(bmlocal11303_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_RaplList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11304_out_ptr;\
	UINT bmlocal11305_out_bitoff;\
	UINT bmlocal11306_element_size_bytes;\
	UINT bmlocal11307_element_size_bits;\
	BM_RaplMember_RaplList_GET_POS( base_ptr, bmlocal11304_out_ptr, bmlocal11305_out_bitoff );\
	bmlocal11306_element_size_bytes = 8;\
	bmlocal11307_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11304_out_ptr) + (idx0) * bmlocal11306_element_size_bytes );\
	out_bitoff = bmlocal11305_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11307_element_size_bits );\
}

// COMPOSITE: Full name: 'RaplMember_RaplList' Type: 'RoamingPartnerInfo', Inner, Non-instance, No bitoff root
#define BM_RaplMember_RaplList_vNspID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11308_parent_out_ptr;\
	BM_RaplMember_RaplList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11308_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11308_parent_out_ptr;\
}

#define BM_RaplMember_RaplList_vNspID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11309_tmp_bitoff;\
	BM_RaplMember_RaplList_vNspID_GET_POS( base_ptr, idx0, out_ptr, bmlocal11309_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11309_tmp_bitoff);\
}

// Alignment of RaplMember_RaplList_vNspID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RaplMember_RaplList_vNspID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RaplMember_RaplList_vNspID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11310_my_ptr;\
	UINT bmlocal11311_my_bitoff;\
	BM_RaplMember_RaplList_vNspID_GET_POS( base_ptr, idx0, bmlocal11310_my_ptr, bmlocal11311_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11310_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11310_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11310_my_ptr, bmlocal11311_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RaplMember_RaplList_vNspID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11312_my_ptr;\
	UINT bmlocal11313_my_bitoff;\
	BM_RaplMember_RaplList_vNspID_GET_POS( base_ptr, idx0, bmlocal11312_my_ptr, bmlocal11313_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11312_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11312_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11312_my_ptr, bmlocal11313_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RaplMember_RaplList_vNspID: IS_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_RaplList_vNspID: SET_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_RaplList_vNspID: IS_RESET accessor is not defined because no reset value was specified.
// RaplMember_RaplList_vNspID: SET_RESET accessor is not defined because no reset value was specified.
// RaplMember_RaplList_vNspID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RaplMember_RaplList_vNspID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RaplMember_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11314_out_val;\
	BM_RaplMember_RaplList_vNspID_GET( base_ptr, idx0, bmlocal11314_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vNspID", 32, (UINT)(bmlocal11314_out_val), "%d", 1);\
}

#define BM_RaplMember_RaplList_vNspID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RaplMember_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RaplMember_RaplList_vNspID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11315_my_ptr;\
	UINT bmlocal11316_my_bitoff;\
	BM_RaplMember_RaplList_vNspID_GET_POS( base_ptr, idx0, bmlocal11315_my_ptr, bmlocal11316_my_bitoff );\
	(*((UINT32*)bmlocal11315_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11316_my_bitoff );\
}

// RaplMember_RaplList_vNspID: Validation accessors are not defined because validation condition was not specified.
#define BM_RaplMember_RaplList_vNspID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11317_tmp_bits;\
	BM_RaplMember_RaplList_vNspID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11317_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11317_tmp_bits );\
}

#define BM_RaplMember_RaplList_vNspID_BYTES_SIZE 4

#define BM_RaplMember_RaplList_priority_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11320_acc_bytes;\
	UINT bmlocal11321_acc_bits;\
	PVOID bmlocal11322_parent_out_ptr;\
	BM_RaplMember_RaplList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11322_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11322_parent_out_ptr;\
	bmlocal11320_acc_bytes = 4;\
	bmlocal11321_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11320_acc_bytes );\
	out_bitoff += bmlocal11321_acc_bits;\
}

#define BM_RaplMember_RaplList_priority_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11323_tmp_bitoff;\
	BM_RaplMember_RaplList_priority_GET_POS( base_ptr, idx0, out_ptr, bmlocal11323_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11323_tmp_bitoff);\
}

// Alignment of RaplMember_RaplList_priority: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RaplMember_RaplList_priority_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RaplMember_RaplList_priority_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11324_my_ptr;\
	UINT bmlocal11325_my_bitoff;\
	BM_RaplMember_RaplList_priority_GET_POS( base_ptr, idx0, bmlocal11324_my_ptr, bmlocal11325_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11324_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11324_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11324_my_ptr, bmlocal11325_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RaplMember_RaplList_priority_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11326_my_ptr;\
	UINT bmlocal11327_my_bitoff;\
	BM_RaplMember_RaplList_priority_GET_POS( base_ptr, idx0, bmlocal11326_my_ptr, bmlocal11327_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11326_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11326_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11326_my_ptr, bmlocal11327_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RaplMember_RaplList_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_RaplList_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_RaplList_priority: IS_RESET accessor is not defined because no reset value was specified.
// RaplMember_RaplList_priority: SET_RESET accessor is not defined because no reset value was specified.
// RaplMember_RaplList_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RaplMember_RaplList_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RaplMember_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11328_out_val;\
	BM_RaplMember_RaplList_priority_GET( base_ptr, idx0, bmlocal11328_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal11328_out_val), "%d", 1);\
}

#define BM_RaplMember_RaplList_priority_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RaplMember_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RaplMember_RaplList_priority_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11329_my_ptr;\
	UINT bmlocal11330_my_bitoff;\
	BM_RaplMember_RaplList_priority_GET_POS( base_ptr, idx0, bmlocal11329_my_ptr, bmlocal11330_my_bitoff );\
	(*((UINT32*)bmlocal11329_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11330_my_bitoff );\
}

// RaplMember_RaplList_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_RaplMember_RaplList_priority_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11331_tmp_bits;\
	BM_RaplMember_RaplList_priority_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11331_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11331_tmp_bits );\
}

#define BM_RaplMember_RaplList_priority_BYTES_SIZE 4

#define BM_RaplMember_RaplList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RaplMember_RaplList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11334_tmp_bits;\
	BM_RaplMember_RaplList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11334_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11334_tmp_bits );\
}

#define BM_RaplMember_RaplList_BYTES_CELL_SIZE 8

#define BM_RaplMember_RaplList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_RaplMember_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RaplMember_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RaplMember_RaplList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RaplMember_RaplList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_RaplMember_RaplList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11335_dim_size0;\
	UINT bmlocal11336_idx0;\
	{\
		UINT32 bmlocal11337_var0;\
		BM_RaplMember_NumOfRoamingPartners_GET( base_ptr, bmlocal11337_var0 );\
		bmlocal11335_dim_size0 = (UINT)(bmlocal11337_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RaplList", 1);\
	for( bmlocal11336_idx0=0; bmlocal11336_idx0<bmlocal11335_dim_size0; bmlocal11336_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11336_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RaplMember_RaplList_DUMP_DEPTH_IDX( base_ptr, bmlocal11336_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_RaplList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RaplMember_RaplList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RaplMember_RaplList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11338_tmp_bits;\
	BM_RaplMember_RaplList_GET_SIZE( base_ptr, out_bytes, bmlocal11338_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11338_tmp_bits );\
}


#define BM_RaplMember_Any_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11339_tmp_bytes = 0;\
	UINT bmlocal11340_tmp_bits = 0;\
	UINT bmlocal11341_acc_bytes;\
	UINT bmlocal11342_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11341_acc_bytes = 4;\
	bmlocal11342_acc_bits = 0;\
	BM_RaplMember_RaplList_GET_SIZE( base_ptr, bmlocal11339_tmp_bytes, bmlocal11340_tmp_bits );\
	bmlocal11341_acc_bytes += bmlocal11339_tmp_bytes;\
	bmlocal11342_acc_bits += bmlocal11340_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11341_acc_bytes );\
	out_bitoff += bmlocal11342_acc_bits;\
}

// Alignment of RaplMember_Any: accumulated=(Variable), parent.base=(0,0, ABA=4)
#define BM_RaplMember_Any_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_Any_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11343_my_ptr;\
	UINT bmlocal11344_my_bitoff;\
	BM_RaplMember_Any_GET_POS( base_ptr, bmlocal11343_my_ptr, bmlocal11344_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11343_my_ptr, bmlocal11344_my_bitoff, 32, BME_Any, out_val, 0xFFFFFFFF );\
}

#define BM_RaplMember_Any_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11345_my_ptr;\
	UINT bmlocal11346_my_bitoff;\
	BM_RaplMember_Any_GET_POS( base_ptr, bmlocal11345_my_ptr, bmlocal11346_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11345_my_ptr, bmlocal11346_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// RaplMember_Any: IS_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_Any: SET_DEFAULT accessor is not defined because no default value was specified.
// RaplMember_Any: IS_RESET accessor is not defined because no reset value was specified.
// RaplMember_Any: SET_RESET accessor is not defined because no reset value was specified.
// RaplMember_Any: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RaplMember_Any: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RaplMember_Any_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_Any bmlocal11347_out_val;\
	BM_RaplMember_Any_GET( base_ptr, bmlocal11347_out_val );\
	if( bmlocal11347_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_Reserved", 1);\
	}\
	if( bmlocal11347_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_OnlyList", 1);\
	}\
	if( bmlocal11347_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_ListFirst", 1);\
	}\
	if( bmlocal11347_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_Any", 1);\
	}\
}

#define BM_RaplMember_Any_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RaplMember_Any_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RaplMember_Any_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	BME_Any bmlocal11348_val;\
	BM_RaplMember_Any_GET( base_ptr, bmlocal11348_val );\
	(bmlocal11348_val)++;\
	BM_RaplMember_Any_SET( base_ptr, bmlocal11348_val );\
}

// RaplMember_Any: Validation accessors are not defined because validation condition was not specified.
#define BM_RaplMember_Any_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11349_tmp_bits;\
	BM_RaplMember_Any_GET_SIZE( base_ptr, out_bytes, bmlocal11349_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11349_tmp_bits );\
}

#define BM_RaplMember_Any_BYTES_SIZE 4

#define BM_RaplMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11350_tmp_bytes = 0;\
	UINT bmlocal11351_tmp_bits = 0;\
	out_bytes = 8;\
	out_bits = 0;\
	BM_RaplMember_RaplList_GET_SIZE( base_ptr, bmlocal11350_tmp_bytes, bmlocal11351_tmp_bits );\
	out_bytes += bmlocal11350_tmp_bytes;\
	out_bits += bmlocal11351_tmp_bits;\
}

#define BM_RaplMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11352_tmp_bits;\
	BM_RaplMember_GET_SIZE( base_ptr, out_bytes, bmlocal11352_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11352_tmp_bits );\
}

#define BM_RaplMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RaplMember", 1);\
	BM_RaplMember_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_RaplMember_RaplList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_RaplMember_Any_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RaplMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RaplMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 FUMOMember[628];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_pkgNameMember _pkgName;
	BMS_pkgVersionMember _pkgVersion;
	BMS_downloadPkgURLMember _downloadPkgURL;
	BMS_downloadAndUpdatePkgURLMember _downloadAndUpdatePkgURL;
	DOWNLOAD_STATE _state;
	UINT32 _fIsAllocated;
} BMS_FUMOMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _fIsAllocated;
	DOWNLOAD_STATE _state;
	BMS_downloadAndUpdatePkgURLMember _downloadAndUpdatePkgURL;
	BMS_downloadPkgURLMember _downloadPkgURL;
	BMS_pkgVersionMember _pkgVersion;
	BMS_pkgNameMember _pkgName;
} BMS_FUMOMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'FUMOMember' Type: 'FUMOMember', Top-level, Non-instance, No bitoff root
#define BM_FUMOMember_pkgName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_FUMOMember_pkgName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11353_tmp_bitoff;\
	BM_FUMOMember_pkgName_GET_POS( base_ptr, out_ptr, bmlocal11353_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11353_tmp_bitoff);\
}

#define BM_FUMOMember_pkgName_POS_ALIGNED 0

// COMPOSITE: Full name: 'FUMOMember_pkgName' Type: 'pkgNameMember', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_pkgName_pkgName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11354_parent_out_ptr;\
	BM_FUMOMember_pkgName_GET_POS( base_ptr, bmlocal11354_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11354_parent_out_ptr;\
}

#define BM_FUMOMember_pkgName_pkgName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11355_tmp_bitoff;\
	BM_FUMOMember_pkgName_pkgName_GET_POS( base_ptr, out_ptr, bmlocal11355_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11355_tmp_bitoff);\
}

#define BM_FUMOMember_pkgName_pkgName_POS_ALIGNED 0

// ARRAY: FUMOMember_pkgName_pkgName
#define BM_FUMOMember_pkgName_pkgName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgName_pkgName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgName_pkgName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11356_out_ptr;\
	UINT bmlocal11357_out_bitoff;\
	UINT bmlocal11358_element_size_bytes;\
	UINT bmlocal11359_element_size_bits;\
	BM_FUMOMember_pkgName_pkgName_GET_POS( base_ptr, bmlocal11356_out_ptr, bmlocal11357_out_bitoff );\
	bmlocal11358_element_size_bytes = 1;\
	bmlocal11359_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11356_out_ptr) + (idx0) * bmlocal11358_element_size_bytes );\
	out_bitoff = bmlocal11357_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11359_element_size_bits );\
}

// COMPOSITE: Full name: 'FUMOMember_pkgName_pkgName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11360_parent_out_ptr;\
	BM_FUMOMember_pkgName_pkgName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11360_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11360_parent_out_ptr;\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11361_tmp_bitoff;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11361_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11361_tmp_bitoff);\
}

// Alignment of FUMOMember_pkgName_pkgName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FUMOMember_pkgName_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11362_my_ptr;\
	UINT bmlocal11363_my_bitoff;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11362_my_ptr, bmlocal11363_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11362_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11362_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11362_my_ptr, bmlocal11363_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11364_my_ptr;\
	UINT bmlocal11365_my_bitoff;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11364_my_ptr, bmlocal11365_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11364_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11364_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11364_my_ptr, bmlocal11365_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FUMOMember_pkgName_pkgName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_pkgName_pkgName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_pkgName_pkgName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_pkgName_pkgName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_pkgName_pkgName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_pkgName_pkgName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11366_out_val;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET( base_ptr, idx0, bmlocal11366_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11366_out_val), "%d", 1);\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11367_my_ptr;\
	UINT bmlocal11368_my_bitoff;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11367_my_ptr, bmlocal11368_my_bitoff );\
	(*((UINT8*)bmlocal11367_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11368_my_bitoff );\
}

// FUMOMember_pkgName_pkgName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_pkgName_pkgName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11369_tmp_bits;\
	BM_FUMOMember_pkgName_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11369_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11369_tmp_bits );\
}

#define BM_FUMOMember_pkgName_pkgName_BufferByte_BYTES_SIZE 1

#define BM_FUMOMember_pkgName_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgName_pkgName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11372_tmp_bits;\
	BM_FUMOMember_pkgName_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11372_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11372_tmp_bits );\
}

#define BM_FUMOMember_pkgName_pkgName_BYTES_CELL_SIZE 1

#define BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgName_pkgName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11373_dim_size0;\
	UINT bmlocal11374_idx0;\
	bmlocal11373_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgName", 1);\
	for( bmlocal11374_idx0=0; bmlocal11374_idx0<bmlocal11373_dim_size0; bmlocal11374_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11374_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, bmlocal11374_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgName_pkgName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_pkgName_pkgName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11375_tmp_bits;\
	BM_FUMOMember_pkgName_pkgName_GET_SIZE( base_ptr, out_bytes, bmlocal11375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11375_tmp_bits );\
}

#define BM_FUMOMember_pkgName_pkgName_BYTES_SIZE 50

#define BM_FUMOMember_pkgName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11376_tmp_bytes = 0;\
	UINT bmlocal11377_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_FUMOMember_pkgName_pkgName_GET_SIZE( base_ptr, bmlocal11376_tmp_bytes, bmlocal11377_tmp_bits );\
	out_bytes += bmlocal11376_tmp_bytes;\
	out_bits += bmlocal11377_tmp_bits;\
}

#define BM_FUMOMember_pkgName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11378_tmp_bits;\
	BM_FUMOMember_pkgName_GET_SIZE( base_ptr, out_bytes, bmlocal11378_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11378_tmp_bits );\
}

#define BM_FUMOMember_pkgName_BYTES_SIZE 50

#define BM_FUMOMember_pkgName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgName", 1);\
	BM_FUMOMember_pkgName_pkgName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgName_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FUMOMember_pkgVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11381_acc_bytes;\
	UINT bmlocal11382_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11381_acc_bytes = 50;\
	bmlocal11382_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11381_acc_bytes );\
	out_bitoff += bmlocal11382_acc_bits;\
}

#define BM_FUMOMember_pkgVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11383_tmp_bitoff;\
	BM_FUMOMember_pkgVersion_GET_POS( base_ptr, out_ptr, bmlocal11383_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11383_tmp_bitoff);\
}

#define BM_FUMOMember_pkgVersion_POS_ALIGNED 50

// COMPOSITE: Full name: 'FUMOMember_pkgVersion' Type: 'pkgVersionMember', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_pkgVersion_pkgVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11384_parent_out_ptr;\
	BM_FUMOMember_pkgVersion_GET_POS( base_ptr, bmlocal11384_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11384_parent_out_ptr;\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11385_tmp_bitoff;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_POS( base_ptr, out_ptr, bmlocal11385_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11385_tmp_bitoff);\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_POS_ALIGNED 50

// ARRAY: FUMOMember_pkgVersion_pkgVersion
#define BM_FUMOMember_pkgVersion_pkgVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11386_out_ptr;\
	UINT bmlocal11387_out_bitoff;\
	UINT bmlocal11388_element_size_bytes;\
	UINT bmlocal11389_element_size_bits;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_POS( base_ptr, bmlocal11386_out_ptr, bmlocal11387_out_bitoff );\
	bmlocal11388_element_size_bytes = 1;\
	bmlocal11389_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11386_out_ptr) + (idx0) * bmlocal11388_element_size_bytes );\
	out_bitoff = bmlocal11387_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11389_element_size_bits );\
}

// COMPOSITE: Full name: 'FUMOMember_pkgVersion_pkgVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11390_parent_out_ptr;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11390_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11390_parent_out_ptr;\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11391_tmp_bitoff;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11391_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11391_tmp_bitoff);\
}

// Alignment of FUMOMember_pkgVersion_pkgVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11392_my_ptr;\
	UINT bmlocal11393_my_bitoff;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11392_my_ptr, bmlocal11393_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11392_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11392_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11392_my_ptr, bmlocal11393_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11394_my_ptr;\
	UINT bmlocal11395_my_bitoff;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11394_my_ptr, bmlocal11395_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11394_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11394_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11394_my_ptr, bmlocal11395_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FUMOMember_pkgVersion_pkgVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_pkgVersion_pkgVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_pkgVersion_pkgVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_pkgVersion_pkgVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_pkgVersion_pkgVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_pkgVersion_pkgVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11396_out_val;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET( base_ptr, idx0, bmlocal11396_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11396_out_val), "%d", 1);\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11397_my_ptr;\
	UINT bmlocal11398_my_bitoff;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11397_my_ptr, bmlocal11398_my_bitoff );\
	(*((UINT8*)bmlocal11397_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11398_my_bitoff );\
}

// FUMOMember_pkgVersion_pkgVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11399_tmp_bits;\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11399_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11399_tmp_bits );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_BYTES_SIZE 1

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11402_tmp_bits;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11402_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11402_tmp_bits );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BYTES_CELL_SIZE 1

#define BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11403_dim_size0;\
	UINT bmlocal11404_idx0;\
	bmlocal11403_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersion", 1);\
	for( bmlocal11404_idx0=0; bmlocal11404_idx0<bmlocal11403_dim_size0; bmlocal11404_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11404_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11404_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11405_tmp_bits;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11405_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11405_tmp_bits );\
}

#define BM_FUMOMember_pkgVersion_pkgVersion_BYTES_SIZE 50

#define BM_FUMOMember_pkgVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11406_tmp_bytes = 0;\
	UINT bmlocal11407_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_FUMOMember_pkgVersion_pkgVersion_GET_SIZE( base_ptr, bmlocal11406_tmp_bytes, bmlocal11407_tmp_bits );\
	out_bytes += bmlocal11406_tmp_bytes;\
	out_bits += bmlocal11407_tmp_bits;\
}

#define BM_FUMOMember_pkgVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11408_tmp_bits;\
	BM_FUMOMember_pkgVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11408_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11408_tmp_bits );\
}

#define BM_FUMOMember_pkgVersion_BYTES_SIZE 50

#define BM_FUMOMember_pkgVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersion", 1);\
	BM_FUMOMember_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_pkgVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_pkgVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FUMOMember_downloadPkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11411_acc_bytes;\
	UINT bmlocal11412_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11411_acc_bytes = 100;\
	bmlocal11412_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11411_acc_bytes );\
	out_bitoff += bmlocal11412_acc_bits;\
}

#define BM_FUMOMember_downloadPkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11413_tmp_bitoff;\
	BM_FUMOMember_downloadPkgURL_GET_POS( base_ptr, out_ptr, bmlocal11413_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11413_tmp_bitoff);\
}

#define BM_FUMOMember_downloadPkgURL_POS_ALIGNED 100

// COMPOSITE: Full name: 'FUMOMember_downloadPkgURL' Type: 'downloadPkgURLMember', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11414_parent_out_ptr;\
	BM_FUMOMember_downloadPkgURL_GET_POS( base_ptr, bmlocal11414_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11414_parent_out_ptr;\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11415_tmp_bitoff;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, out_ptr, bmlocal11415_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11415_tmp_bitoff);\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_POS_ALIGNED 100

// ARRAY: FUMOMember_downloadPkgURL_downloadPkgURL
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11416_out_ptr;\
	UINT bmlocal11417_out_bitoff;\
	UINT bmlocal11418_element_size_bytes;\
	UINT bmlocal11419_element_size_bits;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, bmlocal11416_out_ptr, bmlocal11417_out_bitoff );\
	bmlocal11418_element_size_bytes = 1;\
	bmlocal11419_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11416_out_ptr) + (idx0) * bmlocal11418_element_size_bytes );\
	out_bitoff = bmlocal11417_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11419_element_size_bits );\
}

// COMPOSITE: Full name: 'FUMOMember_downloadPkgURL_downloadPkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11420_parent_out_ptr;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11420_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11420_parent_out_ptr;\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11421_tmp_bitoff;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11421_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11421_tmp_bitoff);\
}

// Alignment of FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11422_my_ptr;\
	UINT bmlocal11423_my_bitoff;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11422_my_ptr, bmlocal11423_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11422_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11422_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11422_my_ptr, bmlocal11423_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11424_my_ptr;\
	UINT bmlocal11425_my_bitoff;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11424_my_ptr, bmlocal11425_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11424_my_ptr, bmlocal11425_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11426_out_val;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET( base_ptr, idx0, bmlocal11426_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11426_out_val), "%d", 1);\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11427_my_ptr;\
	UINT bmlocal11428_my_bitoff;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11427_my_ptr, bmlocal11428_my_bitoff );\
	(*((UINT8*)bmlocal11427_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11428_my_bitoff );\
}

// FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11429_tmp_bits;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11429_tmp_bits );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_BYTES_SIZE 1

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11432_tmp_bits;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11432_tmp_bits );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BYTES_CELL_SIZE 1

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11433_dim_size0;\
	UINT bmlocal11434_idx0;\
	bmlocal11433_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURL", 1);\
	for( bmlocal11434_idx0=0; bmlocal11434_idx0<bmlocal11433_dim_size0; bmlocal11434_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11434_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal11434_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11435_tmp_bits;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal11435_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11435_tmp_bits );\
}

#define BM_FUMOMember_downloadPkgURL_downloadPkgURL_BYTES_SIZE 260

#define BM_FUMOMember_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11436_tmp_bytes = 0;\
	UINT bmlocal11437_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, bmlocal11436_tmp_bytes, bmlocal11437_tmp_bits );\
	out_bytes += bmlocal11436_tmp_bytes;\
	out_bits += bmlocal11437_tmp_bits;\
}

#define BM_FUMOMember_downloadPkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11438_tmp_bits;\
	BM_FUMOMember_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal11438_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11438_tmp_bits );\
}

#define BM_FUMOMember_downloadPkgURL_BYTES_SIZE 260

#define BM_FUMOMember_downloadPkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURL", 1);\
	BM_FUMOMember_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadPkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadPkgURL_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FUMOMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11441_acc_bytes;\
	UINT bmlocal11442_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11441_acc_bytes = 360;\
	bmlocal11442_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11441_acc_bytes );\
	out_bitoff += bmlocal11442_acc_bits;\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11443_tmp_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, bmlocal11443_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11443_tmp_bitoff);\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_POS_ALIGNED 360

// COMPOSITE: Full name: 'FUMOMember_downloadAndUpdatePkgURL' Type: 'downloadAndUpdatePkgURLMember', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11444_parent_out_ptr;\
	BM_FUMOMember_downloadAndUpdatePkgURL_GET_POS( base_ptr, bmlocal11444_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11444_parent_out_ptr;\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11445_tmp_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, bmlocal11445_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11445_tmp_bitoff);\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_POS_ALIGNED 360

// ARRAY: FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11446_out_ptr;\
	UINT bmlocal11447_out_bitoff;\
	UINT bmlocal11448_element_size_bytes;\
	UINT bmlocal11449_element_size_bits;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, bmlocal11446_out_ptr, bmlocal11447_out_bitoff );\
	bmlocal11448_element_size_bytes = 1;\
	bmlocal11449_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11446_out_ptr) + (idx0) * bmlocal11448_element_size_bytes );\
	out_bitoff = bmlocal11447_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11449_element_size_bits );\
}

// COMPOSITE: Full name: 'FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11450_parent_out_ptr;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11450_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11450_parent_out_ptr;\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11451_tmp_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11451_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11451_tmp_bitoff);\
}

// Alignment of FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11452_my_ptr;\
	UINT bmlocal11453_my_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11452_my_ptr, bmlocal11453_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11452_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11452_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11452_my_ptr, bmlocal11453_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11454_my_ptr;\
	UINT bmlocal11455_my_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11454_my_ptr, bmlocal11455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11454_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11454_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11454_my_ptr, bmlocal11455_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11456_out_val;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, bmlocal11456_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11456_out_val), "%d", 1);\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11457_my_ptr;\
	UINT bmlocal11458_my_bitoff;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal11457_my_ptr, bmlocal11458_my_bitoff );\
	(*((UINT8*)bmlocal11457_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11458_my_bitoff );\
}

// FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11459_tmp_bits;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11459_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11459_tmp_bits );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_BYTES_SIZE 1

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11462_tmp_bits;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11462_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11462_tmp_bits );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BYTES_CELL_SIZE 1

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11463_dim_size0;\
	UINT bmlocal11464_idx0;\
	bmlocal11463_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURL", 1);\
	for( bmlocal11464_idx0=0; bmlocal11464_idx0<bmlocal11463_dim_size0; bmlocal11464_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11464_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal11464_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11465_tmp_bits;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal11465_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11465_tmp_bits );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BYTES_SIZE 260

#define BM_FUMOMember_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11466_tmp_bytes = 0;\
	UINT bmlocal11467_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, bmlocal11466_tmp_bytes, bmlocal11467_tmp_bits );\
	out_bytes += bmlocal11466_tmp_bytes;\
	out_bits += bmlocal11467_tmp_bits;\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11468_tmp_bits;\
	BM_FUMOMember_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal11468_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11468_tmp_bits );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_BYTES_SIZE 260

#define BM_FUMOMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURL", 1);\
	BM_FUMOMember_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_downloadAndUpdatePkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_FUMOMember_state_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11471_acc_bytes;\
	UINT bmlocal11472_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11471_acc_bytes = 620;\
	bmlocal11472_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11471_acc_bytes );\
	out_bitoff += bmlocal11472_acc_bits;\
}

#define BM_FUMOMember_state_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11473_tmp_bitoff;\
	BM_FUMOMember_state_GET_POS( base_ptr, out_ptr, bmlocal11473_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11473_tmp_bitoff);\
}

#define BM_FUMOMember_state_POS_ALIGNED 620

// Alignment of FUMOMember_state: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FUMOMember_state_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_state_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11474_my_ptr;\
	UINT bmlocal11475_my_bitoff;\
	BM_FUMOMember_state_GET_POS( base_ptr, bmlocal11474_my_ptr, bmlocal11475_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (DOWNLOAD_STATE)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11474_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (DOWNLOAD_STATE)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11474_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11474_my_ptr, bmlocal11475_my_bitoff, 32, DOWNLOAD_STATE, out_val, 0x00000000 );\
	}\
}

#define BM_FUMOMember_state_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11476_my_ptr;\
	UINT bmlocal11477_my_bitoff;\
	BM_FUMOMember_state_GET_POS( base_ptr, bmlocal11476_my_ptr, bmlocal11477_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11476_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11476_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11476_my_ptr, bmlocal11477_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FUMOMember_state: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_state: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_state: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_state: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_state: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_state: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_state_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	DOWNLOAD_STATE bmlocal11478_out_val;\
	BM_FUMOMember_state_GET( base_ptr, bmlocal11478_out_val );\
	if( bmlocal11478_out_val == 10 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadIdle", 1);\
	}\
	if( bmlocal11478_out_val == 20 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadFailed", 1);\
	}\
	if( bmlocal11478_out_val == 30 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadProgressing", 1);\
	}\
	if( bmlocal11478_out_val == 40 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadComplete", 1);\
	}\
	if( bmlocal11478_out_val == 50 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsReadyToUpdate", 1);\
	}\
	if( bmlocal11478_out_val == 60 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateProgressing", 1);\
	}\
	if( bmlocal11478_out_val == 70 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateFailedHaveData", 1);\
	}\
	if( bmlocal11478_out_val == 80 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateFailedNoData", 1);\
	}\
	if( bmlocal11478_out_val == 90 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateSuccessfulHaveData", 1);\
	}\
	if( bmlocal11478_out_val == 100 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateSuccessfulNoData", 1);\
	}\
}

#define BM_FUMOMember_state_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_state_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_state_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11479_my_ptr;\
	UINT bmlocal11480_my_bitoff;\
	BM_FUMOMember_state_GET_POS( base_ptr, bmlocal11479_my_ptr, bmlocal11480_my_bitoff );\
	(*((UINT32*)bmlocal11479_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11480_my_bitoff );\
}

// FUMOMember_state: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_state_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11481_tmp_bits;\
	BM_FUMOMember_state_GET_SIZE( base_ptr, out_bytes, bmlocal11481_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11481_tmp_bits );\
}

#define BM_FUMOMember_state_BYTES_SIZE 4

#define BM_FUMOMember_fIsAllocated_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11484_acc_bytes;\
	UINT bmlocal11485_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11484_acc_bytes = 624;\
	bmlocal11485_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11484_acc_bytes );\
	out_bitoff += bmlocal11485_acc_bits;\
}

#define BM_FUMOMember_fIsAllocated_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11486_tmp_bitoff;\
	BM_FUMOMember_fIsAllocated_GET_POS( base_ptr, out_ptr, bmlocal11486_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11486_tmp_bitoff);\
}

#define BM_FUMOMember_fIsAllocated_POS_ALIGNED 624

// Alignment of FUMOMember_fIsAllocated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_FUMOMember_fIsAllocated_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_fIsAllocated_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11487_my_ptr;\
	UINT bmlocal11488_my_bitoff;\
	BM_FUMOMember_fIsAllocated_GET_POS( base_ptr, bmlocal11487_my_ptr, bmlocal11488_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11487_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11487_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11487_my_ptr, bmlocal11488_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_FUMOMember_fIsAllocated_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11489_my_ptr;\
	UINT bmlocal11490_my_bitoff;\
	BM_FUMOMember_fIsAllocated_GET_POS( base_ptr, bmlocal11489_my_ptr, bmlocal11490_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11489_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11489_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11489_my_ptr, bmlocal11490_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// FUMOMember_fIsAllocated: IS_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_fIsAllocated: SET_DEFAULT accessor is not defined because no default value was specified.
// FUMOMember_fIsAllocated: IS_RESET accessor is not defined because no reset value was specified.
// FUMOMember_fIsAllocated: SET_RESET accessor is not defined because no reset value was specified.
// FUMOMember_fIsAllocated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// FUMOMember_fIsAllocated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_FUMOMember_fIsAllocated_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11491_out_val;\
	BM_FUMOMember_fIsAllocated_GET( base_ptr, bmlocal11491_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "fIsAllocated", 32, (UINT)(bmlocal11491_out_val), "%d", 1);\
}

#define BM_FUMOMember_fIsAllocated_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_fIsAllocated_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_FUMOMember_fIsAllocated_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11492_my_ptr;\
	UINT bmlocal11493_my_bitoff;\
	BM_FUMOMember_fIsAllocated_GET_POS( base_ptr, bmlocal11492_my_ptr, bmlocal11493_my_bitoff );\
	(*((UINT32*)bmlocal11492_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11493_my_bitoff );\
}

// FUMOMember_fIsAllocated: Validation accessors are not defined because validation condition was not specified.
#define BM_FUMOMember_fIsAllocated_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11494_tmp_bits;\
	BM_FUMOMember_fIsAllocated_GET_SIZE( base_ptr, out_bytes, bmlocal11494_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11494_tmp_bits );\
}

#define BM_FUMOMember_fIsAllocated_BYTES_SIZE 4

#define BM_FUMOMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 628;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11497_tmp_bits;\
	BM_FUMOMember_GET_SIZE( base_ptr, out_bytes, bmlocal11497_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11497_tmp_bits );\
}

#define BM_FUMOMember_BYTES_SIZE 628

#define BM_FUMOMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FUMOMember", 1);\
	BM_FUMOMember_pkgName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FUMOMember_pkgVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FUMOMember_downloadPkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FUMOMember_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FUMOMember_state_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_FUMOMember_fIsAllocated_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_FUMOMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_FUMOMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DeviceInfoMember[192];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_manufacturerMember _manufacturer;
	BMS_modelMember _model;
	BMS_devIDMember _devID;
} BMS_DeviceInfoMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_devIDMember _devID;
	BMS_modelMember _model;
	BMS_manufacturerMember _manufacturer;
} BMS_DeviceInfoMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DeviceInfoMember' Type: 'DeviceInfoMember', Top-level, Non-instance, No bitoff root
#define BM_DeviceInfoMember_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DeviceInfoMember_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11498_tmp_bitoff;\
	BM_DeviceInfoMember_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal11498_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11498_tmp_bitoff);\
}

#define BM_DeviceInfoMember_manufacturer_POS_ALIGNED 0

// COMPOSITE: Full name: 'DeviceInfoMember_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11499_parent_out_ptr;\
	BM_DeviceInfoMember_manufacturer_GET_POS( base_ptr, bmlocal11499_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11499_parent_out_ptr;\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11500_tmp_bitoff;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal11500_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11500_tmp_bitoff);\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_POS_ALIGNED 0

// ARRAY: DeviceInfoMember_manufacturer_manufacturer
#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11501_out_ptr;\
	UINT bmlocal11502_out_bitoff;\
	UINT bmlocal11503_element_size_bytes;\
	UINT bmlocal11504_element_size_bits;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal11501_out_ptr, bmlocal11502_out_bitoff );\
	bmlocal11503_element_size_bytes = 1;\
	bmlocal11504_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11501_out_ptr) + (idx0) * bmlocal11503_element_size_bytes );\
	out_bitoff = bmlocal11502_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11504_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceInfoMember_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11505_parent_out_ptr;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11505_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11505_parent_out_ptr;\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11506_tmp_bitoff;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11506_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11506_tmp_bitoff);\
}

// Alignment of DeviceInfoMember_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11507_my_ptr;\
	UINT bmlocal11508_my_bitoff;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11507_my_ptr, bmlocal11508_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11507_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11507_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11507_my_ptr, bmlocal11508_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11509_my_ptr;\
	UINT bmlocal11510_my_bitoff;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11509_my_ptr, bmlocal11510_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11509_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11509_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11509_my_ptr, bmlocal11510_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceInfoMember_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceInfoMember_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11511_out_val;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal11511_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11511_out_val), "%d", 1);\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11512_my_ptr;\
	UINT bmlocal11513_my_bitoff;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11512_my_ptr, bmlocal11513_my_bitoff );\
	(*((UINT8*)bmlocal11512_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11513_my_bitoff );\
}

// DeviceInfoMember_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11514_tmp_bits;\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11514_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11514_tmp_bits );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11517_tmp_bits;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11517_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11517_tmp_bits );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11518_dim_size0;\
	UINT bmlocal11519_idx0;\
	bmlocal11518_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal11519_idx0=0; bmlocal11519_idx0<bmlocal11518_dim_size0; bmlocal11519_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11519_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal11519_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11520_tmp_bits;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal11520_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11520_tmp_bits );\
}

#define BM_DeviceInfoMember_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_DeviceInfoMember_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11521_tmp_bytes = 0;\
	UINT bmlocal11522_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceInfoMember_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal11521_tmp_bytes, bmlocal11522_tmp_bits );\
	out_bytes += bmlocal11521_tmp_bytes;\
	out_bits += bmlocal11522_tmp_bits;\
}

#define BM_DeviceInfoMember_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11523_tmp_bits;\
	BM_DeviceInfoMember_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal11523_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11523_tmp_bits );\
}

#define BM_DeviceInfoMember_manufacturer_BYTES_SIZE 64

#define BM_DeviceInfoMember_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_DeviceInfoMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceInfoMember_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11526_acc_bytes;\
	UINT bmlocal11527_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11526_acc_bytes = 64;\
	bmlocal11527_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11526_acc_bytes );\
	out_bitoff += bmlocal11527_acc_bits;\
}

#define BM_DeviceInfoMember_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11528_tmp_bitoff;\
	BM_DeviceInfoMember_model_GET_POS( base_ptr, out_ptr, bmlocal11528_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11528_tmp_bitoff);\
}

#define BM_DeviceInfoMember_model_POS_ALIGNED 64

// COMPOSITE: Full name: 'DeviceInfoMember_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11529_parent_out_ptr;\
	BM_DeviceInfoMember_model_GET_POS( base_ptr, bmlocal11529_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11529_parent_out_ptr;\
}

#define BM_DeviceInfoMember_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11530_tmp_bitoff;\
	BM_DeviceInfoMember_model_model_GET_POS( base_ptr, out_ptr, bmlocal11530_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11530_tmp_bitoff);\
}

#define BM_DeviceInfoMember_model_model_POS_ALIGNED 64

// ARRAY: DeviceInfoMember_model_model
#define BM_DeviceInfoMember_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11531_out_ptr;\
	UINT bmlocal11532_out_bitoff;\
	UINT bmlocal11533_element_size_bytes;\
	UINT bmlocal11534_element_size_bits;\
	BM_DeviceInfoMember_model_model_GET_POS( base_ptr, bmlocal11531_out_ptr, bmlocal11532_out_bitoff );\
	bmlocal11533_element_size_bytes = 1;\
	bmlocal11534_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11531_out_ptr) + (idx0) * bmlocal11533_element_size_bytes );\
	out_bitoff = bmlocal11532_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11534_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceInfoMember_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11535_parent_out_ptr;\
	BM_DeviceInfoMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11535_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11535_parent_out_ptr;\
}

#define BM_DeviceInfoMember_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11536_tmp_bitoff;\
	BM_DeviceInfoMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11536_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11536_tmp_bitoff);\
}

// Alignment of DeviceInfoMember_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceInfoMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11537_my_ptr;\
	UINT bmlocal11538_my_bitoff;\
	BM_DeviceInfoMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11537_my_ptr, bmlocal11538_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11537_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11537_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11537_my_ptr, bmlocal11538_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceInfoMember_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11539_my_ptr;\
	UINT bmlocal11540_my_bitoff;\
	BM_DeviceInfoMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11539_my_ptr, bmlocal11540_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11539_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11539_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11539_my_ptr, bmlocal11540_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceInfoMember_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceInfoMember_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceInfoMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11541_out_val;\
	BM_DeviceInfoMember_model_model_BufferByte_GET( base_ptr, idx0, bmlocal11541_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11541_out_val), "%d", 1);\
}

#define BM_DeviceInfoMember_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11542_my_ptr;\
	UINT bmlocal11543_my_bitoff;\
	BM_DeviceInfoMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11542_my_ptr, bmlocal11543_my_bitoff );\
	(*((UINT8*)bmlocal11542_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11543_my_bitoff );\
}

// DeviceInfoMember_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceInfoMember_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11544_tmp_bits;\
	BM_DeviceInfoMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11544_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11544_tmp_bits );\
}

#define BM_DeviceInfoMember_model_model_BufferByte_BYTES_SIZE 1

#define BM_DeviceInfoMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11547_tmp_bits;\
	BM_DeviceInfoMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11547_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11547_tmp_bits );\
}

#define BM_DeviceInfoMember_model_model_BYTES_CELL_SIZE 1

#define BM_DeviceInfoMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11548_dim_size0;\
	UINT bmlocal11549_idx0;\
	bmlocal11548_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal11549_idx0=0; bmlocal11549_idx0<bmlocal11548_dim_size0; bmlocal11549_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11549_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceInfoMember_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal11549_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceInfoMember_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11550_tmp_bits;\
	BM_DeviceInfoMember_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal11550_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11550_tmp_bits );\
}

#define BM_DeviceInfoMember_model_model_BYTES_SIZE 64

#define BM_DeviceInfoMember_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11551_tmp_bytes = 0;\
	UINT bmlocal11552_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceInfoMember_model_model_GET_SIZE( base_ptr, bmlocal11551_tmp_bytes, bmlocal11552_tmp_bits );\
	out_bytes += bmlocal11551_tmp_bytes;\
	out_bits += bmlocal11552_tmp_bits;\
}

#define BM_DeviceInfoMember_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11553_tmp_bits;\
	BM_DeviceInfoMember_model_GET_SIZE( base_ptr, out_bytes, bmlocal11553_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11553_tmp_bits );\
}

#define BM_DeviceInfoMember_model_BYTES_SIZE 64

#define BM_DeviceInfoMember_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_DeviceInfoMember_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceInfoMember_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11556_acc_bytes;\
	UINT bmlocal11557_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11556_acc_bytes = 128;\
	bmlocal11557_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11556_acc_bytes );\
	out_bitoff += bmlocal11557_acc_bits;\
}

#define BM_DeviceInfoMember_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11558_tmp_bitoff;\
	BM_DeviceInfoMember_devID_GET_POS( base_ptr, out_ptr, bmlocal11558_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11558_tmp_bitoff);\
}

#define BM_DeviceInfoMember_devID_POS_ALIGNED 128

// COMPOSITE: Full name: 'DeviceInfoMember_devID' Type: 'devIDMember', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_devID_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11559_parent_out_ptr;\
	BM_DeviceInfoMember_devID_GET_POS( base_ptr, bmlocal11559_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11559_parent_out_ptr;\
}

#define BM_DeviceInfoMember_devID_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11560_tmp_bitoff;\
	BM_DeviceInfoMember_devID_devID_GET_POS( base_ptr, out_ptr, bmlocal11560_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11560_tmp_bitoff);\
}

#define BM_DeviceInfoMember_devID_devID_POS_ALIGNED 128

// ARRAY: DeviceInfoMember_devID_devID
#define BM_DeviceInfoMember_devID_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_devID_devID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11561_out_ptr;\
	UINT bmlocal11562_out_bitoff;\
	UINT bmlocal11563_element_size_bytes;\
	UINT bmlocal11564_element_size_bits;\
	BM_DeviceInfoMember_devID_devID_GET_POS( base_ptr, bmlocal11561_out_ptr, bmlocal11562_out_bitoff );\
	bmlocal11563_element_size_bytes = 1;\
	bmlocal11564_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11561_out_ptr) + (idx0) * bmlocal11563_element_size_bytes );\
	out_bitoff = bmlocal11562_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11564_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceInfoMember_devID_devID' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11565_parent_out_ptr;\
	BM_DeviceInfoMember_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11565_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11565_parent_out_ptr;\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11566_tmp_bitoff;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11566_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11566_tmp_bitoff);\
}

// Alignment of DeviceInfoMember_devID_devID_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceInfoMember_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11567_my_ptr;\
	UINT bmlocal11568_my_bitoff;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal11567_my_ptr, bmlocal11568_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11567_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11567_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11567_my_ptr, bmlocal11568_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11569_my_ptr;\
	UINT bmlocal11570_my_bitoff;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal11569_my_ptr, bmlocal11570_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11569_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11569_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11569_my_ptr, bmlocal11570_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceInfoMember_devID_devID_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_devID_devID_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceInfoMember_devID_devID_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_devID_devID_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceInfoMember_devID_devID_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceInfoMember_devID_devID_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceInfoMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11571_out_val;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET( base_ptr, idx0, bmlocal11571_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11571_out_val), "%d", 1);\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11572_my_ptr;\
	UINT bmlocal11573_my_bitoff;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal11572_my_ptr, bmlocal11573_my_bitoff );\
	(*((UINT8*)bmlocal11572_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11573_my_bitoff );\
}

// DeviceInfoMember_devID_devID_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceInfoMember_devID_devID_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11574_tmp_bits;\
	BM_DeviceInfoMember_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11574_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11574_tmp_bits );\
}

#define BM_DeviceInfoMember_devID_devID_BufferByte_BYTES_SIZE 1

#define BM_DeviceInfoMember_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_devID_devID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11577_tmp_bits;\
	BM_DeviceInfoMember_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11577_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11577_tmp_bits );\
}

#define BM_DeviceInfoMember_devID_devID_BYTES_CELL_SIZE 1

#define BM_DeviceInfoMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceInfoMember_devID_devID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceInfoMember_devID_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11578_dim_size0;\
	UINT bmlocal11579_idx0;\
	bmlocal11578_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	for( bmlocal11579_idx0=0; bmlocal11579_idx0<bmlocal11578_dim_size0; bmlocal11579_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11579_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceInfoMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, bmlocal11579_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_devID_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_devID_devID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceInfoMember_devID_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11580_tmp_bits;\
	BM_DeviceInfoMember_devID_devID_GET_SIZE( base_ptr, out_bytes, bmlocal11580_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11580_tmp_bits );\
}

#define BM_DeviceInfoMember_devID_devID_BYTES_SIZE 64

#define BM_DeviceInfoMember_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11581_tmp_bytes = 0;\
	UINT bmlocal11582_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceInfoMember_devID_devID_GET_SIZE( base_ptr, bmlocal11581_tmp_bytes, bmlocal11582_tmp_bits );\
	out_bytes += bmlocal11581_tmp_bytes;\
	out_bits += bmlocal11582_tmp_bits;\
}

#define BM_DeviceInfoMember_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11583_tmp_bits;\
	BM_DeviceInfoMember_devID_GET_SIZE( base_ptr, out_bytes, bmlocal11583_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11583_tmp_bits );\
}

#define BM_DeviceInfoMember_devID_BYTES_SIZE 64

#define BM_DeviceInfoMember_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	BM_DeviceInfoMember_devID_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_devID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceInfoMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 192;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11586_tmp_bits;\
	BM_DeviceInfoMember_GET_SIZE( base_ptr, out_bytes, bmlocal11586_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11586_tmp_bits );\
}

#define BM_DeviceInfoMember_BYTES_SIZE 192

#define BM_DeviceInfoMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DeviceInfoMember", 1);\
	BM_DeviceInfoMember_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DeviceInfoMember_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DeviceInfoMember_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceInfoMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceInfoMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DeviceDetailsMember[256];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_devTypeMember _devType;
	BMS_fwVersionMember _fwVersion;
	BMS_swVersionMember _swVersion;
	BMS_hwVersionMember _hwVersion;
} BMS_DeviceDetailsMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_hwVersionMember _hwVersion;
	BMS_swVersionMember _swVersion;
	BMS_fwVersionMember _fwVersion;
	BMS_devTypeMember _devType;
} BMS_DeviceDetailsMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DeviceDetailsMember' Type: 'DeviceDetailsMember', Top-level, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DeviceDetailsMember_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11587_tmp_bitoff;\
	BM_DeviceDetailsMember_devType_GET_POS( base_ptr, out_ptr, bmlocal11587_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11587_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_devType_POS_ALIGNED 0

// COMPOSITE: Full name: 'DeviceDetailsMember_devType' Type: 'devTypeMember', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_devType_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11588_parent_out_ptr;\
	BM_DeviceDetailsMember_devType_GET_POS( base_ptr, bmlocal11588_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11588_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_devType_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11589_tmp_bitoff;\
	BM_DeviceDetailsMember_devType_devType_GET_POS( base_ptr, out_ptr, bmlocal11589_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11589_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_devType_devType_POS_ALIGNED 0

// ARRAY: DeviceDetailsMember_devType_devType
#define BM_DeviceDetailsMember_devType_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_devType_devType_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11590_out_ptr;\
	UINT bmlocal11591_out_bitoff;\
	UINT bmlocal11592_element_size_bytes;\
	UINT bmlocal11593_element_size_bits;\
	BM_DeviceDetailsMember_devType_devType_GET_POS( base_ptr, bmlocal11590_out_ptr, bmlocal11591_out_bitoff );\
	bmlocal11592_element_size_bytes = 1;\
	bmlocal11593_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11590_out_ptr) + (idx0) * bmlocal11592_element_size_bytes );\
	out_bitoff = bmlocal11591_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11593_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceDetailsMember_devType_devType' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11594_parent_out_ptr;\
	BM_DeviceDetailsMember_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11594_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11594_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11595_tmp_bitoff;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11595_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11595_tmp_bitoff);\
}

// Alignment of DeviceDetailsMember_devType_devType_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceDetailsMember_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11596_my_ptr;\
	UINT bmlocal11597_my_bitoff;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal11596_my_ptr, bmlocal11597_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11596_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11596_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11596_my_ptr, bmlocal11597_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11598_my_ptr;\
	UINT bmlocal11599_my_bitoff;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal11598_my_ptr, bmlocal11599_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11598_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11598_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11598_my_ptr, bmlocal11599_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceDetailsMember_devType_devType_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_devType_devType_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_devType_devType_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_devType_devType_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_devType_devType_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceDetailsMember_devType_devType_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceDetailsMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11600_out_val;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET( base_ptr, idx0, bmlocal11600_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11600_out_val), "%d", 1);\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11601_my_ptr;\
	UINT bmlocal11602_my_bitoff;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal11601_my_ptr, bmlocal11602_my_bitoff );\
	(*((UINT8*)bmlocal11601_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11602_my_bitoff );\
}

// DeviceDetailsMember_devType_devType_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceDetailsMember_devType_devType_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11603_tmp_bits;\
	BM_DeviceDetailsMember_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11603_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11603_tmp_bits );\
}

#define BM_DeviceDetailsMember_devType_devType_BufferByte_BYTES_SIZE 1

#define BM_DeviceDetailsMember_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_devType_devType_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11606_tmp_bits;\
	BM_DeviceDetailsMember_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11606_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11606_tmp_bits );\
}

#define BM_DeviceDetailsMember_devType_devType_BYTES_CELL_SIZE 1

#define BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_devType_devType_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11607_dim_size0;\
	UINT bmlocal11608_idx0;\
	bmlocal11607_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	for( bmlocal11608_idx0=0; bmlocal11608_idx0<bmlocal11607_dim_size0; bmlocal11608_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11608_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, bmlocal11608_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_devType_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceDetailsMember_devType_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11609_tmp_bits;\
	BM_DeviceDetailsMember_devType_devType_GET_SIZE( base_ptr, out_bytes, bmlocal11609_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11609_tmp_bits );\
}

#define BM_DeviceDetailsMember_devType_devType_BYTES_SIZE 64

#define BM_DeviceDetailsMember_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11610_tmp_bytes = 0;\
	UINT bmlocal11611_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceDetailsMember_devType_devType_GET_SIZE( base_ptr, bmlocal11610_tmp_bytes, bmlocal11611_tmp_bits );\
	out_bytes += bmlocal11610_tmp_bytes;\
	out_bits += bmlocal11611_tmp_bits;\
}

#define BM_DeviceDetailsMember_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11612_tmp_bits;\
	BM_DeviceDetailsMember_devType_GET_SIZE( base_ptr, out_bytes, bmlocal11612_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11612_tmp_bits );\
}

#define BM_DeviceDetailsMember_devType_BYTES_SIZE 64

#define BM_DeviceDetailsMember_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	BM_DeviceDetailsMember_devType_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_devType_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceDetailsMember_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11615_acc_bytes;\
	UINT bmlocal11616_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11615_acc_bytes = 64;\
	bmlocal11616_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11615_acc_bytes );\
	out_bitoff += bmlocal11616_acc_bits;\
}

#define BM_DeviceDetailsMember_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11617_tmp_bitoff;\
	BM_DeviceDetailsMember_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal11617_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11617_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_fwVersion_POS_ALIGNED 64

// COMPOSITE: Full name: 'DeviceDetailsMember_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11618_parent_out_ptr;\
	BM_DeviceDetailsMember_fwVersion_GET_POS( base_ptr, bmlocal11618_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11618_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11619_tmp_bitoff;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal11619_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11619_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_POS_ALIGNED 64

// ARRAY: DeviceDetailsMember_fwVersion_fwVersion
#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11620_out_ptr;\
	UINT bmlocal11621_out_bitoff;\
	UINT bmlocal11622_element_size_bytes;\
	UINT bmlocal11623_element_size_bits;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal11620_out_ptr, bmlocal11621_out_bitoff );\
	bmlocal11622_element_size_bytes = 1;\
	bmlocal11623_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11620_out_ptr) + (idx0) * bmlocal11622_element_size_bytes );\
	out_bitoff = bmlocal11621_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11623_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceDetailsMember_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11624_parent_out_ptr;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11624_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11624_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11625_tmp_bitoff;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11625_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11625_tmp_bitoff);\
}

// Alignment of DeviceDetailsMember_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11626_my_ptr;\
	UINT bmlocal11627_my_bitoff;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11626_my_ptr, bmlocal11627_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11626_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11626_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11626_my_ptr, bmlocal11627_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11628_my_ptr;\
	UINT bmlocal11629_my_bitoff;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11628_my_ptr, bmlocal11629_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11628_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11628_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11628_my_ptr, bmlocal11629_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11630_out_val;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal11630_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11630_out_val), "%d", 1);\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11631_my_ptr;\
	UINT bmlocal11632_my_bitoff;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11631_my_ptr, bmlocal11632_my_bitoff );\
	(*((UINT8*)bmlocal11631_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11632_my_bitoff );\
}

// DeviceDetailsMember_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11633_tmp_bits;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11633_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11633_tmp_bits );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11636_tmp_bits;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11636_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11636_tmp_bits );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11637_dim_size0;\
	UINT bmlocal11638_idx0;\
	bmlocal11637_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal11638_idx0=0; bmlocal11638_idx0<bmlocal11637_dim_size0; bmlocal11638_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11638_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11638_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11639_tmp_bits;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11639_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11639_tmp_bits );\
}

#define BM_DeviceDetailsMember_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11640_tmp_bytes = 0;\
	UINT bmlocal11641_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceDetailsMember_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal11640_tmp_bytes, bmlocal11641_tmp_bits );\
	out_bytes += bmlocal11640_tmp_bytes;\
	out_bits += bmlocal11641_tmp_bits;\
}

#define BM_DeviceDetailsMember_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11642_tmp_bits;\
	BM_DeviceDetailsMember_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11642_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11642_tmp_bits );\
}

#define BM_DeviceDetailsMember_fwVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_DeviceDetailsMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceDetailsMember_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11645_acc_bytes;\
	UINT bmlocal11646_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11645_acc_bytes = 128;\
	bmlocal11646_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11645_acc_bytes );\
	out_bitoff += bmlocal11646_acc_bits;\
}

#define BM_DeviceDetailsMember_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11647_tmp_bitoff;\
	BM_DeviceDetailsMember_swVersion_GET_POS( base_ptr, out_ptr, bmlocal11647_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11647_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_swVersion_POS_ALIGNED 128

// COMPOSITE: Full name: 'DeviceDetailsMember_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11648_parent_out_ptr;\
	BM_DeviceDetailsMember_swVersion_GET_POS( base_ptr, bmlocal11648_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11648_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11649_tmp_bitoff;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal11649_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11649_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_POS_ALIGNED 128

// ARRAY: DeviceDetailsMember_swVersion_swVersion
#define BM_DeviceDetailsMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11650_out_ptr;\
	UINT bmlocal11651_out_bitoff;\
	UINT bmlocal11652_element_size_bytes;\
	UINT bmlocal11653_element_size_bits;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_POS( base_ptr, bmlocal11650_out_ptr, bmlocal11651_out_bitoff );\
	bmlocal11652_element_size_bytes = 1;\
	bmlocal11653_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11650_out_ptr) + (idx0) * bmlocal11652_element_size_bytes );\
	out_bitoff = bmlocal11651_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11653_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceDetailsMember_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11654_parent_out_ptr;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11654_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11654_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11655_tmp_bitoff;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11655_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11655_tmp_bitoff);\
}

// Alignment of DeviceDetailsMember_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11656_my_ptr;\
	UINT bmlocal11657_my_bitoff;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11656_my_ptr, bmlocal11657_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11656_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11656_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11656_my_ptr, bmlocal11657_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11658_my_ptr;\
	UINT bmlocal11659_my_bitoff;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11658_my_ptr, bmlocal11659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11658_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11658_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11658_my_ptr, bmlocal11659_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceDetailsMember_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceDetailsMember_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11660_out_val;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal11660_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11660_out_val), "%d", 1);\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11661_my_ptr;\
	UINT bmlocal11662_my_bitoff;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11661_my_ptr, bmlocal11662_my_bitoff );\
	(*((UINT8*)bmlocal11661_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11662_my_bitoff );\
}

// DeviceDetailsMember_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11663_tmp_bits;\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11663_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11663_tmp_bits );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11666_tmp_bits;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11666_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11666_tmp_bits );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11667_dim_size0;\
	UINT bmlocal11668_idx0;\
	bmlocal11667_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal11668_idx0=0; bmlocal11668_idx0<bmlocal11667_dim_size0; bmlocal11668_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11668_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11668_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11669_tmp_bits;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11669_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11669_tmp_bits );\
}

#define BM_DeviceDetailsMember_swVersion_swVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11670_tmp_bytes = 0;\
	UINT bmlocal11671_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceDetailsMember_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal11670_tmp_bytes, bmlocal11671_tmp_bits );\
	out_bytes += bmlocal11670_tmp_bytes;\
	out_bits += bmlocal11671_tmp_bits;\
}

#define BM_DeviceDetailsMember_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11672_tmp_bits;\
	BM_DeviceDetailsMember_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11672_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11672_tmp_bits );\
}

#define BM_DeviceDetailsMember_swVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_DeviceDetailsMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceDetailsMember_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11675_acc_bytes;\
	UINT bmlocal11676_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11675_acc_bytes = 192;\
	bmlocal11676_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11675_acc_bytes );\
	out_bitoff += bmlocal11676_acc_bits;\
}

#define BM_DeviceDetailsMember_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11677_tmp_bitoff;\
	BM_DeviceDetailsMember_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal11677_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11677_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_hwVersion_POS_ALIGNED 192

// COMPOSITE: Full name: 'DeviceDetailsMember_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11678_parent_out_ptr;\
	BM_DeviceDetailsMember_hwVersion_GET_POS( base_ptr, bmlocal11678_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11678_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11679_tmp_bitoff;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal11679_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11679_tmp_bitoff);\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_POS_ALIGNED 192

// ARRAY: DeviceDetailsMember_hwVersion_hwVersion
#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11680_out_ptr;\
	UINT bmlocal11681_out_bitoff;\
	UINT bmlocal11682_element_size_bytes;\
	UINT bmlocal11683_element_size_bits;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal11680_out_ptr, bmlocal11681_out_bitoff );\
	bmlocal11682_element_size_bytes = 1;\
	bmlocal11683_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11680_out_ptr) + (idx0) * bmlocal11682_element_size_bytes );\
	out_bitoff = bmlocal11681_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11683_element_size_bits );\
}

// COMPOSITE: Full name: 'DeviceDetailsMember_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11684_parent_out_ptr;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11684_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11684_parent_out_ptr;\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11685_tmp_bitoff;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11685_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11685_tmp_bitoff);\
}

// Alignment of DeviceDetailsMember_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11686_my_ptr;\
	UINT bmlocal11687_my_bitoff;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11686_my_ptr, bmlocal11687_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11686_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11686_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11686_my_ptr, bmlocal11687_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11688_my_ptr;\
	UINT bmlocal11689_my_bitoff;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11688_my_ptr, bmlocal11689_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11688_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11688_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11688_my_ptr, bmlocal11689_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11690_out_val;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal11690_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11690_out_val), "%d", 1);\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11691_my_ptr;\
	UINT bmlocal11692_my_bitoff;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11691_my_ptr, bmlocal11692_my_bitoff );\
	(*((UINT8*)bmlocal11691_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11692_my_bitoff );\
}

// DeviceDetailsMember_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11693_tmp_bits;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11693_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11693_tmp_bits );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11696_tmp_bits;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11696_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11696_tmp_bits );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11697_dim_size0;\
	UINT bmlocal11698_idx0;\
	bmlocal11697_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal11698_idx0=0; bmlocal11698_idx0<bmlocal11697_dim_size0; bmlocal11698_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11698_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11698_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11699_tmp_bits;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11699_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11699_tmp_bits );\
}

#define BM_DeviceDetailsMember_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11700_tmp_bytes = 0;\
	UINT bmlocal11701_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DeviceDetailsMember_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal11700_tmp_bytes, bmlocal11701_tmp_bits );\
	out_bytes += bmlocal11700_tmp_bytes;\
	out_bits += bmlocal11701_tmp_bits;\
}

#define BM_DeviceDetailsMember_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11702_tmp_bits;\
	BM_DeviceDetailsMember_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11702_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11702_tmp_bits );\
}

#define BM_DeviceDetailsMember_hwVersion_BYTES_SIZE 64

#define BM_DeviceDetailsMember_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_DeviceDetailsMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_DeviceDetailsMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 256;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11705_tmp_bits;\
	BM_DeviceDetailsMember_GET_SIZE( base_ptr, out_bytes, bmlocal11705_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11705_tmp_bits );\
}

#define BM_DeviceDetailsMember_BYTES_SIZE 256

#define BM_DeviceDetailsMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DeviceDetailsMember", 1);\
	BM_DeviceDetailsMember_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DeviceDetailsMember_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DeviceDetailsMember_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DeviceDetailsMember_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DeviceDetailsMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DeviceDetailsMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SpLockMember[280];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _lockStatus;
	BMS_operatorNameMember _operatorName;
	BMS_lockMember _lockMem;
} BMS_SpLockMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_lockMember _lockMem;
	BMS_operatorNameMember _operatorName;
	UINT32 _lockStatus;
} BMS_SpLockMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'SpLockMember' Type: 'SpLockMember', Top-level, Non-instance, No bitoff root
#define BM_SpLockMember_lockStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SpLockMember_lockStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11706_tmp_bitoff;\
	BM_SpLockMember_lockStatus_GET_POS( base_ptr, out_ptr, bmlocal11706_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11706_tmp_bitoff);\
}

#define BM_SpLockMember_lockStatus_POS_ALIGNED 0

// Alignment of SpLockMember_lockStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SpLockMember_lockStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_lockStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11707_my_ptr;\
	UINT bmlocal11708_my_bitoff;\
	BM_SpLockMember_lockStatus_GET_POS( base_ptr, bmlocal11707_my_ptr, bmlocal11708_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11707_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11707_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11707_my_ptr, bmlocal11708_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SpLockMember_lockStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11709_my_ptr;\
	UINT bmlocal11710_my_bitoff;\
	BM_SpLockMember_lockStatus_GET_POS( base_ptr, bmlocal11709_my_ptr, bmlocal11710_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11709_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11709_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11709_my_ptr, bmlocal11710_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SpLockMember_lockStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_lockStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_lockStatus: IS_RESET accessor is not defined because no reset value was specified.
// SpLockMember_lockStatus: SET_RESET accessor is not defined because no reset value was specified.
// SpLockMember_lockStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SpLockMember_lockStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SpLockMember_lockStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11711_out_val;\
	BM_SpLockMember_lockStatus_GET( base_ptr, bmlocal11711_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lockStatus", 32, (UINT)(bmlocal11711_out_val), "%d", 1);\
}

#define BM_SpLockMember_lockStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockStatus_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SpLockMember_lockStatus_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11712_my_ptr;\
	UINT bmlocal11713_my_bitoff;\
	BM_SpLockMember_lockStatus_GET_POS( base_ptr, bmlocal11712_my_ptr, bmlocal11713_my_bitoff );\
	(*((UINT32*)bmlocal11712_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11713_my_bitoff );\
}

// SpLockMember_lockStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_SpLockMember_lockStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11714_tmp_bits;\
	BM_SpLockMember_lockStatus_GET_SIZE( base_ptr, out_bytes, bmlocal11714_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11714_tmp_bits );\
}

#define BM_SpLockMember_lockStatus_BYTES_SIZE 4

#define BM_SpLockMember_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11717_acc_bytes;\
	UINT bmlocal11718_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11717_acc_bytes = 4;\
	bmlocal11718_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11717_acc_bytes );\
	out_bitoff += bmlocal11718_acc_bits;\
}

#define BM_SpLockMember_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11719_tmp_bitoff;\
	BM_SpLockMember_operatorName_GET_POS( base_ptr, out_ptr, bmlocal11719_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11719_tmp_bitoff);\
}

#define BM_SpLockMember_operatorName_POS_ALIGNED 4

// COMPOSITE: Full name: 'SpLockMember_operatorName' Type: 'operatorNameMember', Inner, Non-instance, No bitoff root
#define BM_SpLockMember_operatorName_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11720_parent_out_ptr;\
	BM_SpLockMember_operatorName_GET_POS( base_ptr, bmlocal11720_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11720_parent_out_ptr;\
}

#define BM_SpLockMember_operatorName_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11721_tmp_bitoff;\
	BM_SpLockMember_operatorName_operatorName_GET_POS( base_ptr, out_ptr, bmlocal11721_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11721_tmp_bitoff);\
}

#define BM_SpLockMember_operatorName_operatorName_POS_ALIGNED 4

// ARRAY: SpLockMember_operatorName_operatorName
#define BM_SpLockMember_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_operatorName_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11722_out_ptr;\
	UINT bmlocal11723_out_bitoff;\
	UINT bmlocal11724_element_size_bytes;\
	UINT bmlocal11725_element_size_bits;\
	BM_SpLockMember_operatorName_operatorName_GET_POS( base_ptr, bmlocal11722_out_ptr, bmlocal11723_out_bitoff );\
	bmlocal11724_element_size_bytes = 1;\
	bmlocal11725_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11722_out_ptr) + (idx0) * bmlocal11724_element_size_bytes );\
	out_bitoff = bmlocal11723_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11725_element_size_bits );\
}

// COMPOSITE: Full name: 'SpLockMember_operatorName_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11726_parent_out_ptr;\
	BM_SpLockMember_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11726_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11726_parent_out_ptr;\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11727_tmp_bitoff;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11727_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11727_tmp_bitoff);\
}

// Alignment of SpLockMember_operatorName_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_SpLockMember_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11728_my_ptr;\
	UINT bmlocal11729_my_bitoff;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11728_my_ptr, bmlocal11729_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11728_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11728_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11728_my_ptr, bmlocal11729_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11730_my_ptr;\
	UINT bmlocal11731_my_bitoff;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11730_my_ptr, bmlocal11731_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11730_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11730_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11730_my_ptr, bmlocal11731_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// SpLockMember_operatorName_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_operatorName_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_operatorName_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// SpLockMember_operatorName_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// SpLockMember_operatorName_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SpLockMember_operatorName_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SpLockMember_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11732_out_val;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, bmlocal11732_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11732_out_val), "%d", 1);\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11733_my_ptr;\
	UINT bmlocal11734_my_bitoff;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11733_my_ptr, bmlocal11734_my_bitoff );\
	(*((UINT8*)bmlocal11733_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11734_my_bitoff );\
}

// SpLockMember_operatorName_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_SpLockMember_operatorName_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11735_tmp_bits;\
	BM_SpLockMember_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11735_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11735_tmp_bits );\
}

#define BM_SpLockMember_operatorName_operatorName_BufferByte_BYTES_SIZE 1

#define BM_SpLockMember_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_operatorName_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11738_tmp_bits;\
	BM_SpLockMember_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11738_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11738_tmp_bits );\
}

#define BM_SpLockMember_operatorName_operatorName_BYTES_CELL_SIZE 1

#define BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_operatorName_operatorName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11739_dim_size0;\
	UINT bmlocal11740_idx0;\
	bmlocal11739_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal11740_idx0=0; bmlocal11740_idx0<bmlocal11739_dim_size0; bmlocal11740_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11740_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, bmlocal11740_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_operatorName_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SpLockMember_operatorName_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11741_tmp_bits;\
	BM_SpLockMember_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal11741_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11741_tmp_bits );\
}

#define BM_SpLockMember_operatorName_operatorName_BYTES_SIZE 100

#define BM_SpLockMember_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11742_tmp_bytes = 0;\
	UINT bmlocal11743_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_SpLockMember_operatorName_operatorName_GET_SIZE( base_ptr, bmlocal11742_tmp_bytes, bmlocal11743_tmp_bits );\
	out_bytes += bmlocal11742_tmp_bytes;\
	out_bits += bmlocal11743_tmp_bits;\
}

#define BM_SpLockMember_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11744_tmp_bits;\
	BM_SpLockMember_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal11744_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11744_tmp_bits );\
}

#define BM_SpLockMember_operatorName_BYTES_SIZE 100

#define BM_SpLockMember_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	BM_SpLockMember_operatorName_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_SpLockMember_lockMem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11747_acc_bytes;\
	UINT bmlocal11748_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11747_acc_bytes = 104;\
	bmlocal11748_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11747_acc_bytes );\
	out_bitoff += bmlocal11748_acc_bits;\
}

#define BM_SpLockMember_lockMem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11749_tmp_bitoff;\
	BM_SpLockMember_lockMem_GET_POS( base_ptr, out_ptr, bmlocal11749_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11749_tmp_bitoff);\
}

#define BM_SpLockMember_lockMem_POS_ALIGNED 104

// COMPOSITE: Full name: 'SpLockMember_lockMem' Type: 'lockMember', Inner, Non-instance, No bitoff root
#define BM_SpLockMember_lockMem_lockMem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11750_parent_out_ptr;\
	BM_SpLockMember_lockMem_GET_POS( base_ptr, bmlocal11750_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11750_parent_out_ptr;\
}

#define BM_SpLockMember_lockMem_lockMem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11751_tmp_bitoff;\
	BM_SpLockMember_lockMem_lockMem_GET_POS( base_ptr, out_ptr, bmlocal11751_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11751_tmp_bitoff);\
}

#define BM_SpLockMember_lockMem_lockMem_POS_ALIGNED 104

// ARRAY: SpLockMember_lockMem_lockMem
#define BM_SpLockMember_lockMem_lockMem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 176;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_lockMem_lockMem_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 176;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11752_out_ptr;\
	UINT bmlocal11753_out_bitoff;\
	UINT bmlocal11754_element_size_bytes;\
	UINT bmlocal11755_element_size_bits;\
	BM_SpLockMember_lockMem_lockMem_GET_POS( base_ptr, bmlocal11752_out_ptr, bmlocal11753_out_bitoff );\
	bmlocal11754_element_size_bytes = 1;\
	bmlocal11755_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11752_out_ptr) + (idx0) * bmlocal11754_element_size_bytes );\
	out_bitoff = bmlocal11753_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11755_element_size_bits );\
}

// COMPOSITE: Full name: 'SpLockMember_lockMem_lockMem' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11756_parent_out_ptr;\
	BM_SpLockMember_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11756_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11756_parent_out_ptr;\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11757_tmp_bitoff;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11757_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11757_tmp_bitoff);\
}

// Alignment of SpLockMember_lockMem_lockMem_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_SpLockMember_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11758_my_ptr;\
	UINT bmlocal11759_my_bitoff;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal11758_my_ptr, bmlocal11759_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11758_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11758_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11758_my_ptr, bmlocal11759_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11760_my_ptr;\
	UINT bmlocal11761_my_bitoff;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal11760_my_ptr, bmlocal11761_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11760_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11760_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11760_my_ptr, bmlocal11761_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// SpLockMember_lockMem_lockMem_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_lockMem_lockMem_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// SpLockMember_lockMem_lockMem_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// SpLockMember_lockMem_lockMem_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// SpLockMember_lockMem_lockMem_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SpLockMember_lockMem_lockMem_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SpLockMember_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11762_out_val;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, bmlocal11762_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11762_out_val), "%d", 1);\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11763_my_ptr;\
	UINT bmlocal11764_my_bitoff;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal11763_my_ptr, bmlocal11764_my_bitoff );\
	(*((UINT8*)bmlocal11763_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11764_my_bitoff );\
}

// SpLockMember_lockMem_lockMem_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_SpLockMember_lockMem_lockMem_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11765_tmp_bits;\
	BM_SpLockMember_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11765_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11765_tmp_bits );\
}

#define BM_SpLockMember_lockMem_lockMem_BufferByte_BYTES_SIZE 1

#define BM_SpLockMember_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_lockMem_lockMem_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11768_tmp_bits;\
	BM_SpLockMember_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11768_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11768_tmp_bits );\
}

#define BM_SpLockMember_lockMem_lockMem_BYTES_CELL_SIZE 1

#define BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SpLockMember_lockMem_lockMem_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11769_dim_size0;\
	UINT bmlocal11770_idx0;\
	bmlocal11769_dim_size0 = 176;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	for( bmlocal11770_idx0=0; bmlocal11770_idx0<bmlocal11769_dim_size0; bmlocal11770_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11770_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, bmlocal11770_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_lockMem_lockMem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SpLockMember_lockMem_lockMem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11771_tmp_bits;\
	BM_SpLockMember_lockMem_lockMem_GET_SIZE( base_ptr, out_bytes, bmlocal11771_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11771_tmp_bits );\
}

#define BM_SpLockMember_lockMem_lockMem_BYTES_SIZE 176

#define BM_SpLockMember_lockMem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11772_tmp_bytes = 0;\
	UINT bmlocal11773_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_SpLockMember_lockMem_lockMem_GET_SIZE( base_ptr, bmlocal11772_tmp_bytes, bmlocal11773_tmp_bits );\
	out_bytes += bmlocal11772_tmp_bytes;\
	out_bits += bmlocal11773_tmp_bits;\
}

#define BM_SpLockMember_lockMem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11774_tmp_bits;\
	BM_SpLockMember_lockMem_GET_SIZE( base_ptr, out_bytes, bmlocal11774_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11774_tmp_bits );\
}

#define BM_SpLockMember_lockMem_BYTES_SIZE 176

#define BM_SpLockMember_lockMem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	BM_SpLockMember_lockMem_lockMem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_lockMem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_lockMem_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_SpLockMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 280;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11777_tmp_bits;\
	BM_SpLockMember_GET_SIZE( base_ptr, out_bytes, bmlocal11777_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11777_tmp_bits );\
}

#define BM_SpLockMember_BYTES_SIZE 280

#define BM_SpLockMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SpLockMember", 1);\
	BM_SpLockMember_lockStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SpLockMember_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SpLockMember_lockMem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SpLockMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SpLockMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 WmxRadioModuleMember[664];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_fwVersionMember _fwVersion;
	BMS_swVersionMember _swVersion;
	BMS_hwVersionMember _hwVersion;
	BMS_manufacturerMember _manufacturer;
	BMS_modelMember _model;
	BMS_macAddressMember _macAddress;
	BMS_SpLockMember _SpLock;
} BMS_WmxRadioModuleMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_SpLockMember _SpLock;
	BMS_macAddressMember _macAddress;
	BMS_modelMember _model;
	BMS_manufacturerMember _manufacturer;
	BMS_hwVersionMember _hwVersion;
	BMS_swVersionMember _swVersion;
	BMS_fwVersionMember _fwVersion;
} BMS_WmxRadioModuleMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'WmxRadioModuleMember' Type: 'WmxRadioModuleMember', Top-level, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_WmxRadioModuleMember_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11778_tmp_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal11778_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11778_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_fwVersion_POS_ALIGNED 0

// COMPOSITE: Full name: 'WmxRadioModuleMember_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11779_parent_out_ptr;\
	BM_WmxRadioModuleMember_fwVersion_GET_POS( base_ptr, bmlocal11779_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11779_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11780_tmp_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal11780_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11780_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_POS_ALIGNED 0

// ARRAY: WmxRadioModuleMember_fwVersion_fwVersion
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11781_out_ptr;\
	UINT bmlocal11782_out_bitoff;\
	UINT bmlocal11783_element_size_bytes;\
	UINT bmlocal11784_element_size_bits;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal11781_out_ptr, bmlocal11782_out_bitoff );\
	bmlocal11783_element_size_bytes = 1;\
	bmlocal11784_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11781_out_ptr) + (idx0) * bmlocal11783_element_size_bytes );\
	out_bitoff = bmlocal11782_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11784_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11785_parent_out_ptr;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11785_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11785_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11786_tmp_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11786_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11786_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11787_my_ptr;\
	UINT bmlocal11788_my_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11787_my_ptr, bmlocal11788_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11787_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11787_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11787_my_ptr, bmlocal11788_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11789_my_ptr;\
	UINT bmlocal11790_my_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11789_my_ptr, bmlocal11790_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11789_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11789_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11789_my_ptr, bmlocal11790_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11791_out_val;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal11791_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11791_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11792_my_ptr;\
	UINT bmlocal11793_my_bitoff;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11792_my_ptr, bmlocal11793_my_bitoff );\
	(*((UINT8*)bmlocal11792_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11793_my_bitoff );\
}

// WmxRadioModuleMember_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11794_tmp_bits;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11794_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11794_tmp_bits );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11797_tmp_bits;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11797_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11797_tmp_bits );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11798_dim_size0;\
	UINT bmlocal11799_idx0;\
	bmlocal11798_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal11799_idx0=0; bmlocal11799_idx0<bmlocal11798_dim_size0; bmlocal11799_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11799_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11799_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11800_tmp_bits;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11800_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11800_tmp_bits );\
}

#define BM_WmxRadioModuleMember_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11801_tmp_bytes = 0;\
	UINT bmlocal11802_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal11801_tmp_bytes, bmlocal11802_tmp_bits );\
	out_bytes += bmlocal11801_tmp_bytes;\
	out_bits += bmlocal11802_tmp_bits;\
}

#define BM_WmxRadioModuleMember_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11803_tmp_bits;\
	BM_WmxRadioModuleMember_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11803_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11803_tmp_bits );\
}

#define BM_WmxRadioModuleMember_fwVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_WmxRadioModuleMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11806_acc_bytes;\
	UINT bmlocal11807_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11806_acc_bytes = 64;\
	bmlocal11807_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11806_acc_bytes );\
	out_bitoff += bmlocal11807_acc_bits;\
}

#define BM_WmxRadioModuleMember_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11808_tmp_bitoff;\
	BM_WmxRadioModuleMember_swVersion_GET_POS( base_ptr, out_ptr, bmlocal11808_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11808_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_swVersion_POS_ALIGNED 64

// COMPOSITE: Full name: 'WmxRadioModuleMember_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11809_parent_out_ptr;\
	BM_WmxRadioModuleMember_swVersion_GET_POS( base_ptr, bmlocal11809_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11809_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11810_tmp_bitoff;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal11810_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11810_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_POS_ALIGNED 64

// ARRAY: WmxRadioModuleMember_swVersion_swVersion
#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11811_out_ptr;\
	UINT bmlocal11812_out_bitoff;\
	UINT bmlocal11813_element_size_bytes;\
	UINT bmlocal11814_element_size_bits;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_POS( base_ptr, bmlocal11811_out_ptr, bmlocal11812_out_bitoff );\
	bmlocal11813_element_size_bytes = 1;\
	bmlocal11814_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11811_out_ptr) + (idx0) * bmlocal11813_element_size_bytes );\
	out_bitoff = bmlocal11812_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11814_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11815_parent_out_ptr;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11815_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11815_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11816_tmp_bitoff;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11816_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11816_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11817_my_ptr;\
	UINT bmlocal11818_my_bitoff;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11817_my_ptr, bmlocal11818_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11817_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11817_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11817_my_ptr, bmlocal11818_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11819_my_ptr;\
	UINT bmlocal11820_my_bitoff;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11819_my_ptr, bmlocal11820_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11819_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11819_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11819_my_ptr, bmlocal11820_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11821_out_val;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal11821_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11821_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11822_my_ptr;\
	UINT bmlocal11823_my_bitoff;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11822_my_ptr, bmlocal11823_my_bitoff );\
	(*((UINT8*)bmlocal11822_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11823_my_bitoff );\
}

// WmxRadioModuleMember_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11824_tmp_bits;\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11824_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11824_tmp_bits );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11827_tmp_bits;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11827_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11827_tmp_bits );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11828_dim_size0;\
	UINT bmlocal11829_idx0;\
	bmlocal11828_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal11829_idx0=0; bmlocal11829_idx0<bmlocal11828_dim_size0; bmlocal11829_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11829_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11829_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11830_tmp_bits;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11830_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11830_tmp_bits );\
}

#define BM_WmxRadioModuleMember_swVersion_swVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11831_tmp_bytes = 0;\
	UINT bmlocal11832_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal11831_tmp_bytes, bmlocal11832_tmp_bits );\
	out_bytes += bmlocal11831_tmp_bytes;\
	out_bits += bmlocal11832_tmp_bits;\
}

#define BM_WmxRadioModuleMember_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11833_tmp_bits;\
	BM_WmxRadioModuleMember_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11833_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11833_tmp_bits );\
}

#define BM_WmxRadioModuleMember_swVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_WmxRadioModuleMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11836_acc_bytes;\
	UINT bmlocal11837_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11836_acc_bytes = 128;\
	bmlocal11837_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11836_acc_bytes );\
	out_bitoff += bmlocal11837_acc_bits;\
}

#define BM_WmxRadioModuleMember_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11838_tmp_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal11838_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11838_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_hwVersion_POS_ALIGNED 128

// COMPOSITE: Full name: 'WmxRadioModuleMember_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11839_parent_out_ptr;\
	BM_WmxRadioModuleMember_hwVersion_GET_POS( base_ptr, bmlocal11839_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11839_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11840_tmp_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal11840_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11840_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_POS_ALIGNED 128

// ARRAY: WmxRadioModuleMember_hwVersion_hwVersion
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11841_out_ptr;\
	UINT bmlocal11842_out_bitoff;\
	UINT bmlocal11843_element_size_bytes;\
	UINT bmlocal11844_element_size_bits;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal11841_out_ptr, bmlocal11842_out_bitoff );\
	bmlocal11843_element_size_bytes = 1;\
	bmlocal11844_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11841_out_ptr) + (idx0) * bmlocal11843_element_size_bytes );\
	out_bitoff = bmlocal11842_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11844_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11845_parent_out_ptr;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11845_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11845_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11846_tmp_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11846_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11846_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11847_my_ptr;\
	UINT bmlocal11848_my_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11847_my_ptr, bmlocal11848_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11847_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11847_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11847_my_ptr, bmlocal11848_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11849_my_ptr;\
	UINT bmlocal11850_my_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11849_my_ptr, bmlocal11850_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11849_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11849_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11849_my_ptr, bmlocal11850_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11851_out_val;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal11851_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11851_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11852_my_ptr;\
	UINT bmlocal11853_my_bitoff;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal11852_my_ptr, bmlocal11853_my_bitoff );\
	(*((UINT8*)bmlocal11852_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11853_my_bitoff );\
}

// WmxRadioModuleMember_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11854_tmp_bits;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11854_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11854_tmp_bits );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11857_tmp_bits;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11857_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11857_tmp_bits );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11858_dim_size0;\
	UINT bmlocal11859_idx0;\
	bmlocal11858_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal11859_idx0=0; bmlocal11859_idx0<bmlocal11858_dim_size0; bmlocal11859_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11859_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal11859_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11860_tmp_bits;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11860_tmp_bits );\
}

#define BM_WmxRadioModuleMember_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11861_tmp_bytes = 0;\
	UINT bmlocal11862_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal11861_tmp_bytes, bmlocal11862_tmp_bits );\
	out_bytes += bmlocal11861_tmp_bytes;\
	out_bits += bmlocal11862_tmp_bits;\
}

#define BM_WmxRadioModuleMember_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11863_tmp_bits;\
	BM_WmxRadioModuleMember_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal11863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11863_tmp_bits );\
}

#define BM_WmxRadioModuleMember_hwVersion_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_WmxRadioModuleMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11866_acc_bytes;\
	UINT bmlocal11867_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11866_acc_bytes = 192;\
	bmlocal11867_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11866_acc_bytes );\
	out_bitoff += bmlocal11867_acc_bits;\
}

#define BM_WmxRadioModuleMember_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11868_tmp_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal11868_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11868_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_manufacturer_POS_ALIGNED 192

// COMPOSITE: Full name: 'WmxRadioModuleMember_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11869_parent_out_ptr;\
	BM_WmxRadioModuleMember_manufacturer_GET_POS( base_ptr, bmlocal11869_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11869_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11870_tmp_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal11870_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11870_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_POS_ALIGNED 192

// ARRAY: WmxRadioModuleMember_manufacturer_manufacturer
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11871_out_ptr;\
	UINT bmlocal11872_out_bitoff;\
	UINT bmlocal11873_element_size_bytes;\
	UINT bmlocal11874_element_size_bits;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal11871_out_ptr, bmlocal11872_out_bitoff );\
	bmlocal11873_element_size_bytes = 1;\
	bmlocal11874_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11871_out_ptr) + (idx0) * bmlocal11873_element_size_bytes );\
	out_bitoff = bmlocal11872_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11874_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11875_parent_out_ptr;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11875_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11875_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11876_tmp_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11876_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11876_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11877_my_ptr;\
	UINT bmlocal11878_my_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11877_my_ptr, bmlocal11878_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11877_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11877_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11877_my_ptr, bmlocal11878_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11879_my_ptr;\
	UINT bmlocal11880_my_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11879_my_ptr, bmlocal11880_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11879_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11879_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11879_my_ptr, bmlocal11880_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11881_out_val;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal11881_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11881_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11882_my_ptr;\
	UINT bmlocal11883_my_bitoff;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal11882_my_ptr, bmlocal11883_my_bitoff );\
	(*((UINT8*)bmlocal11882_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11883_my_bitoff );\
}

// WmxRadioModuleMember_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11884_tmp_bits;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11884_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11884_tmp_bits );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11887_tmp_bits;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11887_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11887_tmp_bits );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11888_dim_size0;\
	UINT bmlocal11889_idx0;\
	bmlocal11888_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal11889_idx0=0; bmlocal11889_idx0<bmlocal11888_dim_size0; bmlocal11889_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11889_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal11889_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11890_tmp_bits;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal11890_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11890_tmp_bits );\
}

#define BM_WmxRadioModuleMember_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11891_tmp_bytes = 0;\
	UINT bmlocal11892_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal11891_tmp_bytes, bmlocal11892_tmp_bits );\
	out_bytes += bmlocal11891_tmp_bytes;\
	out_bits += bmlocal11892_tmp_bits;\
}

#define BM_WmxRadioModuleMember_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11893_tmp_bits;\
	BM_WmxRadioModuleMember_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal11893_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11893_tmp_bits );\
}

#define BM_WmxRadioModuleMember_manufacturer_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_WmxRadioModuleMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11896_acc_bytes;\
	UINT bmlocal11897_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11896_acc_bytes = 256;\
	bmlocal11897_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11896_acc_bytes );\
	out_bitoff += bmlocal11897_acc_bits;\
}

#define BM_WmxRadioModuleMember_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11898_tmp_bitoff;\
	BM_WmxRadioModuleMember_model_GET_POS( base_ptr, out_ptr, bmlocal11898_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11898_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_model_POS_ALIGNED 256

// COMPOSITE: Full name: 'WmxRadioModuleMember_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11899_parent_out_ptr;\
	BM_WmxRadioModuleMember_model_GET_POS( base_ptr, bmlocal11899_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11899_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11900_tmp_bitoff;\
	BM_WmxRadioModuleMember_model_model_GET_POS( base_ptr, out_ptr, bmlocal11900_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11900_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_model_model_POS_ALIGNED 256

// ARRAY: WmxRadioModuleMember_model_model
#define BM_WmxRadioModuleMember_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11901_out_ptr;\
	UINT bmlocal11902_out_bitoff;\
	UINT bmlocal11903_element_size_bytes;\
	UINT bmlocal11904_element_size_bits;\
	BM_WmxRadioModuleMember_model_model_GET_POS( base_ptr, bmlocal11901_out_ptr, bmlocal11902_out_bitoff );\
	bmlocal11903_element_size_bytes = 1;\
	bmlocal11904_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11901_out_ptr) + (idx0) * bmlocal11903_element_size_bytes );\
	out_bitoff = bmlocal11902_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11904_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11905_parent_out_ptr;\
	BM_WmxRadioModuleMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11905_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11905_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11906_tmp_bitoff;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11906_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11906_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11907_my_ptr;\
	UINT bmlocal11908_my_bitoff;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11907_my_ptr, bmlocal11908_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11907_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11907_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11907_my_ptr, bmlocal11908_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11909_my_ptr;\
	UINT bmlocal11910_my_bitoff;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11909_my_ptr, bmlocal11910_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11909_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11909_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11909_my_ptr, bmlocal11910_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11911_out_val;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET( base_ptr, idx0, bmlocal11911_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11911_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11912_my_ptr;\
	UINT bmlocal11913_my_bitoff;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal11912_my_ptr, bmlocal11913_my_bitoff );\
	(*((UINT8*)bmlocal11912_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11913_my_bitoff );\
}

// WmxRadioModuleMember_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11914_tmp_bits;\
	BM_WmxRadioModuleMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11914_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11914_tmp_bits );\
}

#define BM_WmxRadioModuleMember_model_model_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11917_tmp_bits;\
	BM_WmxRadioModuleMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11917_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11917_tmp_bits );\
}

#define BM_WmxRadioModuleMember_model_model_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11918_dim_size0;\
	UINT bmlocal11919_idx0;\
	bmlocal11918_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal11919_idx0=0; bmlocal11919_idx0<bmlocal11918_dim_size0; bmlocal11919_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11919_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal11919_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11920_tmp_bits;\
	BM_WmxRadioModuleMember_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal11920_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11920_tmp_bits );\
}

#define BM_WmxRadioModuleMember_model_model_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11921_tmp_bytes = 0;\
	UINT bmlocal11922_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_model_model_GET_SIZE( base_ptr, bmlocal11921_tmp_bytes, bmlocal11922_tmp_bits );\
	out_bytes += bmlocal11921_tmp_bytes;\
	out_bits += bmlocal11922_tmp_bits;\
}

#define BM_WmxRadioModuleMember_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11923_tmp_bits;\
	BM_WmxRadioModuleMember_model_GET_SIZE( base_ptr, out_bytes, bmlocal11923_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11923_tmp_bits );\
}

#define BM_WmxRadioModuleMember_model_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_WmxRadioModuleMember_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_macAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11926_acc_bytes;\
	UINT bmlocal11927_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11926_acc_bytes = 320;\
	bmlocal11927_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11926_acc_bytes );\
	out_bitoff += bmlocal11927_acc_bits;\
}

#define BM_WmxRadioModuleMember_macAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11928_tmp_bitoff;\
	BM_WmxRadioModuleMember_macAddress_GET_POS( base_ptr, out_ptr, bmlocal11928_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11928_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_macAddress_POS_ALIGNED 320

// COMPOSITE: Full name: 'WmxRadioModuleMember_macAddress' Type: 'macAddressMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11929_parent_out_ptr;\
	BM_WmxRadioModuleMember_macAddress_GET_POS( base_ptr, bmlocal11929_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11929_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11930_tmp_bitoff;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_POS( base_ptr, out_ptr, bmlocal11930_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11930_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_POS_ALIGNED 320

// ARRAY: WmxRadioModuleMember_macAddress_macAddress
#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11931_out_ptr;\
	UINT bmlocal11932_out_bitoff;\
	UINT bmlocal11933_element_size_bytes;\
	UINT bmlocal11934_element_size_bits;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_POS( base_ptr, bmlocal11931_out_ptr, bmlocal11932_out_bitoff );\
	bmlocal11933_element_size_bytes = 1;\
	bmlocal11934_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11931_out_ptr) + (idx0) * bmlocal11933_element_size_bytes );\
	out_bitoff = bmlocal11932_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11934_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_macAddress_macAddress' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11935_parent_out_ptr;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11935_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11935_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11936_tmp_bitoff;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11936_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11936_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_macAddress_macAddress_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11937_my_ptr;\
	UINT bmlocal11938_my_bitoff;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal11937_my_ptr, bmlocal11938_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11937_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11937_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11937_my_ptr, bmlocal11938_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11939_my_ptr;\
	UINT bmlocal11940_my_bitoff;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal11939_my_ptr, bmlocal11940_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11939_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11939_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11939_my_ptr, bmlocal11940_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_macAddress_macAddress_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_macAddress_macAddress_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_macAddress_macAddress_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_macAddress_macAddress_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_macAddress_macAddress_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_macAddress_macAddress_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11941_out_val;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, bmlocal11941_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11941_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11942_my_ptr;\
	UINT bmlocal11943_my_bitoff;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, bmlocal11942_my_ptr, bmlocal11943_my_bitoff );\
	(*((UINT8*)bmlocal11942_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11943_my_bitoff );\
}

// WmxRadioModuleMember_macAddress_macAddress_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11944_tmp_bits;\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11944_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11944_tmp_bits );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11947_tmp_bits;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11947_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11947_tmp_bits );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11948_dim_size0;\
	UINT bmlocal11949_idx0;\
	bmlocal11948_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	for( bmlocal11949_idx0=0; bmlocal11949_idx0<bmlocal11948_dim_size0; bmlocal11949_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11949_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, bmlocal11949_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11950_tmp_bits;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_SIZE( base_ptr, out_bytes, bmlocal11950_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11950_tmp_bits );\
}

#define BM_WmxRadioModuleMember_macAddress_macAddress_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_macAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11951_tmp_bytes = 0;\
	UINT bmlocal11952_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_macAddress_macAddress_GET_SIZE( base_ptr, bmlocal11951_tmp_bytes, bmlocal11952_tmp_bits );\
	out_bytes += bmlocal11951_tmp_bytes;\
	out_bits += bmlocal11952_tmp_bits;\
}

#define BM_WmxRadioModuleMember_macAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11953_tmp_bits;\
	BM_WmxRadioModuleMember_macAddress_GET_SIZE( base_ptr, out_bytes, bmlocal11953_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11953_tmp_bits );\
}

#define BM_WmxRadioModuleMember_macAddress_BYTES_SIZE 64

#define BM_WmxRadioModuleMember_macAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	BM_WmxRadioModuleMember_macAddress_macAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_macAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_macAddress_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_SpLock_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11956_acc_bytes;\
	UINT bmlocal11957_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal11956_acc_bytes = 384;\
	bmlocal11957_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11956_acc_bytes );\
	out_bitoff += bmlocal11957_acc_bits;\
}

#define BM_WmxRadioModuleMember_SpLock_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11958_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_GET_POS( base_ptr, out_ptr, bmlocal11958_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11958_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_POS_ALIGNED 384

// COMPOSITE: Full name: 'WmxRadioModuleMember_SpLock' Type: 'SpLockMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11959_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_GET_POS( base_ptr, bmlocal11959_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11959_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11960_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS( base_ptr, out_ptr, bmlocal11960_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11960_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_POS_ALIGNED 384

// Alignment of WmxRadioModuleMember_SpLock_lockStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_WmxRadioModuleMember_SpLock_lockStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11961_my_ptr;\
	UINT bmlocal11962_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS( base_ptr, bmlocal11961_my_ptr, bmlocal11962_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11961_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11961_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11961_my_ptr, bmlocal11962_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11963_my_ptr;\
	UINT bmlocal11964_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS( base_ptr, bmlocal11963_my_ptr, bmlocal11964_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11963_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11963_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11963_my_ptr, bmlocal11964_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// WmxRadioModuleMember_SpLock_lockStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_lockStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_lockStatus: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_lockStatus: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_lockStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_SpLock_lockStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_SpLock_lockStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal11965_out_val;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET( base_ptr, bmlocal11965_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lockStatus", 32, (UINT)(bmlocal11965_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockStatus_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11966_my_ptr;\
	UINT bmlocal11967_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET_POS( base_ptr, bmlocal11966_my_ptr, bmlocal11967_my_bitoff );\
	(*((UINT32*)bmlocal11966_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11967_my_bitoff );\
}

// WmxRadioModuleMember_SpLock_lockStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_SpLock_lockStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11968_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_lockStatus_GET_SIZE( base_ptr, out_bytes, bmlocal11968_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11968_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_lockStatus_BYTES_SIZE 4

#define BM_WmxRadioModuleMember_SpLock_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal11971_acc_bytes;\
	UINT bmlocal11972_acc_bits;\
	PVOID bmlocal11973_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_GET_POS( base_ptr, bmlocal11973_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11973_parent_out_ptr;\
	bmlocal11971_acc_bytes = 4;\
	bmlocal11972_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal11971_acc_bytes );\
	out_bitoff += bmlocal11972_acc_bits;\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11974_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_GET_POS( base_ptr, out_ptr, bmlocal11974_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11974_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_POS_ALIGNED 388

// COMPOSITE: Full name: 'WmxRadioModuleMember_SpLock_operatorName' Type: 'operatorNameMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11975_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_operatorName_GET_POS( base_ptr, bmlocal11975_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11975_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11976_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_POS( base_ptr, out_ptr, bmlocal11976_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11976_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_POS_ALIGNED 388

// ARRAY: WmxRadioModuleMember_SpLock_operatorName_operatorName
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11977_out_ptr;\
	UINT bmlocal11978_out_bitoff;\
	UINT bmlocal11979_element_size_bytes;\
	UINT bmlocal11980_element_size_bits;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_POS( base_ptr, bmlocal11977_out_ptr, bmlocal11978_out_bitoff );\
	bmlocal11979_element_size_bytes = 1;\
	bmlocal11980_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal11977_out_ptr) + (idx0) * bmlocal11979_element_size_bytes );\
	out_bitoff = bmlocal11978_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal11980_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_SpLock_operatorName_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11981_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal11981_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal11981_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal11982_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal11982_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal11982_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11983_my_ptr;\
	UINT bmlocal11984_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11983_my_ptr, bmlocal11984_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11983_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11983_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal11983_my_ptr, bmlocal11984_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11985_my_ptr;\
	UINT bmlocal11986_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11985_my_ptr, bmlocal11986_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11985_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal11985_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal11985_my_ptr, bmlocal11986_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal11987_out_val;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, bmlocal11987_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal11987_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal11988_my_ptr;\
	UINT bmlocal11989_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal11988_my_ptr, bmlocal11989_my_bitoff );\
	(*((UINT8*)bmlocal11988_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal11989_my_bitoff );\
}

// WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11990_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal11990_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11990_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11993_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal11993_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11993_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal11994_dim_size0;\
	UINT bmlocal11995_idx0;\
	bmlocal11994_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal11995_idx0=0; bmlocal11995_idx0<bmlocal11994_dim_size0; bmlocal11995_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal11995_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, bmlocal11995_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11996_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal11996_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11996_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_BYTES_SIZE 100

#define BM_WmxRadioModuleMember_SpLock_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal11997_tmp_bytes = 0;\
	UINT bmlocal11998_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, bmlocal11997_tmp_bytes, bmlocal11998_tmp_bits );\
	out_bytes += bmlocal11997_tmp_bytes;\
	out_bits += bmlocal11998_tmp_bits;\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal11999_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal11999_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal11999_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_BYTES_SIZE 100

#define BM_WmxRadioModuleMember_SpLock_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	BM_WmxRadioModuleMember_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_SpLock_lockMem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12002_acc_bytes;\
	UINT bmlocal12003_acc_bits;\
	PVOID bmlocal12004_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_GET_POS( base_ptr, bmlocal12004_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12004_parent_out_ptr;\
	bmlocal12002_acc_bytes = 104;\
	bmlocal12003_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12002_acc_bytes );\
	out_bitoff += bmlocal12003_acc_bits;\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12005_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_GET_POS( base_ptr, out_ptr, bmlocal12005_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12005_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_POS_ALIGNED 488

// COMPOSITE: Full name: 'WmxRadioModuleMember_SpLock_lockMem' Type: 'lockMember', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12006_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_lockMem_GET_POS( base_ptr, bmlocal12006_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12006_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12007_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_POS( base_ptr, out_ptr, bmlocal12007_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12007_tmp_bitoff);\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_POS_ALIGNED 488

// ARRAY: WmxRadioModuleMember_SpLock_lockMem_lockMem
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 176;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 176;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12008_out_ptr;\
	UINT bmlocal12009_out_bitoff;\
	UINT bmlocal12010_element_size_bytes;\
	UINT bmlocal12011_element_size_bits;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_POS( base_ptr, bmlocal12008_out_ptr, bmlocal12009_out_bitoff );\
	bmlocal12010_element_size_bytes = 1;\
	bmlocal12011_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12008_out_ptr) + (idx0) * bmlocal12010_element_size_bytes );\
	out_bitoff = bmlocal12009_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12011_element_size_bits );\
}

// COMPOSITE: Full name: 'WmxRadioModuleMember_SpLock_lockMem_lockMem' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12012_parent_out_ptr;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12012_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12012_parent_out_ptr;\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12013_tmp_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12013_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12013_tmp_bitoff);\
}

// Alignment of WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12014_my_ptr;\
	UINT bmlocal12015_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal12014_my_ptr, bmlocal12015_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12014_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12014_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12014_my_ptr, bmlocal12015_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12016_my_ptr;\
	UINT bmlocal12017_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal12016_my_ptr, bmlocal12017_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12016_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12016_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12016_my_ptr, bmlocal12017_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12018_out_val;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, bmlocal12018_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12018_out_val), "%d", 1);\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12019_my_ptr;\
	UINT bmlocal12020_my_bitoff;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, bmlocal12019_my_ptr, bmlocal12020_my_bitoff );\
	(*((UINT8*)bmlocal12019_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12020_my_bitoff );\
}

// WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12021_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12021_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12021_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_BYTES_SIZE 1

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12024_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12024_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12024_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BYTES_CELL_SIZE 1

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12025_dim_size0;\
	UINT bmlocal12026_idx0;\
	bmlocal12025_dim_size0 = 176;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	for( bmlocal12026_idx0=0; bmlocal12026_idx0<bmlocal12025_dim_size0; bmlocal12026_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12026_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, bmlocal12026_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12027_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, out_bytes, bmlocal12027_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12027_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_BYTES_SIZE 176

#define BM_WmxRadioModuleMember_SpLock_lockMem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12028_tmp_bytes = 0;\
	UINT bmlocal12029_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, bmlocal12028_tmp_bytes, bmlocal12029_tmp_bits );\
	out_bytes += bmlocal12028_tmp_bytes;\
	out_bits += bmlocal12029_tmp_bits;\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12030_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_lockMem_GET_SIZE( base_ptr, out_bytes, bmlocal12030_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12030_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_BYTES_SIZE 176

#define BM_WmxRadioModuleMember_SpLock_lockMem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	BM_WmxRadioModuleMember_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_lockMem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_lockMem_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_SpLock_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 280;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12033_tmp_bits;\
	BM_WmxRadioModuleMember_SpLock_GET_SIZE( base_ptr, out_bytes, bmlocal12033_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12033_tmp_bits );\
}

#define BM_WmxRadioModuleMember_SpLock_BYTES_SIZE 280

#define BM_WmxRadioModuleMember_SpLock_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SpLock", 1);\
	BM_WmxRadioModuleMember_SpLock_lockStatus_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_SpLock_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_SpLock_lockMem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_SpLock_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_SpLock_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_WmxRadioModuleMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 664;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12036_tmp_bits;\
	BM_WmxRadioModuleMember_GET_SIZE( base_ptr, out_bytes, bmlocal12036_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12036_tmp_bits );\
}

#define BM_WmxRadioModuleMember_BYTES_SIZE 664

#define BM_WmxRadioModuleMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "WmxRadioModuleMember", 1);\
	BM_WmxRadioModuleMember_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_macAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_WmxRadioModuleMember_SpLock_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_WmxRadioModuleMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_WmxRadioModuleMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 RadioModuleMember[4];

// COMPOSITE: Full name: 'RadioModuleMember' Type: 'RadioModuleMember', Top-level, Non-instance, No bitoff root
#define BM_RadioModuleMember_LenOfRadioModule_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_RadioModuleMember_LenOfRadioModule_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12037_tmp_bitoff;\
	BM_RadioModuleMember_LenOfRadioModule_GET_POS( base_ptr, out_ptr, bmlocal12037_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12037_tmp_bitoff);\
}

#define BM_RadioModuleMember_LenOfRadioModule_POS_ALIGNED 0

// Alignment of RadioModuleMember_LenOfRadioModule: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RadioModuleMember_LenOfRadioModule_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_LenOfRadioModule_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12038_my_ptr;\
	UINT bmlocal12039_my_bitoff;\
	BM_RadioModuleMember_LenOfRadioModule_GET_POS( base_ptr, bmlocal12038_my_ptr, bmlocal12039_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12038_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12038_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12038_my_ptr, bmlocal12039_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RadioModuleMember_LenOfRadioModule_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12040_my_ptr;\
	UINT bmlocal12041_my_bitoff;\
	BM_RadioModuleMember_LenOfRadioModule_GET_POS( base_ptr, bmlocal12040_my_ptr, bmlocal12041_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12040_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12040_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12040_my_ptr, bmlocal12041_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RadioModuleMember_LenOfRadioModule: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_LenOfRadioModule: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_LenOfRadioModule: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_LenOfRadioModule: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_LenOfRadioModule: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_LenOfRadioModule: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_LenOfRadioModule_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12042_out_val;\
	BM_RadioModuleMember_LenOfRadioModule_GET( base_ptr, bmlocal12042_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "LenOfRadioModule", 32, (UINT)(bmlocal12042_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_LenOfRadioModule_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_LenOfRadioModule_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RadioModuleMember_LenOfRadioModule_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12043_my_ptr;\
	UINT bmlocal12044_my_bitoff;\
	BM_RadioModuleMember_LenOfRadioModule_GET_POS( base_ptr, bmlocal12043_my_ptr, bmlocal12044_my_bitoff );\
	(*((UINT32*)bmlocal12043_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12044_my_bitoff );\
}

// RadioModuleMember_LenOfRadioModule: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_LenOfRadioModule_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12045_tmp_bits;\
	BM_RadioModuleMember_LenOfRadioModule_GET_SIZE( base_ptr, out_bytes, bmlocal12045_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12045_tmp_bits );\
}

#define BM_RadioModuleMember_LenOfRadioModule_BYTES_SIZE 4

#define BM_RadioModuleMember_WmxRadioModuleList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12048_acc_bytes;\
	UINT bmlocal12049_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12048_acc_bytes = 4;\
	bmlocal12049_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12048_acc_bytes );\
	out_bitoff += bmlocal12049_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12050_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_POS( base_ptr, out_ptr, bmlocal12050_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12050_tmp_bitoff);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_POS_ALIGNED 4

// ARRAY: RadioModuleMember_WmxRadioModuleList
#define BM_RadioModuleMember_WmxRadioModuleList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal12051_var0;\
		BM_RadioModuleMember_LenOfRadioModule_GET( base_ptr, bmlocal12051_var0 );\
		out_bytes = (UINT)(664*(1*bmlocal12051_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal12052_var0;\
			BM_RadioModuleMember_LenOfRadioModule_GET( base_ptr, bmlocal12052_var0 );\
			out_element_count = (UINT)(bmlocal12052_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12053_out_ptr;\
	UINT bmlocal12054_out_bitoff;\
	UINT bmlocal12055_element_size_bytes;\
	UINT bmlocal12056_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_POS( base_ptr, bmlocal12053_out_ptr, bmlocal12054_out_bitoff );\
	bmlocal12055_element_size_bytes = 664;\
	bmlocal12056_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12053_out_ptr) + (idx0) * bmlocal12055_element_size_bytes );\
	out_bitoff = bmlocal12054_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12056_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList' Type: 'WmxRadioModuleMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12057_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12057_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12057_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12058_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12058_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12058_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12059_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, bmlocal12059_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12059_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12060_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12060_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12060_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12061_out_ptr;\
	UINT bmlocal12062_out_bitoff;\
	UINT bmlocal12063_element_size_bytes;\
	UINT bmlocal12064_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, bmlocal12061_out_ptr, bmlocal12062_out_bitoff );\
	bmlocal12063_element_size_bytes = 1;\
	bmlocal12064_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12061_out_ptr) + (idx1) * bmlocal12063_element_size_bytes );\
	out_bitoff = bmlocal12062_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12064_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12065_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12065_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12065_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12066_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12066_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12066_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12067_my_ptr;\
	UINT bmlocal12068_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12067_my_ptr, bmlocal12068_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12067_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12067_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12067_my_ptr, bmlocal12068_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12069_my_ptr;\
	UINT bmlocal12070_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12069_my_ptr, bmlocal12070_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12069_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12069_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12069_my_ptr, bmlocal12070_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12071_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12071_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12071_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12072_my_ptr;\
	UINT bmlocal12073_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12072_my_ptr, bmlocal12073_my_bitoff );\
	(*((UINT8*)bmlocal12072_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12073_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12074_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12074_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12074_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12077_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12077_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12077_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12078_dim_size0;\
	UINT bmlocal12079_idx0;\
	bmlocal12078_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal12079_idx0=0; bmlocal12079_idx0<bmlocal12078_dim_size0; bmlocal12079_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12079_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12079_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12080_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12080_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12080_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12081_tmp_bytes = 0;\
	UINT bmlocal12082_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, bmlocal12081_tmp_bytes, bmlocal12082_tmp_bits );\
	out_bytes += bmlocal12081_tmp_bytes;\
	out_bits += bmlocal12082_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12083_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12083_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12083_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_fwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12086_acc_bytes;\
	UINT bmlocal12087_acc_bits;\
	PVOID bmlocal12088_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12088_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12088_parent_out_ptr;\
	bmlocal12086_acc_bytes = 64;\
	bmlocal12087_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12086_acc_bytes );\
	out_bitoff += bmlocal12087_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12089_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12089_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12089_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12090_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, bmlocal12090_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12090_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12091_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12091_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12091_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_swVersion_swVersion
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12092_out_ptr;\
	UINT bmlocal12093_out_bitoff;\
	UINT bmlocal12094_element_size_bytes;\
	UINT bmlocal12095_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, bmlocal12092_out_ptr, bmlocal12093_out_bitoff );\
	bmlocal12094_element_size_bytes = 1;\
	bmlocal12095_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12092_out_ptr) + (idx1) * bmlocal12094_element_size_bytes );\
	out_bitoff = bmlocal12093_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12095_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12096_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12096_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12096_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12097_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12097_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12097_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12098_my_ptr;\
	UINT bmlocal12099_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12098_my_ptr, bmlocal12099_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12098_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12098_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12098_my_ptr, bmlocal12099_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12100_my_ptr;\
	UINT bmlocal12101_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12100_my_ptr, bmlocal12101_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12100_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12100_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12100_my_ptr, bmlocal12101_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12102_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12102_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12102_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12103_my_ptr;\
	UINT bmlocal12104_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12103_my_ptr, bmlocal12104_my_bitoff );\
	(*((UINT8*)bmlocal12103_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12104_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12105_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12105_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12105_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12108_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12108_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12108_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12109_dim_size0;\
	UINT bmlocal12110_idx0;\
	bmlocal12109_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal12110_idx0=0; bmlocal12110_idx0<bmlocal12109_dim_size0; bmlocal12110_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12110_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12110_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12111_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12111_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12111_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12112_tmp_bytes = 0;\
	UINT bmlocal12113_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, bmlocal12112_tmp_bytes, bmlocal12113_tmp_bits );\
	out_bytes += bmlocal12112_tmp_bytes;\
	out_bits += bmlocal12113_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12114_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12114_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12114_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_swVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12117_acc_bytes;\
	UINT bmlocal12118_acc_bits;\
	PVOID bmlocal12119_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12119_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12119_parent_out_ptr;\
	bmlocal12117_acc_bytes = 128;\
	bmlocal12118_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12117_acc_bytes );\
	out_bitoff += bmlocal12118_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12120_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12120_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12120_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12121_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, bmlocal12121_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12121_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12122_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal12122_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12122_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12123_out_ptr;\
	UINT bmlocal12124_out_bitoff;\
	UINT bmlocal12125_element_size_bytes;\
	UINT bmlocal12126_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, bmlocal12123_out_ptr, bmlocal12124_out_bitoff );\
	bmlocal12125_element_size_bytes = 1;\
	bmlocal12126_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12123_out_ptr) + (idx1) * bmlocal12125_element_size_bytes );\
	out_bitoff = bmlocal12124_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12126_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12127_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12127_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12127_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12128_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12128_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12128_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12129_my_ptr;\
	UINT bmlocal12130_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12129_my_ptr, bmlocal12130_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12129_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12129_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12129_my_ptr, bmlocal12130_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12131_my_ptr;\
	UINT bmlocal12132_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12131_my_ptr, bmlocal12132_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12131_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12131_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12131_my_ptr, bmlocal12132_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12133_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12133_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12133_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12134_my_ptr;\
	UINT bmlocal12135_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12134_my_ptr, bmlocal12135_my_bitoff );\
	(*((UINT8*)bmlocal12134_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12135_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12136_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12136_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12136_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12139_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12139_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12139_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12140_dim_size0;\
	UINT bmlocal12141_idx0;\
	bmlocal12140_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal12141_idx0=0; bmlocal12141_idx0<bmlocal12140_dim_size0; bmlocal12141_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12141_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12141_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12142_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12142_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12142_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12143_tmp_bytes = 0;\
	UINT bmlocal12144_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, bmlocal12143_tmp_bytes, bmlocal12144_tmp_bits );\
	out_bytes += bmlocal12143_tmp_bytes;\
	out_bits += bmlocal12144_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12145_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12145_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12145_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_hwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12148_acc_bytes;\
	UINT bmlocal12149_acc_bits;\
	PVOID bmlocal12150_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12150_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12150_parent_out_ptr;\
	bmlocal12148_acc_bytes = 192;\
	bmlocal12149_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12148_acc_bytes );\
	out_bitoff += bmlocal12149_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12151_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, out_ptr, bmlocal12151_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12151_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12152_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, bmlocal12152_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12152_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12153_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, out_ptr, bmlocal12153_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12153_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12154_out_ptr;\
	UINT bmlocal12155_out_bitoff;\
	UINT bmlocal12156_element_size_bytes;\
	UINT bmlocal12157_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, bmlocal12154_out_ptr, bmlocal12155_out_bitoff );\
	bmlocal12156_element_size_bytes = 1;\
	bmlocal12157_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12154_out_ptr) + (idx1) * bmlocal12156_element_size_bytes );\
	out_bitoff = bmlocal12155_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12157_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12158_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12158_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12158_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12159_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12159_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12159_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12160_my_ptr;\
	UINT bmlocal12161_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12160_my_ptr, bmlocal12161_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12160_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12160_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12160_my_ptr, bmlocal12161_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12162_my_ptr;\
	UINT bmlocal12163_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12162_my_ptr, bmlocal12163_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12162_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12162_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12162_my_ptr, bmlocal12163_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12164_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12164_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12164_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12165_my_ptr;\
	UINT bmlocal12166_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12165_my_ptr, bmlocal12166_my_bitoff );\
	(*((UINT8*)bmlocal12165_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12166_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12167_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12167_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12167_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12170_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12170_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12170_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12171_dim_size0;\
	UINT bmlocal12172_idx0;\
	bmlocal12171_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal12172_idx0=0; bmlocal12172_idx0<bmlocal12171_dim_size0; bmlocal12172_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12172_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12172_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12173_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12173_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12173_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12174_tmp_bytes = 0;\
	UINT bmlocal12175_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, bmlocal12174_tmp_bytes, bmlocal12175_tmp_bits );\
	out_bytes += bmlocal12174_tmp_bytes;\
	out_bits += bmlocal12175_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12176_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12176_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12176_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_manufacturer_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12179_acc_bytes;\
	UINT bmlocal12180_acc_bits;\
	PVOID bmlocal12181_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12181_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12181_parent_out_ptr;\
	bmlocal12179_acc_bytes = 256;\
	bmlocal12180_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12179_acc_bytes );\
	out_bitoff += bmlocal12180_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12182_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, out_ptr, bmlocal12182_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12182_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12183_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, bmlocal12183_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12183_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12184_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, out_ptr, bmlocal12184_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12184_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_model_model
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12185_out_ptr;\
	UINT bmlocal12186_out_bitoff;\
	UINT bmlocal12187_element_size_bytes;\
	UINT bmlocal12188_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, bmlocal12185_out_ptr, bmlocal12186_out_bitoff );\
	bmlocal12187_element_size_bytes = 1;\
	bmlocal12188_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12185_out_ptr) + (idx1) * bmlocal12187_element_size_bytes );\
	out_bitoff = bmlocal12186_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12188_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12189_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12189_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12189_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12190_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12190_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12190_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12191_my_ptr;\
	UINT bmlocal12192_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12191_my_ptr, bmlocal12192_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12191_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12191_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12191_my_ptr, bmlocal12192_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12193_my_ptr;\
	UINT bmlocal12194_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12193_my_ptr, bmlocal12194_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12193_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12193_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12193_my_ptr, bmlocal12194_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12195_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12195_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12195_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12196_my_ptr;\
	UINT bmlocal12197_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12196_my_ptr, bmlocal12197_my_bitoff );\
	(*((UINT8*)bmlocal12196_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12197_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12198_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12198_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12198_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12201_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12201_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12201_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12202_dim_size0;\
	UINT bmlocal12203_idx0;\
	bmlocal12202_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal12203_idx0=0; bmlocal12203_idx0<bmlocal12202_dim_size0; bmlocal12203_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12203_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12203_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12204_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12204_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12204_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_model_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_model_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12205_tmp_bytes = 0;\
	UINT bmlocal12206_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, bmlocal12205_tmp_bytes, bmlocal12206_tmp_bits );\
	out_bytes += bmlocal12205_tmp_bytes;\
	out_bits += bmlocal12206_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12207_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_model_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12207_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12207_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_model_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12210_acc_bytes;\
	UINT bmlocal12211_acc_bits;\
	PVOID bmlocal12212_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12212_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12212_parent_out_ptr;\
	bmlocal12210_acc_bytes = 320;\
	bmlocal12211_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12210_acc_bytes );\
	out_bitoff += bmlocal12211_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12213_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, out_ptr, bmlocal12213_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12213_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_macAddress' Type: 'macAddressMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12214_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, bmlocal12214_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12214_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12215_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, out_ptr, bmlocal12215_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12215_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_macAddress_macAddress
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12216_out_ptr;\
	UINT bmlocal12217_out_bitoff;\
	UINT bmlocal12218_element_size_bytes;\
	UINT bmlocal12219_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, bmlocal12216_out_ptr, bmlocal12217_out_bitoff );\
	bmlocal12218_element_size_bytes = 1;\
	bmlocal12219_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12216_out_ptr) + (idx1) * bmlocal12218_element_size_bytes );\
	out_bitoff = bmlocal12217_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12219_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_macAddress_macAddress' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12220_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12220_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12220_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12221_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12221_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12221_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12222_my_ptr;\
	UINT bmlocal12223_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12222_my_ptr, bmlocal12223_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12222_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12222_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12222_my_ptr, bmlocal12223_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12224_my_ptr;\
	UINT bmlocal12225_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12224_my_ptr, bmlocal12225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12224_my_ptr, bmlocal12225_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12226_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12226_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12226_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12227_my_ptr;\
	UINT bmlocal12228_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12227_my_ptr, bmlocal12228_my_bitoff );\
	(*((UINT8*)bmlocal12227_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12228_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12229_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12229_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12229_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12232_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12232_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12233_dim_size0;\
	UINT bmlocal12234_idx0;\
	bmlocal12233_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	for( bmlocal12234_idx0=0; bmlocal12234_idx0<bmlocal12233_dim_size0; bmlocal12234_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12234_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12234_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12235_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12235_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12235_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12236_tmp_bytes = 0;\
	UINT bmlocal12237_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, bmlocal12236_tmp_bytes, bmlocal12237_tmp_bits );\
	out_bytes += bmlocal12236_tmp_bytes;\
	out_bits += bmlocal12237_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12238_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12238_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12238_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_BYTES_SIZE 64

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_macAddress_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12241_acc_bytes;\
	UINT bmlocal12242_acc_bits;\
	PVOID bmlocal12243_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12243_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12243_parent_out_ptr;\
	bmlocal12241_acc_bytes = 384;\
	bmlocal12242_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12241_acc_bytes );\
	out_bitoff += bmlocal12242_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12244_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, out_ptr, bmlocal12244_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12244_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_SpLock' Type: 'SpLockMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12245_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal12245_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12245_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12246_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, out_ptr, bmlocal12246_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12246_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12247_my_ptr;\
	UINT bmlocal12248_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal12247_my_ptr, bmlocal12248_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12247_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12247_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12247_my_ptr, bmlocal12248_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12249_my_ptr;\
	UINT bmlocal12250_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal12249_my_ptr, bmlocal12250_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12249_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12249_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12249_my_ptr, bmlocal12250_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12251_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET( base_ptr, idx0, bmlocal12251_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lockStatus", 32, (UINT)(bmlocal12251_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12252_my_ptr;\
	UINT bmlocal12253_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal12252_my_ptr, bmlocal12253_my_bitoff );\
	(*((UINT32*)bmlocal12252_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12253_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12254_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12254_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12254_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_BYTES_SIZE 4

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12257_acc_bytes;\
	UINT bmlocal12258_acc_bits;\
	PVOID bmlocal12259_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal12259_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12259_parent_out_ptr;\
	bmlocal12257_acc_bytes = 4;\
	bmlocal12258_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12257_acc_bytes );\
	out_bitoff += bmlocal12258_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12260_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, out_ptr, bmlocal12260_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12260_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_SpLock_operatorName' Type: 'operatorNameMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12261_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, bmlocal12261_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12261_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12262_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, out_ptr, bmlocal12262_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12262_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12263_out_ptr;\
	UINT bmlocal12264_out_bitoff;\
	UINT bmlocal12265_element_size_bytes;\
	UINT bmlocal12266_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, bmlocal12263_out_ptr, bmlocal12264_out_bitoff );\
	bmlocal12265_element_size_bytes = 1;\
	bmlocal12266_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12263_out_ptr) + (idx1) * bmlocal12265_element_size_bytes );\
	out_bitoff = bmlocal12264_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12266_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12267_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12267_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12267_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12268_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12268_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12268_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12269_my_ptr;\
	UINT bmlocal12270_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12269_my_ptr, bmlocal12270_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12269_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12269_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12269_my_ptr, bmlocal12270_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12271_my_ptr;\
	UINT bmlocal12272_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12271_my_ptr, bmlocal12272_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12271_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12271_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12271_my_ptr, bmlocal12272_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12273_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12273_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12273_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12274_my_ptr;\
	UINT bmlocal12275_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12274_my_ptr, bmlocal12275_my_bitoff );\
	(*((UINT8*)bmlocal12274_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12275_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12276_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12276_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12276_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12279_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12279_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12279_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12280_dim_size0;\
	UINT bmlocal12281_idx0;\
	bmlocal12280_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal12281_idx0=0; bmlocal12281_idx0<bmlocal12280_dim_size0; bmlocal12281_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12281_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12281_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12282_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12282_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_BYTES_SIZE 100

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12283_tmp_bytes = 0;\
	UINT bmlocal12284_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, bmlocal12283_tmp_bytes, bmlocal12284_tmp_bits );\
	out_bytes += bmlocal12283_tmp_bytes;\
	out_bits += bmlocal12284_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12285_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12285_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_BYTES_SIZE 100

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12288_acc_bytes;\
	UINT bmlocal12289_acc_bits;\
	PVOID bmlocal12290_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal12290_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12290_parent_out_ptr;\
	bmlocal12288_acc_bytes = 104;\
	bmlocal12289_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12288_acc_bytes );\
	out_bitoff += bmlocal12289_acc_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12291_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, out_ptr, bmlocal12291_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12291_tmp_bitoff);\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_SpLock_lockMem' Type: 'lockMember', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12292_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, bmlocal12292_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12292_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12293_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, out_ptr, bmlocal12293_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12293_tmp_bitoff);\
}

// ARRAY: RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 176;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 176;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12294_out_ptr;\
	UINT bmlocal12295_out_bitoff;\
	UINT bmlocal12296_element_size_bytes;\
	UINT bmlocal12297_element_size_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, bmlocal12294_out_ptr, bmlocal12295_out_bitoff );\
	bmlocal12296_element_size_bytes = 1;\
	bmlocal12297_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12294_out_ptr) + (idx1) * bmlocal12296_element_size_bytes );\
	out_bitoff = bmlocal12295_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12297_element_size_bits );\
}

// COMPOSITE: Full name: 'RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12298_parent_out_ptr;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12298_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12298_parent_out_ptr;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12299_tmp_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal12299_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12299_tmp_bitoff);\
}

// Alignment of RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12300_my_ptr;\
	UINT bmlocal12301_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12300_my_ptr, bmlocal12301_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12300_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12300_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12300_my_ptr, bmlocal12301_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12302_my_ptr;\
	UINT bmlocal12303_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12302_my_ptr, bmlocal12303_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12302_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12302_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12302_my_ptr, bmlocal12303_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12304_out_val;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, idx1, bmlocal12304_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12304_out_val), "%d", 1);\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12305_my_ptr;\
	UINT bmlocal12306_my_bitoff;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal12305_my_ptr, bmlocal12306_my_bitoff );\
	(*((UINT8*)bmlocal12305_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12306_my_bitoff );\
}

// RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12307_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12307_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12307_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_BYTES_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12310_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12310_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12310_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BYTES_CELL_SIZE 1

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12311_dim_size0;\
	UINT bmlocal12312_idx0;\
	bmlocal12311_dim_size0 = 176;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	for( bmlocal12312_idx0=0; bmlocal12312_idx0<bmlocal12311_dim_size0; bmlocal12312_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12312_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12312_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12313_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12313_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12313_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_BYTES_SIZE 176

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12314_tmp_bytes = 0;\
	UINT bmlocal12315_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, bmlocal12314_tmp_bytes, bmlocal12315_tmp_bits );\
	out_bytes += bmlocal12314_tmp_bytes;\
	out_bits += bmlocal12315_tmp_bits;\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12316_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12316_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12316_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_BYTES_SIZE 176

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 280;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12319_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12319_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12319_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_BYTES_SIZE 280

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SpLock", 1);\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_SpLock_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_RadioModuleMember_WmxRadioModuleList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 664;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12322_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12322_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12322_tmp_bits );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_BYTES_CELL_SIZE 664

#define BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12323_dim_size0;\
	UINT bmlocal12324_idx0;\
	{\
		UINT32 bmlocal12325_var0;\
		BM_RadioModuleMember_LenOfRadioModule_GET( base_ptr, bmlocal12325_var0 );\
		bmlocal12323_dim_size0 = (UINT)(bmlocal12325_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "WmxRadioModuleList", 1);\
	for( bmlocal12324_idx0=0; bmlocal12324_idx0<bmlocal12323_dim_size0; bmlocal12324_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12324_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, bmlocal12324_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RadioModuleMember_WmxRadioModuleList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12326_tmp_bits;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_SIZE( base_ptr, out_bytes, bmlocal12326_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12326_tmp_bits );\
}


#define BM_RadioModuleMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12327_tmp_bytes = 0;\
	UINT bmlocal12328_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_RadioModuleMember_WmxRadioModuleList_GET_SIZE( base_ptr, bmlocal12327_tmp_bytes, bmlocal12328_tmp_bits );\
	out_bytes += bmlocal12327_tmp_bytes;\
	out_bits += bmlocal12328_tmp_bits;\
}

#define BM_RadioModuleMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12329_tmp_bits;\
	BM_RadioModuleMember_GET_SIZE( base_ptr, out_bytes, bmlocal12329_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12329_tmp_bits );\
}

#define BM_RadioModuleMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RadioModuleMember", 1);\
	BM_RadioModuleMember_LenOfRadioModule_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_RadioModuleMember_WmxRadioModuleList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RadioModuleMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RadioModuleMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 staticTermEquipMember[320];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_fwVersionMember _fwVersion;
	BMS_swVersionMember _swVersion;
	BMS_hwVersionMember _hwVersion;
	BMS_manufacturerMember _manufacturer;
	BMS_modelMember _model;
} BMS_staticTermEquipMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_modelMember _model;
	BMS_manufacturerMember _manufacturer;
	BMS_hwVersionMember _hwVersion;
	BMS_swVersionMember _swVersion;
	BMS_fwVersionMember _fwVersion;
} BMS_staticTermEquipMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'staticTermEquipMember' Type: 'staticTermEquipMember', Top-level, Non-instance, No bitoff root
#define BM_staticTermEquipMember_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_staticTermEquipMember_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12330_tmp_bitoff;\
	BM_staticTermEquipMember_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal12330_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12330_tmp_bitoff);\
}

#define BM_staticTermEquipMember_fwVersion_POS_ALIGNED 0

// COMPOSITE: Full name: 'staticTermEquipMember_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12331_parent_out_ptr;\
	BM_staticTermEquipMember_fwVersion_GET_POS( base_ptr, bmlocal12331_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12331_parent_out_ptr;\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12332_tmp_bitoff;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal12332_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12332_tmp_bitoff);\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_POS_ALIGNED 0

// ARRAY: staticTermEquipMember_fwVersion_fwVersion
#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12333_out_ptr;\
	UINT bmlocal12334_out_bitoff;\
	UINT bmlocal12335_element_size_bytes;\
	UINT bmlocal12336_element_size_bits;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal12333_out_ptr, bmlocal12334_out_bitoff );\
	bmlocal12335_element_size_bytes = 1;\
	bmlocal12336_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12333_out_ptr) + (idx0) * bmlocal12335_element_size_bytes );\
	out_bitoff = bmlocal12334_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12336_element_size_bits );\
}

// COMPOSITE: Full name: 'staticTermEquipMember_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12337_parent_out_ptr;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12337_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12337_parent_out_ptr;\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12338_tmp_bitoff;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12338_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12338_tmp_bitoff);\
}

// Alignment of staticTermEquipMember_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12339_my_ptr;\
	UINT bmlocal12340_my_bitoff;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12339_my_ptr, bmlocal12340_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12339_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12339_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12339_my_ptr, bmlocal12340_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12341_my_ptr;\
	UINT bmlocal12342_my_bitoff;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12341_my_ptr, bmlocal12342_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12341_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12341_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12341_my_ptr, bmlocal12342_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// staticTermEquipMember_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// staticTermEquipMember_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12343_out_val;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal12343_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12343_out_val), "%d", 1);\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12344_my_ptr;\
	UINT bmlocal12345_my_bitoff;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12344_my_ptr, bmlocal12345_my_bitoff );\
	(*((UINT8*)bmlocal12344_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12345_my_bitoff );\
}

// staticTermEquipMember_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12346_tmp_bits;\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12346_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12346_tmp_bits );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12349_tmp_bits;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12349_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12349_tmp_bits );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12350_dim_size0;\
	UINT bmlocal12351_idx0;\
	bmlocal12350_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal12351_idx0=0; bmlocal12351_idx0<bmlocal12350_dim_size0; bmlocal12351_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12351_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12351_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12352_tmp_bits;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12352_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12352_tmp_bits );\
}

#define BM_staticTermEquipMember_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12353_tmp_bytes = 0;\
	UINT bmlocal12354_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_staticTermEquipMember_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal12353_tmp_bytes, bmlocal12354_tmp_bits );\
	out_bytes += bmlocal12353_tmp_bytes;\
	out_bits += bmlocal12354_tmp_bits;\
}

#define BM_staticTermEquipMember_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12355_tmp_bits;\
	BM_staticTermEquipMember_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12355_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12355_tmp_bits );\
}

#define BM_staticTermEquipMember_fwVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_staticTermEquipMember_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_staticTermEquipMember_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12358_acc_bytes;\
	UINT bmlocal12359_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12358_acc_bytes = 64;\
	bmlocal12359_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12358_acc_bytes );\
	out_bitoff += bmlocal12359_acc_bits;\
}

#define BM_staticTermEquipMember_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12360_tmp_bitoff;\
	BM_staticTermEquipMember_swVersion_GET_POS( base_ptr, out_ptr, bmlocal12360_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12360_tmp_bitoff);\
}

#define BM_staticTermEquipMember_swVersion_POS_ALIGNED 64

// COMPOSITE: Full name: 'staticTermEquipMember_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12361_parent_out_ptr;\
	BM_staticTermEquipMember_swVersion_GET_POS( base_ptr, bmlocal12361_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12361_parent_out_ptr;\
}

#define BM_staticTermEquipMember_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12362_tmp_bitoff;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal12362_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12362_tmp_bitoff);\
}

#define BM_staticTermEquipMember_swVersion_swVersion_POS_ALIGNED 64

// ARRAY: staticTermEquipMember_swVersion_swVersion
#define BM_staticTermEquipMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12363_out_ptr;\
	UINT bmlocal12364_out_bitoff;\
	UINT bmlocal12365_element_size_bytes;\
	UINT bmlocal12366_element_size_bits;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_POS( base_ptr, bmlocal12363_out_ptr, bmlocal12364_out_bitoff );\
	bmlocal12365_element_size_bytes = 1;\
	bmlocal12366_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12363_out_ptr) + (idx0) * bmlocal12365_element_size_bytes );\
	out_bitoff = bmlocal12364_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12366_element_size_bits );\
}

// COMPOSITE: Full name: 'staticTermEquipMember_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12367_parent_out_ptr;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12367_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12367_parent_out_ptr;\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12368_tmp_bitoff;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12368_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12368_tmp_bitoff);\
}

// Alignment of staticTermEquipMember_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12369_my_ptr;\
	UINT bmlocal12370_my_bitoff;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12369_my_ptr, bmlocal12370_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12369_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12369_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12369_my_ptr, bmlocal12370_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12371_my_ptr;\
	UINT bmlocal12372_my_bitoff;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12371_my_ptr, bmlocal12372_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12371_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12371_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12371_my_ptr, bmlocal12372_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// staticTermEquipMember_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// staticTermEquipMember_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12373_out_val;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal12373_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12373_out_val), "%d", 1);\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12374_my_ptr;\
	UINT bmlocal12375_my_bitoff;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12374_my_ptr, bmlocal12375_my_bitoff );\
	(*((UINT8*)bmlocal12374_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12375_my_bitoff );\
}

// staticTermEquipMember_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12376_tmp_bits;\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12376_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12376_tmp_bits );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_staticTermEquipMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12379_tmp_bits;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12379_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12379_tmp_bits );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12380_dim_size0;\
	UINT bmlocal12381_idx0;\
	bmlocal12380_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal12381_idx0=0; bmlocal12381_idx0<bmlocal12380_dim_size0; bmlocal12381_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12381_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12381_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12382_tmp_bits;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12382_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12382_tmp_bits );\
}

#define BM_staticTermEquipMember_swVersion_swVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12383_tmp_bytes = 0;\
	UINT bmlocal12384_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_staticTermEquipMember_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal12383_tmp_bytes, bmlocal12384_tmp_bits );\
	out_bytes += bmlocal12383_tmp_bytes;\
	out_bits += bmlocal12384_tmp_bits;\
}

#define BM_staticTermEquipMember_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12385_tmp_bits;\
	BM_staticTermEquipMember_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12385_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12385_tmp_bits );\
}

#define BM_staticTermEquipMember_swVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_staticTermEquipMember_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_staticTermEquipMember_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12388_acc_bytes;\
	UINT bmlocal12389_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12388_acc_bytes = 128;\
	bmlocal12389_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12388_acc_bytes );\
	out_bitoff += bmlocal12389_acc_bits;\
}

#define BM_staticTermEquipMember_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12390_tmp_bitoff;\
	BM_staticTermEquipMember_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal12390_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12390_tmp_bitoff);\
}

#define BM_staticTermEquipMember_hwVersion_POS_ALIGNED 128

// COMPOSITE: Full name: 'staticTermEquipMember_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12391_parent_out_ptr;\
	BM_staticTermEquipMember_hwVersion_GET_POS( base_ptr, bmlocal12391_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12391_parent_out_ptr;\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12392_tmp_bitoff;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal12392_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12392_tmp_bitoff);\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_POS_ALIGNED 128

// ARRAY: staticTermEquipMember_hwVersion_hwVersion
#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12393_out_ptr;\
	UINT bmlocal12394_out_bitoff;\
	UINT bmlocal12395_element_size_bytes;\
	UINT bmlocal12396_element_size_bits;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal12393_out_ptr, bmlocal12394_out_bitoff );\
	bmlocal12395_element_size_bytes = 1;\
	bmlocal12396_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12393_out_ptr) + (idx0) * bmlocal12395_element_size_bytes );\
	out_bitoff = bmlocal12394_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12396_element_size_bits );\
}

// COMPOSITE: Full name: 'staticTermEquipMember_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12397_parent_out_ptr;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12397_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12397_parent_out_ptr;\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12398_tmp_bitoff;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12398_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12398_tmp_bitoff);\
}

// Alignment of staticTermEquipMember_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12399_my_ptr;\
	UINT bmlocal12400_my_bitoff;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12399_my_ptr, bmlocal12400_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12399_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12399_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12399_my_ptr, bmlocal12400_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12401_my_ptr;\
	UINT bmlocal12402_my_bitoff;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12401_my_ptr, bmlocal12402_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12401_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12401_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12401_my_ptr, bmlocal12402_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// staticTermEquipMember_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// staticTermEquipMember_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12403_out_val;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal12403_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12403_out_val), "%d", 1);\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12404_my_ptr;\
	UINT bmlocal12405_my_bitoff;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12404_my_ptr, bmlocal12405_my_bitoff );\
	(*((UINT8*)bmlocal12404_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12405_my_bitoff );\
}

// staticTermEquipMember_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12406_tmp_bits;\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12406_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12406_tmp_bits );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12409_tmp_bits;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12409_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12409_tmp_bits );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12410_dim_size0;\
	UINT bmlocal12411_idx0;\
	bmlocal12410_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal12411_idx0=0; bmlocal12411_idx0<bmlocal12410_dim_size0; bmlocal12411_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12411_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12411_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12412_tmp_bits;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12412_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12412_tmp_bits );\
}

#define BM_staticTermEquipMember_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12413_tmp_bytes = 0;\
	UINT bmlocal12414_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_staticTermEquipMember_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal12413_tmp_bytes, bmlocal12414_tmp_bits );\
	out_bytes += bmlocal12413_tmp_bytes;\
	out_bits += bmlocal12414_tmp_bits;\
}

#define BM_staticTermEquipMember_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12415_tmp_bits;\
	BM_staticTermEquipMember_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12415_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12415_tmp_bits );\
}

#define BM_staticTermEquipMember_hwVersion_BYTES_SIZE 64

#define BM_staticTermEquipMember_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_staticTermEquipMember_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_staticTermEquipMember_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12418_acc_bytes;\
	UINT bmlocal12419_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12418_acc_bytes = 192;\
	bmlocal12419_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12418_acc_bytes );\
	out_bitoff += bmlocal12419_acc_bits;\
}

#define BM_staticTermEquipMember_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12420_tmp_bitoff;\
	BM_staticTermEquipMember_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal12420_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12420_tmp_bitoff);\
}

#define BM_staticTermEquipMember_manufacturer_POS_ALIGNED 192

// COMPOSITE: Full name: 'staticTermEquipMember_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12421_parent_out_ptr;\
	BM_staticTermEquipMember_manufacturer_GET_POS( base_ptr, bmlocal12421_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12421_parent_out_ptr;\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12422_tmp_bitoff;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal12422_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12422_tmp_bitoff);\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_POS_ALIGNED 192

// ARRAY: staticTermEquipMember_manufacturer_manufacturer
#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12423_out_ptr;\
	UINT bmlocal12424_out_bitoff;\
	UINT bmlocal12425_element_size_bytes;\
	UINT bmlocal12426_element_size_bits;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal12423_out_ptr, bmlocal12424_out_bitoff );\
	bmlocal12425_element_size_bytes = 1;\
	bmlocal12426_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12423_out_ptr) + (idx0) * bmlocal12425_element_size_bytes );\
	out_bitoff = bmlocal12424_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12426_element_size_bits );\
}

// COMPOSITE: Full name: 'staticTermEquipMember_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12427_parent_out_ptr;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12427_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12427_parent_out_ptr;\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12428_tmp_bitoff;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12428_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12428_tmp_bitoff);\
}

// Alignment of staticTermEquipMember_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12429_my_ptr;\
	UINT bmlocal12430_my_bitoff;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12429_my_ptr, bmlocal12430_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12429_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12429_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12429_my_ptr, bmlocal12430_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12431_my_ptr;\
	UINT bmlocal12432_my_bitoff;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12431_my_ptr, bmlocal12432_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12431_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12431_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12431_my_ptr, bmlocal12432_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// staticTermEquipMember_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// staticTermEquipMember_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12433_out_val;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal12433_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12433_out_val), "%d", 1);\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12434_my_ptr;\
	UINT bmlocal12435_my_bitoff;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12434_my_ptr, bmlocal12435_my_bitoff );\
	(*((UINT8*)bmlocal12434_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12435_my_bitoff );\
}

// staticTermEquipMember_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12436_tmp_bits;\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12436_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12436_tmp_bits );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12439_tmp_bits;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12439_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12439_tmp_bits );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12440_dim_size0;\
	UINT bmlocal12441_idx0;\
	bmlocal12440_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal12441_idx0=0; bmlocal12441_idx0<bmlocal12440_dim_size0; bmlocal12441_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12441_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal12441_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12442_tmp_bits;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal12442_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12442_tmp_bits );\
}

#define BM_staticTermEquipMember_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_staticTermEquipMember_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12443_tmp_bytes = 0;\
	UINT bmlocal12444_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_staticTermEquipMember_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal12443_tmp_bytes, bmlocal12444_tmp_bits );\
	out_bytes += bmlocal12443_tmp_bytes;\
	out_bits += bmlocal12444_tmp_bits;\
}

#define BM_staticTermEquipMember_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12445_tmp_bits;\
	BM_staticTermEquipMember_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal12445_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12445_tmp_bits );\
}

#define BM_staticTermEquipMember_manufacturer_BYTES_SIZE 64

#define BM_staticTermEquipMember_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_staticTermEquipMember_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_staticTermEquipMember_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12448_acc_bytes;\
	UINT bmlocal12449_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12448_acc_bytes = 256;\
	bmlocal12449_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12448_acc_bytes );\
	out_bitoff += bmlocal12449_acc_bits;\
}

#define BM_staticTermEquipMember_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12450_tmp_bitoff;\
	BM_staticTermEquipMember_model_GET_POS( base_ptr, out_ptr, bmlocal12450_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12450_tmp_bitoff);\
}

#define BM_staticTermEquipMember_model_POS_ALIGNED 256

// COMPOSITE: Full name: 'staticTermEquipMember_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12451_parent_out_ptr;\
	BM_staticTermEquipMember_model_GET_POS( base_ptr, bmlocal12451_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12451_parent_out_ptr;\
}

#define BM_staticTermEquipMember_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12452_tmp_bitoff;\
	BM_staticTermEquipMember_model_model_GET_POS( base_ptr, out_ptr, bmlocal12452_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12452_tmp_bitoff);\
}

#define BM_staticTermEquipMember_model_model_POS_ALIGNED 256

// ARRAY: staticTermEquipMember_model_model
#define BM_staticTermEquipMember_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12453_out_ptr;\
	UINT bmlocal12454_out_bitoff;\
	UINT bmlocal12455_element_size_bytes;\
	UINT bmlocal12456_element_size_bits;\
	BM_staticTermEquipMember_model_model_GET_POS( base_ptr, bmlocal12453_out_ptr, bmlocal12454_out_bitoff );\
	bmlocal12455_element_size_bytes = 1;\
	bmlocal12456_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12453_out_ptr) + (idx0) * bmlocal12455_element_size_bytes );\
	out_bitoff = bmlocal12454_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12456_element_size_bits );\
}

// COMPOSITE: Full name: 'staticTermEquipMember_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_staticTermEquipMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12457_parent_out_ptr;\
	BM_staticTermEquipMember_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12457_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12457_parent_out_ptr;\
}

#define BM_staticTermEquipMember_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12458_tmp_bitoff;\
	BM_staticTermEquipMember_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12458_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12458_tmp_bitoff);\
}

// Alignment of staticTermEquipMember_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_staticTermEquipMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12459_my_ptr;\
	UINT bmlocal12460_my_bitoff;\
	BM_staticTermEquipMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12459_my_ptr, bmlocal12460_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12459_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12459_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12459_my_ptr, bmlocal12460_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_staticTermEquipMember_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12461_my_ptr;\
	UINT bmlocal12462_my_bitoff;\
	BM_staticTermEquipMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12461_my_ptr, bmlocal12462_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12461_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12461_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12461_my_ptr, bmlocal12462_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// staticTermEquipMember_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// staticTermEquipMember_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// staticTermEquipMember_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// staticTermEquipMember_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_staticTermEquipMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12463_out_val;\
	BM_staticTermEquipMember_model_model_BufferByte_GET( base_ptr, idx0, bmlocal12463_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12463_out_val), "%d", 1);\
}

#define BM_staticTermEquipMember_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12464_my_ptr;\
	UINT bmlocal12465_my_bitoff;\
	BM_staticTermEquipMember_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12464_my_ptr, bmlocal12465_my_bitoff );\
	(*((UINT8*)bmlocal12464_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12465_my_bitoff );\
}

// staticTermEquipMember_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_staticTermEquipMember_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12466_tmp_bits;\
	BM_staticTermEquipMember_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12466_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12466_tmp_bits );\
}

#define BM_staticTermEquipMember_model_model_BufferByte_BYTES_SIZE 1

#define BM_staticTermEquipMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12469_tmp_bits;\
	BM_staticTermEquipMember_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12469_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12469_tmp_bits );\
}

#define BM_staticTermEquipMember_model_model_BYTES_CELL_SIZE 1

#define BM_staticTermEquipMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_staticTermEquipMember_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_staticTermEquipMember_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12470_dim_size0;\
	UINT bmlocal12471_idx0;\
	bmlocal12470_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal12471_idx0=0; bmlocal12471_idx0<bmlocal12470_dim_size0; bmlocal12471_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12471_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_staticTermEquipMember_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal12471_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_staticTermEquipMember_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12472_tmp_bits;\
	BM_staticTermEquipMember_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal12472_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12472_tmp_bits );\
}

#define BM_staticTermEquipMember_model_model_BYTES_SIZE 64

#define BM_staticTermEquipMember_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12473_tmp_bytes = 0;\
	UINT bmlocal12474_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_staticTermEquipMember_model_model_GET_SIZE( base_ptr, bmlocal12473_tmp_bytes, bmlocal12474_tmp_bits );\
	out_bytes += bmlocal12473_tmp_bytes;\
	out_bits += bmlocal12474_tmp_bits;\
}

#define BM_staticTermEquipMember_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12475_tmp_bits;\
	BM_staticTermEquipMember_model_GET_SIZE( base_ptr, out_bytes, bmlocal12475_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12475_tmp_bits );\
}

#define BM_staticTermEquipMember_model_BYTES_SIZE 64

#define BM_staticTermEquipMember_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_staticTermEquipMember_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_staticTermEquipMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 320;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12478_tmp_bits;\
	BM_staticTermEquipMember_GET_SIZE( base_ptr, out_bytes, bmlocal12478_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12478_tmp_bits );\
}

#define BM_staticTermEquipMember_BYTES_SIZE 320

#define BM_staticTermEquipMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "staticTermEquipMember", 1);\
	BM_staticTermEquipMember_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_staticTermEquipMember_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_staticTermEquipMember_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_staticTermEquipMember_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_staticTermEquipMember_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_staticTermEquipMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_staticTermEquipMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TerminalEquipmentMember[448];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_devTypeMember _devType;
	BMS_devIDMember _devID;
	BMS_staticTermEquipMember _staticTermEquip;
} BMS_TerminalEquipmentMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_staticTermEquipMember _staticTermEquip;
	BMS_devIDMember _devID;
	BMS_devTypeMember _devType;
} BMS_TerminalEquipmentMember;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TerminalEquipmentMember' Type: 'TerminalEquipmentMember', Top-level, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TerminalEquipmentMember_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12479_tmp_bitoff;\
	BM_TerminalEquipmentMember_devType_GET_POS( base_ptr, out_ptr, bmlocal12479_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12479_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_devType_POS_ALIGNED 0

// COMPOSITE: Full name: 'TerminalEquipmentMember_devType' Type: 'devTypeMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_devType_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12480_parent_out_ptr;\
	BM_TerminalEquipmentMember_devType_GET_POS( base_ptr, bmlocal12480_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12480_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_devType_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12481_tmp_bitoff;\
	BM_TerminalEquipmentMember_devType_devType_GET_POS( base_ptr, out_ptr, bmlocal12481_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12481_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_devType_devType_POS_ALIGNED 0

// ARRAY: TerminalEquipmentMember_devType_devType
#define BM_TerminalEquipmentMember_devType_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devType_devType_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12482_out_ptr;\
	UINT bmlocal12483_out_bitoff;\
	UINT bmlocal12484_element_size_bytes;\
	UINT bmlocal12485_element_size_bits;\
	BM_TerminalEquipmentMember_devType_devType_GET_POS( base_ptr, bmlocal12482_out_ptr, bmlocal12483_out_bitoff );\
	bmlocal12484_element_size_bytes = 1;\
	bmlocal12485_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12482_out_ptr) + (idx0) * bmlocal12484_element_size_bytes );\
	out_bitoff = bmlocal12483_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12485_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_devType_devType' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12486_parent_out_ptr;\
	BM_TerminalEquipmentMember_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12486_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12486_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12487_tmp_bitoff;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12487_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12487_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_devType_devType_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12488_my_ptr;\
	UINT bmlocal12489_my_bitoff;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal12488_my_ptr, bmlocal12489_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12488_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12488_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12488_my_ptr, bmlocal12489_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12490_my_ptr;\
	UINT bmlocal12491_my_bitoff;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal12490_my_ptr, bmlocal12491_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12490_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12490_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12490_my_ptr, bmlocal12491_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_devType_devType_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_devType_devType_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_devType_devType_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_devType_devType_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_devType_devType_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_devType_devType_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12492_out_val;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET( base_ptr, idx0, bmlocal12492_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12492_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12493_my_ptr;\
	UINT bmlocal12494_my_bitoff;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal12493_my_ptr, bmlocal12494_my_bitoff );\
	(*((UINT8*)bmlocal12493_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12494_my_bitoff );\
}

// TerminalEquipmentMember_devType_devType_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12495_tmp_bits;\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12495_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12495_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devType_devType_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12498_tmp_bits;\
	BM_TerminalEquipmentMember_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12498_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12498_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devType_devType_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12499_dim_size0;\
	UINT bmlocal12500_idx0;\
	bmlocal12499_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	for( bmlocal12500_idx0=0; bmlocal12500_idx0<bmlocal12499_dim_size0; bmlocal12500_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12500_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH_IDX( base_ptr, bmlocal12500_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devType_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_devType_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12501_tmp_bits;\
	BM_TerminalEquipmentMember_devType_devType_GET_SIZE( base_ptr, out_bytes, bmlocal12501_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12501_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devType_devType_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12502_tmp_bytes = 0;\
	UINT bmlocal12503_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_devType_devType_GET_SIZE( base_ptr, bmlocal12502_tmp_bytes, bmlocal12503_tmp_bits );\
	out_bytes += bmlocal12502_tmp_bytes;\
	out_bits += bmlocal12503_tmp_bits;\
}

#define BM_TerminalEquipmentMember_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12504_tmp_bits;\
	BM_TerminalEquipmentMember_devType_GET_SIZE( base_ptr, out_bytes, bmlocal12504_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12504_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devType_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	BM_TerminalEquipmentMember_devType_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devType_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12507_acc_bytes;\
	UINT bmlocal12508_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12507_acc_bytes = 64;\
	bmlocal12508_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12507_acc_bytes );\
	out_bitoff += bmlocal12508_acc_bits;\
}

#define BM_TerminalEquipmentMember_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12509_tmp_bitoff;\
	BM_TerminalEquipmentMember_devID_GET_POS( base_ptr, out_ptr, bmlocal12509_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12509_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_devID_POS_ALIGNED 64

// COMPOSITE: Full name: 'TerminalEquipmentMember_devID' Type: 'devIDMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_devID_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12510_parent_out_ptr;\
	BM_TerminalEquipmentMember_devID_GET_POS( base_ptr, bmlocal12510_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12510_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_devID_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12511_tmp_bitoff;\
	BM_TerminalEquipmentMember_devID_devID_GET_POS( base_ptr, out_ptr, bmlocal12511_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12511_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_devID_devID_POS_ALIGNED 64

// ARRAY: TerminalEquipmentMember_devID_devID
#define BM_TerminalEquipmentMember_devID_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devID_devID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12512_out_ptr;\
	UINT bmlocal12513_out_bitoff;\
	UINT bmlocal12514_element_size_bytes;\
	UINT bmlocal12515_element_size_bits;\
	BM_TerminalEquipmentMember_devID_devID_GET_POS( base_ptr, bmlocal12512_out_ptr, bmlocal12513_out_bitoff );\
	bmlocal12514_element_size_bytes = 1;\
	bmlocal12515_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12512_out_ptr) + (idx0) * bmlocal12514_element_size_bytes );\
	out_bitoff = bmlocal12513_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12515_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_devID_devID' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12516_parent_out_ptr;\
	BM_TerminalEquipmentMember_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12516_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12516_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12517_tmp_bitoff;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12517_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12517_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_devID_devID_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12518_my_ptr;\
	UINT bmlocal12519_my_bitoff;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal12518_my_ptr, bmlocal12519_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12518_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12518_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12518_my_ptr, bmlocal12519_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12520_my_ptr;\
	UINT bmlocal12521_my_bitoff;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal12520_my_ptr, bmlocal12521_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12520_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12520_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12520_my_ptr, bmlocal12521_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_devID_devID_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_devID_devID_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_devID_devID_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_devID_devID_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_devID_devID_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_devID_devID_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12522_out_val;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET( base_ptr, idx0, bmlocal12522_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12522_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12523_my_ptr;\
	UINT bmlocal12524_my_bitoff;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal12523_my_ptr, bmlocal12524_my_bitoff );\
	(*((UINT8*)bmlocal12523_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12524_my_bitoff );\
}

// TerminalEquipmentMember_devID_devID_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12525_tmp_bits;\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12525_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12525_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devID_devID_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12528_tmp_bits;\
	BM_TerminalEquipmentMember_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12528_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12528_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devID_devID_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12529_dim_size0;\
	UINT bmlocal12530_idx0;\
	bmlocal12529_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	for( bmlocal12530_idx0=0; bmlocal12530_idx0<bmlocal12529_dim_size0; bmlocal12530_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12530_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH_IDX( base_ptr, bmlocal12530_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devID_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_devID_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12531_tmp_bits;\
	BM_TerminalEquipmentMember_devID_devID_GET_SIZE( base_ptr, out_bytes, bmlocal12531_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12531_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devID_devID_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12532_tmp_bytes = 0;\
	UINT bmlocal12533_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_devID_devID_GET_SIZE( base_ptr, bmlocal12532_tmp_bytes, bmlocal12533_tmp_bits );\
	out_bytes += bmlocal12532_tmp_bytes;\
	out_bits += bmlocal12533_tmp_bits;\
}

#define BM_TerminalEquipmentMember_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12534_tmp_bits;\
	BM_TerminalEquipmentMember_devID_GET_SIZE( base_ptr, out_bytes, bmlocal12534_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12534_tmp_bits );\
}

#define BM_TerminalEquipmentMember_devID_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	BM_TerminalEquipmentMember_devID_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_devID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12537_acc_bytes;\
	UINT bmlocal12538_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12537_acc_bytes = 128;\
	bmlocal12538_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12537_acc_bytes );\
	out_bitoff += bmlocal12538_acc_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12539_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, out_ptr, bmlocal12539_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12539_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_POS_ALIGNED 128

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip' Type: 'staticTermEquipMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12540_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, bmlocal12540_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12540_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12541_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal12541_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12541_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_POS_ALIGNED 128

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12542_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_POS( base_ptr, bmlocal12542_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12542_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12543_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal12543_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12543_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_POS_ALIGNED 128

// ARRAY: TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12544_out_ptr;\
	UINT bmlocal12545_out_bitoff;\
	UINT bmlocal12546_element_size_bytes;\
	UINT bmlocal12547_element_size_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal12544_out_ptr, bmlocal12545_out_bitoff );\
	bmlocal12546_element_size_bytes = 1;\
	bmlocal12547_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12544_out_ptr) + (idx0) * bmlocal12546_element_size_bytes );\
	out_bitoff = bmlocal12545_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12547_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12548_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12548_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12548_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12549_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12549_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12549_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12550_my_ptr;\
	UINT bmlocal12551_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12550_my_ptr, bmlocal12551_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12550_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12550_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12550_my_ptr, bmlocal12551_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12552_my_ptr;\
	UINT bmlocal12553_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12552_my_ptr, bmlocal12553_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12552_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12552_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12552_my_ptr, bmlocal12553_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12554_out_val;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal12554_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12554_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12555_my_ptr;\
	UINT bmlocal12556_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12555_my_ptr, bmlocal12556_my_bitoff );\
	(*((UINT8*)bmlocal12555_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12556_my_bitoff );\
}

// TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12557_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12557_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12557_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12560_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12560_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12560_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12561_dim_size0;\
	UINT bmlocal12562_idx0;\
	bmlocal12561_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal12562_idx0=0; bmlocal12562_idx0<bmlocal12561_dim_size0; bmlocal12562_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12562_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12562_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12563_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12563_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12563_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12564_tmp_bytes = 0;\
	UINT bmlocal12565_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal12564_tmp_bytes, bmlocal12565_tmp_bits );\
	out_bytes += bmlocal12564_tmp_bytes;\
	out_bits += bmlocal12565_tmp_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12566_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12566_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12566_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12569_acc_bytes;\
	UINT bmlocal12570_acc_bits;\
	PVOID bmlocal12571_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, bmlocal12571_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12571_parent_out_ptr;\
	bmlocal12569_acc_bytes = 64;\
	bmlocal12570_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12569_acc_bytes );\
	out_bitoff += bmlocal12570_acc_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12572_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_POS( base_ptr, out_ptr, bmlocal12572_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12572_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_POS_ALIGNED 192

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12573_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_POS( base_ptr, bmlocal12573_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12573_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12574_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal12574_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12574_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_POS_ALIGNED 192

// ARRAY: TerminalEquipmentMember_staticTermEquip_swVersion_swVersion
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12575_out_ptr;\
	UINT bmlocal12576_out_bitoff;\
	UINT bmlocal12577_element_size_bytes;\
	UINT bmlocal12578_element_size_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, bmlocal12575_out_ptr, bmlocal12576_out_bitoff );\
	bmlocal12577_element_size_bytes = 1;\
	bmlocal12578_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12575_out_ptr) + (idx0) * bmlocal12577_element_size_bytes );\
	out_bitoff = bmlocal12576_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12578_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12579_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12579_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12579_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12580_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12580_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12580_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12581_my_ptr;\
	UINT bmlocal12582_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12581_my_ptr, bmlocal12582_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12581_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12581_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12581_my_ptr, bmlocal12582_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12583_my_ptr;\
	UINT bmlocal12584_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12583_my_ptr, bmlocal12584_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12583_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12583_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12583_my_ptr, bmlocal12584_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12585_out_val;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal12585_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12585_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12586_my_ptr;\
	UINT bmlocal12587_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12586_my_ptr, bmlocal12587_my_bitoff );\
	(*((UINT8*)bmlocal12586_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12587_my_bitoff );\
}

// TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12588_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12588_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12588_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12591_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12591_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12591_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12592_dim_size0;\
	UINT bmlocal12593_idx0;\
	bmlocal12592_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal12593_idx0=0; bmlocal12593_idx0<bmlocal12592_dim_size0; bmlocal12593_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12593_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12593_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12594_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12594_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12594_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12595_tmp_bytes = 0;\
	UINT bmlocal12596_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal12595_tmp_bytes, bmlocal12596_tmp_bits );\
	out_bytes += bmlocal12595_tmp_bytes;\
	out_bits += bmlocal12596_tmp_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12597_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12597_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12597_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12600_acc_bytes;\
	UINT bmlocal12601_acc_bits;\
	PVOID bmlocal12602_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, bmlocal12602_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12602_parent_out_ptr;\
	bmlocal12600_acc_bytes = 128;\
	bmlocal12601_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12600_acc_bytes );\
	out_bitoff += bmlocal12601_acc_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12603_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal12603_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12603_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_POS_ALIGNED 256

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12604_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_POS( base_ptr, bmlocal12604_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12604_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12605_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal12605_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12605_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_POS_ALIGNED 256

// ARRAY: TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12606_out_ptr;\
	UINT bmlocal12607_out_bitoff;\
	UINT bmlocal12608_element_size_bytes;\
	UINT bmlocal12609_element_size_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal12606_out_ptr, bmlocal12607_out_bitoff );\
	bmlocal12608_element_size_bytes = 1;\
	bmlocal12609_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12606_out_ptr) + (idx0) * bmlocal12608_element_size_bytes );\
	out_bitoff = bmlocal12607_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12609_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12610_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12610_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12610_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12611_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12611_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12611_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12612_my_ptr;\
	UINT bmlocal12613_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12612_my_ptr, bmlocal12613_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12612_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12612_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12612_my_ptr, bmlocal12613_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12614_my_ptr;\
	UINT bmlocal12615_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12614_my_ptr, bmlocal12615_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12614_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12614_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12614_my_ptr, bmlocal12615_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12616_out_val;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal12616_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12616_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12617_my_ptr;\
	UINT bmlocal12618_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal12617_my_ptr, bmlocal12618_my_bitoff );\
	(*((UINT8*)bmlocal12617_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12618_my_bitoff );\
}

// TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12619_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12619_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12619_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12622_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12622_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12622_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12623_dim_size0;\
	UINT bmlocal12624_idx0;\
	bmlocal12623_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal12624_idx0=0; bmlocal12624_idx0<bmlocal12623_dim_size0; bmlocal12624_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12624_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal12624_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12625_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12625_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12625_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12626_tmp_bytes = 0;\
	UINT bmlocal12627_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal12626_tmp_bytes, bmlocal12627_tmp_bits );\
	out_bytes += bmlocal12626_tmp_bytes;\
	out_bits += bmlocal12627_tmp_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12628_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal12628_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12628_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12631_acc_bytes;\
	UINT bmlocal12632_acc_bits;\
	PVOID bmlocal12633_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, bmlocal12633_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12633_parent_out_ptr;\
	bmlocal12631_acc_bytes = 192;\
	bmlocal12632_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12631_acc_bytes );\
	out_bitoff += bmlocal12632_acc_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12634_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal12634_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12634_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_POS_ALIGNED 320

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12635_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_POS( base_ptr, bmlocal12635_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12635_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12636_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal12636_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12636_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_POS_ALIGNED 320

// ARRAY: TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12637_out_ptr;\
	UINT bmlocal12638_out_bitoff;\
	UINT bmlocal12639_element_size_bytes;\
	UINT bmlocal12640_element_size_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal12637_out_ptr, bmlocal12638_out_bitoff );\
	bmlocal12639_element_size_bytes = 1;\
	bmlocal12640_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12637_out_ptr) + (idx0) * bmlocal12639_element_size_bytes );\
	out_bitoff = bmlocal12638_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12640_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12641_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12641_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12641_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12642_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12642_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12642_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12643_my_ptr;\
	UINT bmlocal12644_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12643_my_ptr, bmlocal12644_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12643_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12643_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12643_my_ptr, bmlocal12644_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12645_my_ptr;\
	UINT bmlocal12646_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12645_my_ptr, bmlocal12646_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12645_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12645_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12645_my_ptr, bmlocal12646_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12647_out_val;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal12647_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12647_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12648_my_ptr;\
	UINT bmlocal12649_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal12648_my_ptr, bmlocal12649_my_bitoff );\
	(*((UINT8*)bmlocal12648_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12649_my_bitoff );\
}

// TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12650_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12650_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12650_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12653_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12653_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12653_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12654_dim_size0;\
	UINT bmlocal12655_idx0;\
	bmlocal12654_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal12655_idx0=0; bmlocal12655_idx0<bmlocal12654_dim_size0; bmlocal12655_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12655_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal12655_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12656_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal12656_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12656_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12657_tmp_bytes = 0;\
	UINT bmlocal12658_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal12657_tmp_bytes, bmlocal12658_tmp_bits );\
	out_bytes += bmlocal12657_tmp_bytes;\
	out_bits += bmlocal12658_tmp_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12659_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal12659_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12659_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12662_acc_bytes;\
	UINT bmlocal12663_acc_bits;\
	PVOID bmlocal12664_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_POS( base_ptr, bmlocal12664_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12664_parent_out_ptr;\
	bmlocal12662_acc_bytes = 256;\
	bmlocal12663_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12662_acc_bytes );\
	out_bitoff += bmlocal12663_acc_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12665_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_GET_POS( base_ptr, out_ptr, bmlocal12665_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12665_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_POS_ALIGNED 384

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12666_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_model_GET_POS( base_ptr, bmlocal12666_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12666_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12667_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_POS( base_ptr, out_ptr, bmlocal12667_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12667_tmp_bitoff);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_POS_ALIGNED 384

// ARRAY: TerminalEquipmentMember_staticTermEquip_model_model
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12668_out_ptr;\
	UINT bmlocal12669_out_bitoff;\
	UINT bmlocal12670_element_size_bytes;\
	UINT bmlocal12671_element_size_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_POS( base_ptr, bmlocal12668_out_ptr, bmlocal12669_out_bitoff );\
	bmlocal12670_element_size_bytes = 1;\
	bmlocal12671_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12668_out_ptr) + (idx0) * bmlocal12670_element_size_bytes );\
	out_bitoff = bmlocal12669_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12671_element_size_bits );\
}

// COMPOSITE: Full name: 'TerminalEquipmentMember_staticTermEquip_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12672_parent_out_ptr;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12672_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12672_parent_out_ptr;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12673_tmp_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal12673_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12673_tmp_bitoff);\
}

// Alignment of TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12674_my_ptr;\
	UINT bmlocal12675_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12674_my_ptr, bmlocal12675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12674_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12674_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12674_my_ptr, bmlocal12675_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12676_my_ptr;\
	UINT bmlocal12677_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12676_my_ptr, bmlocal12677_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12676_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12676_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12676_my_ptr, bmlocal12677_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12678_out_val;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET( base_ptr, idx0, bmlocal12678_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal12678_out_val), "%d", 1);\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12679_my_ptr;\
	UINT bmlocal12680_my_bitoff;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal12679_my_ptr, bmlocal12680_my_bitoff );\
	(*((UINT8*)bmlocal12679_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12680_my_bitoff );\
}

// TerminalEquipmentMember_staticTermEquip_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12681_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12681_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12681_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_BYTES_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12684_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12684_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12684_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BYTES_CELL_SIZE 1

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12685_dim_size0;\
	UINT bmlocal12686_idx0;\
	bmlocal12685_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal12686_idx0=0; bmlocal12686_idx0<bmlocal12685_dim_size0; bmlocal12686_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12686_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal12686_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12687_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal12687_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12687_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_model_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12688_tmp_bytes = 0;\
	UINT bmlocal12689_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_GET_SIZE( base_ptr, bmlocal12688_tmp_bytes, bmlocal12689_tmp_bits );\
	out_bytes += bmlocal12688_tmp_bytes;\
	out_bits += bmlocal12689_tmp_bits;\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12690_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_model_GET_SIZE( base_ptr, out_bytes, bmlocal12690_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12690_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_BYTES_SIZE 64

#define BM_TerminalEquipmentMember_staticTermEquip_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_staticTermEquip_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 320;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12693_tmp_bits;\
	BM_TerminalEquipmentMember_staticTermEquip_GET_SIZE( base_ptr, out_bytes, bmlocal12693_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12693_tmp_bits );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_BYTES_SIZE 320

#define BM_TerminalEquipmentMember_staticTermEquip_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "staticTermEquip", 1);\
	BM_TerminalEquipmentMember_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_staticTermEquip_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_staticTermEquip_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_staticTermEquip_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TerminalEquipmentMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 448;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12696_tmp_bits;\
	BM_TerminalEquipmentMember_GET_SIZE( base_ptr, out_bytes, bmlocal12696_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12696_tmp_bits );\
}

#define BM_TerminalEquipmentMember_BYTES_SIZE 448

#define BM_TerminalEquipmentMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TerminalEquipmentMember", 1);\
	BM_TerminalEquipmentMember_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TerminalEquipmentMember_staticTermEquip_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TerminalEquipmentMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TerminalEquipmentMember_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SetScanParam[4];

// COMPOSITE: Full name: 'SetScanParam' Type: 'SetScanParam', Top-level, Non-instance, No bitoff root
#define BM_SetScanParam_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SetScanParam_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12697_tmp_bitoff;\
	BM_SetScanParam_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal12697_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12697_tmp_bitoff);\
}

#define BM_SetScanParam_NumOfChannels_POS_ALIGNED 0

// Alignment of SetScanParam_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12698_my_ptr;\
	UINT bmlocal12699_my_bitoff;\
	BM_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12698_my_ptr, bmlocal12699_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12698_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12698_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12698_my_ptr, bmlocal12699_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SetScanParam_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12700_my_ptr;\
	UINT bmlocal12701_my_bitoff;\
	BM_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12700_my_ptr, bmlocal12701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12700_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12700_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12700_my_ptr, bmlocal12701_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SetScanParam_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12702_out_val;\
	BM_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12702_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal12702_out_val), "%d", 1);\
}

#define BM_SetScanParam_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SetScanParam_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12703_my_ptr;\
	UINT bmlocal12704_my_bitoff;\
	BM_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12703_my_ptr, bmlocal12704_my_bitoff );\
	(*((UINT32*)bmlocal12703_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12704_my_bitoff );\
}

// SetScanParam_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12705_tmp_bits;\
	BM_SetScanParam_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal12705_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12705_tmp_bits );\
}

#define BM_SetScanParam_NumOfChannels_BYTES_SIZE 4

#define BM_SetScanParam_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12708_acc_bytes;\
	UINT bmlocal12709_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12708_acc_bytes = 4;\
	bmlocal12709_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12708_acc_bytes );\
	out_bitoff += bmlocal12709_acc_bits;\
}

#define BM_SetScanParam_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12710_tmp_bitoff;\
	BM_SetScanParam_Channels_GET_POS( base_ptr, out_ptr, bmlocal12710_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12710_tmp_bitoff);\
}

#define BM_SetScanParam_Channels_POS_ALIGNED 4

// ARRAY: SetScanParam_Channels
#define BM_SetScanParam_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal12711_var0;\
		BM_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12711_var0 );\
		out_bytes = (UINT)(24*(1*bmlocal12711_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal12712_var0;\
			BM_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12712_var0 );\
			out_element_count = (UINT)(bmlocal12712_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12713_out_ptr;\
	UINT bmlocal12714_out_bitoff;\
	UINT bmlocal12715_element_size_bytes;\
	UINT bmlocal12716_element_size_bits;\
	BM_SetScanParam_Channels_GET_POS( base_ptr, bmlocal12713_out_ptr, bmlocal12714_out_bitoff );\
	bmlocal12715_element_size_bytes = 24;\
	bmlocal12716_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12713_out_ptr) + (idx0) * bmlocal12715_element_size_bytes );\
	out_bitoff = bmlocal12714_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12716_element_size_bits );\
}

// COMPOSITE: Full name: 'SetScanParam_Channels' Type: 'ChannelInfoArray', Inner, Non-instance, No bitoff root
#define BM_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12717_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12717_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12717_parent_out_ptr;\
}

// Alignment of SetScanParam_Channels_Frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_Channels_Frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12718_my_ptr;\
	UINT bmlocal12719_my_bitoff;\
	BM_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12718_my_ptr, bmlocal12719_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12718_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12718_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12718_my_ptr, bmlocal12719_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SetScanParam_Channels_Frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12720_my_ptr;\
	UINT bmlocal12721_my_bitoff;\
	BM_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12720_my_ptr, bmlocal12721_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12720_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12720_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12720_my_ptr, bmlocal12721_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SetScanParam_Channels_Frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Frequency: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Frequency: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_Frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12722_out_val;\
	BM_SetScanParam_Channels_Frequency_GET( base_ptr, idx0, bmlocal12722_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Frequency", 32, (UINT)(bmlocal12722_out_val), "%d", 1);\
}

#define BM_SetScanParam_Channels_Frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_Frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12723_my_ptr;\
	UINT bmlocal12724_my_bitoff;\
	BM_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12723_my_ptr, bmlocal12724_my_bitoff );\
	(*((UINT32*)bmlocal12723_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12724_my_bitoff );\
}

// SetScanParam_Channels_Frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_Frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12725_tmp_bits;\
	BM_SetScanParam_Channels_Frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12725_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12725_tmp_bits );\
}

#define BM_SetScanParam_Channels_Frequency_BYTES_SIZE 4

#define BM_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12728_acc_bytes;\
	UINT bmlocal12729_acc_bits;\
	PVOID bmlocal12730_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12730_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12730_parent_out_ptr;\
	bmlocal12728_acc_bytes = 4;\
	bmlocal12729_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12728_acc_bytes );\
	out_bitoff += bmlocal12729_acc_bits;\
}

// Alignment of SetScanParam_Channels_ChannelId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_Channels_ChannelId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_ChannelId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12731_my_ptr;\
	UINT bmlocal12732_my_bitoff;\
	BM_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12731_my_ptr, bmlocal12732_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12731_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12731_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12731_my_ptr, bmlocal12732_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_SetScanParam_Channels_ChannelId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12733_my_ptr;\
	UINT bmlocal12734_my_bitoff;\
	BM_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12733_my_ptr, bmlocal12734_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12733_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12733_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12733_my_ptr, bmlocal12734_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// SetScanParam_Channels_ChannelId: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_ChannelId: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_ChannelId: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_ChannelId: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_ChannelId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_ChannelId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal12735_out_val;\
	BM_SetScanParam_Channels_ChannelId_GET( base_ptr, idx0, bmlocal12735_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ChannelId", 16, (UINT)(bmlocal12735_out_val), "%d", 1);\
}

#define BM_SetScanParam_Channels_ChannelId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_ChannelId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12736_my_ptr;\
	UINT bmlocal12737_my_bitoff;\
	BM_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12736_my_ptr, bmlocal12737_my_bitoff );\
	(*((UINT16*)bmlocal12736_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12737_my_bitoff );\
}

// SetScanParam_Channels_ChannelId: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_ChannelId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12738_tmp_bits;\
	BM_SetScanParam_Channels_ChannelId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12738_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12738_tmp_bits );\
}

#define BM_SetScanParam_Channels_ChannelId_BYTES_SIZE 2

#define BM_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12741_acc_bytes;\
	UINT bmlocal12742_acc_bits;\
	PVOID bmlocal12743_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12743_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12743_parent_out_ptr;\
	bmlocal12741_acc_bytes = 6;\
	bmlocal12742_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12741_acc_bytes );\
	out_bitoff += bmlocal12742_acc_bits;\
}

// Alignment of SetScanParam_Channels_Bandwidth: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_Channels_Bandwidth_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Bandwidth_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12744_my_ptr;\
	UINT bmlocal12745_my_bitoff;\
	BM_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12744_my_ptr, bmlocal12745_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12744_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12744_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12744_my_ptr, bmlocal12745_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_SetScanParam_Channels_Bandwidth_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12746_my_ptr;\
	UINT bmlocal12747_my_bitoff;\
	BM_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12746_my_ptr, bmlocal12747_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12746_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12746_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12746_my_ptr, bmlocal12747_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// SetScanParam_Channels_Bandwidth: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Bandwidth: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Bandwidth: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Bandwidth: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Bandwidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_Bandwidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12748_out_val;\
	BM_SetScanParam_Channels_Bandwidth_GET( base_ptr, idx0, bmlocal12748_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bandwidth", 8, (UINT)(bmlocal12748_out_val), "%d", 1);\
}

#define BM_SetScanParam_Channels_Bandwidth_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_Bandwidth_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12749_my_ptr;\
	UINT bmlocal12750_my_bitoff;\
	BM_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12749_my_ptr, bmlocal12750_my_bitoff );\
	(*((UINT8*)bmlocal12749_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12750_my_bitoff );\
}

// SetScanParam_Channels_Bandwidth: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_Bandwidth_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12751_tmp_bits;\
	BM_SetScanParam_Channels_Bandwidth_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12751_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12751_tmp_bits );\
}

#define BM_SetScanParam_Channels_Bandwidth_BYTES_SIZE 1

#define BM_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12754_acc_bytes;\
	UINT bmlocal12755_acc_bits;\
	PVOID bmlocal12756_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12756_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12756_parent_out_ptr;\
	bmlocal12754_acc_bytes = 7;\
	bmlocal12755_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12754_acc_bytes );\
	out_bitoff += bmlocal12755_acc_bits;\
}

// Alignment of SetScanParam_Channels_Fft: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_Channels_Fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12757_my_ptr;\
	UINT bmlocal12758_my_bitoff;\
	BM_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12757_my_ptr, bmlocal12758_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12757_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12757_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12757_my_ptr, bmlocal12758_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_SetScanParam_Channels_Fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12759_my_ptr;\
	UINT bmlocal12760_my_bitoff;\
	BM_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12759_my_ptr, bmlocal12760_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12759_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12759_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12759_my_ptr, bmlocal12760_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// SetScanParam_Channels_Fft: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Fft: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Fft: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Fft: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_Fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12761_out_val;\
	BM_SetScanParam_Channels_Fft_GET( base_ptr, idx0, bmlocal12761_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Fft", 8, (UINT)(bmlocal12761_out_val), "%d", 1);\
}

#define BM_SetScanParam_Channels_Fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_Fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12762_my_ptr;\
	UINT bmlocal12763_my_bitoff;\
	BM_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12762_my_ptr, bmlocal12763_my_bitoff );\
	(*((UINT8*)bmlocal12762_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12763_my_bitoff );\
}

// SetScanParam_Channels_Fft: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_Fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12764_tmp_bits;\
	BM_SetScanParam_Channels_Fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12764_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12764_tmp_bits );\
}

#define BM_SetScanParam_Channels_Fft_BYTES_SIZE 1

#define BM_SetScanParam_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12767_acc_bytes;\
	UINT bmlocal12768_acc_bits;\
	PVOID bmlocal12769_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12769_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12769_parent_out_ptr;\
	bmlocal12767_acc_bytes = 8;\
	bmlocal12768_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12767_acc_bytes );\
	out_bitoff += bmlocal12768_acc_bits;\
}

// ARRAY: SetScanParam_Channels_Preambles
#define BM_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12770_out_ptr;\
	UINT bmlocal12771_out_bitoff;\
	UINT bmlocal12772_element_size_bytes;\
	UINT bmlocal12773_element_size_bits;\
	BM_SetScanParam_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal12770_out_ptr, bmlocal12771_out_bitoff );\
	bmlocal12772_element_size_bytes = 1;\
	bmlocal12773_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12770_out_ptr) + (idx1) * bmlocal12772_element_size_bytes );\
	out_bitoff = bmlocal12771_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12773_element_size_bits );\
}

// COMPOSITE: Full name: 'SetScanParam_Channels_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12774_parent_out_ptr;\
	BM_SetScanParam_Channels_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12774_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12774_parent_out_ptr;\
}

// Alignment of SetScanParam_Channels_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_SetScanParam_Channels_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_SetScanParam_Channels_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12775_my_ptr;\
	UINT bmlocal12776_my_bitoff;\
	BM_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12775_my_ptr, bmlocal12776_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12775_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12775_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12775_my_ptr, bmlocal12776_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_SetScanParam_Channels_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12777_my_ptr;\
	UINT bmlocal12778_my_bitoff;\
	BM_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12777_my_ptr, bmlocal12778_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12777_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12777_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12777_my_ptr, bmlocal12778_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// SetScanParam_Channels_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12779_out_val;\
	BM_SetScanParam_Channels_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal12779_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal12779_out_val), "%u", 1);\
}

#define BM_SetScanParam_Channels_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_SetScanParam_Channels_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12780_my_ptr;\
	UINT bmlocal12781_my_bitoff;\
	BM_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12780_my_ptr, bmlocal12781_my_bitoff );\
	(*((UINT8*)bmlocal12780_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12781_my_bitoff );\
}

// SetScanParam_Channels_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12782_tmp_bits;\
	BM_SetScanParam_Channels_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12782_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12782_tmp_bits );\
}

#define BM_SetScanParam_Channels_Preambles_value_BYTES_SIZE 1

#define BM_SetScanParam_Channels_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_SetScanParam_Channels_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12785_tmp_bits;\
	BM_SetScanParam_Channels_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12785_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12785_tmp_bits );\
}

#define BM_SetScanParam_Channels_Preambles_BYTES_CELL_SIZE 1

#define BM_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_SetScanParam_Channels_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12786_dim_size0;\
	UINT bmlocal12787_idx0;\
	bmlocal12786_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal12787_idx0=0; bmlocal12787_idx0<bmlocal12786_dim_size0; bmlocal12787_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12787_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12787_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12788_tmp_bits;\
	BM_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12788_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12788_tmp_bits );\
}

#define BM_SetScanParam_Channels_Preambles_BYTES_SIZE 15

#define BM_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12789_tmp_bytes = 0;\
	UINT bmlocal12790_tmp_bits = 0;\
	UINT bmlocal12791_acc_bytes;\
	UINT bmlocal12792_acc_bits;\
	PVOID bmlocal12793_parent_out_ptr;\
	BM_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12793_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12793_parent_out_ptr;\
	bmlocal12791_acc_bytes = 8;\
	bmlocal12792_acc_bits = 0;\
	BM_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, bmlocal12789_tmp_bytes, bmlocal12790_tmp_bits );\
	bmlocal12791_acc_bytes += bmlocal12789_tmp_bytes;\
	bmlocal12792_acc_bits += bmlocal12790_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12791_acc_bytes );\
	out_bitoff += bmlocal12792_acc_bits;\
}

// Alignment of SetScanParam_Channels_Reserved: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SetScanParam_Channels_Reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_Reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12794_my_ptr;\
	UINT bmlocal12795_my_bitoff;\
	BM_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12794_my_ptr, bmlocal12795_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12794_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12794_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12794_my_ptr, bmlocal12795_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_SetScanParam_Channels_Reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12796_my_ptr;\
	UINT bmlocal12797_my_bitoff;\
	BM_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12796_my_ptr, bmlocal12797_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12796_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12796_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12796_my_ptr, bmlocal12797_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// SetScanParam_Channels_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// SetScanParam_Channels_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// SetScanParam_Channels_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SetScanParam_Channels_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12798_out_val;\
	BM_SetScanParam_Channels_Reserved_GET( base_ptr, idx0, bmlocal12798_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 8, (UINT)(bmlocal12798_out_val), "%d", 1);\
}

#define BM_SetScanParam_Channels_Reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_Reserved_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12799_my_ptr;\
	UINT bmlocal12800_my_bitoff;\
	BM_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12799_my_ptr, bmlocal12800_my_bitoff );\
	(*((UINT8*)bmlocal12799_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12800_my_bitoff );\
}

// SetScanParam_Channels_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_SetScanParam_Channels_Reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12801_tmp_bits;\
	BM_SetScanParam_Channels_Reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12801_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12801_tmp_bits );\
}

#define BM_SetScanParam_Channels_Reserved_BYTES_SIZE 1

#define BM_SetScanParam_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12802_tmp_bytes = 0;\
	UINT bmlocal12803_tmp_bits = 0;\
	out_bytes = 9;\
	out_bits = 0;\
	BM_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, bmlocal12802_tmp_bytes, bmlocal12803_tmp_bits );\
	out_bytes += bmlocal12802_tmp_bytes;\
	out_bits += bmlocal12803_tmp_bits;\
}

#define BM_SetScanParam_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12804_tmp_bits;\
	BM_SetScanParam_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12804_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12804_tmp_bits );\
}

#define BM_SetScanParam_Channels_BYTES_CELL_SIZE 24

#define BM_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SetScanParam_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_SetScanParam_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12805_dim_size0;\
	UINT bmlocal12806_idx0;\
	{\
		UINT32 bmlocal12807_var0;\
		BM_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12807_var0 );\
		bmlocal12805_dim_size0 = (UINT)(bmlocal12807_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal12806_idx0=0; bmlocal12806_idx0<bmlocal12805_dim_size0; bmlocal12806_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12806_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal12806_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SetScanParam_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12808_tmp_bits;\
	BM_SetScanParam_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal12808_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12808_tmp_bits );\
}


#define BM_SetScanParam_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12809_tmp_bytes = 0;\
	UINT bmlocal12810_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_SetScanParam_Channels_GET_SIZE( base_ptr, bmlocal12809_tmp_bytes, bmlocal12810_tmp_bits );\
	out_bytes += bmlocal12809_tmp_bytes;\
	out_bits += bmlocal12810_tmp_bits;\
}

#define BM_SetScanParam_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12811_tmp_bits;\
	BM_SetScanParam_GET_SIZE( base_ptr, out_bytes, bmlocal12811_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12811_tmp_bits );\
}

#define BM_SetScanParam_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SetScanParam", 1);\
	BM_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SetScanParam_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SetScanParam_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SetScanParam_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MoniterScanConfig[4];

// COMPOSITE: Full name: 'MoniterScanConfig' Type: 'MoniterScanConfig', Top-level, Non-instance, No bitoff root
#define BM_MoniterScanConfig_SetScanParam_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MoniterScanConfig_SetScanParam_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12812_tmp_bitoff;\
	BM_MoniterScanConfig_SetScanParam_GET_POS( base_ptr, out_ptr, bmlocal12812_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12812_tmp_bitoff);\
}

#define BM_MoniterScanConfig_SetScanParam_POS_ALIGNED 0

// COMPOSITE: Full name: 'MoniterScanConfig_SetScanParam' Type: 'SetScanParam', Inner, Non-instance, No bitoff root
#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12813_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_GET_POS( base_ptr, bmlocal12813_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12813_parent_out_ptr;\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12814_tmp_bitoff;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal12814_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12814_tmp_bitoff);\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_POS_ALIGNED 0

// Alignment of MoniterScanConfig_SetScanParam_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12815_my_ptr;\
	UINT bmlocal12816_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12815_my_ptr, bmlocal12816_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12815_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12815_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12815_my_ptr, bmlocal12816_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12817_my_ptr;\
	UINT bmlocal12818_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12817_my_ptr, bmlocal12818_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12817_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12817_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12817_my_ptr, bmlocal12818_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MoniterScanConfig_SetScanParam_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12819_out_val;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12819_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal12819_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12820_my_ptr;\
	UINT bmlocal12821_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_POS( base_ptr, bmlocal12820_my_ptr, bmlocal12821_my_bitoff );\
	(*((UINT32*)bmlocal12820_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12821_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12822_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal12822_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12822_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_NumOfChannels_BYTES_SIZE 4

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12825_acc_bytes;\
	UINT bmlocal12826_acc_bits;\
	PVOID bmlocal12827_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_GET_POS( base_ptr, bmlocal12827_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12827_parent_out_ptr;\
	bmlocal12825_acc_bytes = 4;\
	bmlocal12826_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12825_acc_bytes );\
	out_bitoff += bmlocal12826_acc_bits;\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12828_tmp_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_POS( base_ptr, out_ptr, bmlocal12828_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12828_tmp_bitoff);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_POS_ALIGNED 4

// ARRAY: MoniterScanConfig_SetScanParam_Channels
#define BM_MoniterScanConfig_SetScanParam_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal12829_var0;\
		BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12829_var0 );\
		out_bytes = (UINT)(24*(1*bmlocal12829_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal12830_var0;\
			BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12830_var0 );\
			out_element_count = (UINT)(bmlocal12830_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12831_out_ptr;\
	UINT bmlocal12832_out_bitoff;\
	UINT bmlocal12833_element_size_bytes;\
	UINT bmlocal12834_element_size_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_POS( base_ptr, bmlocal12831_out_ptr, bmlocal12832_out_bitoff );\
	bmlocal12833_element_size_bytes = 24;\
	bmlocal12834_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12831_out_ptr) + (idx0) * bmlocal12833_element_size_bytes );\
	out_bitoff = bmlocal12832_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12834_element_size_bits );\
}

// COMPOSITE: Full name: 'MoniterScanConfig_SetScanParam_Channels' Type: 'ChannelInfoArray', Inner, Non-instance, No bitoff root
#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12835_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12835_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12835_parent_out_ptr;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_Frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12836_my_ptr;\
	UINT bmlocal12837_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12836_my_ptr, bmlocal12837_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12836_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12836_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12836_my_ptr, bmlocal12837_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12838_my_ptr;\
	UINT bmlocal12839_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12838_my_ptr, bmlocal12839_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12838_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12838_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12838_my_ptr, bmlocal12839_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_Frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Frequency: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Frequency: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_Frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12840_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET( base_ptr, idx0, bmlocal12840_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Frequency", 32, (UINT)(bmlocal12840_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12841_my_ptr;\
	UINT bmlocal12842_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_POS( base_ptr, idx0, bmlocal12841_my_ptr, bmlocal12842_my_bitoff );\
	(*((UINT32*)bmlocal12841_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12842_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_Frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12843_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12843_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12843_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Frequency_BYTES_SIZE 4

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12846_acc_bytes;\
	UINT bmlocal12847_acc_bits;\
	PVOID bmlocal12848_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12848_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12848_parent_out_ptr;\
	bmlocal12846_acc_bytes = 4;\
	bmlocal12847_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12846_acc_bytes );\
	out_bitoff += bmlocal12847_acc_bits;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_ChannelId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12849_my_ptr;\
	UINT bmlocal12850_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12849_my_ptr, bmlocal12850_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12849_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12849_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12849_my_ptr, bmlocal12850_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12851_my_ptr;\
	UINT bmlocal12852_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12851_my_ptr, bmlocal12852_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12851_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12851_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12851_my_ptr, bmlocal12852_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_ChannelId: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_ChannelId: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_ChannelId: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_ChannelId: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_ChannelId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_ChannelId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal12853_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET( base_ptr, idx0, bmlocal12853_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ChannelId", 16, (UINT)(bmlocal12853_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12854_my_ptr;\
	UINT bmlocal12855_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_POS( base_ptr, idx0, bmlocal12854_my_ptr, bmlocal12855_my_bitoff );\
	(*((UINT16*)bmlocal12854_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12855_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_ChannelId: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12856_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12856_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12856_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_BYTES_SIZE 2

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12859_acc_bytes;\
	UINT bmlocal12860_acc_bits;\
	PVOID bmlocal12861_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12861_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12861_parent_out_ptr;\
	bmlocal12859_acc_bytes = 6;\
	bmlocal12860_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12859_acc_bytes );\
	out_bitoff += bmlocal12860_acc_bits;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_Bandwidth: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12862_my_ptr;\
	UINT bmlocal12863_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12862_my_ptr, bmlocal12863_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12862_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12862_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12862_my_ptr, bmlocal12863_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12864_my_ptr;\
	UINT bmlocal12865_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12864_my_ptr, bmlocal12865_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12864_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12864_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12864_my_ptr, bmlocal12865_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_Bandwidth: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Bandwidth: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Bandwidth: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Bandwidth: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Bandwidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_Bandwidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12866_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET( base_ptr, idx0, bmlocal12866_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bandwidth", 8, (UINT)(bmlocal12866_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12867_my_ptr;\
	UINT bmlocal12868_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_POS( base_ptr, idx0, bmlocal12867_my_ptr, bmlocal12868_my_bitoff );\
	(*((UINT8*)bmlocal12867_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12868_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_Bandwidth: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12869_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12869_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12869_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_BYTES_SIZE 1

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12872_acc_bytes;\
	UINT bmlocal12873_acc_bits;\
	PVOID bmlocal12874_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12874_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12874_parent_out_ptr;\
	bmlocal12872_acc_bytes = 7;\
	bmlocal12873_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12872_acc_bytes );\
	out_bitoff += bmlocal12873_acc_bits;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_Fft: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12875_my_ptr;\
	UINT bmlocal12876_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12875_my_ptr, bmlocal12876_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12875_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12875_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12875_my_ptr, bmlocal12876_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12877_my_ptr;\
	UINT bmlocal12878_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12877_my_ptr, bmlocal12878_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12877_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12877_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12877_my_ptr, bmlocal12878_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_Fft: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Fft: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Fft: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Fft: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_Fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12879_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET( base_ptr, idx0, bmlocal12879_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Fft", 8, (UINT)(bmlocal12879_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12880_my_ptr;\
	UINT bmlocal12881_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_POS( base_ptr, idx0, bmlocal12880_my_ptr, bmlocal12881_my_bitoff );\
	(*((UINT8*)bmlocal12880_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12881_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_Fft: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12882_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12882_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12882_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Fft_BYTES_SIZE 1

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12885_acc_bytes;\
	UINT bmlocal12886_acc_bits;\
	PVOID bmlocal12887_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12887_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12887_parent_out_ptr;\
	bmlocal12885_acc_bytes = 8;\
	bmlocal12886_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12885_acc_bytes );\
	out_bitoff += bmlocal12886_acc_bits;\
}

// ARRAY: MoniterScanConfig_SetScanParam_Channels_Preambles
#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12888_out_ptr;\
	UINT bmlocal12889_out_bitoff;\
	UINT bmlocal12890_element_size_bytes;\
	UINT bmlocal12891_element_size_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal12888_out_ptr, bmlocal12889_out_bitoff );\
	bmlocal12890_element_size_bytes = 1;\
	bmlocal12891_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12888_out_ptr) + (idx1) * bmlocal12890_element_size_bytes );\
	out_bitoff = bmlocal12889_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12891_element_size_bits );\
}

// COMPOSITE: Full name: 'MoniterScanConfig_SetScanParam_Channels_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12892_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal12892_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12892_parent_out_ptr;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12893_my_ptr;\
	UINT bmlocal12894_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12893_my_ptr, bmlocal12894_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12893_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12893_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12893_my_ptr, bmlocal12894_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12895_my_ptr;\
	UINT bmlocal12896_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12895_my_ptr, bmlocal12896_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12895_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12895_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12895_my_ptr, bmlocal12896_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12897_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal12897_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal12897_out_val), "%u", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12898_my_ptr;\
	UINT bmlocal12899_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal12898_my_ptr, bmlocal12899_my_bitoff );\
	(*((UINT8*)bmlocal12898_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12899_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12900_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12900_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12900_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_BYTES_SIZE 1

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12903_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal12903_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12903_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_BYTES_CELL_SIZE 1

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12904_dim_size0;\
	UINT bmlocal12905_idx0;\
	bmlocal12904_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal12905_idx0=0; bmlocal12905_idx0<bmlocal12904_dim_size0; bmlocal12905_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12905_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal12905_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12906_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12906_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12906_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Preambles_BYTES_SIZE 15

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12907_tmp_bytes = 0;\
	UINT bmlocal12908_tmp_bits = 0;\
	UINT bmlocal12909_acc_bytes;\
	UINT bmlocal12910_acc_bits;\
	PVOID bmlocal12911_parent_out_ptr;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12911_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12911_parent_out_ptr;\
	bmlocal12909_acc_bytes = 8;\
	bmlocal12910_acc_bits = 0;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, bmlocal12907_tmp_bytes, bmlocal12908_tmp_bits );\
	bmlocal12909_acc_bytes += bmlocal12907_tmp_bytes;\
	bmlocal12910_acc_bits += bmlocal12908_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12909_acc_bytes );\
	out_bitoff += bmlocal12910_acc_bits;\
}

// Alignment of MoniterScanConfig_SetScanParam_Channels_Reserved: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12912_my_ptr;\
	UINT bmlocal12913_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12912_my_ptr, bmlocal12913_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12912_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12912_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12912_my_ptr, bmlocal12913_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12914_my_ptr;\
	UINT bmlocal12915_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12914_my_ptr, bmlocal12915_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12914_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12914_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12914_my_ptr, bmlocal12915_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MoniterScanConfig_SetScanParam_Channels_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// MoniterScanConfig_SetScanParam_Channels_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// MoniterScanConfig_SetScanParam_Channels_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MoniterScanConfig_SetScanParam_Channels_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal12916_out_val;\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET( base_ptr, idx0, bmlocal12916_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 8, (UINT)(bmlocal12916_out_val), "%d", 1);\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12917_my_ptr;\
	UINT bmlocal12918_my_bitoff;\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_POS( base_ptr, idx0, bmlocal12917_my_ptr, bmlocal12918_my_bitoff );\
	(*((UINT8*)bmlocal12917_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12918_my_bitoff );\
}

// MoniterScanConfig_SetScanParam_Channels_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12919_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12919_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12919_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_Reserved_BYTES_SIZE 1

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12920_tmp_bytes = 0;\
	UINT bmlocal12921_tmp_bits = 0;\
	out_bytes = 9;\
	out_bits = 0;\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_GET_SIZE( base_ptr, idx0, bmlocal12920_tmp_bytes, bmlocal12921_tmp_bits );\
	out_bytes += bmlocal12920_tmp_bytes;\
	out_bits += bmlocal12921_tmp_bits;\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12922_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12922_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12922_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_BYTES_CELL_SIZE 24

#define BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_Frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_ChannelId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_Bandwidth_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_Fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_Reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12923_dim_size0;\
	UINT bmlocal12924_idx0;\
	{\
		UINT32 bmlocal12925_var0;\
		BM_MoniterScanConfig_SetScanParam_NumOfChannels_GET( base_ptr, bmlocal12925_var0 );\
		bmlocal12923_dim_size0 = (UINT)(bmlocal12925_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal12924_idx0=0; bmlocal12924_idx0<bmlocal12923_dim_size0; bmlocal12924_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12924_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal12924_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MoniterScanConfig_SetScanParam_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12926_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal12926_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12926_tmp_bits );\
}


#define BM_MoniterScanConfig_SetScanParam_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12927_tmp_bytes = 0;\
	UINT bmlocal12928_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MoniterScanConfig_SetScanParam_Channels_GET_SIZE( base_ptr, bmlocal12927_tmp_bytes, bmlocal12928_tmp_bits );\
	out_bytes += bmlocal12927_tmp_bytes;\
	out_bits += bmlocal12928_tmp_bits;\
}

#define BM_MoniterScanConfig_SetScanParam_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12929_tmp_bits;\
	BM_MoniterScanConfig_SetScanParam_GET_SIZE( base_ptr, out_bytes, bmlocal12929_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12929_tmp_bits );\
}

#define BM_MoniterScanConfig_SetScanParam_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SetScanParam", 1);\
	BM_MoniterScanConfig_SetScanParam_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MoniterScanConfig_SetScanParam_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_SetScanParam_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_SetScanParam_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MoniterScanConfig_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12930_tmp_bytes = 0;\
	UINT bmlocal12931_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MoniterScanConfig_SetScanParam_GET_SIZE( base_ptr, bmlocal12930_tmp_bytes, bmlocal12931_tmp_bits );\
	out_bytes += bmlocal12930_tmp_bytes;\
	out_bits += bmlocal12931_tmp_bits;\
}

#define BM_MoniterScanConfig_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12932_tmp_bits;\
	BM_MoniterScanConfig_GET_SIZE( base_ptr, out_bytes, bmlocal12932_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12932_tmp_bits );\
}

#define BM_MoniterScanConfig_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MoniterScanConfig", 1);\
	BM_MoniterScanConfig_SetScanParam_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MoniterScanConfig_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MoniterScanConfig_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorScanResult[8];

// COMPOSITE: Full name: 'MonitorScanResult' Type: 'MonitorScanResult', Top-level, Non-instance, No bitoff root
#define BM_MonitorScanResult_AvailableNSPsIdlist_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12933_tmp_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_POS( base_ptr, out_ptr, bmlocal12933_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12933_tmp_bitoff);\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorScanResult_AvailableNSPsIdlist' Type: 'AvailableNSPsIdlist', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12934_parent_out_ptr;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_POS( base_ptr, bmlocal12934_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12934_parent_out_ptr;\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12935_tmp_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, out_ptr, bmlocal12935_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12935_tmp_bitoff);\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_POS_ALIGNED 0

// Alignment of MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12936_my_ptr;\
	UINT bmlocal12937_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal12936_my_ptr, bmlocal12937_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12936_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12936_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12936_my_ptr, bmlocal12937_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12938_my_ptr;\
	UINT bmlocal12939_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal12938_my_ptr, bmlocal12939_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12938_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12938_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12938_my_ptr, bmlocal12939_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12940_out_val;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal12940_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfNSPs", 32, (UINT)(bmlocal12940_out_val), "%d", 1);\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12941_my_ptr;\
	UINT bmlocal12942_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_POS( base_ptr, bmlocal12941_my_ptr, bmlocal12942_my_bitoff );\
	(*((UINT32*)bmlocal12941_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12942_my_bitoff );\
}

// MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12943_tmp_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET_SIZE( base_ptr, out_bytes, bmlocal12943_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12943_tmp_bits );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_BYTES_SIZE 4

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12946_acc_bytes;\
	UINT bmlocal12947_acc_bits;\
	PVOID bmlocal12948_parent_out_ptr;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_POS( base_ptr, bmlocal12948_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12948_parent_out_ptr;\
	bmlocal12946_acc_bytes = 4;\
	bmlocal12947_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12946_acc_bytes );\
	out_bitoff += bmlocal12947_acc_bits;\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12949_tmp_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, out_ptr, bmlocal12949_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12949_tmp_bitoff);\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_POS_ALIGNED 4

// ARRAY: MonitorScanResult_AvailableNSPsIdlist_NSPID
#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal12950_var0;\
		BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal12950_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal12950_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal12951_var0;\
			BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal12951_var0 );\
			out_element_count = (UINT)(bmlocal12951_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12952_out_ptr;\
	UINT bmlocal12953_out_bitoff;\
	UINT bmlocal12954_element_size_bytes;\
	UINT bmlocal12955_element_size_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_POS( base_ptr, bmlocal12952_out_ptr, bmlocal12953_out_bitoff );\
	bmlocal12954_element_size_bytes = 4;\
	bmlocal12955_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12952_out_ptr) + (idx0) * bmlocal12954_element_size_bytes );\
	out_bitoff = bmlocal12953_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal12955_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorScanResult_AvailableNSPsIdlist_NSPID' Type: 'Uint32', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12956_parent_out_ptr;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal12956_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12956_parent_out_ptr;\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12957_tmp_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, out_ptr, bmlocal12957_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12957_tmp_bitoff);\
}

// Alignment of MonitorScanResult_AvailableNSPsIdlist_NSPID_value: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12958_my_ptr;\
	UINT bmlocal12959_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal12958_my_ptr, bmlocal12959_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12958_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12958_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12958_my_ptr, bmlocal12959_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12960_my_ptr;\
	UINT bmlocal12961_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal12960_my_ptr, bmlocal12961_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12960_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal12960_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12960_my_ptr, bmlocal12961_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12962_out_val;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET( base_ptr, idx0, bmlocal12962_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 32, (UINT)(bmlocal12962_out_val), "%u", 1);\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12963_my_ptr;\
	UINT bmlocal12964_my_bitoff;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_POS( base_ptr, idx0, bmlocal12963_my_ptr, bmlocal12964_my_bitoff );\
	(*((UINT32*)bmlocal12963_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal12964_my_bitoff );\
}

// MonitorScanResult_AvailableNSPsIdlist_NSPID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12965_tmp_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal12965_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12965_tmp_bits );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_BYTES_SIZE 4

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12968_tmp_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal12968_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12968_tmp_bits );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_BYTES_CELL_SIZE 4

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal12969_dim_size0;\
	UINT bmlocal12970_idx0;\
	{\
		UINT32 bmlocal12971_var0;\
		BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_GET( base_ptr, bmlocal12971_var0 );\
		bmlocal12969_dim_size0 = (UINT)(bmlocal12971_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NSPID", 1);\
	for( bmlocal12970_idx0=0; bmlocal12970_idx0<bmlocal12969_dim_size0; bmlocal12970_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal12970_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH_IDX( base_ptr, bmlocal12970_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12972_tmp_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, out_bytes, bmlocal12972_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12972_tmp_bits );\
}


#define BM_MonitorScanResult_AvailableNSPsIdlist_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal12973_tmp_bytes = 0;\
	UINT bmlocal12974_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_GET_SIZE( base_ptr, bmlocal12973_tmp_bytes, bmlocal12974_tmp_bits );\
	out_bytes += bmlocal12973_tmp_bytes;\
	out_bits += bmlocal12974_tmp_bits;\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12975_tmp_bits;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_SIZE( base_ptr, out_bytes, bmlocal12975_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12975_tmp_bits );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AvailableNSPsIdlist", 1);\
	BM_MonitorScanResult_AvailableNSPsIdlist_NumOfNSPs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanResult_AvailableNSPsIdlist_NSPID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_AvailableNSPsIdlist_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_AvailableNSPsIdlist_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorScanResult_FullBSIDArr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12976_tmp_bytes = 0;\
	UINT bmlocal12977_tmp_bits = 0;\
	UINT bmlocal12978_acc_bytes;\
	UINT bmlocal12979_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal12978_acc_bytes = 0;\
	bmlocal12979_acc_bits = 0;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_SIZE( base_ptr, bmlocal12976_tmp_bytes, bmlocal12977_tmp_bits );\
	bmlocal12978_acc_bytes += bmlocal12976_tmp_bytes;\
	bmlocal12979_acc_bits += bmlocal12977_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12978_acc_bytes );\
	out_bitoff += bmlocal12979_acc_bits;\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr' Type: 'FullBSIDArr', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12980_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_GET_POS( base_ptr, bmlocal12980_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12980_parent_out_ptr;\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12981_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, out_ptr, bmlocal12981_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12981_tmp_bitoff);\
}

// Alignment of MonitorScanResult_FullBSIDArr_NumOfBSIDs: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12982_my_ptr;\
	UINT bmlocal12983_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, bmlocal12982_my_ptr, bmlocal12983_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal12982_my_ptr, bmlocal12983_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12984_my_ptr;\
	UINT bmlocal12985_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_POS( base_ptr, bmlocal12984_my_ptr, bmlocal12985_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal12984_my_ptr, bmlocal12985_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorScanResult_FullBSIDArr_NumOfBSIDs: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_NumOfBSIDs: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_NumOfBSIDs: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_NumOfBSIDs: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_NumOfBSIDs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_FullBSIDArr_NumOfBSIDs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12986_out_val;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal12986_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfBSIDs", 32, (UINT)(bmlocal12986_out_val), "%d", 1);\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal12987_val;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal12987_val );\
	(bmlocal12987_val)++;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_SET( base_ptr, bmlocal12987_val );\
}

// MonitorScanResult_FullBSIDArr_NumOfBSIDs: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal12988_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET_SIZE( base_ptr, out_bytes, bmlocal12988_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal12988_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_BYTES_SIZE 4

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal12991_acc_bytes;\
	UINT bmlocal12992_acc_bits;\
	PVOID bmlocal12993_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_GET_POS( base_ptr, bmlocal12993_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal12993_parent_out_ptr;\
	bmlocal12991_acc_bytes = 4;\
	bmlocal12992_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal12991_acc_bytes );\
	out_bitoff += bmlocal12992_acc_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal12994_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_POS( base_ptr, out_ptr, bmlocal12994_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal12994_tmp_bitoff);\
}

// ARRAY: MonitorScanResult_FullBSIDArr_FullBSID
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal12995_var0;\
		BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal12995_var0 );\
		out_bytes = (UINT)(16*(1*bmlocal12995_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal12996_var0;\
			BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal12996_var0 );\
			out_element_count = (UINT)(bmlocal12996_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal12997_out_ptr;\
	UINT bmlocal12998_out_bitoff;\
	UINT bmlocal12999_element_size_bytes;\
	UINT bmlocal13000_element_size_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_POS( base_ptr, bmlocal12997_out_ptr, bmlocal12998_out_bitoff );\
	bmlocal12999_element_size_bytes = 16;\
	bmlocal13000_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal12997_out_ptr) + (idx0) * bmlocal12999_element_size_bytes );\
	out_bitoff = bmlocal12998_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13000_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr_FullBSID' Type: 'FullBSID', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13001_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13001_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13001_parent_out_ptr;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13002_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, out_ptr, bmlocal13002_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13002_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr_FullBSID_bsID' Type: 'bsIDMember', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13003_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, bmlocal13003_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13003_parent_out_ptr;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13004_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, out_ptr, bmlocal13004_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13004_tmp_bitoff);\
}

// ARRAY: MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13005_out_ptr;\
	UINT bmlocal13006_out_bitoff;\
	UINT bmlocal13007_element_size_bytes;\
	UINT bmlocal13008_element_size_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_POS( base_ptr, idx0, bmlocal13005_out_ptr, bmlocal13006_out_bitoff );\
	bmlocal13007_element_size_bytes = 1;\
	bmlocal13008_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13005_out_ptr) + (idx1) * bmlocal13007_element_size_bytes );\
	out_bitoff = bmlocal13006_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13008_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13009_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal13009_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13009_parent_out_ptr;\
}

// Alignment of MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13010_my_ptr;\
	UINT bmlocal13011_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, bmlocal13010_my_ptr, bmlocal13011_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13010_my_ptr, bmlocal13011_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13012_my_ptr;\
	UINT bmlocal13013_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_POS( base_ptr, idx0, idx1, bmlocal13012_my_ptr, bmlocal13013_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13012_my_ptr, bmlocal13013_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13014_out_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, idx1, bmlocal13014_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13014_out_val), "%u", 1);\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13015_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET( base_ptr, idx0, idx1, bmlocal13015_val );\
	(bmlocal13015_val)++;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_SET( base_ptr, idx0, idx1, bmlocal13015_val );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13016_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13016_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13016_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_BYTES_SIZE 1

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13019_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13019_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13019_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_BYTES_CELL_SIZE 1

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13020_dim_size0;\
	UINT bmlocal13021_idx0;\
	bmlocal13020_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	for( bmlocal13021_idx0=0; bmlocal13021_idx0<bmlocal13020_dim_size0; bmlocal13021_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13021_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal13021_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13022_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13022_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13022_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_BYTES_SIZE 6

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13023_tmp_bytes = 0;\
	UINT bmlocal13024_tmp_bits = 0;\
	UINT bmlocal13025_acc_bytes;\
	UINT bmlocal13026_acc_bits;\
	PVOID bmlocal13027_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_POS( base_ptr, idx0, bmlocal13027_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13027_parent_out_ptr;\
	bmlocal13025_acc_bytes = 0;\
	bmlocal13026_acc_bits = 0;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, bmlocal13023_tmp_bytes, bmlocal13024_tmp_bits );\
	bmlocal13025_acc_bytes += bmlocal13023_tmp_bytes;\
	bmlocal13026_acc_bits += bmlocal13024_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13025_acc_bytes );\
	out_bitoff += bmlocal13026_acc_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13028_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, bmlocal13028_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13028_tmp_bitoff);\
}

// Alignment of MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13029_my_ptr;\
	UINT bmlocal13030_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, bmlocal13029_my_ptr, bmlocal13030_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13029_my_ptr, bmlocal13030_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13031_my_ptr;\
	UINT bmlocal13032_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_POS( base_ptr, idx0, bmlocal13031_my_ptr, bmlocal13032_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13031_my_ptr, bmlocal13032_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13033_out_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET( base_ptr, idx0, bmlocal13033_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal13033_out_val), "%d", 1);\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13034_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET( base_ptr, idx0, bmlocal13034_val );\
	(bmlocal13034_val)++;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_SET( base_ptr, idx0, bmlocal13034_val );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13035_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13035_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13035_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_BYTES_SIZE 2

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13036_tmp_bytes = 0;\
	UINT bmlocal13037_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_GET_SIZE( base_ptr, idx0, bmlocal13036_tmp_bytes, bmlocal13037_tmp_bits );\
	out_bytes += bmlocal13036_tmp_bytes;\
	out_bits += bmlocal13037_tmp_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13038_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13038_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13038_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_BYTES_SIZE 8

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_bsID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_Reserved_2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13041_acc_bytes;\
	UINT bmlocal13042_acc_bits;\
	PVOID bmlocal13043_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13043_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13043_parent_out_ptr;\
	bmlocal13041_acc_bytes = 8;\
	bmlocal13042_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13041_acc_bytes );\
	out_bitoff += bmlocal13042_acc_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13044_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, bmlocal13044_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13044_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask' Type: 'bsIDmaskMember', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13045_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, bmlocal13045_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13045_parent_out_ptr;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13046_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, out_ptr, bmlocal13046_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13046_tmp_bitoff);\
}

// ARRAY: MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13047_out_ptr;\
	UINT bmlocal13048_out_bitoff;\
	UINT bmlocal13049_element_size_bytes;\
	UINT bmlocal13050_element_size_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_POS( base_ptr, idx0, bmlocal13047_out_ptr, bmlocal13048_out_bitoff );\
	bmlocal13049_element_size_bytes = 1;\
	bmlocal13050_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13047_out_ptr) + (idx1) * bmlocal13049_element_size_bytes );\
	out_bitoff = bmlocal13048_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13050_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13051_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal13051_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13051_parent_out_ptr;\
}

// Alignment of MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13052_my_ptr;\
	UINT bmlocal13053_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, bmlocal13052_my_ptr, bmlocal13053_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13052_my_ptr, bmlocal13053_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13054_my_ptr;\
	UINT bmlocal13055_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_POS( base_ptr, idx0, idx1, bmlocal13054_my_ptr, bmlocal13055_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13054_my_ptr, bmlocal13055_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13056_out_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, idx1, bmlocal13056_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13056_out_val), "%u", 1);\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13057_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET( base_ptr, idx0, idx1, bmlocal13057_val );\
	(bmlocal13057_val)++;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_SET( base_ptr, idx0, idx1, bmlocal13057_val );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13058_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13058_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13058_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_BYTES_SIZE 1

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13061_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13061_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13061_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_BYTES_CELL_SIZE 1

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13062_dim_size0;\
	UINT bmlocal13063_idx0;\
	bmlocal13062_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	for( bmlocal13063_idx0=0; bmlocal13063_idx0<bmlocal13062_dim_size0; bmlocal13063_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13063_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal13063_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13064_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13064_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13064_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_BYTES_SIZE 6

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13065_tmp_bytes = 0;\
	UINT bmlocal13066_tmp_bits = 0;\
	UINT bmlocal13067_acc_bytes;\
	UINT bmlocal13068_acc_bits;\
	PVOID bmlocal13069_parent_out_ptr;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_POS( base_ptr, idx0, bmlocal13069_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13069_parent_out_ptr;\
	bmlocal13067_acc_bytes = 0;\
	bmlocal13068_acc_bits = 0;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, bmlocal13065_tmp_bytes, bmlocal13066_tmp_bits );\
	bmlocal13067_acc_bytes += bmlocal13065_tmp_bytes;\
	bmlocal13068_acc_bits += bmlocal13066_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13067_acc_bytes );\
	out_bitoff += bmlocal13068_acc_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13070_tmp_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, out_ptr, bmlocal13070_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13070_tmp_bitoff);\
}

// Alignment of MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13071_my_ptr;\
	UINT bmlocal13072_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, bmlocal13071_my_ptr, bmlocal13072_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13071_my_ptr, bmlocal13072_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13073_my_ptr;\
	UINT bmlocal13074_my_bitoff;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_POS( base_ptr, idx0, bmlocal13073_my_ptr, bmlocal13074_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13073_my_ptr, bmlocal13074_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13075_out_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, idx0, bmlocal13075_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal13075_out_val), "%d", 1);\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13076_val;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET( base_ptr, idx0, bmlocal13076_val );\
	(bmlocal13076_val)++;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_SET( base_ptr, idx0, bmlocal13076_val );\
}

// MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13077_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13077_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13077_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_BYTES_SIZE 2

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13078_tmp_bytes = 0;\
	UINT bmlocal13079_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_GET_SIZE( base_ptr, idx0, bmlocal13078_tmp_bytes, bmlocal13079_tmp_bits );\
	out_bytes += bmlocal13078_tmp_bytes;\
	out_bits += bmlocal13079_tmp_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13080_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13080_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13080_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_BYTES_SIZE 8

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsIDmask", 1);\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_bsIDmask_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_Reserved_2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13083_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13083_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13083_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_BYTES_CELL_SIZE 16

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_bsIDmask_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13084_dim_size0;\
	UINT bmlocal13085_idx0;\
	{\
		UINT32 bmlocal13086_var0;\
		BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_GET( base_ptr, bmlocal13086_var0 );\
		bmlocal13084_dim_size0 = (UINT)(bmlocal13086_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FullBSID", 1);\
	for( bmlocal13085_idx0=0; bmlocal13085_idx0<bmlocal13084_dim_size0; bmlocal13085_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13085_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH_IDX( base_ptr, bmlocal13085_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13087_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, out_bytes, bmlocal13087_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13087_tmp_bits );\
}


#define BM_MonitorScanResult_FullBSIDArr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13088_tmp_bytes = 0;\
	UINT bmlocal13089_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_GET_SIZE( base_ptr, bmlocal13088_tmp_bytes, bmlocal13089_tmp_bits );\
	out_bytes += bmlocal13088_tmp_bytes;\
	out_bits += bmlocal13089_tmp_bits;\
}

#define BM_MonitorScanResult_FullBSIDArr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13090_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_GET_SIZE( base_ptr, out_bytes, bmlocal13090_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13090_tmp_bits );\
}

#define BM_MonitorScanResult_FullBSIDArr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FullBSIDArr", 1);\
	BM_MonitorScanResult_FullBSIDArr_NumOfBSIDs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanResult_FullBSIDArr_FullBSID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_FullBSIDArr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_FullBSIDArr_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorScanResult_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13091_tmp_bytes = 0;\
	UINT bmlocal13092_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorScanResult_AvailableNSPsIdlist_GET_SIZE( base_ptr, bmlocal13091_tmp_bytes, bmlocal13092_tmp_bits );\
	out_bytes += bmlocal13091_tmp_bytes;\
	out_bits += bmlocal13092_tmp_bits;\
	BM_MonitorScanResult_FullBSIDArr_GET_SIZE( base_ptr, bmlocal13091_tmp_bytes, bmlocal13092_tmp_bits );\
	out_bytes += bmlocal13091_tmp_bytes;\
	out_bits += bmlocal13092_tmp_bits;\
}

#define BM_MonitorScanResult_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13093_tmp_bits;\
	BM_MonitorScanResult_GET_SIZE( base_ptr, out_bytes, bmlocal13093_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13093_tmp_bits );\
}

#define BM_MonitorScanResult_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorScanResult", 1);\
	BM_MonitorScanResult_AvailableNSPsIdlist_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanResult_FullBSIDArr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanResult_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanResult_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorScanInd[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BM_StartEndInd _ScanStartEndInd;
	BMS_Time _Time;
} BMS_MonitorScanInd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_Time _Time;
	BM_StartEndInd _ScanStartEndInd;
} BMS_MonitorScanInd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorScanInd' Type: 'MonitorScanInd', Top-level, Non-instance, No bitoff root
#define BM_MonitorScanInd_ScanStartEndInd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorScanInd_ScanStartEndInd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13094_tmp_bitoff;\
	BM_MonitorScanInd_ScanStartEndInd_GET_POS( base_ptr, out_ptr, bmlocal13094_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13094_tmp_bitoff);\
}

#define BM_MonitorScanInd_ScanStartEndInd_POS_ALIGNED 0

// Alignment of MonitorScanInd_ScanStartEndInd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanInd_ScanStartEndInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_ScanStartEndInd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13095_my_ptr;\
	UINT bmlocal13096_my_bitoff;\
	BM_MonitorScanInd_ScanStartEndInd_GET_POS( base_ptr, bmlocal13095_my_ptr, bmlocal13096_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_StartEndInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13095_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_StartEndInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13095_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13095_my_ptr, bmlocal13096_my_bitoff, 32, BM_StartEndInd, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorScanInd_ScanStartEndInd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13097_my_ptr;\
	UINT bmlocal13098_my_bitoff;\
	BM_MonitorScanInd_ScanStartEndInd_GET_POS( base_ptr, bmlocal13097_my_ptr, bmlocal13098_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13097_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13097_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13097_my_ptr, bmlocal13098_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorScanInd_ScanStartEndInd: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_ScanStartEndInd: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_ScanStartEndInd: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_ScanStartEndInd: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_ScanStartEndInd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanInd_ScanStartEndInd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanInd_ScanStartEndInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BM_StartEndInd bmlocal13099_out_val;\
	BM_MonitorScanInd_ScanStartEndInd_GET( base_ptr, bmlocal13099_out_val );\
	if( bmlocal13099_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "ScanStartEndInd", "BM_StartInd", 1);\
	}\
	if( bmlocal13099_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "ScanStartEndInd", "BM_EndInd", 1);\
	}\
}

#define BM_MonitorScanInd_ScanStartEndInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_ScanStartEndInd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanInd_ScanStartEndInd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13100_my_ptr;\
	UINT bmlocal13101_my_bitoff;\
	BM_MonitorScanInd_ScanStartEndInd_GET_POS( base_ptr, bmlocal13100_my_ptr, bmlocal13101_my_bitoff );\
	(*((UINT32*)bmlocal13100_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13101_my_bitoff );\
}

// MonitorScanInd_ScanStartEndInd: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanInd_ScanStartEndInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13102_tmp_bits;\
	BM_MonitorScanInd_ScanStartEndInd_GET_SIZE( base_ptr, out_bytes, bmlocal13102_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13102_tmp_bits );\
}

#define BM_MonitorScanInd_ScanStartEndInd_BYTES_SIZE 4

#define BM_MonitorScanInd_Time_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13105_acc_bytes;\
	UINT bmlocal13106_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13105_acc_bytes = 4;\
	bmlocal13106_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13105_acc_bytes );\
	out_bitoff += bmlocal13106_acc_bits;\
}

#define BM_MonitorScanInd_Time_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13107_tmp_bitoff;\
	BM_MonitorScanInd_Time_GET_POS( base_ptr, out_ptr, bmlocal13107_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13107_tmp_bitoff);\
}

#define BM_MonitorScanInd_Time_POS_ALIGNED 4

// COMPOSITE: Full name: 'MonitorScanInd_Time' Type: 'Time', Inner, Non-instance, No bitoff root
#define BM_MonitorScanInd_Time_wHour_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13108_parent_out_ptr;\
	BM_MonitorScanInd_Time_GET_POS( base_ptr, bmlocal13108_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13108_parent_out_ptr;\
}

#define BM_MonitorScanInd_Time_wHour_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13109_tmp_bitoff;\
	BM_MonitorScanInd_Time_wHour_GET_POS( base_ptr, out_ptr, bmlocal13109_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13109_tmp_bitoff);\
}

#define BM_MonitorScanInd_Time_wHour_POS_ALIGNED 4

// Alignment of MonitorScanInd_Time_wHour: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanInd_Time_wHour_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_wHour_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13110_my_ptr;\
	UINT bmlocal13111_my_bitoff;\
	BM_MonitorScanInd_Time_wHour_GET_POS( base_ptr, bmlocal13110_my_ptr, bmlocal13111_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13110_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13110_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13110_my_ptr, bmlocal13111_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorScanInd_Time_wHour_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13112_my_ptr;\
	UINT bmlocal13113_my_bitoff;\
	BM_MonitorScanInd_Time_wHour_GET_POS( base_ptr, bmlocal13112_my_ptr, bmlocal13113_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13112_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13112_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13112_my_ptr, bmlocal13113_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// MonitorScanInd_Time_wHour: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wHour: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wHour: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wHour: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wHour: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanInd_Time_wHour: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanInd_Time_wHour_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13114_out_val;\
	BM_MonitorScanInd_Time_wHour_GET( base_ptr, bmlocal13114_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wHour", 16, (UINT)(bmlocal13114_out_val), "%d", 1);\
}

#define BM_MonitorScanInd_Time_wHour_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_Time_wHour_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanInd_Time_wHour_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13115_my_ptr;\
	UINT bmlocal13116_my_bitoff;\
	BM_MonitorScanInd_Time_wHour_GET_POS( base_ptr, bmlocal13115_my_ptr, bmlocal13116_my_bitoff );\
	(*((UINT16*)bmlocal13115_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13116_my_bitoff );\
}

// MonitorScanInd_Time_wHour: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanInd_Time_wHour_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13117_tmp_bits;\
	BM_MonitorScanInd_Time_wHour_GET_SIZE( base_ptr, out_bytes, bmlocal13117_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13117_tmp_bits );\
}

#define BM_MonitorScanInd_Time_wHour_BYTES_SIZE 2

#define BM_MonitorScanInd_Time_wMinute_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13120_acc_bytes;\
	UINT bmlocal13121_acc_bits;\
	PVOID bmlocal13122_parent_out_ptr;\
	BM_MonitorScanInd_Time_GET_POS( base_ptr, bmlocal13122_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13122_parent_out_ptr;\
	bmlocal13120_acc_bytes = 2;\
	bmlocal13121_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13120_acc_bytes );\
	out_bitoff += bmlocal13121_acc_bits;\
}

#define BM_MonitorScanInd_Time_wMinute_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13123_tmp_bitoff;\
	BM_MonitorScanInd_Time_wMinute_GET_POS( base_ptr, out_ptr, bmlocal13123_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13123_tmp_bitoff);\
}

#define BM_MonitorScanInd_Time_wMinute_POS_ALIGNED 6

// Alignment of MonitorScanInd_Time_wMinute: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanInd_Time_wMinute_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_wMinute_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13124_my_ptr;\
	UINT bmlocal13125_my_bitoff;\
	BM_MonitorScanInd_Time_wMinute_GET_POS( base_ptr, bmlocal13124_my_ptr, bmlocal13125_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13124_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13124_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13124_my_ptr, bmlocal13125_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_MonitorScanInd_Time_wMinute_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13126_my_ptr;\
	UINT bmlocal13127_my_bitoff;\
	BM_MonitorScanInd_Time_wMinute_GET_POS( base_ptr, bmlocal13126_my_ptr, bmlocal13127_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13126_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13126_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13126_my_ptr, bmlocal13127_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// MonitorScanInd_Time_wMinute: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wMinute: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wMinute: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wMinute: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wMinute: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanInd_Time_wMinute: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanInd_Time_wMinute_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13128_out_val;\
	BM_MonitorScanInd_Time_wMinute_GET( base_ptr, bmlocal13128_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wMinute", 16, (UINT)(bmlocal13128_out_val), "%d", 1);\
}

#define BM_MonitorScanInd_Time_wMinute_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_Time_wMinute_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanInd_Time_wMinute_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13129_my_ptr;\
	UINT bmlocal13130_my_bitoff;\
	BM_MonitorScanInd_Time_wMinute_GET_POS( base_ptr, bmlocal13129_my_ptr, bmlocal13130_my_bitoff );\
	(*((UINT16*)bmlocal13129_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13130_my_bitoff );\
}

// MonitorScanInd_Time_wMinute: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanInd_Time_wMinute_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13131_tmp_bits;\
	BM_MonitorScanInd_Time_wMinute_GET_SIZE( base_ptr, out_bytes, bmlocal13131_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13131_tmp_bits );\
}

#define BM_MonitorScanInd_Time_wMinute_BYTES_SIZE 2

#define BM_MonitorScanInd_Time_wSecond_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13134_acc_bytes;\
	UINT bmlocal13135_acc_bits;\
	PVOID bmlocal13136_parent_out_ptr;\
	BM_MonitorScanInd_Time_GET_POS( base_ptr, bmlocal13136_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13136_parent_out_ptr;\
	bmlocal13134_acc_bytes = 4;\
	bmlocal13135_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13134_acc_bytes );\
	out_bitoff += bmlocal13135_acc_bits;\
}

#define BM_MonitorScanInd_Time_wSecond_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13137_tmp_bitoff;\
	BM_MonitorScanInd_Time_wSecond_GET_POS( base_ptr, out_ptr, bmlocal13137_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13137_tmp_bitoff);\
}

#define BM_MonitorScanInd_Time_wSecond_POS_ALIGNED 8

// Alignment of MonitorScanInd_Time_wSecond: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanInd_Time_wSecond_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_wSecond_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13138_my_ptr;\
	UINT bmlocal13139_my_bitoff;\
	BM_MonitorScanInd_Time_wSecond_GET_POS( base_ptr, bmlocal13138_my_ptr, bmlocal13139_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13138_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13138_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13138_my_ptr, bmlocal13139_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorScanInd_Time_wSecond_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13140_my_ptr;\
	UINT bmlocal13141_my_bitoff;\
	BM_MonitorScanInd_Time_wSecond_GET_POS( base_ptr, bmlocal13140_my_ptr, bmlocal13141_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13140_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13140_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13140_my_ptr, bmlocal13141_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// MonitorScanInd_Time_wSecond: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wSecond: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wSecond: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wSecond: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wSecond: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanInd_Time_wSecond: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanInd_Time_wSecond_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13142_out_val;\
	BM_MonitorScanInd_Time_wSecond_GET( base_ptr, bmlocal13142_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wSecond", 16, (UINT)(bmlocal13142_out_val), "%d", 1);\
}

#define BM_MonitorScanInd_Time_wSecond_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_Time_wSecond_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanInd_Time_wSecond_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13143_my_ptr;\
	UINT bmlocal13144_my_bitoff;\
	BM_MonitorScanInd_Time_wSecond_GET_POS( base_ptr, bmlocal13143_my_ptr, bmlocal13144_my_bitoff );\
	(*((UINT16*)bmlocal13143_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13144_my_bitoff );\
}

// MonitorScanInd_Time_wSecond: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanInd_Time_wSecond_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13145_tmp_bits;\
	BM_MonitorScanInd_Time_wSecond_GET_SIZE( base_ptr, out_bytes, bmlocal13145_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13145_tmp_bits );\
}

#define BM_MonitorScanInd_Time_wSecond_BYTES_SIZE 2

#define BM_MonitorScanInd_Time_wMilliseconds_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13148_acc_bytes;\
	UINT bmlocal13149_acc_bits;\
	PVOID bmlocal13150_parent_out_ptr;\
	BM_MonitorScanInd_Time_GET_POS( base_ptr, bmlocal13150_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13150_parent_out_ptr;\
	bmlocal13148_acc_bytes = 6;\
	bmlocal13149_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13148_acc_bytes );\
	out_bitoff += bmlocal13149_acc_bits;\
}

#define BM_MonitorScanInd_Time_wMilliseconds_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13151_tmp_bitoff;\
	BM_MonitorScanInd_Time_wMilliseconds_GET_POS( base_ptr, out_ptr, bmlocal13151_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13151_tmp_bitoff);\
}

#define BM_MonitorScanInd_Time_wMilliseconds_POS_ALIGNED 10

// Alignment of MonitorScanInd_Time_wMilliseconds: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorScanInd_Time_wMilliseconds_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_wMilliseconds_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13152_my_ptr;\
	UINT bmlocal13153_my_bitoff;\
	BM_MonitorScanInd_Time_wMilliseconds_GET_POS( base_ptr, bmlocal13152_my_ptr, bmlocal13153_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13152_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13152_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13152_my_ptr, bmlocal13153_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_MonitorScanInd_Time_wMilliseconds_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13154_my_ptr;\
	UINT bmlocal13155_my_bitoff;\
	BM_MonitorScanInd_Time_wMilliseconds_GET_POS( base_ptr, bmlocal13154_my_ptr, bmlocal13155_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13154_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13154_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13154_my_ptr, bmlocal13155_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// MonitorScanInd_Time_wMilliseconds: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wMilliseconds: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorScanInd_Time_wMilliseconds: IS_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wMilliseconds: SET_RESET accessor is not defined because no reset value was specified.
// MonitorScanInd_Time_wMilliseconds: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorScanInd_Time_wMilliseconds: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorScanInd_Time_wMilliseconds_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13156_out_val;\
	BM_MonitorScanInd_Time_wMilliseconds_GET( base_ptr, bmlocal13156_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "wMilliseconds", 16, (UINT)(bmlocal13156_out_val), "%d", 1);\
}

#define BM_MonitorScanInd_Time_wMilliseconds_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_Time_wMilliseconds_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorScanInd_Time_wMilliseconds_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13157_my_ptr;\
	UINT bmlocal13158_my_bitoff;\
	BM_MonitorScanInd_Time_wMilliseconds_GET_POS( base_ptr, bmlocal13157_my_ptr, bmlocal13158_my_bitoff );\
	(*((UINT16*)bmlocal13157_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13158_my_bitoff );\
}

// MonitorScanInd_Time_wMilliseconds: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorScanInd_Time_wMilliseconds_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13159_tmp_bits;\
	BM_MonitorScanInd_Time_wMilliseconds_GET_SIZE( base_ptr, out_bytes, bmlocal13159_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13159_tmp_bits );\
}

#define BM_MonitorScanInd_Time_wMilliseconds_BYTES_SIZE 2

#define BM_MonitorScanInd_Time_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13162_tmp_bits;\
	BM_MonitorScanInd_Time_GET_SIZE( base_ptr, out_bytes, bmlocal13162_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13162_tmp_bits );\
}

#define BM_MonitorScanInd_Time_BYTES_SIZE 8

#define BM_MonitorScanInd_Time_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Time", 1);\
	BM_MonitorScanInd_Time_wHour_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanInd_Time_wMinute_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanInd_Time_wSecond_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanInd_Time_wMilliseconds_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_Time_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_Time_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorScanInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13165_tmp_bits;\
	BM_MonitorScanInd_GET_SIZE( base_ptr, out_bytes, bmlocal13165_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13165_tmp_bits );\
}

#define BM_MonitorScanInd_BYTES_SIZE 12

#define BM_MonitorScanInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorScanInd", 1);\
	BM_MonitorScanInd_ScanStartEndInd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorScanInd_Time_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorScanInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorScanInd_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorRecentDiscoverNap[16];

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap' Type: 'MonitorRecentDiscoverNap', Top-level, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_NapMember_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorRecentDiscoverNap_NapMember_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13166_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_GET_POS( base_ptr, out_ptr, bmlocal13166_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13166_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_NapMember_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_NapMember' Type: 'NapMember', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13167_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_NapMember_GET_POS( base_ptr, bmlocal13167_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13167_parent_out_ptr;\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13168_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_POS( base_ptr, out_ptr, bmlocal13168_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13168_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_POS_ALIGNED 0

// ARRAY: MonitorRecentDiscoverNap_NapMember_napID
#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 3;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13169_out_ptr;\
	UINT bmlocal13170_out_bitoff;\
	UINT bmlocal13171_element_size_bytes;\
	UINT bmlocal13172_element_size_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_POS( base_ptr, bmlocal13169_out_ptr, bmlocal13170_out_bitoff );\
	bmlocal13171_element_size_bytes = 1;\
	bmlocal13172_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13169_out_ptr) + (idx0) * bmlocal13171_element_size_bytes );\
	out_bitoff = bmlocal13170_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13172_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_NapMember_napID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13173_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13173_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13173_parent_out_ptr;\
}

// Alignment of MonitorRecentDiscoverNap_NapMember_napID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13174_my_ptr;\
	UINT bmlocal13175_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal13174_my_ptr, bmlocal13175_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13174_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13174_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13174_my_ptr, bmlocal13175_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13176_my_ptr;\
	UINT bmlocal13177_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal13176_my_ptr, bmlocal13177_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13176_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13176_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13176_my_ptr, bmlocal13177_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorRecentDiscoverNap_NapMember_napID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_NapMember_napID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_NapMember_napID_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_NapMember_napID_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_NapMember_napID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_NapMember_napID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13178_out_val;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET( base_ptr, idx0, bmlocal13178_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13178_out_val), "%u", 1);\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13179_my_ptr;\
	UINT bmlocal13180_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_POS( base_ptr, idx0, bmlocal13179_my_ptr, bmlocal13180_my_bitoff );\
	(*((UINT8*)bmlocal13179_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13180_my_bitoff );\
}

// MonitorRecentDiscoverNap_NapMember_napID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13181_tmp_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13181_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13181_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_value_BYTES_SIZE 1

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13184_tmp_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13184_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13184_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_BYTES_CELL_SIZE 1

#define BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13185_dim_size0;\
	UINT bmlocal13186_idx0;\
	bmlocal13185_dim_size0 = 3;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "napID", 1);\
	for( bmlocal13186_idx0=0; bmlocal13186_idx0<bmlocal13185_dim_size0; bmlocal13186_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13186_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, bmlocal13186_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13187_tmp_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_SIZE( base_ptr, out_bytes, bmlocal13187_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13187_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_napID_BYTES_SIZE 3

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13188_tmp_bytes = 0;\
	UINT bmlocal13189_tmp_bits = 0;\
	UINT bmlocal13190_acc_bytes;\
	UINT bmlocal13191_acc_bits;\
	PVOID bmlocal13192_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_NapMember_GET_POS( base_ptr, bmlocal13192_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13192_parent_out_ptr;\
	bmlocal13190_acc_bytes = 0;\
	bmlocal13191_acc_bits = 0;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_SIZE( base_ptr, bmlocal13188_tmp_bytes, bmlocal13189_tmp_bits );\
	bmlocal13190_acc_bytes += bmlocal13188_tmp_bytes;\
	bmlocal13191_acc_bits += bmlocal13189_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13190_acc_bytes );\
	out_bitoff += bmlocal13191_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13193_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal13193_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13193_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_POS_ALIGNED 3

// Alignment of MonitorRecentDiscoverNap_NapMember_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13194_my_ptr;\
	UINT bmlocal13195_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal13194_my_ptr, bmlocal13195_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13194_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13194_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13194_my_ptr, bmlocal13195_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13196_my_ptr;\
	UINT bmlocal13197_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal13196_my_ptr, bmlocal13197_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13196_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13196_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13196_my_ptr, bmlocal13197_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MonitorRecentDiscoverNap_NapMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_NapMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_NapMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_NapMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_NapMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_NapMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13198_out_val;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET( base_ptr, bmlocal13198_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal13198_out_val), "%d", 1);\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13199_my_ptr;\
	UINT bmlocal13200_my_bitoff;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_POS( base_ptr, bmlocal13199_my_ptr, bmlocal13200_my_bitoff );\
	(*((UINT8*)bmlocal13199_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13200_my_bitoff );\
}

// MonitorRecentDiscoverNap_NapMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13201_tmp_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal13201_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13201_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_BYTES_SIZE 1

#define BM_MonitorRecentDiscoverNap_NapMember_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13202_tmp_bytes = 0;\
	UINT bmlocal13203_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_MonitorRecentDiscoverNap_NapMember_napID_GET_SIZE( base_ptr, bmlocal13202_tmp_bytes, bmlocal13203_tmp_bits );\
	out_bytes += bmlocal13202_tmp_bytes;\
	out_bits += bmlocal13203_tmp_bits;\
}

#define BM_MonitorRecentDiscoverNap_NapMember_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13204_tmp_bits;\
	BM_MonitorRecentDiscoverNap_NapMember_GET_SIZE( base_ptr, out_bytes, bmlocal13204_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13204_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_BYTES_SIZE 4

#define BM_MonitorRecentDiscoverNap_NapMember_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NapMember", 1);\
	BM_MonitorRecentDiscoverNap_NapMember_napID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_NapMember_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_NapMember_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13207_acc_bytes;\
	UINT bmlocal13208_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13207_acc_bytes = 4;\
	bmlocal13208_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13207_acc_bytes );\
	out_bitoff += bmlocal13208_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13209_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_POS( base_ptr, out_ptr, bmlocal13209_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13209_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_POS_ALIGNED 4

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_ChannelInfoArray' Type: 'ChannelInfoArr', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13210_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_POS( base_ptr, bmlocal13210_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13210_parent_out_ptr;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13211_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal13211_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13211_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_POS_ALIGNED 4

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13212_my_ptr;\
	UINT bmlocal13213_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13212_my_ptr, bmlocal13213_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13212_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13212_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13212_my_ptr, bmlocal13213_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13214_my_ptr;\
	UINT bmlocal13215_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13214_my_ptr, bmlocal13215_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13214_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13214_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13214_my_ptr, bmlocal13215_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13216_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13216_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal13216_out_val), "%d", 1);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13217_my_ptr;\
	UINT bmlocal13218_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13217_my_ptr, bmlocal13218_my_bitoff );\
	(*((UINT32*)bmlocal13217_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13218_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13219_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal13219_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13219_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_BYTES_SIZE 4

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13222_acc_bytes;\
	UINT bmlocal13223_acc_bits;\
	PVOID bmlocal13224_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_POS( base_ptr, bmlocal13224_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13224_parent_out_ptr;\
	bmlocal13222_acc_bytes = 4;\
	bmlocal13223_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13222_acc_bytes );\
	out_bitoff += bmlocal13223_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13225_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, bmlocal13225_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13225_tmp_bitoff);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_POS_ALIGNED 8

// ARRAY: MonitorRecentDiscoverNap_ChannelInfoArray_Channels
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal13226_var0;\
		BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13226_var0 );\
		out_bytes = (UINT)(28*(1*bmlocal13226_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal13227_var0;\
			BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13227_var0 );\
			out_element_count = (UINT)(bmlocal13227_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13228_out_ptr;\
	UINT bmlocal13229_out_bitoff;\
	UINT bmlocal13230_element_size_bytes;\
	UINT bmlocal13231_element_size_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_POS( base_ptr, bmlocal13228_out_ptr, bmlocal13229_out_bitoff );\
	bmlocal13230_element_size_bytes = 28;\
	bmlocal13231_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13228_out_ptr) + (idx0) * bmlocal13230_element_size_bytes );\
	out_bitoff = bmlocal13229_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13231_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_ChannelInfoArray_Channels' Type: 'ChannelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13232_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13232_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13232_parent_out_ptr;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13233_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal13233_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13233_tmp_bitoff);\
}

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13234_my_ptr;\
	UINT bmlocal13235_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13234_my_ptr, bmlocal13235_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13234_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13234_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13234_my_ptr, bmlocal13235_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13236_my_ptr;\
	UINT bmlocal13237_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13236_my_ptr, bmlocal13237_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13236_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13236_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13236_my_ptr, bmlocal13237_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13238_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, bmlocal13238_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal13238_out_val), "%d", 1);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13239_my_ptr;\
	UINT bmlocal13240_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13239_my_ptr, bmlocal13240_my_bitoff );\
	(*((UINT32*)bmlocal13239_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13240_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13241_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13241_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13241_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_BYTES_SIZE 4

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13244_acc_bytes;\
	UINT bmlocal13245_acc_bits;\
	PVOID bmlocal13246_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13246_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13246_parent_out_ptr;\
	bmlocal13244_acc_bytes = 4;\
	bmlocal13245_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13244_acc_bytes );\
	out_bitoff += bmlocal13245_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13247_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, bmlocal13247_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13247_tmp_bitoff);\
}

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13248_my_ptr;\
	UINT bmlocal13249_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13248_my_ptr, bmlocal13249_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13248_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13248_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13248_my_ptr, bmlocal13249_my_bitoff, 32, BME_BW, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13250_my_ptr;\
	UINT bmlocal13251_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13250_my_ptr, bmlocal13251_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13250_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13250_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13250_my_ptr, bmlocal13251_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_BW bmlocal13252_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, bmlocal13252_out_val );\
	if( bmlocal13252_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_3_5", 1);\
	}\
	if( bmlocal13252_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_5", 1);\
	}\
	if( bmlocal13252_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_7_5", 1);\
	}\
	if( bmlocal13252_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_8_75", 1);\
	}\
	if( bmlocal13252_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_10", 1);\
	}\
	if( bmlocal13252_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_14", 1);\
	}\
	if( bmlocal13252_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_20", 1);\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13253_my_ptr;\
	UINT bmlocal13254_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13253_my_ptr, bmlocal13254_my_bitoff );\
	(*((UINT32*)bmlocal13253_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13254_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13255_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13255_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13255_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_BYTES_SIZE 4

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13258_acc_bytes;\
	UINT bmlocal13259_acc_bits;\
	PVOID bmlocal13260_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13260_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13260_parent_out_ptr;\
	bmlocal13258_acc_bytes = 8;\
	bmlocal13259_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13258_acc_bytes );\
	out_bitoff += bmlocal13259_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13261_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, bmlocal13261_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13261_tmp_bitoff);\
}

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13262_my_ptr;\
	UINT bmlocal13263_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13262_my_ptr, bmlocal13263_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13262_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13262_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13262_my_ptr, bmlocal13263_my_bitoff, 32, BME_FFT, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13264_my_ptr;\
	UINT bmlocal13265_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13264_my_ptr, bmlocal13265_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13264_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13264_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13264_my_ptr, bmlocal13265_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_FFT bmlocal13266_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, bmlocal13266_out_val );\
	if( bmlocal13266_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_512", 1);\
	}\
	if( bmlocal13266_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_1024", 1);\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13267_my_ptr;\
	UINT bmlocal13268_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13267_my_ptr, bmlocal13268_my_bitoff );\
	(*((UINT32*)bmlocal13267_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13268_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13269_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13269_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13269_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_BYTES_SIZE 4

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13272_acc_bytes;\
	UINT bmlocal13273_acc_bits;\
	PVOID bmlocal13274_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13274_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13274_parent_out_ptr;\
	bmlocal13272_acc_bytes = 12;\
	bmlocal13273_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13272_acc_bytes );\
	out_bitoff += bmlocal13273_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13275_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13275_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13275_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles' Type: 'PreamblesMember', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13276_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13276_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13276_parent_out_ptr;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13277_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13277_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13277_tmp_bitoff);\
}

// ARRAY: MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13278_out_ptr;\
	UINT bmlocal13279_out_bitoff;\
	UINT bmlocal13280_element_size_bytes;\
	UINT bmlocal13281_element_size_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, bmlocal13278_out_ptr, bmlocal13279_out_bitoff );\
	bmlocal13280_element_size_bytes = 1;\
	bmlocal13281_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13278_out_ptr) + (idx1) * bmlocal13280_element_size_bytes );\
	out_bitoff = bmlocal13279_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13281_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13282_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal13282_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13282_parent_out_ptr;\
}

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13283_my_ptr;\
	UINT bmlocal13284_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13283_my_ptr, bmlocal13284_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13283_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13283_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13283_my_ptr, bmlocal13284_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13285_my_ptr;\
	UINT bmlocal13286_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13285_my_ptr, bmlocal13286_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13285_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13285_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13285_my_ptr, bmlocal13286_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13287_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal13287_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13287_out_val), "%u", 1);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13288_my_ptr;\
	UINT bmlocal13289_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13288_my_ptr, bmlocal13289_my_bitoff );\
	(*((UINT8*)bmlocal13288_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13289_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13290_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13290_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13290_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_BYTES_SIZE 1

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13293_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13293_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13293_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_CELL_SIZE 1

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13294_dim_size0;\
	UINT bmlocal13295_idx0;\
	bmlocal13294_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal13295_idx0=0; bmlocal13295_idx0<bmlocal13294_dim_size0; bmlocal13295_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13295_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal13295_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13296_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13296_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13296_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_SIZE 15

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13297_tmp_bytes = 0;\
	UINT bmlocal13298_tmp_bits = 0;\
	UINT bmlocal13299_acc_bytes;\
	UINT bmlocal13300_acc_bits;\
	PVOID bmlocal13301_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13301_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13301_parent_out_ptr;\
	bmlocal13299_acc_bytes = 0;\
	bmlocal13300_acc_bits = 0;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13297_tmp_bytes, bmlocal13298_tmp_bits );\
	bmlocal13299_acc_bytes += bmlocal13297_tmp_bytes;\
	bmlocal13300_acc_bits += bmlocal13298_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13299_acc_bytes );\
	out_bitoff += bmlocal13300_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13302_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal13302_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13302_tmp_bitoff);\
}

// Alignment of MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13303_my_ptr;\
	UINT bmlocal13304_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13303_my_ptr, bmlocal13304_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13303_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13303_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13303_my_ptr, bmlocal13304_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13305_my_ptr;\
	UINT bmlocal13306_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13305_my_ptr, bmlocal13306_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13305_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13305_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13305_my_ptr, bmlocal13306_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13307_out_val;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, bmlocal13307_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal13307_out_val), "%d", 1);\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13308_my_ptr;\
	UINT bmlocal13309_my_bitoff;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13308_my_ptr, bmlocal13309_my_bitoff );\
	(*((UINT8*)bmlocal13308_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13309_my_bitoff );\
}

// MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13310_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13310_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13310_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_BYTES_SIZE 1

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13311_tmp_bytes = 0;\
	UINT bmlocal13312_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13311_tmp_bytes, bmlocal13312_tmp_bits );\
	out_bytes += bmlocal13311_tmp_bytes;\
	out_bits += bmlocal13312_tmp_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13313_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13313_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13313_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_BYTES_SIZE 16

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13316_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13316_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13316_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_BYTES_CELL_SIZE 28

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13317_dim_size0;\
	UINT bmlocal13318_idx0;\
	{\
		UINT32 bmlocal13319_var0;\
		BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13319_var0 );\
		bmlocal13317_dim_size0 = (UINT)(bmlocal13319_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal13318_idx0=0; bmlocal13318_idx0<bmlocal13317_dim_size0; bmlocal13318_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13318_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal13318_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13320_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal13320_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13320_tmp_bits );\
}


#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13321_tmp_bytes = 0;\
	UINT bmlocal13322_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_GET_SIZE( base_ptr, bmlocal13321_tmp_bytes, bmlocal13322_tmp_bits );\
	out_bytes += bmlocal13321_tmp_bytes;\
	out_bits += bmlocal13322_tmp_bits;\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13323_tmp_bits;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, bmlocal13323_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13323_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelInfoArray", 1);\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_ChannelInfoArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorRecentDiscoverNap_bsID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13324_tmp_bytes = 0;\
	UINT bmlocal13325_tmp_bits = 0;\
	UINT bmlocal13326_acc_bytes;\
	UINT bmlocal13327_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13326_acc_bytes = 4;\
	bmlocal13327_acc_bits = 0;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_SIZE( base_ptr, bmlocal13324_tmp_bytes, bmlocal13325_tmp_bits );\
	bmlocal13326_acc_bytes += bmlocal13324_tmp_bytes;\
	bmlocal13327_acc_bits += bmlocal13325_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13326_acc_bytes );\
	out_bitoff += bmlocal13327_acc_bits;\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_bsID' Type: 'bsIDMember', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13328_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_bsID_GET_POS( base_ptr, bmlocal13328_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13328_parent_out_ptr;\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13329_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_POS( base_ptr, out_ptr, bmlocal13329_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13329_tmp_bitoff);\
}

// ARRAY: MonitorRecentDiscoverNap_bsID_bsID
#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13330_out_ptr;\
	UINT bmlocal13331_out_bitoff;\
	UINT bmlocal13332_element_size_bytes;\
	UINT bmlocal13333_element_size_bits;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_POS( base_ptr, bmlocal13330_out_ptr, bmlocal13331_out_bitoff );\
	bmlocal13332_element_size_bytes = 1;\
	bmlocal13333_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13330_out_ptr) + (idx0) * bmlocal13332_element_size_bytes );\
	out_bitoff = bmlocal13331_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13333_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorRecentDiscoverNap_bsID_bsID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13334_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13334_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13334_parent_out_ptr;\
}

// Alignment of MonitorRecentDiscoverNap_bsID_bsID_value: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13335_my_ptr;\
	UINT bmlocal13336_my_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_POS( base_ptr, idx0, bmlocal13335_my_ptr, bmlocal13336_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13335_my_ptr, bmlocal13336_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13337_my_ptr;\
	UINT bmlocal13338_my_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_POS( base_ptr, idx0, bmlocal13337_my_ptr, bmlocal13338_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13337_my_ptr, bmlocal13338_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorRecentDiscoverNap_bsID_bsID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_bsID_bsID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_bsID_bsID_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_bsID_bsID_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_bsID_bsID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_bsID_bsID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13339_out_val;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET( base_ptr, idx0, bmlocal13339_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13339_out_val), "%u", 1);\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13340_val;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET( base_ptr, idx0, bmlocal13340_val );\
	(bmlocal13340_val)++;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_SET( base_ptr, idx0, bmlocal13340_val );\
}

// MonitorRecentDiscoverNap_bsID_bsID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13341_tmp_bits;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13341_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13341_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_value_BYTES_SIZE 1

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13344_tmp_bits;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13344_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13344_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_BYTES_CELL_SIZE 1

#define BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_bsID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13345_dim_size0;\
	UINT bmlocal13346_idx0;\
	bmlocal13345_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	for( bmlocal13346_idx0=0; bmlocal13346_idx0<bmlocal13345_dim_size0; bmlocal13346_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13346_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH_IDX( base_ptr, bmlocal13346_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13347_tmp_bits;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_SIZE( base_ptr, out_bytes, bmlocal13347_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13347_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_bsID_bsID_BYTES_SIZE 6

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13348_tmp_bytes = 0;\
	UINT bmlocal13349_tmp_bits = 0;\
	UINT bmlocal13350_acc_bytes;\
	UINT bmlocal13351_acc_bits;\
	PVOID bmlocal13352_parent_out_ptr;\
	BM_MonitorRecentDiscoverNap_bsID_GET_POS( base_ptr, bmlocal13352_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13352_parent_out_ptr;\
	bmlocal13350_acc_bytes = 0;\
	bmlocal13351_acc_bits = 0;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_SIZE( base_ptr, bmlocal13348_tmp_bytes, bmlocal13349_tmp_bits );\
	bmlocal13350_acc_bytes += bmlocal13348_tmp_bytes;\
	bmlocal13351_acc_bits += bmlocal13349_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13350_acc_bytes );\
	out_bitoff += bmlocal13351_acc_bits;\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13353_tmp_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_POS( base_ptr, out_ptr, bmlocal13353_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13353_tmp_bitoff);\
}

// Alignment of MonitorRecentDiscoverNap_bsID_Reserved_2: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13354_my_ptr;\
	UINT bmlocal13355_my_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_POS( base_ptr, bmlocal13354_my_ptr, bmlocal13355_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13354_my_ptr, bmlocal13355_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13356_my_ptr;\
	UINT bmlocal13357_my_bitoff;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_POS( base_ptr, bmlocal13356_my_ptr, bmlocal13357_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13356_my_ptr, bmlocal13357_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// MonitorRecentDiscoverNap_bsID_Reserved_2: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_bsID_Reserved_2: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorRecentDiscoverNap_bsID_Reserved_2: IS_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_bsID_Reserved_2: SET_RESET accessor is not defined because no reset value was specified.
// MonitorRecentDiscoverNap_bsID_Reserved_2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorRecentDiscoverNap_bsID_Reserved_2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13358_out_val;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET( base_ptr, bmlocal13358_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_2", 16, (UINT)(bmlocal13358_out_val), "%d", 1);\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal13359_val;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET( base_ptr, bmlocal13359_val );\
	(bmlocal13359_val)++;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_SET( base_ptr, bmlocal13359_val );\
}

// MonitorRecentDiscoverNap_bsID_Reserved_2: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13360_tmp_bits;\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_GET_SIZE( base_ptr, out_bytes, bmlocal13360_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13360_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_bsID_Reserved_2_BYTES_SIZE 2

#define BM_MonitorRecentDiscoverNap_bsID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13361_tmp_bytes = 0;\
	UINT bmlocal13362_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_MonitorRecentDiscoverNap_bsID_bsID_GET_SIZE( base_ptr, bmlocal13361_tmp_bytes, bmlocal13362_tmp_bits );\
	out_bytes += bmlocal13361_tmp_bytes;\
	out_bits += bmlocal13362_tmp_bits;\
}

#define BM_MonitorRecentDiscoverNap_bsID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13363_tmp_bits;\
	BM_MonitorRecentDiscoverNap_bsID_GET_SIZE( base_ptr, out_bytes, bmlocal13363_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13363_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_bsID_BYTES_SIZE 8

#define BM_MonitorRecentDiscoverNap_bsID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsID", 1);\
	BM_MonitorRecentDiscoverNap_bsID_bsID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_bsID_Reserved_2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_bsID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_bsID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorRecentDiscoverNap_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13364_tmp_bytes = 0;\
	UINT bmlocal13365_tmp_bits = 0;\
	out_bytes = 12;\
	out_bits = 0;\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_GET_SIZE( base_ptr, bmlocal13364_tmp_bytes, bmlocal13365_tmp_bits );\
	out_bytes += bmlocal13364_tmp_bytes;\
	out_bits += bmlocal13365_tmp_bits;\
}

#define BM_MonitorRecentDiscoverNap_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13366_tmp_bits;\
	BM_MonitorRecentDiscoverNap_GET_SIZE( base_ptr, out_bytes, bmlocal13366_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13366_tmp_bits );\
}

#define BM_MonitorRecentDiscoverNap_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorRecentDiscoverNap", 1);\
	BM_MonitorRecentDiscoverNap_NapMember_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_ChannelInfoArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorRecentDiscoverNap_bsID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorRecentDiscoverNap_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorRecentDiscoverNap_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorMCP[8];

// COMPOSITE: Full name: 'MonitorMCP' Type: 'MonitorMCP', Top-level, Non-instance, No bitoff root
#define BM_MonitorMCP_LinkLossInd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorMCP_LinkLossInd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13367_tmp_bitoff;\
	BM_MonitorMCP_LinkLossInd_GET_POS( base_ptr, out_ptr, bmlocal13367_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13367_tmp_bitoff);\
}

#define BM_MonitorMCP_LinkLossInd_POS_ALIGNED 0

// Alignment of MonitorMCP_LinkLossInd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_LinkLossInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_LinkLossInd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13368_my_ptr;\
	UINT bmlocal13369_my_bitoff;\
	BM_MonitorMCP_LinkLossInd_GET_POS( base_ptr, bmlocal13368_my_ptr, bmlocal13369_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_LinkLossInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13368_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_LinkLossInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13368_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13368_my_ptr, bmlocal13369_my_bitoff, 32, BME_LinkLossInd, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorMCP_LinkLossInd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13370_my_ptr;\
	UINT bmlocal13371_my_bitoff;\
	BM_MonitorMCP_LinkLossInd_GET_POS( base_ptr, bmlocal13370_my_ptr, bmlocal13371_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13370_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13370_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13370_my_ptr, bmlocal13371_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorMCP_LinkLossInd: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_LinkLossInd: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_LinkLossInd: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_LinkLossInd: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_LinkLossInd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_LinkLossInd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_LinkLossInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_LinkLossInd bmlocal13372_out_val;\
	BM_MonitorMCP_LinkLossInd_GET( base_ptr, bmlocal13372_out_val );\
	if( bmlocal13372_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LinkLossInd", "BMV_LinkLossType_Short", 1);\
	}\
	if( bmlocal13372_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LinkLossInd", "BMV_LinkLossType_Long", 1);\
	}\
	if( bmlocal13372_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LinkLossInd", "BMV_LinkLossType_Infinite", 1);\
	}\
}

#define BM_MonitorMCP_LinkLossInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_LinkLossInd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorMCP_LinkLossInd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13373_my_ptr;\
	UINT bmlocal13374_my_bitoff;\
	BM_MonitorMCP_LinkLossInd_GET_POS( base_ptr, bmlocal13373_my_ptr, bmlocal13374_my_bitoff );\
	(*((UINT32*)bmlocal13373_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13374_my_bitoff );\
}

// MonitorMCP_LinkLossInd: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_LinkLossInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13375_tmp_bits;\
	BM_MonitorMCP_LinkLossInd_GET_SIZE( base_ptr, out_bytes, bmlocal13375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13375_tmp_bits );\
}

#define BM_MonitorMCP_LinkLossInd_BYTES_SIZE 4

#define BM_MonitorMCP_ChannelInfoArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13378_acc_bytes;\
	UINT bmlocal13379_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13378_acc_bytes = 4;\
	bmlocal13379_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13378_acc_bytes );\
	out_bitoff += bmlocal13379_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13380_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_GET_POS( base_ptr, out_ptr, bmlocal13380_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13380_tmp_bitoff);\
}

#define BM_MonitorMCP_ChannelInfoArray_POS_ALIGNED 4

// COMPOSITE: Full name: 'MonitorMCP_ChannelInfoArray' Type: 'ChannelInfoArr', Inner, Non-instance, No bitoff root
#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13381_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_GET_POS( base_ptr, bmlocal13381_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13381_parent_out_ptr;\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13382_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal13382_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13382_tmp_bitoff);\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_POS_ALIGNED 4

// Alignment of MonitorMCP_ChannelInfoArray_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13383_my_ptr;\
	UINT bmlocal13384_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13383_my_ptr, bmlocal13384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13383_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13383_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13383_my_ptr, bmlocal13384_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13385_my_ptr;\
	UINT bmlocal13386_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13385_my_ptr, bmlocal13386_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13385_my_ptr, bmlocal13386_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorMCP_ChannelInfoArray_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13387_out_val;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13387_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal13387_out_val), "%d", 1);\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13388_my_ptr;\
	UINT bmlocal13389_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13388_my_ptr, bmlocal13389_my_bitoff );\
	(*((UINT32*)bmlocal13388_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13389_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13390_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal13390_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13390_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_NumOfChannels_BYTES_SIZE 4

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13393_acc_bytes;\
	UINT bmlocal13394_acc_bits;\
	PVOID bmlocal13395_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_GET_POS( base_ptr, bmlocal13395_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13395_parent_out_ptr;\
	bmlocal13393_acc_bytes = 4;\
	bmlocal13394_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13393_acc_bytes );\
	out_bitoff += bmlocal13394_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13396_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, bmlocal13396_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13396_tmp_bitoff);\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_POS_ALIGNED 8

// ARRAY: MonitorMCP_ChannelInfoArray_Channels
#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal13397_var0;\
		BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13397_var0 );\
		out_bytes = (UINT)(28*(1*bmlocal13397_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal13398_var0;\
			BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13398_var0 );\
			out_element_count = (UINT)(bmlocal13398_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13399_out_ptr;\
	UINT bmlocal13400_out_bitoff;\
	UINT bmlocal13401_element_size_bytes;\
	UINT bmlocal13402_element_size_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_POS( base_ptr, bmlocal13399_out_ptr, bmlocal13400_out_bitoff );\
	bmlocal13401_element_size_bytes = 28;\
	bmlocal13402_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13399_out_ptr) + (idx0) * bmlocal13401_element_size_bytes );\
	out_bitoff = bmlocal13400_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13402_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorMCP_ChannelInfoArray_Channels' Type: 'ChannelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13403_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13403_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13403_parent_out_ptr;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13404_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal13404_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13404_tmp_bitoff);\
}

// Alignment of MonitorMCP_ChannelInfoArray_Channels_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13405_my_ptr;\
	UINT bmlocal13406_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13405_my_ptr, bmlocal13406_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13405_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13405_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13405_my_ptr, bmlocal13406_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13407_my_ptr;\
	UINT bmlocal13408_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13407_my_ptr, bmlocal13408_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13407_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13407_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13407_my_ptr, bmlocal13408_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorMCP_ChannelInfoArray_Channels_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_frequency: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_frequency: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_Channels_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13409_out_val;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, bmlocal13409_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal13409_out_val), "%d", 1);\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13410_my_ptr;\
	UINT bmlocal13411_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13410_my_ptr, bmlocal13411_my_bitoff );\
	(*((UINT32*)bmlocal13410_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13411_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_Channels_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13412_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13412_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13412_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_frequency_BYTES_SIZE 4

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13415_acc_bytes;\
	UINT bmlocal13416_acc_bits;\
	PVOID bmlocal13417_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13417_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13417_parent_out_ptr;\
	bmlocal13415_acc_bytes = 4;\
	bmlocal13416_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13415_acc_bytes );\
	out_bitoff += bmlocal13416_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13418_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, bmlocal13418_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13418_tmp_bitoff);\
}

// Alignment of MonitorMCP_ChannelInfoArray_Channels_bw: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13419_my_ptr;\
	UINT bmlocal13420_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13419_my_ptr, bmlocal13420_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13419_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13419_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13419_my_ptr, bmlocal13420_my_bitoff, 32, BME_BW, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13421_my_ptr;\
	UINT bmlocal13422_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13421_my_ptr, bmlocal13422_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13421_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13421_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13421_my_ptr, bmlocal13422_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorMCP_ChannelInfoArray_Channels_bw: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_bw: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_bw: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_bw: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_bw: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_Channels_bw: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_BW bmlocal13423_out_val;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, bmlocal13423_out_val );\
	if( bmlocal13423_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_3_5", 1);\
	}\
	if( bmlocal13423_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_5", 1);\
	}\
	if( bmlocal13423_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_7_5", 1);\
	}\
	if( bmlocal13423_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_8_75", 1);\
	}\
	if( bmlocal13423_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_10", 1);\
	}\
	if( bmlocal13423_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_14", 1);\
	}\
	if( bmlocal13423_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_20", 1);\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13424_my_ptr;\
	UINT bmlocal13425_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13424_my_ptr, bmlocal13425_my_bitoff );\
	(*((UINT32*)bmlocal13424_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13425_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_Channels_bw: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13426_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13426_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13426_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_bw_BYTES_SIZE 4

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13429_acc_bytes;\
	UINT bmlocal13430_acc_bits;\
	PVOID bmlocal13431_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13431_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13431_parent_out_ptr;\
	bmlocal13429_acc_bytes = 8;\
	bmlocal13430_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13429_acc_bytes );\
	out_bitoff += bmlocal13430_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13432_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, bmlocal13432_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13432_tmp_bitoff);\
}

// Alignment of MonitorMCP_ChannelInfoArray_Channels_fft: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13433_my_ptr;\
	UINT bmlocal13434_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13433_my_ptr, bmlocal13434_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13433_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13433_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13433_my_ptr, bmlocal13434_my_bitoff, 32, BME_FFT, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13435_my_ptr;\
	UINT bmlocal13436_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13435_my_ptr, bmlocal13436_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13435_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13435_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13435_my_ptr, bmlocal13436_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorMCP_ChannelInfoArray_Channels_fft: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_fft: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_fft: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_fft: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_Channels_fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_FFT bmlocal13437_out_val;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, bmlocal13437_out_val );\
	if( bmlocal13437_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_512", 1);\
	}\
	if( bmlocal13437_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_1024", 1);\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13438_my_ptr;\
	UINT bmlocal13439_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13438_my_ptr, bmlocal13439_my_bitoff );\
	(*((UINT32*)bmlocal13438_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13439_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_Channels_fft: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13440_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13440_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13440_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_fft_BYTES_SIZE 4

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13443_acc_bytes;\
	UINT bmlocal13444_acc_bits;\
	PVOID bmlocal13445_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13445_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13445_parent_out_ptr;\
	bmlocal13443_acc_bytes = 12;\
	bmlocal13444_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13443_acc_bytes );\
	out_bitoff += bmlocal13444_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13446_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13446_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13446_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorMCP_ChannelInfoArray_Channels_Preambles' Type: 'PreamblesMember', Inner, Non-instance, No bitoff root
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13447_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13447_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13447_parent_out_ptr;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13448_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13448_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13448_tmp_bitoff);\
}

// ARRAY: MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13449_out_ptr;\
	UINT bmlocal13450_out_bitoff;\
	UINT bmlocal13451_element_size_bytes;\
	UINT bmlocal13452_element_size_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, bmlocal13449_out_ptr, bmlocal13450_out_bitoff );\
	bmlocal13451_element_size_bytes = 1;\
	bmlocal13452_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13449_out_ptr) + (idx1) * bmlocal13451_element_size_bytes );\
	out_bitoff = bmlocal13450_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13452_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13453_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal13453_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13453_parent_out_ptr;\
}

// Alignment of MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13454_my_ptr;\
	UINT bmlocal13455_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13454_my_ptr, bmlocal13455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13454_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13454_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13454_my_ptr, bmlocal13455_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13456_my_ptr;\
	UINT bmlocal13457_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13456_my_ptr, bmlocal13457_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13456_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13456_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13456_my_ptr, bmlocal13457_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13458_out_val;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal13458_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13458_out_val), "%u", 1);\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13459_my_ptr;\
	UINT bmlocal13460_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13459_my_ptr, bmlocal13460_my_bitoff );\
	(*((UINT8*)bmlocal13459_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13460_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13461_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13461_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13461_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_BYTES_SIZE 1

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13464_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13464_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13464_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_CELL_SIZE 1

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13465_dim_size0;\
	UINT bmlocal13466_idx0;\
	bmlocal13465_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal13466_idx0=0; bmlocal13466_idx0<bmlocal13465_dim_size0; bmlocal13466_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13466_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal13466_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13467_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13467_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13467_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_SIZE 15

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13468_tmp_bytes = 0;\
	UINT bmlocal13469_tmp_bits = 0;\
	UINT bmlocal13470_acc_bytes;\
	UINT bmlocal13471_acc_bits;\
	PVOID bmlocal13472_parent_out_ptr;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13472_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13472_parent_out_ptr;\
	bmlocal13470_acc_bytes = 0;\
	bmlocal13471_acc_bits = 0;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13468_tmp_bytes, bmlocal13469_tmp_bits );\
	bmlocal13470_acc_bytes += bmlocal13468_tmp_bytes;\
	bmlocal13471_acc_bits += bmlocal13469_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13470_acc_bytes );\
	out_bitoff += bmlocal13471_acc_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13473_tmp_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal13473_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13473_tmp_bitoff);\
}

// Alignment of MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13474_my_ptr;\
	UINT bmlocal13475_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13474_my_ptr, bmlocal13475_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13474_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13474_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13474_my_ptr, bmlocal13475_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13476_my_ptr;\
	UINT bmlocal13477_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13476_my_ptr, bmlocal13477_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13476_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13476_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13476_my_ptr, bmlocal13477_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13478_out_val;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, bmlocal13478_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal13478_out_val), "%d", 1);\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13479_my_ptr;\
	UINT bmlocal13480_my_bitoff;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13479_my_ptr, bmlocal13480_my_bitoff );\
	(*((UINT8*)bmlocal13479_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13480_my_bitoff );\
}

// MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13481_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13481_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13481_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_BYTES_SIZE 1

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13482_tmp_bytes = 0;\
	UINT bmlocal13483_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13482_tmp_bytes, bmlocal13483_tmp_bits );\
	out_bytes += bmlocal13482_tmp_bytes;\
	out_bits += bmlocal13483_tmp_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13484_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13484_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13484_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_BYTES_SIZE 16

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13487_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13487_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13487_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_BYTES_CELL_SIZE 28

#define BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13488_dim_size0;\
	UINT bmlocal13489_idx0;\
	{\
		UINT32 bmlocal13490_var0;\
		BM_MonitorMCP_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13490_var0 );\
		bmlocal13488_dim_size0 = (UINT)(bmlocal13490_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal13489_idx0=0; bmlocal13489_idx0<bmlocal13488_dim_size0; bmlocal13489_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13489_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal13489_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorMCP_ChannelInfoArray_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13491_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal13491_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13491_tmp_bits );\
}


#define BM_MonitorMCP_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13492_tmp_bytes = 0;\
	UINT bmlocal13493_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorMCP_ChannelInfoArray_Channels_GET_SIZE( base_ptr, bmlocal13492_tmp_bytes, bmlocal13493_tmp_bits );\
	out_bytes += bmlocal13492_tmp_bytes;\
	out_bits += bmlocal13493_tmp_bits;\
}

#define BM_MonitorMCP_ChannelInfoArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13494_tmp_bits;\
	BM_MonitorMCP_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, bmlocal13494_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13494_tmp_bits );\
}

#define BM_MonitorMCP_ChannelInfoArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelInfoArray", 1);\
	BM_MonitorMCP_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_ChannelInfoArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_ChannelInfoArray_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorMCP_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13495_tmp_bytes = 0;\
	UINT bmlocal13496_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorMCP_ChannelInfoArray_GET_SIZE( base_ptr, bmlocal13495_tmp_bytes, bmlocal13496_tmp_bits );\
	out_bytes += bmlocal13495_tmp_bytes;\
	out_bits += bmlocal13496_tmp_bits;\
}

#define BM_MonitorMCP_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13497_tmp_bits;\
	BM_MonitorMCP_GET_SIZE( base_ptr, out_bytes, bmlocal13497_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13497_tmp_bits );\
}

#define BM_MonitorMCP_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorMCP", 1);\
	BM_MonitorMCP_LinkLossInd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorMCP_ChannelInfoArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorMCP_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorMCP_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorSelectedChannel[4];

// COMPOSITE: Full name: 'MonitorSelectedChannel' Type: 'MonitorSelectedChannel', Top-level, Non-instance, No bitoff root
#define BM_MonitorSelectedChannel_ChannelInfoArray_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13498_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_GET_POS( base_ptr, out_ptr, bmlocal13498_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13498_tmp_bitoff);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorSelectedChannel_ChannelInfoArray' Type: 'ChannelInfoArr', Inner, Non-instance, No bitoff root
#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13499_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_GET_POS( base_ptr, bmlocal13499_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13499_parent_out_ptr;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13500_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, out_ptr, bmlocal13500_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13500_tmp_bitoff);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_POS_ALIGNED 0

// Alignment of MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13501_my_ptr;\
	UINT bmlocal13502_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13501_my_ptr, bmlocal13502_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13501_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13501_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13501_my_ptr, bmlocal13502_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13503_my_ptr;\
	UINT bmlocal13504_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13503_my_ptr, bmlocal13504_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13503_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13503_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13503_my_ptr, bmlocal13504_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13505_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13505_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfChannels", 32, (UINT)(bmlocal13505_out_val), "%d", 1);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13506_my_ptr;\
	UINT bmlocal13507_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_POS( base_ptr, bmlocal13506_my_ptr, bmlocal13507_my_bitoff );\
	(*((UINT32*)bmlocal13506_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13507_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_NumOfChannels: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13508_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET_SIZE( base_ptr, out_bytes, bmlocal13508_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13508_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_BYTES_SIZE 4

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13511_acc_bytes;\
	UINT bmlocal13512_acc_bits;\
	PVOID bmlocal13513_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_GET_POS( base_ptr, bmlocal13513_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13513_parent_out_ptr;\
	bmlocal13511_acc_bytes = 4;\
	bmlocal13512_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13511_acc_bytes );\
	out_bitoff += bmlocal13512_acc_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13514_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_POS( base_ptr, out_ptr, bmlocal13514_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13514_tmp_bitoff);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_POS_ALIGNED 4

// ARRAY: MonitorSelectedChannel_ChannelInfoArray_Channels
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal13515_var0;\
		BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13515_var0 );\
		out_bytes = (UINT)(28*(1*bmlocal13515_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal13516_var0;\
			BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13516_var0 );\
			out_element_count = (UINT)(bmlocal13516_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13517_out_ptr;\
	UINT bmlocal13518_out_bitoff;\
	UINT bmlocal13519_element_size_bytes;\
	UINT bmlocal13520_element_size_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_POS( base_ptr, bmlocal13517_out_ptr, bmlocal13518_out_bitoff );\
	bmlocal13519_element_size_bytes = 28;\
	bmlocal13520_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13517_out_ptr) + (idx0) * bmlocal13519_element_size_bytes );\
	out_bitoff = bmlocal13518_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13520_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorSelectedChannel_ChannelInfoArray_Channels' Type: 'ChannelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13521_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13521_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13521_parent_out_ptr;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13522_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal13522_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13522_tmp_bitoff);\
}

// Alignment of MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13523_my_ptr;\
	UINT bmlocal13524_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13523_my_ptr, bmlocal13524_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13523_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13523_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13523_my_ptr, bmlocal13524_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13525_my_ptr;\
	UINT bmlocal13526_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13525_my_ptr, bmlocal13526_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13525_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13525_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13525_my_ptr, bmlocal13526_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13527_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET( base_ptr, idx0, bmlocal13527_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal13527_out_val), "%d", 1);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13528_my_ptr;\
	UINT bmlocal13529_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_POS( base_ptr, idx0, bmlocal13528_my_ptr, bmlocal13529_my_bitoff );\
	(*((UINT32*)bmlocal13528_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13529_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13530_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13530_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13530_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_BYTES_SIZE 4

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13533_acc_bytes;\
	UINT bmlocal13534_acc_bits;\
	PVOID bmlocal13535_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13535_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13535_parent_out_ptr;\
	bmlocal13533_acc_bytes = 4;\
	bmlocal13534_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13533_acc_bytes );\
	out_bitoff += bmlocal13534_acc_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13536_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, out_ptr, bmlocal13536_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13536_tmp_bitoff);\
}

// Alignment of MonitorSelectedChannel_ChannelInfoArray_Channels_bw: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13537_my_ptr;\
	UINT bmlocal13538_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13537_my_ptr, bmlocal13538_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13537_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_BW)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13537_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13537_my_ptr, bmlocal13538_my_bitoff, 32, BME_BW, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13539_my_ptr;\
	UINT bmlocal13540_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13539_my_ptr, bmlocal13540_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13539_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13539_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13539_my_ptr, bmlocal13540_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_BW bmlocal13541_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET( base_ptr, idx0, bmlocal13541_out_val );\
	if( bmlocal13541_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_3_5", 1);\
	}\
	if( bmlocal13541_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_5", 1);\
	}\
	if( bmlocal13541_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_7_5", 1);\
	}\
	if( bmlocal13541_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_8_75", 1);\
	}\
	if( bmlocal13541_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_10", 1);\
	}\
	if( bmlocal13541_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_14", 1);\
	}\
	if( bmlocal13541_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bw", "BMV_BW_20", 1);\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13542_my_ptr;\
	UINT bmlocal13543_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_POS( base_ptr, idx0, bmlocal13542_my_ptr, bmlocal13543_my_bitoff );\
	(*((UINT32*)bmlocal13542_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13543_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_bw: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13544_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13544_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13544_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_BYTES_SIZE 4

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13547_acc_bytes;\
	UINT bmlocal13548_acc_bits;\
	PVOID bmlocal13549_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13549_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13549_parent_out_ptr;\
	bmlocal13547_acc_bytes = 8;\
	bmlocal13548_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13547_acc_bytes );\
	out_bitoff += bmlocal13548_acc_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13550_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, out_ptr, bmlocal13550_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13550_tmp_bitoff);\
}

// Alignment of MonitorSelectedChannel_ChannelInfoArray_Channels_fft: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13551_my_ptr;\
	UINT bmlocal13552_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13551_my_ptr, bmlocal13552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13551_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_FFT)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13551_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13551_my_ptr, bmlocal13552_my_bitoff, 32, BME_FFT, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13553_my_ptr;\
	UINT bmlocal13554_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13553_my_ptr, bmlocal13554_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13553_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13553_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13553_my_ptr, bmlocal13554_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BME_FFT bmlocal13555_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET( base_ptr, idx0, bmlocal13555_out_val );\
	if( bmlocal13555_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_512", 1);\
	}\
	if( bmlocal13555_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fft", "BMV_FFT_1024", 1);\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13556_my_ptr;\
	UINT bmlocal13557_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_POS( base_ptr, idx0, bmlocal13556_my_ptr, bmlocal13557_my_bitoff );\
	(*((UINT32*)bmlocal13556_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13557_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_fft: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13558_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13558_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13558_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_BYTES_SIZE 4

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13561_acc_bytes;\
	UINT bmlocal13562_acc_bits;\
	PVOID bmlocal13563_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13563_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13563_parent_out_ptr;\
	bmlocal13561_acc_bytes = 12;\
	bmlocal13562_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13561_acc_bytes );\
	out_bitoff += bmlocal13562_acc_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13564_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13564_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13564_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles' Type: 'PreamblesMember', Inner, Non-instance, No bitoff root
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13565_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13565_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13565_parent_out_ptr;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13566_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, out_ptr, bmlocal13566_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13566_tmp_bitoff);\
}

// ARRAY: MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13567_out_ptr;\
	UINT bmlocal13568_out_bitoff;\
	UINT bmlocal13569_element_size_bytes;\
	UINT bmlocal13570_element_size_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_POS( base_ptr, idx0, bmlocal13567_out_ptr, bmlocal13568_out_bitoff );\
	bmlocal13569_element_size_bytes = 1;\
	bmlocal13570_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13567_out_ptr) + (idx1) * bmlocal13569_element_size_bytes );\
	out_bitoff = bmlocal13568_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13570_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13571_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal13571_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13571_parent_out_ptr;\
}

// Alignment of MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13572_my_ptr;\
	UINT bmlocal13573_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13572_my_ptr, bmlocal13573_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13572_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13572_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13572_my_ptr, bmlocal13573_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13574_my_ptr;\
	UINT bmlocal13575_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13574_my_ptr, bmlocal13575_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13574_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13574_my_ptr, bmlocal13575_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13576_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET( base_ptr, idx0, idx1, bmlocal13576_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal13576_out_val), "%u", 1);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13577_my_ptr;\
	UINT bmlocal13578_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_POS( base_ptr, idx0, idx1, bmlocal13577_my_ptr, bmlocal13578_my_bitoff );\
	(*((UINT8*)bmlocal13577_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13578_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13579_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13579_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13579_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_BYTES_SIZE 1

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13582_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal13582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13582_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_CELL_SIZE 1

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13583_dim_size0;\
	UINT bmlocal13584_idx0;\
	bmlocal13583_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal13584_idx0=0; bmlocal13584_idx0<bmlocal13583_dim_size0; bmlocal13584_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13584_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal13584_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13585_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13585_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13585_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_BYTES_SIZE 15

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13586_tmp_bytes = 0;\
	UINT bmlocal13587_tmp_bits = 0;\
	UINT bmlocal13588_acc_bytes;\
	UINT bmlocal13589_acc_bits;\
	PVOID bmlocal13590_parent_out_ptr;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_POS( base_ptr, idx0, bmlocal13590_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13590_parent_out_ptr;\
	bmlocal13588_acc_bytes = 0;\
	bmlocal13589_acc_bits = 0;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13586_tmp_bytes, bmlocal13587_tmp_bits );\
	bmlocal13588_acc_bytes += bmlocal13586_tmp_bytes;\
	bmlocal13589_acc_bits += bmlocal13587_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13588_acc_bytes );\
	out_bitoff += bmlocal13589_acc_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13591_tmp_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal13591_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13591_tmp_bitoff);\
}

// Alignment of MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13592_my_ptr;\
	UINT bmlocal13593_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13592_my_ptr, bmlocal13593_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13592_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13592_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13592_my_ptr, bmlocal13593_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13594_my_ptr;\
	UINT bmlocal13595_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13594_my_ptr, bmlocal13595_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13594_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13594_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13594_my_ptr, bmlocal13595_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13596_out_val;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET( base_ptr, idx0, bmlocal13596_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal13596_out_val), "%d", 1);\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13597_my_ptr;\
	UINT bmlocal13598_my_bitoff;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_POS( base_ptr, idx0, bmlocal13597_my_ptr, bmlocal13598_my_bitoff );\
	(*((UINT8*)bmlocal13597_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13598_my_bitoff );\
}

// MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13599_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13599_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13599_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_BYTES_SIZE 1

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13600_tmp_bytes = 0;\
	UINT bmlocal13601_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_GET_SIZE( base_ptr, idx0, bmlocal13600_tmp_bytes, bmlocal13601_tmp_bits );\
	out_bytes += bmlocal13600_tmp_bytes;\
	out_bits += bmlocal13601_tmp_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13602_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13602_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13602_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_BYTES_SIZE 16

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13605_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13605_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13605_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_BYTES_CELL_SIZE 28

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_bw_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_fft_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_Preambles_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13606_dim_size0;\
	UINT bmlocal13607_idx0;\
	{\
		UINT32 bmlocal13608_var0;\
		BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_GET( base_ptr, bmlocal13608_var0 );\
		bmlocal13606_dim_size0 = (UINT)(bmlocal13608_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Channels", 1);\
	for( bmlocal13607_idx0=0; bmlocal13607_idx0<bmlocal13606_dim_size0; bmlocal13607_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13607_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH_IDX( base_ptr, bmlocal13607_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13609_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_SIZE( base_ptr, out_bytes, bmlocal13609_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13609_tmp_bits );\
}


#define BM_MonitorSelectedChannel_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13610_tmp_bytes = 0;\
	UINT bmlocal13611_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_GET_SIZE( base_ptr, bmlocal13610_tmp_bytes, bmlocal13611_tmp_bits );\
	out_bytes += bmlocal13610_tmp_bytes;\
	out_bits += bmlocal13611_tmp_bits;\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13612_tmp_bits;\
	BM_MonitorSelectedChannel_ChannelInfoArray_GET_SIZE( base_ptr, out_bytes, bmlocal13612_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13612_tmp_bits );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelInfoArray", 1);\
	BM_MonitorSelectedChannel_ChannelInfoArray_NumOfChannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorSelectedChannel_ChannelInfoArray_Channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_ChannelInfoArray_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_ChannelInfoArray_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorSelectedChannel_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13613_tmp_bytes = 0;\
	UINT bmlocal13614_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorSelectedChannel_ChannelInfoArray_GET_SIZE( base_ptr, bmlocal13613_tmp_bytes, bmlocal13614_tmp_bits );\
	out_bytes += bmlocal13613_tmp_bytes;\
	out_bits += bmlocal13614_tmp_bits;\
}

#define BM_MonitorSelectedChannel_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13615_tmp_bits;\
	BM_MonitorSelectedChannel_GET_SIZE( base_ptr, out_bytes, bmlocal13615_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13615_tmp_bits );\
}

#define BM_MonitorSelectedChannel_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorSelectedChannel", 1);\
	BM_MonitorSelectedChannel_ChannelInfoArray_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorSelectedChannel_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorSelectedChannel_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorOMAFumoParams[628];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FUMOMember _FUMO;
} BMS_MonitorOMAFumoParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_FUMOMember _FUMO;
} BMS_MonitorOMAFumoParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorOMAFumoParams' Type: 'MonitorOMAFumoParams', Top-level, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorOMAFumoParams_FUMO_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13616_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, out_ptr, bmlocal13616_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13616_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO' Type: 'FUMOMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_pkgName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13617_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13617_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13617_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13618_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_GET_POS( base_ptr, out_ptr, bmlocal13618_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13618_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_pkgName' Type: 'pkgNameMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13619_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_GET_POS( base_ptr, bmlocal13619_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13619_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13620_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_POS( base_ptr, out_ptr, bmlocal13620_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13620_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_POS_ALIGNED 0

// ARRAY: MonitorOMAFumoParams_FUMO_pkgName_pkgName
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13621_out_ptr;\
	UINT bmlocal13622_out_bitoff;\
	UINT bmlocal13623_element_size_bytes;\
	UINT bmlocal13624_element_size_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_POS( base_ptr, bmlocal13621_out_ptr, bmlocal13622_out_bitoff );\
	bmlocal13623_element_size_bytes = 1;\
	bmlocal13624_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13621_out_ptr) + (idx0) * bmlocal13623_element_size_bytes );\
	out_bitoff = bmlocal13622_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13624_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_pkgName_pkgName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13625_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13625_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13625_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13626_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13626_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13626_tmp_bitoff);\
}

// Alignment of MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13627_my_ptr;\
	UINT bmlocal13628_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal13627_my_ptr, bmlocal13628_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13627_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13627_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13627_my_ptr, bmlocal13628_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13629_my_ptr;\
	UINT bmlocal13630_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal13629_my_ptr, bmlocal13630_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13629_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13629_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13629_my_ptr, bmlocal13630_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13631_out_val;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET( base_ptr, idx0, bmlocal13631_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13631_out_val), "%d", 1);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13632_my_ptr;\
	UINT bmlocal13633_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_POS( base_ptr, idx0, bmlocal13632_my_ptr, bmlocal13633_my_bitoff );\
	(*((UINT8*)bmlocal13632_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13633_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13634_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13634_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13634_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13637_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13637_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13637_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BYTES_CELL_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13638_dim_size0;\
	UINT bmlocal13639_idx0;\
	bmlocal13638_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgName", 1);\
	for( bmlocal13639_idx0=0; bmlocal13639_idx0<bmlocal13638_dim_size0; bmlocal13639_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13639_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH_IDX( base_ptr, bmlocal13639_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13640_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_SIZE( base_ptr, out_bytes, bmlocal13640_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13640_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_BYTES_SIZE 50

#define BM_MonitorOMAFumoParams_FUMO_pkgName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13641_tmp_bytes = 0;\
	UINT bmlocal13642_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_GET_SIZE( base_ptr, bmlocal13641_tmp_bytes, bmlocal13642_tmp_bits );\
	out_bytes += bmlocal13641_tmp_bytes;\
	out_bits += bmlocal13642_tmp_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13643_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgName_GET_SIZE( base_ptr, out_bytes, bmlocal13643_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13643_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_BYTES_SIZE 50

#define BM_MonitorOMAFumoParams_FUMO_pkgName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgName", 1);\
	BM_MonitorOMAFumoParams_FUMO_pkgName_pkgName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgName_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13646_acc_bytes;\
	UINT bmlocal13647_acc_bits;\
	PVOID bmlocal13648_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13648_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13648_parent_out_ptr;\
	bmlocal13646_acc_bytes = 50;\
	bmlocal13647_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13646_acc_bytes );\
	out_bitoff += bmlocal13647_acc_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13649_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_POS( base_ptr, out_ptr, bmlocal13649_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13649_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_POS_ALIGNED 50

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_pkgVersion' Type: 'pkgVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13650_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_POS( base_ptr, bmlocal13650_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13650_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13651_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_POS( base_ptr, out_ptr, bmlocal13651_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13651_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_POS_ALIGNED 50

// ARRAY: MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 50;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 50;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13652_out_ptr;\
	UINT bmlocal13653_out_bitoff;\
	UINT bmlocal13654_element_size_bytes;\
	UINT bmlocal13655_element_size_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_POS( base_ptr, bmlocal13652_out_ptr, bmlocal13653_out_bitoff );\
	bmlocal13654_element_size_bytes = 1;\
	bmlocal13655_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13652_out_ptr) + (idx0) * bmlocal13654_element_size_bytes );\
	out_bitoff = bmlocal13653_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13655_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13656_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13656_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13656_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13657_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13657_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13657_tmp_bitoff);\
}

// Alignment of MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13658_my_ptr;\
	UINT bmlocal13659_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13658_my_ptr, bmlocal13659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13658_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13658_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13658_my_ptr, bmlocal13659_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13660_my_ptr;\
	UINT bmlocal13661_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13660_my_ptr, bmlocal13661_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13660_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13660_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13660_my_ptr, bmlocal13661_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13662_out_val;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET( base_ptr, idx0, bmlocal13662_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13662_out_val), "%d", 1);\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13663_my_ptr;\
	UINT bmlocal13664_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13663_my_ptr, bmlocal13664_my_bitoff );\
	(*((UINT8*)bmlocal13663_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13664_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13665_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13665_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13665_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13668_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13668_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13668_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13669_dim_size0;\
	UINT bmlocal13670_idx0;\
	bmlocal13669_dim_size0 = 50;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersion", 1);\
	for( bmlocal13670_idx0=0; bmlocal13670_idx0<bmlocal13669_dim_size0; bmlocal13670_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13670_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal13670_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13671_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13671_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13671_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_BYTES_SIZE 50

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13672_tmp_bytes = 0;\
	UINT bmlocal13673_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_GET_SIZE( base_ptr, bmlocal13672_tmp_bytes, bmlocal13673_tmp_bits );\
	out_bytes += bmlocal13672_tmp_bytes;\
	out_bits += bmlocal13673_tmp_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13674_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13674_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13674_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_BYTES_SIZE 50

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "pkgVersion", 1);\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_pkgVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_pkgVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13677_acc_bytes;\
	UINT bmlocal13678_acc_bits;\
	PVOID bmlocal13679_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13679_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13679_parent_out_ptr;\
	bmlocal13677_acc_bytes = 100;\
	bmlocal13678_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13677_acc_bytes );\
	out_bitoff += bmlocal13678_acc_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13680_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_POS( base_ptr, out_ptr, bmlocal13680_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13680_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_POS_ALIGNED 100

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_downloadPkgURL' Type: 'downloadPkgURLMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13681_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_POS( base_ptr, bmlocal13681_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13681_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13682_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, out_ptr, bmlocal13682_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13682_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_POS_ALIGNED 100

// ARRAY: MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13683_out_ptr;\
	UINT bmlocal13684_out_bitoff;\
	UINT bmlocal13685_element_size_bytes;\
	UINT bmlocal13686_element_size_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_POS( base_ptr, bmlocal13683_out_ptr, bmlocal13684_out_bitoff );\
	bmlocal13685_element_size_bytes = 1;\
	bmlocal13686_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13683_out_ptr) + (idx0) * bmlocal13685_element_size_bytes );\
	out_bitoff = bmlocal13684_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13686_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13687_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13687_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13687_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13688_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13688_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13688_tmp_bitoff);\
}

// Alignment of MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13689_my_ptr;\
	UINT bmlocal13690_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13689_my_ptr, bmlocal13690_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13689_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13689_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13689_my_ptr, bmlocal13690_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13691_my_ptr;\
	UINT bmlocal13692_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13691_my_ptr, bmlocal13692_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13691_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13691_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13691_my_ptr, bmlocal13692_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13693_out_val;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET( base_ptr, idx0, bmlocal13693_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13693_out_val), "%d", 1);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13694_my_ptr;\
	UINT bmlocal13695_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13694_my_ptr, bmlocal13695_my_bitoff );\
	(*((UINT8*)bmlocal13694_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13695_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13696_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13696_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13696_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13699_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13699_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13699_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BYTES_CELL_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13700_dim_size0;\
	UINT bmlocal13701_idx0;\
	bmlocal13700_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURL", 1);\
	for( bmlocal13701_idx0=0; bmlocal13701_idx0<bmlocal13700_dim_size0; bmlocal13701_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13701_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal13701_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13702_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal13702_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13702_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_BYTES_SIZE 260

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13703_tmp_bytes = 0;\
	UINT bmlocal13704_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_GET_SIZE( base_ptr, bmlocal13703_tmp_bytes, bmlocal13704_tmp_bits );\
	out_bytes += bmlocal13703_tmp_bytes;\
	out_bits += bmlocal13704_tmp_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13705_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal13705_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13705_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_BYTES_SIZE 260

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadPkgURL", 1);\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_downloadPkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13708_acc_bytes;\
	UINT bmlocal13709_acc_bits;\
	PVOID bmlocal13710_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13710_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13710_parent_out_ptr;\
	bmlocal13708_acc_bytes = 360;\
	bmlocal13709_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13708_acc_bytes );\
	out_bitoff += bmlocal13709_acc_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13711_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, bmlocal13711_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13711_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_POS_ALIGNED 360

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL' Type: 'downloadAndUpdatePkgURLMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13712_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_POS( base_ptr, bmlocal13712_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13712_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13713_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, out_ptr, bmlocal13713_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13713_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_POS_ALIGNED 360

// ARRAY: MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 260;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 260;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13714_out_ptr;\
	UINT bmlocal13715_out_bitoff;\
	UINT bmlocal13716_element_size_bytes;\
	UINT bmlocal13717_element_size_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_POS( base_ptr, bmlocal13714_out_ptr, bmlocal13715_out_bitoff );\
	bmlocal13716_element_size_bytes = 1;\
	bmlocal13717_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13714_out_ptr) + (idx0) * bmlocal13716_element_size_bytes );\
	out_bitoff = bmlocal13715_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13717_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13718_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13718_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13718_parent_out_ptr;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13719_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13719_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13719_tmp_bitoff);\
}

// Alignment of MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13720_my_ptr;\
	UINT bmlocal13721_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13720_my_ptr, bmlocal13721_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13720_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13720_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13720_my_ptr, bmlocal13721_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13722_my_ptr;\
	UINT bmlocal13723_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13722_my_ptr, bmlocal13723_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13722_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13722_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13722_my_ptr, bmlocal13723_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13724_out_val;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET( base_ptr, idx0, bmlocal13724_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13724_out_val), "%d", 1);\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13725_my_ptr;\
	UINT bmlocal13726_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_POS( base_ptr, idx0, bmlocal13725_my_ptr, bmlocal13726_my_bitoff );\
	(*((UINT8*)bmlocal13725_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13726_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13727_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13727_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13727_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13730_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13730_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13730_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BYTES_CELL_SIZE 1

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13731_dim_size0;\
	UINT bmlocal13732_idx0;\
	bmlocal13731_dim_size0 = 260;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURL", 1);\
	for( bmlocal13732_idx0=0; bmlocal13732_idx0<bmlocal13731_dim_size0; bmlocal13732_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13732_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH_IDX( base_ptr, bmlocal13732_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13733_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal13733_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13733_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_BYTES_SIZE 260

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13734_tmp_bytes = 0;\
	UINT bmlocal13735_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, bmlocal13734_tmp_bytes, bmlocal13735_tmp_bits );\
	out_bytes += bmlocal13734_tmp_bytes;\
	out_bits += bmlocal13735_tmp_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13736_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_GET_SIZE( base_ptr, out_bytes, bmlocal13736_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13736_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_BYTES_SIZE 260

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "downloadAndUpdatePkgURL", 1);\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAFumoParams_FUMO_state_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13739_acc_bytes;\
	UINT bmlocal13740_acc_bits;\
	PVOID bmlocal13741_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13741_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13741_parent_out_ptr;\
	bmlocal13739_acc_bytes = 620;\
	bmlocal13740_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13739_acc_bytes );\
	out_bitoff += bmlocal13740_acc_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_state_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13742_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_state_GET_POS( base_ptr, out_ptr, bmlocal13742_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13742_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_state_POS_ALIGNED 620

// Alignment of MonitorOMAFumoParams_FUMO_state: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOMAFumoParams_FUMO_state_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_state_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13743_my_ptr;\
	UINT bmlocal13744_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_state_GET_POS( base_ptr, bmlocal13743_my_ptr, bmlocal13744_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (DOWNLOAD_STATE)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13743_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (DOWNLOAD_STATE)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13743_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13743_my_ptr, bmlocal13744_my_bitoff, 32, DOWNLOAD_STATE, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_state_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13745_my_ptr;\
	UINT bmlocal13746_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_state_GET_POS( base_ptr, bmlocal13745_my_ptr, bmlocal13746_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13745_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13745_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13745_my_ptr, bmlocal13746_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOMAFumoParams_FUMO_state: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_state: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_state: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_state: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_state: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_state: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_state_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	DOWNLOAD_STATE bmlocal13747_out_val;\
	BM_MonitorOMAFumoParams_FUMO_state_GET( base_ptr, bmlocal13747_out_val );\
	if( bmlocal13747_out_val == 10 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadIdle", 1);\
	}\
	if( bmlocal13747_out_val == 20 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadFailed", 1);\
	}\
	if( bmlocal13747_out_val == 30 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadProgressing", 1);\
	}\
	if( bmlocal13747_out_val == 40 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsDownloadComplete", 1);\
	}\
	if( bmlocal13747_out_val == 50 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsReadyToUpdate", 1);\
	}\
	if( bmlocal13747_out_val == 60 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateProgressing", 1);\
	}\
	if( bmlocal13747_out_val == 70 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateFailedHaveData", 1);\
	}\
	if( bmlocal13747_out_val == 80 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateFailedNoData", 1);\
	}\
	if( bmlocal13747_out_val == 90 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateSuccessfulHaveData", 1);\
	}\
	if( bmlocal13747_out_val == 100 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "BM_dsUpdateSuccessfulNoData", 1);\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_state_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_state_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_state_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13748_my_ptr;\
	UINT bmlocal13749_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_state_GET_POS( base_ptr, bmlocal13748_my_ptr, bmlocal13749_my_bitoff );\
	(*((UINT32*)bmlocal13748_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13749_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_state: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_state_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13750_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_state_GET_SIZE( base_ptr, out_bytes, bmlocal13750_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13750_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_state_BYTES_SIZE 4

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13753_acc_bytes;\
	UINT bmlocal13754_acc_bits;\
	PVOID bmlocal13755_parent_out_ptr;\
	BM_MonitorOMAFumoParams_FUMO_GET_POS( base_ptr, bmlocal13755_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13755_parent_out_ptr;\
	bmlocal13753_acc_bytes = 624;\
	bmlocal13754_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13753_acc_bytes );\
	out_bitoff += bmlocal13754_acc_bits;\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13756_tmp_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS( base_ptr, out_ptr, bmlocal13756_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13756_tmp_bitoff);\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_POS_ALIGNED 624

// Alignment of MonitorOMAFumoParams_FUMO_fIsAllocated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13757_my_ptr;\
	UINT bmlocal13758_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS( base_ptr, bmlocal13757_my_ptr, bmlocal13758_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13757_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13757_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13757_my_ptr, bmlocal13758_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13759_my_ptr;\
	UINT bmlocal13760_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS( base_ptr, bmlocal13759_my_ptr, bmlocal13760_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13759_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13759_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13759_my_ptr, bmlocal13760_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOMAFumoParams_FUMO_fIsAllocated: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_fIsAllocated: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAFumoParams_FUMO_fIsAllocated: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_fIsAllocated: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAFumoParams_FUMO_fIsAllocated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAFumoParams_FUMO_fIsAllocated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal13761_out_val;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET( base_ptr, bmlocal13761_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "fIsAllocated", 32, (UINT)(bmlocal13761_out_val), "%d", 1);\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13762_my_ptr;\
	UINT bmlocal13763_my_bitoff;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_POS( base_ptr, bmlocal13762_my_ptr, bmlocal13763_my_bitoff );\
	(*((UINT32*)bmlocal13762_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13763_my_bitoff );\
}

// MonitorOMAFumoParams_FUMO_fIsAllocated: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13764_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_GET_SIZE( base_ptr, out_bytes, bmlocal13764_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13764_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_fIsAllocated_BYTES_SIZE 4

#define BM_MonitorOMAFumoParams_FUMO_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 628;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13767_tmp_bits;\
	BM_MonitorOMAFumoParams_FUMO_GET_SIZE( base_ptr, out_bytes, bmlocal13767_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13767_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_FUMO_BYTES_SIZE 628

#define BM_MonitorOMAFumoParams_FUMO_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "FUMO", 1);\
	BM_MonitorOMAFumoParams_FUMO_pkgName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAFumoParams_FUMO_pkgVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAFumoParams_FUMO_downloadPkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAFumoParams_FUMO_downloadAndUpdatePkgURL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAFumoParams_FUMO_state_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAFumoParams_FUMO_fIsAllocated_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_FUMO_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_FUMO_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAFumoParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 628;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13770_tmp_bits;\
	BM_MonitorOMAFumoParams_GET_SIZE( base_ptr, out_bytes, bmlocal13770_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13770_tmp_bits );\
}

#define BM_MonitorOMAFumoParams_BYTES_SIZE 628

#define BM_MonitorOMAFumoParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorOMAFumoParams", 1);\
	BM_MonitorOMAFumoParams_FUMO_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAFumoParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAFumoParams_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorOMAParams[448];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_DeviceInfoMember _DeviceInfo;
	BMS_DeviceDetailsMember _DeviceDetails;
} BMS_MonitorOMAParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_DeviceDetailsMember _DeviceDetails;
	BMS_DeviceInfoMember _DeviceInfo;
} BMS_MonitorOMAParams;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorOMAParams' Type: 'MonitorOMAParams', Top-level, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorOMAParams_DeviceInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13771_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_GET_POS( base_ptr, out_ptr, bmlocal13771_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13771_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo' Type: 'DeviceInfoMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13772_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_GET_POS( base_ptr, bmlocal13772_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13772_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13773_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal13773_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13773_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13774_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_POS( base_ptr, bmlocal13774_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13774_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13775_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal13775_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13775_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_POS_ALIGNED 0

// ARRAY: MonitorOMAParams_DeviceInfo_manufacturer_manufacturer
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13776_out_ptr;\
	UINT bmlocal13777_out_bitoff;\
	UINT bmlocal13778_element_size_bytes;\
	UINT bmlocal13779_element_size_bits;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal13776_out_ptr, bmlocal13777_out_bitoff );\
	bmlocal13778_element_size_bytes = 1;\
	bmlocal13779_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13776_out_ptr) + (idx0) * bmlocal13778_element_size_bytes );\
	out_bitoff = bmlocal13777_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13779_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13780_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13780_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13780_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13781_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13781_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13781_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13782_my_ptr;\
	UINT bmlocal13783_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal13782_my_ptr, bmlocal13783_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13782_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13782_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13782_my_ptr, bmlocal13783_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13784_my_ptr;\
	UINT bmlocal13785_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal13784_my_ptr, bmlocal13785_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13784_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13784_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13784_my_ptr, bmlocal13785_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13786_out_val;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal13786_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13786_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13787_my_ptr;\
	UINT bmlocal13788_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal13787_my_ptr, bmlocal13788_my_bitoff );\
	(*((UINT8*)bmlocal13787_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13788_my_bitoff );\
}

// MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13789_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13789_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13789_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13792_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13792_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13792_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13793_dim_size0;\
	UINT bmlocal13794_idx0;\
	bmlocal13793_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal13794_idx0=0; bmlocal13794_idx0<bmlocal13793_dim_size0; bmlocal13794_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13794_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal13794_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13795_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal13795_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13795_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13796_tmp_bytes = 0;\
	UINT bmlocal13797_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal13796_tmp_bytes, bmlocal13797_tmp_bits );\
	out_bytes += bmlocal13796_tmp_bytes;\
	out_bits += bmlocal13797_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13798_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal13798_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13798_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceInfo_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13801_acc_bytes;\
	UINT bmlocal13802_acc_bits;\
	PVOID bmlocal13803_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_GET_POS( base_ptr, bmlocal13803_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13803_parent_out_ptr;\
	bmlocal13801_acc_bytes = 64;\
	bmlocal13802_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13801_acc_bytes );\
	out_bitoff += bmlocal13802_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceInfo_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13804_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_GET_POS( base_ptr, out_ptr, bmlocal13804_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13804_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_model_POS_ALIGNED 64

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13805_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_model_GET_POS( base_ptr, bmlocal13805_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13805_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13806_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_POS( base_ptr, out_ptr, bmlocal13806_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13806_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_POS_ALIGNED 64

// ARRAY: MonitorOMAParams_DeviceInfo_model_model
#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13807_out_ptr;\
	UINT bmlocal13808_out_bitoff;\
	UINT bmlocal13809_element_size_bytes;\
	UINT bmlocal13810_element_size_bits;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_POS( base_ptr, bmlocal13807_out_ptr, bmlocal13808_out_bitoff );\
	bmlocal13809_element_size_bytes = 1;\
	bmlocal13810_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13807_out_ptr) + (idx0) * bmlocal13809_element_size_bytes );\
	out_bitoff = bmlocal13808_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13810_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13811_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13811_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13811_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13812_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13812_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13812_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceInfo_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13813_my_ptr;\
	UINT bmlocal13814_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal13813_my_ptr, bmlocal13814_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13813_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13813_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13813_my_ptr, bmlocal13814_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13815_my_ptr;\
	UINT bmlocal13816_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal13815_my_ptr, bmlocal13816_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13815_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13815_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13815_my_ptr, bmlocal13816_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceInfo_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceInfo_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13817_out_val;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET( base_ptr, idx0, bmlocal13817_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13817_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13818_my_ptr;\
	UINT bmlocal13819_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal13818_my_ptr, bmlocal13819_my_bitoff );\
	(*((UINT8*)bmlocal13818_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13819_my_bitoff );\
}

// MonitorOMAParams_DeviceInfo_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13820_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13820_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13820_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13823_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13823_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13823_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13824_dim_size0;\
	UINT bmlocal13825_idx0;\
	bmlocal13824_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal13825_idx0=0; bmlocal13825_idx0<bmlocal13824_dim_size0; bmlocal13825_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13825_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal13825_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13826_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal13826_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13826_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_model_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13827_tmp_bytes = 0;\
	UINT bmlocal13828_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceInfo_model_model_GET_SIZE( base_ptr, bmlocal13827_tmp_bytes, bmlocal13828_tmp_bits );\
	out_bytes += bmlocal13827_tmp_bytes;\
	out_bits += bmlocal13828_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceInfo_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13829_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_model_GET_SIZE( base_ptr, out_bytes, bmlocal13829_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13829_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_MonitorOMAParams_DeviceInfo_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceInfo_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13832_acc_bytes;\
	UINT bmlocal13833_acc_bits;\
	PVOID bmlocal13834_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_GET_POS( base_ptr, bmlocal13834_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13834_parent_out_ptr;\
	bmlocal13832_acc_bytes = 128;\
	bmlocal13833_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13832_acc_bytes );\
	out_bitoff += bmlocal13833_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13835_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_GET_POS( base_ptr, out_ptr, bmlocal13835_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13835_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_POS_ALIGNED 128

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_devID' Type: 'devIDMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13836_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_devID_GET_POS( base_ptr, bmlocal13836_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13836_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13837_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_POS( base_ptr, out_ptr, bmlocal13837_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13837_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_POS_ALIGNED 128

// ARRAY: MonitorOMAParams_DeviceInfo_devID_devID
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13838_out_ptr;\
	UINT bmlocal13839_out_bitoff;\
	UINT bmlocal13840_element_size_bytes;\
	UINT bmlocal13841_element_size_bits;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_POS( base_ptr, bmlocal13838_out_ptr, bmlocal13839_out_bitoff );\
	bmlocal13840_element_size_bytes = 1;\
	bmlocal13841_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13838_out_ptr) + (idx0) * bmlocal13840_element_size_bytes );\
	out_bitoff = bmlocal13839_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13841_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceInfo_devID_devID' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13842_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13842_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13842_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13843_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13843_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13843_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13844_my_ptr;\
	UINT bmlocal13845_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal13844_my_ptr, bmlocal13845_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13844_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13844_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13844_my_ptr, bmlocal13845_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13846_my_ptr;\
	UINT bmlocal13847_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal13846_my_ptr, bmlocal13847_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13846_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13846_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13846_my_ptr, bmlocal13847_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13848_out_val;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET( base_ptr, idx0, bmlocal13848_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13848_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13849_my_ptr;\
	UINT bmlocal13850_my_bitoff;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal13849_my_ptr, bmlocal13850_my_bitoff );\
	(*((UINT8*)bmlocal13849_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13850_my_bitoff );\
}

// MonitorOMAParams_DeviceInfo_devID_devID_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13851_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13851_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13851_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13854_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13854_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13854_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13855_dim_size0;\
	UINT bmlocal13856_idx0;\
	bmlocal13855_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	for( bmlocal13856_idx0=0; bmlocal13856_idx0<bmlocal13855_dim_size0; bmlocal13856_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13856_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH_IDX( base_ptr, bmlocal13856_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13857_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_SIZE( base_ptr, out_bytes, bmlocal13857_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13857_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_devID_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13858_tmp_bytes = 0;\
	UINT bmlocal13859_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_GET_SIZE( base_ptr, bmlocal13858_tmp_bytes, bmlocal13859_tmp_bits );\
	out_bytes += bmlocal13858_tmp_bytes;\
	out_bits += bmlocal13859_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13860_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_devID_GET_SIZE( base_ptr, out_bytes, bmlocal13860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13860_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceInfo_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	BM_MonitorOMAParams_DeviceInfo_devID_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_devID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 192;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13863_tmp_bits;\
	BM_MonitorOMAParams_DeviceInfo_GET_SIZE( base_ptr, out_bytes, bmlocal13863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13863_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceInfo_BYTES_SIZE 192

#define BM_MonitorOMAParams_DeviceInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DeviceInfo", 1);\
	BM_MonitorOMAParams_DeviceInfo_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceInfo_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceInfo_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceInfo_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13866_acc_bytes;\
	UINT bmlocal13867_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal13866_acc_bytes = 192;\
	bmlocal13867_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13866_acc_bytes );\
	out_bitoff += bmlocal13867_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13868_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, out_ptr, bmlocal13868_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13868_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_POS_ALIGNED 192

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails' Type: 'DeviceDetailsMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13869_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, bmlocal13869_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13869_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13870_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_GET_POS( base_ptr, out_ptr, bmlocal13870_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13870_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_POS_ALIGNED 192

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_devType' Type: 'devTypeMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13871_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_devType_GET_POS( base_ptr, bmlocal13871_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13871_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13872_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_POS( base_ptr, out_ptr, bmlocal13872_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13872_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_POS_ALIGNED 192

// ARRAY: MonitorOMAParams_DeviceDetails_devType_devType
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13873_out_ptr;\
	UINT bmlocal13874_out_bitoff;\
	UINT bmlocal13875_element_size_bytes;\
	UINT bmlocal13876_element_size_bits;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_POS( base_ptr, bmlocal13873_out_ptr, bmlocal13874_out_bitoff );\
	bmlocal13875_element_size_bytes = 1;\
	bmlocal13876_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13873_out_ptr) + (idx0) * bmlocal13875_element_size_bytes );\
	out_bitoff = bmlocal13874_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13876_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_devType_devType' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13877_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13877_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13877_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13878_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13878_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13878_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13879_my_ptr;\
	UINT bmlocal13880_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal13879_my_ptr, bmlocal13880_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13879_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13879_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13879_my_ptr, bmlocal13880_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13881_my_ptr;\
	UINT bmlocal13882_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal13881_my_ptr, bmlocal13882_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13881_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13881_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13881_my_ptr, bmlocal13882_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13883_out_val;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET( base_ptr, idx0, bmlocal13883_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13883_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13884_my_ptr;\
	UINT bmlocal13885_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal13884_my_ptr, bmlocal13885_my_bitoff );\
	(*((UINT8*)bmlocal13884_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13885_my_bitoff );\
}

// MonitorOMAParams_DeviceDetails_devType_devType_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13886_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13886_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13886_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13889_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13889_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13889_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13890_dim_size0;\
	UINT bmlocal13891_idx0;\
	bmlocal13890_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	for( bmlocal13891_idx0=0; bmlocal13891_idx0<bmlocal13890_dim_size0; bmlocal13891_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13891_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH_IDX( base_ptr, bmlocal13891_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13892_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_SIZE( base_ptr, out_bytes, bmlocal13892_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13892_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_devType_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13893_tmp_bytes = 0;\
	UINT bmlocal13894_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_GET_SIZE( base_ptr, bmlocal13893_tmp_bytes, bmlocal13894_tmp_bits );\
	out_bytes += bmlocal13893_tmp_bytes;\
	out_bits += bmlocal13894_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13895_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_devType_GET_SIZE( base_ptr, out_bytes, bmlocal13895_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13895_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	BM_MonitorOMAParams_DeviceDetails_devType_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_devType_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13898_acc_bytes;\
	UINT bmlocal13899_acc_bits;\
	PVOID bmlocal13900_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, bmlocal13900_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13900_parent_out_ptr;\
	bmlocal13898_acc_bytes = 64;\
	bmlocal13899_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13898_acc_bytes );\
	out_bitoff += bmlocal13899_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13901_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal13901_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13901_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_POS_ALIGNED 256

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13902_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_POS( base_ptr, bmlocal13902_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13902_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13903_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal13903_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13903_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_POS_ALIGNED 256

// ARRAY: MonitorOMAParams_DeviceDetails_fwVersion_fwVersion
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13904_out_ptr;\
	UINT bmlocal13905_out_bitoff;\
	UINT bmlocal13906_element_size_bytes;\
	UINT bmlocal13907_element_size_bits;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal13904_out_ptr, bmlocal13905_out_bitoff );\
	bmlocal13906_element_size_bytes = 1;\
	bmlocal13907_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13904_out_ptr) + (idx0) * bmlocal13906_element_size_bytes );\
	out_bitoff = bmlocal13905_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13907_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13908_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13908_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13908_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13909_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13909_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13909_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13910_my_ptr;\
	UINT bmlocal13911_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13910_my_ptr, bmlocal13911_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13910_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13910_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13910_my_ptr, bmlocal13911_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13912_my_ptr;\
	UINT bmlocal13913_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13912_my_ptr, bmlocal13913_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13912_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13912_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13912_my_ptr, bmlocal13913_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13914_out_val;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal13914_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13914_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13915_my_ptr;\
	UINT bmlocal13916_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13915_my_ptr, bmlocal13916_my_bitoff );\
	(*((UINT8*)bmlocal13915_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13916_my_bitoff );\
}

// MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13917_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13917_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13917_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13920_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13920_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13920_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13921_dim_size0;\
	UINT bmlocal13922_idx0;\
	bmlocal13921_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal13922_idx0=0; bmlocal13922_idx0<bmlocal13921_dim_size0; bmlocal13922_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13922_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal13922_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13923_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13923_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13923_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13924_tmp_bytes = 0;\
	UINT bmlocal13925_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal13924_tmp_bytes, bmlocal13925_tmp_bits );\
	out_bytes += bmlocal13924_tmp_bytes;\
	out_bits += bmlocal13925_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13926_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13926_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13926_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceDetails_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13929_acc_bytes;\
	UINT bmlocal13930_acc_bits;\
	PVOID bmlocal13931_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, bmlocal13931_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13931_parent_out_ptr;\
	bmlocal13929_acc_bytes = 128;\
	bmlocal13930_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13929_acc_bytes );\
	out_bitoff += bmlocal13930_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13932_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_GET_POS( base_ptr, out_ptr, bmlocal13932_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13932_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_POS_ALIGNED 320

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13933_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_GET_POS( base_ptr, bmlocal13933_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13933_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13934_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal13934_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13934_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_POS_ALIGNED 320

// ARRAY: MonitorOMAParams_DeviceDetails_swVersion_swVersion
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13935_out_ptr;\
	UINT bmlocal13936_out_bitoff;\
	UINT bmlocal13937_element_size_bytes;\
	UINT bmlocal13938_element_size_bits;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_POS( base_ptr, bmlocal13935_out_ptr, bmlocal13936_out_bitoff );\
	bmlocal13937_element_size_bytes = 1;\
	bmlocal13938_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13935_out_ptr) + (idx0) * bmlocal13937_element_size_bytes );\
	out_bitoff = bmlocal13936_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13938_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13939_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13939_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13939_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13940_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13940_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13940_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13941_my_ptr;\
	UINT bmlocal13942_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13941_my_ptr, bmlocal13942_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13941_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13941_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13941_my_ptr, bmlocal13942_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13943_my_ptr;\
	UINT bmlocal13944_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13943_my_ptr, bmlocal13944_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13943_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13943_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13943_my_ptr, bmlocal13944_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13945_out_val;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal13945_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13945_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13946_my_ptr;\
	UINT bmlocal13947_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13946_my_ptr, bmlocal13947_my_bitoff );\
	(*((UINT8*)bmlocal13946_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13947_my_bitoff );\
}

// MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13948_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13948_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13948_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13951_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13951_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13951_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13952_dim_size0;\
	UINT bmlocal13953_idx0;\
	bmlocal13952_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal13953_idx0=0; bmlocal13953_idx0<bmlocal13952_dim_size0; bmlocal13953_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13953_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal13953_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13954_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13954_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13954_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13955_tmp_bytes = 0;\
	UINT bmlocal13956_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal13955_tmp_bytes, bmlocal13956_tmp_bits );\
	out_bytes += bmlocal13955_tmp_bytes;\
	out_bits += bmlocal13956_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13957_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13957_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13957_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_MonitorOMAParams_DeviceDetails_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal13960_acc_bytes;\
	UINT bmlocal13961_acc_bits;\
	PVOID bmlocal13962_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_GET_POS( base_ptr, bmlocal13962_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13962_parent_out_ptr;\
	bmlocal13960_acc_bytes = 192;\
	bmlocal13961_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal13960_acc_bytes );\
	out_bitoff += bmlocal13961_acc_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13963_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal13963_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13963_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_POS_ALIGNED 384

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13964_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_POS( base_ptr, bmlocal13964_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13964_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13965_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal13965_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13965_tmp_bitoff);\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_POS_ALIGNED 384

// ARRAY: MonitorOMAParams_DeviceDetails_hwVersion_hwVersion
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13966_out_ptr;\
	UINT bmlocal13967_out_bitoff;\
	UINT bmlocal13968_element_size_bytes;\
	UINT bmlocal13969_element_size_bits;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal13966_out_ptr, bmlocal13967_out_bitoff );\
	bmlocal13968_element_size_bytes = 1;\
	bmlocal13969_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal13966_out_ptr) + (idx0) * bmlocal13968_element_size_bytes );\
	out_bitoff = bmlocal13967_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal13969_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAParams_DeviceDetails_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13970_parent_out_ptr;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal13970_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13970_parent_out_ptr;\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13971_tmp_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal13971_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13971_tmp_bitoff);\
}

// Alignment of MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13972_my_ptr;\
	UINT bmlocal13973_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13972_my_ptr, bmlocal13973_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13972_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13972_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13972_my_ptr, bmlocal13973_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13974_my_ptr;\
	UINT bmlocal13975_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13974_my_ptr, bmlocal13975_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal13974_my_ptr, bmlocal13975_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal13976_out_val;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal13976_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal13976_out_val), "%d", 1);\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13977_my_ptr;\
	UINT bmlocal13978_my_bitoff;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal13977_my_ptr, bmlocal13978_my_bitoff );\
	(*((UINT8*)bmlocal13977_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal13978_my_bitoff );\
}

// MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13979_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal13979_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13979_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13982_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal13982_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13982_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal13983_dim_size0;\
	UINT bmlocal13984_idx0;\
	bmlocal13983_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal13984_idx0=0; bmlocal13984_idx0<bmlocal13983_dim_size0; bmlocal13984_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal13984_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal13984_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13985_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13985_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13985_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal13986_tmp_bytes = 0;\
	UINT bmlocal13987_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal13986_tmp_bytes, bmlocal13987_tmp_bits );\
	out_bytes += bmlocal13986_tmp_bytes;\
	out_bits += bmlocal13987_tmp_bits;\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13988_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal13988_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13988_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_DeviceDetails_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 256;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13991_tmp_bits;\
	BM_MonitorOMAParams_DeviceDetails_GET_SIZE( base_ptr, out_bytes, bmlocal13991_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13991_tmp_bits );\
}

#define BM_MonitorOMAParams_DeviceDetails_BYTES_SIZE 256

#define BM_MonitorOMAParams_DeviceDetails_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DeviceDetails", 1);\
	BM_MonitorOMAParams_DeviceDetails_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceDetails_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceDetails_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceDetails_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DeviceDetails_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DeviceDetails_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 448;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal13994_tmp_bits;\
	BM_MonitorOMAParams_GET_SIZE( base_ptr, out_bytes, bmlocal13994_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal13994_tmp_bits );\
}

#define BM_MonitorOMAParams_BYTES_SIZE 448

#define BM_MonitorOMAParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorOMAParams", 1);\
	BM_MonitorOMAParams_DeviceInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAParams_DeviceDetails_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAParams_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorOMAWimaxParams[452];

// COMPOSITE: Full name: 'MonitorOMAWimaxParams' Type: 'MonitorOMAWimaxParams', Top-level, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13995_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_POS( base_ptr, out_ptr, bmlocal13995_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13995_tmp_bitoff);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule' Type: 'RadioModuleMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13996_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_POS( base_ptr, bmlocal13996_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal13996_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal13997_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS( base_ptr, out_ptr, bmlocal13997_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal13997_tmp_bitoff);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_POS_ALIGNED 0

// Alignment of MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal13998_my_ptr;\
	UINT bmlocal13999_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS( base_ptr, bmlocal13998_my_ptr, bmlocal13999_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13998_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal13998_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal13998_my_ptr, bmlocal13999_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14000_my_ptr;\
	UINT bmlocal14001_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS( base_ptr, bmlocal14000_my_ptr, bmlocal14001_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14000_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14000_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14000_my_ptr, bmlocal14001_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14002_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET( base_ptr, bmlocal14002_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "LenOfRadioModule", 32, (UINT)(bmlocal14002_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14003_my_ptr;\
	UINT bmlocal14004_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_POS( base_ptr, bmlocal14003_my_ptr, bmlocal14004_my_bitoff );\
	(*((UINT32*)bmlocal14003_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14004_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_LenOfRadioModule: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14005_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET_SIZE( base_ptr, out_bytes, bmlocal14005_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14005_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_BYTES_SIZE 4

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14008_acc_bytes;\
	UINT bmlocal14009_acc_bits;\
	PVOID bmlocal14010_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_POS( base_ptr, bmlocal14010_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14010_parent_out_ptr;\
	bmlocal14008_acc_bytes = 4;\
	bmlocal14009_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14008_acc_bytes );\
	out_bitoff += bmlocal14009_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14011_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_POS( base_ptr, out_ptr, bmlocal14011_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14011_tmp_bitoff);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_POS_ALIGNED 4

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal14012_var0;\
		BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET( base_ptr, bmlocal14012_var0 );\
		out_bytes = (UINT)(664*(1*bmlocal14012_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal14013_var0;\
			BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET( base_ptr, bmlocal14013_var0 );\
			out_element_count = (UINT)(bmlocal14013_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14014_out_ptr;\
	UINT bmlocal14015_out_bitoff;\
	UINT bmlocal14016_element_size_bytes;\
	UINT bmlocal14017_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_POS( base_ptr, bmlocal14014_out_ptr, bmlocal14015_out_bitoff );\
	bmlocal14016_element_size_bytes = 664;\
	bmlocal14017_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14014_out_ptr) + (idx0) * bmlocal14016_element_size_bytes );\
	out_bitoff = bmlocal14015_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14017_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList' Type: 'WmxRadioModuleMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14018_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14018_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14018_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14019_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14019_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14019_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14020_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_POS( base_ptr, idx0, bmlocal14020_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14020_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14021_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14021_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14021_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14022_out_ptr;\
	UINT bmlocal14023_out_bitoff;\
	UINT bmlocal14024_element_size_bytes;\
	UINT bmlocal14025_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_POS( base_ptr, idx0, bmlocal14022_out_ptr, bmlocal14023_out_bitoff );\
	bmlocal14024_element_size_bytes = 1;\
	bmlocal14025_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14022_out_ptr) + (idx1) * bmlocal14024_element_size_bytes );\
	out_bitoff = bmlocal14023_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14025_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14026_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14026_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14026_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14027_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14027_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14027_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14028_my_ptr;\
	UINT bmlocal14029_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14028_my_ptr, bmlocal14029_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14028_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14028_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14028_my_ptr, bmlocal14029_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14030_my_ptr;\
	UINT bmlocal14031_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14030_my_ptr, bmlocal14031_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14030_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14030_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14030_my_ptr, bmlocal14031_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14032_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14032_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14032_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14033_my_ptr;\
	UINT bmlocal14034_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14033_my_ptr, bmlocal14034_my_bitoff );\
	(*((UINT8*)bmlocal14033_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14034_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14035_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14035_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14035_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14038_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14038_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14038_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14039_dim_size0;\
	UINT bmlocal14040_idx0;\
	bmlocal14039_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal14040_idx0=0; bmlocal14040_idx0<bmlocal14039_dim_size0; bmlocal14040_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14040_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14040_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14041_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14041_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14041_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14042_tmp_bytes = 0;\
	UINT bmlocal14043_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_GET_SIZE( base_ptr, idx0, bmlocal14042_tmp_bytes, bmlocal14043_tmp_bits );\
	out_bytes += bmlocal14042_tmp_bytes;\
	out_bits += bmlocal14043_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14044_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14044_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14044_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14047_acc_bytes;\
	UINT bmlocal14048_acc_bits;\
	PVOID bmlocal14049_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14049_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14049_parent_out_ptr;\
	bmlocal14047_acc_bytes = 64;\
	bmlocal14048_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14047_acc_bytes );\
	out_bitoff += bmlocal14048_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14050_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14050_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14050_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14051_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_POS( base_ptr, idx0, bmlocal14051_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14051_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14052_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14052_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14052_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14053_out_ptr;\
	UINT bmlocal14054_out_bitoff;\
	UINT bmlocal14055_element_size_bytes;\
	UINT bmlocal14056_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_POS( base_ptr, idx0, bmlocal14053_out_ptr, bmlocal14054_out_bitoff );\
	bmlocal14055_element_size_bytes = 1;\
	bmlocal14056_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14053_out_ptr) + (idx1) * bmlocal14055_element_size_bytes );\
	out_bitoff = bmlocal14054_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14056_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14057_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14057_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14057_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14058_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14058_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14058_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14059_my_ptr;\
	UINT bmlocal14060_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14059_my_ptr, bmlocal14060_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14059_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14059_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14059_my_ptr, bmlocal14060_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14061_my_ptr;\
	UINT bmlocal14062_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14061_my_ptr, bmlocal14062_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14061_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14061_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14061_my_ptr, bmlocal14062_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14063_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14063_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14063_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14064_my_ptr;\
	UINT bmlocal14065_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14064_my_ptr, bmlocal14065_my_bitoff );\
	(*((UINT8*)bmlocal14064_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14065_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14066_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14066_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14066_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14069_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14069_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14069_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14070_dim_size0;\
	UINT bmlocal14071_idx0;\
	bmlocal14070_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal14071_idx0=0; bmlocal14071_idx0<bmlocal14070_dim_size0; bmlocal14071_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14071_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14071_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14072_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14072_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14072_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14073_tmp_bytes = 0;\
	UINT bmlocal14074_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_GET_SIZE( base_ptr, idx0, bmlocal14073_tmp_bytes, bmlocal14074_tmp_bits );\
	out_bytes += bmlocal14073_tmp_bytes;\
	out_bits += bmlocal14074_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14075_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14075_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14075_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_swVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14078_acc_bytes;\
	UINT bmlocal14079_acc_bits;\
	PVOID bmlocal14080_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14080_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14080_parent_out_ptr;\
	bmlocal14078_acc_bytes = 128;\
	bmlocal14079_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14078_acc_bytes );\
	out_bitoff += bmlocal14079_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14081_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14081_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14081_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14082_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_POS( base_ptr, idx0, bmlocal14082_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14082_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14083_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, out_ptr, bmlocal14083_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14083_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14084_out_ptr;\
	UINT bmlocal14085_out_bitoff;\
	UINT bmlocal14086_element_size_bytes;\
	UINT bmlocal14087_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_POS( base_ptr, idx0, bmlocal14084_out_ptr, bmlocal14085_out_bitoff );\
	bmlocal14086_element_size_bytes = 1;\
	bmlocal14087_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14084_out_ptr) + (idx1) * bmlocal14086_element_size_bytes );\
	out_bitoff = bmlocal14085_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14087_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14088_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14088_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14088_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14089_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14089_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14089_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14090_my_ptr;\
	UINT bmlocal14091_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14090_my_ptr, bmlocal14091_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14090_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14090_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14090_my_ptr, bmlocal14091_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14092_my_ptr;\
	UINT bmlocal14093_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14092_my_ptr, bmlocal14093_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14092_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14092_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14092_my_ptr, bmlocal14093_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14094_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14094_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14094_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14095_my_ptr;\
	UINT bmlocal14096_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14095_my_ptr, bmlocal14096_my_bitoff );\
	(*((UINT8*)bmlocal14095_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14096_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14097_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14097_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14097_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14100_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14100_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14100_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14101_dim_size0;\
	UINT bmlocal14102_idx0;\
	bmlocal14101_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal14102_idx0=0; bmlocal14102_idx0<bmlocal14101_dim_size0; bmlocal14102_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14102_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14102_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14103_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14103_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14103_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14104_tmp_bytes = 0;\
	UINT bmlocal14105_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_GET_SIZE( base_ptr, idx0, bmlocal14104_tmp_bytes, bmlocal14105_tmp_bits );\
	out_bytes += bmlocal14104_tmp_bytes;\
	out_bits += bmlocal14105_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14106_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14106_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14106_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14109_acc_bytes;\
	UINT bmlocal14110_acc_bits;\
	PVOID bmlocal14111_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14111_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14111_parent_out_ptr;\
	bmlocal14109_acc_bytes = 192;\
	bmlocal14110_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14109_acc_bytes );\
	out_bitoff += bmlocal14110_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14112_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, out_ptr, bmlocal14112_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14112_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14113_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_POS( base_ptr, idx0, bmlocal14113_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14113_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14114_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, out_ptr, bmlocal14114_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14114_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14115_out_ptr;\
	UINT bmlocal14116_out_bitoff;\
	UINT bmlocal14117_element_size_bytes;\
	UINT bmlocal14118_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_POS( base_ptr, idx0, bmlocal14115_out_ptr, bmlocal14116_out_bitoff );\
	bmlocal14117_element_size_bytes = 1;\
	bmlocal14118_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14115_out_ptr) + (idx1) * bmlocal14117_element_size_bytes );\
	out_bitoff = bmlocal14116_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14118_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14119_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14119_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14119_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14120_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14120_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14120_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14121_my_ptr;\
	UINT bmlocal14122_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14121_my_ptr, bmlocal14122_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14121_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14121_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14121_my_ptr, bmlocal14122_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14123_my_ptr;\
	UINT bmlocal14124_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14123_my_ptr, bmlocal14124_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14123_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14123_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14123_my_ptr, bmlocal14124_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14125_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14125_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14125_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14126_my_ptr;\
	UINT bmlocal14127_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14126_my_ptr, bmlocal14127_my_bitoff );\
	(*((UINT8*)bmlocal14126_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14127_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14128_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14128_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14128_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14131_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14131_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14131_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14132_dim_size0;\
	UINT bmlocal14133_idx0;\
	bmlocal14132_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal14133_idx0=0; bmlocal14133_idx0<bmlocal14132_dim_size0; bmlocal14133_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14133_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14133_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14134_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14134_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14134_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14135_tmp_bytes = 0;\
	UINT bmlocal14136_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_GET_SIZE( base_ptr, idx0, bmlocal14135_tmp_bytes, bmlocal14136_tmp_bits );\
	out_bytes += bmlocal14135_tmp_bytes;\
	out_bits += bmlocal14136_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14137_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14137_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14137_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14140_acc_bytes;\
	UINT bmlocal14141_acc_bits;\
	PVOID bmlocal14142_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14142_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14142_parent_out_ptr;\
	bmlocal14140_acc_bytes = 256;\
	bmlocal14141_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14140_acc_bytes );\
	out_bitoff += bmlocal14141_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14143_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, out_ptr, bmlocal14143_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14143_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14144_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_POS( base_ptr, idx0, bmlocal14144_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14144_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14145_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, out_ptr, bmlocal14145_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14145_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14146_out_ptr;\
	UINT bmlocal14147_out_bitoff;\
	UINT bmlocal14148_element_size_bytes;\
	UINT bmlocal14149_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_POS( base_ptr, idx0, bmlocal14146_out_ptr, bmlocal14147_out_bitoff );\
	bmlocal14148_element_size_bytes = 1;\
	bmlocal14149_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14146_out_ptr) + (idx1) * bmlocal14148_element_size_bytes );\
	out_bitoff = bmlocal14147_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14149_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14150_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14150_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14150_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14151_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14151_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14151_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14152_my_ptr;\
	UINT bmlocal14153_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14152_my_ptr, bmlocal14153_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14152_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14152_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14152_my_ptr, bmlocal14153_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14154_my_ptr;\
	UINT bmlocal14155_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14154_my_ptr, bmlocal14155_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14154_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14154_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14154_my_ptr, bmlocal14155_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14156_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14156_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14156_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14157_my_ptr;\
	UINT bmlocal14158_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14157_my_ptr, bmlocal14158_my_bitoff );\
	(*((UINT8*)bmlocal14157_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14158_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14159_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14159_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14159_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14162_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14162_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14162_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14163_dim_size0;\
	UINT bmlocal14164_idx0;\
	bmlocal14163_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal14164_idx0=0; bmlocal14164_idx0<bmlocal14163_dim_size0; bmlocal14164_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14164_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14164_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14165_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14165_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14165_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14166_tmp_bytes = 0;\
	UINT bmlocal14167_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_GET_SIZE( base_ptr, idx0, bmlocal14166_tmp_bytes, bmlocal14167_tmp_bits );\
	out_bytes += bmlocal14166_tmp_bytes;\
	out_bits += bmlocal14167_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14168_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14168_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14168_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_model_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14171_acc_bytes;\
	UINT bmlocal14172_acc_bits;\
	PVOID bmlocal14173_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14173_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14173_parent_out_ptr;\
	bmlocal14171_acc_bytes = 320;\
	bmlocal14172_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14171_acc_bytes );\
	out_bitoff += bmlocal14172_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14174_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, out_ptr, bmlocal14174_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14174_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress' Type: 'macAddressMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14175_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_POS( base_ptr, idx0, bmlocal14175_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14175_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14176_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, out_ptr, bmlocal14176_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14176_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14177_out_ptr;\
	UINT bmlocal14178_out_bitoff;\
	UINT bmlocal14179_element_size_bytes;\
	UINT bmlocal14180_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_POS( base_ptr, idx0, bmlocal14177_out_ptr, bmlocal14178_out_bitoff );\
	bmlocal14179_element_size_bytes = 1;\
	bmlocal14180_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14177_out_ptr) + (idx1) * bmlocal14179_element_size_bytes );\
	out_bitoff = bmlocal14178_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14180_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14181_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14181_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14181_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14182_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14182_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14182_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14183_my_ptr;\
	UINT bmlocal14184_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14183_my_ptr, bmlocal14184_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14183_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14183_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14183_my_ptr, bmlocal14184_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14185_my_ptr;\
	UINT bmlocal14186_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14185_my_ptr, bmlocal14186_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14185_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14185_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14185_my_ptr, bmlocal14186_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14187_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14187_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14187_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14188_my_ptr;\
	UINT bmlocal14189_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14188_my_ptr, bmlocal14189_my_bitoff );\
	(*((UINT8*)bmlocal14188_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14189_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14190_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14190_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14190_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14193_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14193_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14193_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14194_dim_size0;\
	UINT bmlocal14195_idx0;\
	bmlocal14194_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	for( bmlocal14195_idx0=0; bmlocal14195_idx0<bmlocal14194_dim_size0; bmlocal14195_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14195_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14195_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14196_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14196_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14196_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14197_tmp_bytes = 0;\
	UINT bmlocal14198_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_GET_SIZE( base_ptr, idx0, bmlocal14197_tmp_bytes, bmlocal14198_tmp_bits );\
	out_bytes += bmlocal14197_tmp_bytes;\
	out_bits += bmlocal14198_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14199_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14199_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14199_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_macAddress_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14202_acc_bytes;\
	UINT bmlocal14203_acc_bits;\
	PVOID bmlocal14204_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14204_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14204_parent_out_ptr;\
	bmlocal14202_acc_bytes = 384;\
	bmlocal14203_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14202_acc_bytes );\
	out_bitoff += bmlocal14203_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14205_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, out_ptr, bmlocal14205_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14205_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock' Type: 'SpLockMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14206_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal14206_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14206_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14207_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, out_ptr, bmlocal14207_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14207_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14208_my_ptr;\
	UINT bmlocal14209_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal14208_my_ptr, bmlocal14209_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14208_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14208_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14208_my_ptr, bmlocal14209_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14210_my_ptr;\
	UINT bmlocal14211_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal14210_my_ptr, bmlocal14211_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14210_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14210_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14210_my_ptr, bmlocal14211_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14212_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET( base_ptr, idx0, bmlocal14212_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lockStatus", 32, (UINT)(bmlocal14212_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14213_my_ptr;\
	UINT bmlocal14214_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_POS( base_ptr, idx0, bmlocal14213_my_ptr, bmlocal14214_my_bitoff );\
	(*((UINT32*)bmlocal14213_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14214_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14215_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14215_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14215_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_BYTES_SIZE 4

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14218_acc_bytes;\
	UINT bmlocal14219_acc_bits;\
	PVOID bmlocal14220_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal14220_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14220_parent_out_ptr;\
	bmlocal14218_acc_bytes = 4;\
	bmlocal14219_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14218_acc_bytes );\
	out_bitoff += bmlocal14219_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14221_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, out_ptr, bmlocal14221_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14221_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName' Type: 'operatorNameMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14222_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_POS( base_ptr, idx0, bmlocal14222_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14222_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14223_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, out_ptr, bmlocal14223_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14223_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14224_out_ptr;\
	UINT bmlocal14225_out_bitoff;\
	UINT bmlocal14226_element_size_bytes;\
	UINT bmlocal14227_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_POS( base_ptr, idx0, bmlocal14224_out_ptr, bmlocal14225_out_bitoff );\
	bmlocal14226_element_size_bytes = 1;\
	bmlocal14227_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14224_out_ptr) + (idx1) * bmlocal14226_element_size_bytes );\
	out_bitoff = bmlocal14225_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14227_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14228_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14228_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14228_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14229_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14229_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14229_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14230_my_ptr;\
	UINT bmlocal14231_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14230_my_ptr, bmlocal14231_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14230_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14230_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14230_my_ptr, bmlocal14231_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14232_my_ptr;\
	UINT bmlocal14233_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14232_my_ptr, bmlocal14233_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14232_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14232_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14232_my_ptr, bmlocal14233_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14234_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14234_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14234_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14235_my_ptr;\
	UINT bmlocal14236_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14235_my_ptr, bmlocal14236_my_bitoff );\
	(*((UINT8*)bmlocal14235_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14236_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14237_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14237_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14237_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14240_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14240_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14240_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14241_dim_size0;\
	UINT bmlocal14242_idx0;\
	bmlocal14241_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal14242_idx0=0; bmlocal14242_idx0<bmlocal14241_dim_size0; bmlocal14242_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14242_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14242_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14243_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14243_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14243_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_BYTES_SIZE 100

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14244_tmp_bytes = 0;\
	UINT bmlocal14245_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_GET_SIZE( base_ptr, idx0, bmlocal14244_tmp_bytes, bmlocal14245_tmp_bits );\
	out_bytes += bmlocal14244_tmp_bytes;\
	out_bits += bmlocal14245_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14246_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14246_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14246_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_BYTES_SIZE 100

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_operatorName_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14249_acc_bytes;\
	UINT bmlocal14250_acc_bits;\
	PVOID bmlocal14251_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_POS( base_ptr, idx0, bmlocal14251_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14251_parent_out_ptr;\
	bmlocal14249_acc_bytes = 104;\
	bmlocal14250_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14249_acc_bytes );\
	out_bitoff += bmlocal14250_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14252_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, out_ptr, bmlocal14252_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14252_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem' Type: 'lockMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14253_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_POS( base_ptr, idx0, bmlocal14253_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14253_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14254_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, out_ptr, bmlocal14254_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14254_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 176;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 176;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14255_out_ptr;\
	UINT bmlocal14256_out_bitoff;\
	UINT bmlocal14257_element_size_bytes;\
	UINT bmlocal14258_element_size_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_POS( base_ptr, idx0, bmlocal14255_out_ptr, bmlocal14256_out_bitoff );\
	bmlocal14257_element_size_bytes = 1;\
	bmlocal14258_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14255_out_ptr) + (idx1) * bmlocal14257_element_size_bytes );\
	out_bitoff = bmlocal14256_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14258_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14259_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14259_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14259_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14260_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14260_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14260_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14261_my_ptr;\
	UINT bmlocal14262_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14261_my_ptr, bmlocal14262_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14261_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14261_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14261_my_ptr, bmlocal14262_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14263_my_ptr;\
	UINT bmlocal14264_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14263_my_ptr, bmlocal14264_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14263_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14263_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14263_my_ptr, bmlocal14264_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14265_out_val;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14265_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14265_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14266_my_ptr;\
	UINT bmlocal14267_my_bitoff;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14266_my_ptr, bmlocal14267_my_bitoff );\
	(*((UINT8*)bmlocal14266_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14267_my_bitoff );\
}

// MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14268_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14268_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14268_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14271_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14271_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14271_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14272_dim_size0;\
	UINT bmlocal14273_idx0;\
	bmlocal14272_dim_size0 = 176;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	for( bmlocal14273_idx0=0; bmlocal14273_idx0<bmlocal14272_dim_size0; bmlocal14273_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14273_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14273_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14274_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14274_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14274_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_BYTES_SIZE 176

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14275_tmp_bytes = 0;\
	UINT bmlocal14276_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_GET_SIZE( base_ptr, idx0, bmlocal14275_tmp_bytes, bmlocal14276_tmp_bits );\
	out_bytes += bmlocal14275_tmp_bytes;\
	out_bits += bmlocal14276_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14277_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14277_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14277_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_BYTES_SIZE 176

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "lockMem", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_lockMem_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 280;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14280_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14280_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14280_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_BYTES_SIZE 280

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SpLock", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockStatus_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_operatorName_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_lockMem_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 664;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14283_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14283_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14283_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_BYTES_CELL_SIZE 664

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_fwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_swVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_hwVersion_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_manufacturer_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_model_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_macAddress_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_SpLock_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14284_dim_size0;\
	UINT bmlocal14285_idx0;\
	{\
		UINT32 bmlocal14286_var0;\
		BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_GET( base_ptr, bmlocal14286_var0 );\
		bmlocal14284_dim_size0 = (UINT)(bmlocal14286_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "WmxRadioModuleList", 1);\
	for( bmlocal14285_idx0=0; bmlocal14285_idx0<bmlocal14284_dim_size0; bmlocal14285_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14285_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH_IDX( base_ptr, bmlocal14285_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14287_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_SIZE( base_ptr, out_bytes, bmlocal14287_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14287_tmp_bits );\
}


#define BM_MonitorOMAWimaxParams_RadioModule_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14288_tmp_bytes = 0;\
	UINT bmlocal14289_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_GET_SIZE( base_ptr, bmlocal14288_tmp_bytes, bmlocal14289_tmp_bits );\
	out_bytes += bmlocal14288_tmp_bytes;\
	out_bits += bmlocal14289_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_RadioModule_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14290_tmp_bits;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_SIZE( base_ptr, out_bytes, bmlocal14290_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14290_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RadioModule", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_LenOfRadioModule_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_RadioModule_WmxRadioModuleList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_RadioModule_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_RadioModule_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14291_tmp_bytes = 0;\
	UINT bmlocal14292_tmp_bits = 0;\
	UINT bmlocal14293_acc_bytes;\
	UINT bmlocal14294_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14293_acc_bytes = 0;\
	bmlocal14294_acc_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_SIZE( base_ptr, bmlocal14291_tmp_bytes, bmlocal14292_tmp_bits );\
	bmlocal14293_acc_bytes += bmlocal14291_tmp_bytes;\
	bmlocal14294_acc_bits += bmlocal14292_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14293_acc_bytes );\
	out_bitoff += bmlocal14294_acc_bits;\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment' Type: 'TerminalEquipmentMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14295_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_GET_POS( base_ptr, bmlocal14295_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14295_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14296_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_POS( base_ptr, out_ptr, bmlocal14296_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14296_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_devType' Type: 'devTypeMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14297_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_POS( base_ptr, bmlocal14297_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14297_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14298_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_POS( base_ptr, out_ptr, bmlocal14298_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14298_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_devType_devType
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14299_out_ptr;\
	UINT bmlocal14300_out_bitoff;\
	UINT bmlocal14301_element_size_bytes;\
	UINT bmlocal14302_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_POS( base_ptr, bmlocal14299_out_ptr, bmlocal14300_out_bitoff );\
	bmlocal14301_element_size_bytes = 1;\
	bmlocal14302_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14299_out_ptr) + (idx0) * bmlocal14301_element_size_bytes );\
	out_bitoff = bmlocal14300_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14302_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_devType_devType' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14303_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14303_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14303_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14304_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14304_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14304_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14305_my_ptr;\
	UINT bmlocal14306_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal14305_my_ptr, bmlocal14306_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14305_my_ptr, bmlocal14306_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14307_my_ptr;\
	UINT bmlocal14308_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_POS( base_ptr, idx0, bmlocal14307_my_ptr, bmlocal14308_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14307_my_ptr, bmlocal14308_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14309_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET( base_ptr, idx0, bmlocal14309_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14309_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14310_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET( base_ptr, idx0, bmlocal14310_val );\
	(bmlocal14310_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_SET( base_ptr, idx0, bmlocal14310_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14311_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14311_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14311_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14314_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14314_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14314_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14315_dim_size0;\
	UINT bmlocal14316_idx0;\
	bmlocal14315_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	for( bmlocal14316_idx0=0; bmlocal14316_idx0<bmlocal14315_dim_size0; bmlocal14316_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14316_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH_IDX( base_ptr, bmlocal14316_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14317_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_SIZE( base_ptr, out_bytes, bmlocal14317_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14317_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14318_tmp_bytes = 0;\
	UINT bmlocal14319_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_GET_SIZE( base_ptr, bmlocal14318_tmp_bytes, bmlocal14319_tmp_bits );\
	out_bytes += bmlocal14318_tmp_bytes;\
	out_bits += bmlocal14319_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14320_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_GET_SIZE( base_ptr, out_bytes, bmlocal14320_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14320_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devType", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14323_acc_bytes;\
	UINT bmlocal14324_acc_bits;\
	PVOID bmlocal14325_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_GET_POS( base_ptr, bmlocal14325_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14325_parent_out_ptr;\
	bmlocal14323_acc_bytes = 64;\
	bmlocal14324_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14323_acc_bytes );\
	out_bitoff += bmlocal14324_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14326_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_POS( base_ptr, out_ptr, bmlocal14326_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14326_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_devID' Type: 'devIDMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14327_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_POS( base_ptr, bmlocal14327_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14327_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14328_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_POS( base_ptr, out_ptr, bmlocal14328_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14328_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_devID_devID
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14329_out_ptr;\
	UINT bmlocal14330_out_bitoff;\
	UINT bmlocal14331_element_size_bytes;\
	UINT bmlocal14332_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_POS( base_ptr, bmlocal14329_out_ptr, bmlocal14330_out_bitoff );\
	bmlocal14331_element_size_bytes = 1;\
	bmlocal14332_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14329_out_ptr) + (idx0) * bmlocal14331_element_size_bytes );\
	out_bitoff = bmlocal14330_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14332_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_devID_devID' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14333_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14333_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14333_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14334_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14334_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14334_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14335_my_ptr;\
	UINT bmlocal14336_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal14335_my_ptr, bmlocal14336_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14335_my_ptr, bmlocal14336_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14337_my_ptr;\
	UINT bmlocal14338_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_POS( base_ptr, idx0, bmlocal14337_my_ptr, bmlocal14338_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14337_my_ptr, bmlocal14338_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14339_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET( base_ptr, idx0, bmlocal14339_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14339_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14340_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET( base_ptr, idx0, bmlocal14340_val );\
	(bmlocal14340_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_SET( base_ptr, idx0, bmlocal14340_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14341_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14341_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14341_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14344_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14344_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14344_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14345_dim_size0;\
	UINT bmlocal14346_idx0;\
	bmlocal14345_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	for( bmlocal14346_idx0=0; bmlocal14346_idx0<bmlocal14345_dim_size0; bmlocal14346_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14346_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH_IDX( base_ptr, bmlocal14346_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14347_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_SIZE( base_ptr, out_bytes, bmlocal14347_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14347_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14348_tmp_bytes = 0;\
	UINT bmlocal14349_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_GET_SIZE( base_ptr, bmlocal14348_tmp_bytes, bmlocal14349_tmp_bits );\
	out_bytes += bmlocal14348_tmp_bytes;\
	out_bits += bmlocal14349_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14350_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_GET_SIZE( base_ptr, out_bytes, bmlocal14350_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14350_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "devID", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_devID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14353_acc_bytes;\
	UINT bmlocal14354_acc_bits;\
	PVOID bmlocal14355_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_GET_POS( base_ptr, bmlocal14355_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14355_parent_out_ptr;\
	bmlocal14353_acc_bytes = 128;\
	bmlocal14354_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14353_acc_bytes );\
	out_bitoff += bmlocal14354_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14356_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, out_ptr, bmlocal14356_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14356_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip' Type: 'staticTermEquipMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14357_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, bmlocal14357_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14357_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14358_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal14358_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14358_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion' Type: 'fwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14359_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_POS( base_ptr, bmlocal14359_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14359_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14360_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, out_ptr, bmlocal14360_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14360_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14361_out_ptr;\
	UINT bmlocal14362_out_bitoff;\
	UINT bmlocal14363_element_size_bytes;\
	UINT bmlocal14364_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_POS( base_ptr, bmlocal14361_out_ptr, bmlocal14362_out_bitoff );\
	bmlocal14363_element_size_bytes = 1;\
	bmlocal14364_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14361_out_ptr) + (idx0) * bmlocal14363_element_size_bytes );\
	out_bitoff = bmlocal14362_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14364_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14365_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14365_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14365_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14366_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14366_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14366_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14367_my_ptr;\
	UINT bmlocal14368_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14367_my_ptr, bmlocal14368_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14367_my_ptr, bmlocal14368_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14369_my_ptr;\
	UINT bmlocal14370_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14369_my_ptr, bmlocal14370_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14369_my_ptr, bmlocal14370_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14371_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal14371_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14371_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14372_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET( base_ptr, idx0, bmlocal14372_val );\
	(bmlocal14372_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_SET( base_ptr, idx0, bmlocal14372_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14373_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14373_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14373_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14376_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14376_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14376_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14377_dim_size0;\
	UINT bmlocal14378_idx0;\
	bmlocal14377_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	for( bmlocal14378_idx0=0; bmlocal14378_idx0<bmlocal14377_dim_size0; bmlocal14378_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14378_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal14378_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14379_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14379_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14379_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14380_tmp_bytes = 0;\
	UINT bmlocal14381_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_GET_SIZE( base_ptr, bmlocal14380_tmp_bytes, bmlocal14381_tmp_bits );\
	out_bytes += bmlocal14380_tmp_bytes;\
	out_bits += bmlocal14381_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14382_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14382_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14382_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "fwVersion", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14385_acc_bytes;\
	UINT bmlocal14386_acc_bits;\
	PVOID bmlocal14387_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, bmlocal14387_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14387_parent_out_ptr;\
	bmlocal14385_acc_bytes = 64;\
	bmlocal14386_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14385_acc_bytes );\
	out_bitoff += bmlocal14386_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14388_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_POS( base_ptr, out_ptr, bmlocal14388_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14388_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion' Type: 'swVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14389_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_POS( base_ptr, bmlocal14389_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14389_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14390_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, out_ptr, bmlocal14390_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14390_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14391_out_ptr;\
	UINT bmlocal14392_out_bitoff;\
	UINT bmlocal14393_element_size_bytes;\
	UINT bmlocal14394_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_POS( base_ptr, bmlocal14391_out_ptr, bmlocal14392_out_bitoff );\
	bmlocal14393_element_size_bytes = 1;\
	bmlocal14394_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14391_out_ptr) + (idx0) * bmlocal14393_element_size_bytes );\
	out_bitoff = bmlocal14392_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14394_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14395_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14395_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14395_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14396_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14396_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14396_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14397_my_ptr;\
	UINT bmlocal14398_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14397_my_ptr, bmlocal14398_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14397_my_ptr, bmlocal14398_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14399_my_ptr;\
	UINT bmlocal14400_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14399_my_ptr, bmlocal14400_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14399_my_ptr, bmlocal14400_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14401_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal14401_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14401_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14402_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET( base_ptr, idx0, bmlocal14402_val );\
	(bmlocal14402_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_SET( base_ptr, idx0, bmlocal14402_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14403_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14403_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14403_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14406_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14406_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14406_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14407_dim_size0;\
	UINT bmlocal14408_idx0;\
	bmlocal14407_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	for( bmlocal14408_idx0=0; bmlocal14408_idx0<bmlocal14407_dim_size0; bmlocal14408_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14408_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal14408_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14409_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14409_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14409_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14410_tmp_bytes = 0;\
	UINT bmlocal14411_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_GET_SIZE( base_ptr, bmlocal14410_tmp_bytes, bmlocal14411_tmp_bits );\
	out_bytes += bmlocal14410_tmp_bytes;\
	out_bits += bmlocal14411_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14412_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14412_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14412_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "swVersion", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14415_acc_bytes;\
	UINT bmlocal14416_acc_bits;\
	PVOID bmlocal14417_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, bmlocal14417_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14417_parent_out_ptr;\
	bmlocal14415_acc_bytes = 128;\
	bmlocal14416_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14415_acc_bytes );\
	out_bitoff += bmlocal14416_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14418_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal14418_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14418_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion' Type: 'hwVersionMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14419_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_POS( base_ptr, bmlocal14419_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14419_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14420_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, out_ptr, bmlocal14420_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14420_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14421_out_ptr;\
	UINT bmlocal14422_out_bitoff;\
	UINT bmlocal14423_element_size_bytes;\
	UINT bmlocal14424_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_POS( base_ptr, bmlocal14421_out_ptr, bmlocal14422_out_bitoff );\
	bmlocal14423_element_size_bytes = 1;\
	bmlocal14424_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14421_out_ptr) + (idx0) * bmlocal14423_element_size_bytes );\
	out_bitoff = bmlocal14422_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14424_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14425_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14425_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14425_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14426_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14426_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14426_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14427_my_ptr;\
	UINT bmlocal14428_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14427_my_ptr, bmlocal14428_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14427_my_ptr, bmlocal14428_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14429_my_ptr;\
	UINT bmlocal14430_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_POS( base_ptr, idx0, bmlocal14429_my_ptr, bmlocal14430_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14429_my_ptr, bmlocal14430_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14431_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal14431_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14431_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14432_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET( base_ptr, idx0, bmlocal14432_val );\
	(bmlocal14432_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_SET( base_ptr, idx0, bmlocal14432_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14433_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14433_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14433_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14436_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14436_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14436_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14437_dim_size0;\
	UINT bmlocal14438_idx0;\
	bmlocal14437_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	for( bmlocal14438_idx0=0; bmlocal14438_idx0<bmlocal14437_dim_size0; bmlocal14438_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14438_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH_IDX( base_ptr, bmlocal14438_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14439_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14439_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14439_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14440_tmp_bytes = 0;\
	UINT bmlocal14441_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_GET_SIZE( base_ptr, bmlocal14440_tmp_bytes, bmlocal14441_tmp_bits );\
	out_bytes += bmlocal14440_tmp_bytes;\
	out_bits += bmlocal14441_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14442_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_GET_SIZE( base_ptr, out_bytes, bmlocal14442_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14442_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hwVersion", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14445_acc_bytes;\
	UINT bmlocal14446_acc_bits;\
	PVOID bmlocal14447_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, bmlocal14447_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14447_parent_out_ptr;\
	bmlocal14445_acc_bytes = 192;\
	bmlocal14446_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14445_acc_bytes );\
	out_bitoff += bmlocal14446_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14448_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal14448_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14448_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer' Type: 'manufacturerMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14449_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_POS( base_ptr, bmlocal14449_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14449_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14450_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, out_ptr, bmlocal14450_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14450_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14451_out_ptr;\
	UINT bmlocal14452_out_bitoff;\
	UINT bmlocal14453_element_size_bytes;\
	UINT bmlocal14454_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_POS( base_ptr, bmlocal14451_out_ptr, bmlocal14452_out_bitoff );\
	bmlocal14453_element_size_bytes = 1;\
	bmlocal14454_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14451_out_ptr) + (idx0) * bmlocal14453_element_size_bytes );\
	out_bitoff = bmlocal14452_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14454_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14455_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14455_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14455_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14456_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14456_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14456_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14457_my_ptr;\
	UINT bmlocal14458_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal14457_my_ptr, bmlocal14458_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14457_my_ptr, bmlocal14458_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14459_my_ptr;\
	UINT bmlocal14460_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_POS( base_ptr, idx0, bmlocal14459_my_ptr, bmlocal14460_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14459_my_ptr, bmlocal14460_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14461_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal14461_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14461_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14462_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET( base_ptr, idx0, bmlocal14462_val );\
	(bmlocal14462_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_SET( base_ptr, idx0, bmlocal14462_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14463_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14463_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14463_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14466_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14466_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14466_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14467_dim_size0;\
	UINT bmlocal14468_idx0;\
	bmlocal14467_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	for( bmlocal14468_idx0=0; bmlocal14468_idx0<bmlocal14467_dim_size0; bmlocal14468_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14468_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH_IDX( base_ptr, bmlocal14468_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14469_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal14469_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14469_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14470_tmp_bytes = 0;\
	UINT bmlocal14471_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_GET_SIZE( base_ptr, bmlocal14470_tmp_bytes, bmlocal14471_tmp_bits );\
	out_bytes += bmlocal14470_tmp_bytes;\
	out_bits += bmlocal14471_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14472_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_GET_SIZE( base_ptr, out_bytes, bmlocal14472_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14472_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "manufacturer", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14475_acc_bytes;\
	UINT bmlocal14476_acc_bits;\
	PVOID bmlocal14477_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_POS( base_ptr, bmlocal14477_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14477_parent_out_ptr;\
	bmlocal14475_acc_bytes = 256;\
	bmlocal14476_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14475_acc_bytes );\
	out_bitoff += bmlocal14476_acc_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14478_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_POS( base_ptr, out_ptr, bmlocal14478_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14478_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model' Type: 'modelMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14479_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_POS( base_ptr, bmlocal14479_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14479_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14480_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_POS( base_ptr, out_ptr, bmlocal14480_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14480_tmp_bitoff);\
}

// ARRAY: MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 64;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 64;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14481_out_ptr;\
	UINT bmlocal14482_out_bitoff;\
	UINT bmlocal14483_element_size_bytes;\
	UINT bmlocal14484_element_size_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_POS( base_ptr, bmlocal14481_out_ptr, bmlocal14482_out_bitoff );\
	bmlocal14483_element_size_bytes = 1;\
	bmlocal14484_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14481_out_ptr) + (idx0) * bmlocal14483_element_size_bytes );\
	out_bitoff = bmlocal14482_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14484_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14485_parent_out_ptr;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14485_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14485_parent_out_ptr;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14486_tmp_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14486_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14486_tmp_bitoff);\
}

// Alignment of MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14487_my_ptr;\
	UINT bmlocal14488_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal14487_my_ptr, bmlocal14488_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14487_my_ptr, bmlocal14488_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14489_my_ptr;\
	UINT bmlocal14490_my_bitoff;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_POS( base_ptr, idx0, bmlocal14489_my_ptr, bmlocal14490_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14489_my_ptr, bmlocal14490_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14491_out_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET( base_ptr, idx0, bmlocal14491_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14491_out_val), "%d", 1);\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14492_val;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET( base_ptr, idx0, bmlocal14492_val );\
	(bmlocal14492_val)++;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_SET( base_ptr, idx0, bmlocal14492_val );\
}

// MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14493_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14493_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14493_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_BYTES_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14496_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14496_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14496_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BYTES_CELL_SIZE 1

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14497_dim_size0;\
	UINT bmlocal14498_idx0;\
	bmlocal14497_dim_size0 = 64;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	for( bmlocal14498_idx0=0; bmlocal14498_idx0<bmlocal14497_dim_size0; bmlocal14498_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14498_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH_IDX( base_ptr, bmlocal14498_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14499_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_SIZE( base_ptr, out_bytes, bmlocal14499_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14499_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14500_tmp_bytes = 0;\
	UINT bmlocal14501_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_GET_SIZE( base_ptr, bmlocal14500_tmp_bytes, bmlocal14501_tmp_bits );\
	out_bytes += bmlocal14500_tmp_bytes;\
	out_bits += bmlocal14501_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14502_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_GET_SIZE( base_ptr, out_bytes, bmlocal14502_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14502_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_BYTES_SIZE 64

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "model", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 320;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14505_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_GET_SIZE( base_ptr, out_bytes, bmlocal14505_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14505_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_BYTES_SIZE 320

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "staticTermEquip", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_fwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_swVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_hwVersion_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_manufacturer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_model_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_TerminalEquipment_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 448;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14508_tmp_bits;\
	BM_MonitorOMAWimaxParams_TerminalEquipment_GET_SIZE( base_ptr, out_bytes, bmlocal14508_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14508_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_BYTES_SIZE 448

#define BM_MonitorOMAWimaxParams_TerminalEquipment_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TerminalEquipment", 1);\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_devID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_staticTermEquip_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_TerminalEquipment_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_TerminalEquipment_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOMAWimaxParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14509_tmp_bytes = 0;\
	UINT bmlocal14510_tmp_bits = 0;\
	out_bytes = 448;\
	out_bits = 0;\
	BM_MonitorOMAWimaxParams_RadioModule_GET_SIZE( base_ptr, bmlocal14509_tmp_bytes, bmlocal14510_tmp_bits );\
	out_bytes += bmlocal14509_tmp_bytes;\
	out_bits += bmlocal14510_tmp_bits;\
}

#define BM_MonitorOMAWimaxParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14511_tmp_bits;\
	BM_MonitorOMAWimaxParams_GET_SIZE( base_ptr, out_bytes, bmlocal14511_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14511_tmp_bits );\
}

#define BM_MonitorOMAWimaxParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorOMAWimaxParams", 1);\
	BM_MonitorOMAWimaxParams_RadioModule_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOMAWimaxParams_TerminalEquipment_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMAWimaxParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMAWimaxParams_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorOperator[120];

// COMPOSITE: Full name: 'MonitorOperator' Type: 'MonitorOperator', Top-level, Non-instance, No bitoff root
#define BM_MonitorOperator_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorOperator_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14512_tmp_bitoff;\
	BM_MonitorOperator_operatorName_GET_POS( base_ptr, out_ptr, bmlocal14512_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14512_tmp_bitoff);\
}

#define BM_MonitorOperator_operatorName_POS_ALIGNED 0

// COMPOSITE: Full name: 'MonitorOperator_operatorName' Type: 'operatorNameMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_operatorName_operatorName_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14513_parent_out_ptr;\
	BM_MonitorOperator_operatorName_GET_POS( base_ptr, bmlocal14513_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14513_parent_out_ptr;\
}

#define BM_MonitorOperator_operatorName_operatorName_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14514_tmp_bitoff;\
	BM_MonitorOperator_operatorName_operatorName_GET_POS( base_ptr, out_ptr, bmlocal14514_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14514_tmp_bitoff);\
}

#define BM_MonitorOperator_operatorName_operatorName_POS_ALIGNED 0

// ARRAY: MonitorOperator_operatorName_operatorName
#define BM_MonitorOperator_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_operatorName_operatorName_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14515_out_ptr;\
	UINT bmlocal14516_out_bitoff;\
	UINT bmlocal14517_element_size_bytes;\
	UINT bmlocal14518_element_size_bits;\
	BM_MonitorOperator_operatorName_operatorName_GET_POS( base_ptr, bmlocal14515_out_ptr, bmlocal14516_out_bitoff );\
	bmlocal14517_element_size_bytes = 1;\
	bmlocal14518_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14515_out_ptr) + (idx0) * bmlocal14517_element_size_bytes );\
	out_bitoff = bmlocal14516_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14518_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_operatorName_operatorName' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14519_parent_out_ptr;\
	BM_MonitorOperator_operatorName_operatorName_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14519_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14519_parent_out_ptr;\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14520_tmp_bitoff;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14520_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14520_tmp_bitoff);\
}

// Alignment of MonitorOperator_operatorName_operatorName_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14521_my_ptr;\
	UINT bmlocal14522_my_bitoff;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal14521_my_ptr, bmlocal14522_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14521_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14521_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14521_my_ptr, bmlocal14522_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14523_my_ptr;\
	UINT bmlocal14524_my_bitoff;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal14523_my_ptr, bmlocal14524_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14523_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14523_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14523_my_ptr, bmlocal14524_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOperator_operatorName_operatorName_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_operatorName_operatorName_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_operatorName_operatorName_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_operatorName_operatorName_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_operatorName_operatorName_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_operatorName_operatorName_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14525_out_val;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET( base_ptr, idx0, bmlocal14525_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14525_out_val), "%d", 1);\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14526_my_ptr;\
	UINT bmlocal14527_my_bitoff;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_POS( base_ptr, idx0, bmlocal14526_my_ptr, bmlocal14527_my_bitoff );\
	(*((UINT8*)bmlocal14526_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14527_my_bitoff );\
}

// MonitorOperator_operatorName_operatorName_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14528_tmp_bits;\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14528_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14528_tmp_bits );\
}

#define BM_MonitorOperator_operatorName_operatorName_BufferByte_BYTES_SIZE 1

#define BM_MonitorOperator_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14531_tmp_bits;\
	BM_MonitorOperator_operatorName_operatorName_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14531_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14531_tmp_bits );\
}

#define BM_MonitorOperator_operatorName_operatorName_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_operatorName_operatorName_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14532_dim_size0;\
	UINT bmlocal14533_idx0;\
	bmlocal14532_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	for( bmlocal14533_idx0=0; bmlocal14533_idx0<bmlocal14532_dim_size0; bmlocal14533_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14533_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH_IDX( base_ptr, bmlocal14533_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_operatorName_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_operatorName_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14534_tmp_bits;\
	BM_MonitorOperator_operatorName_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal14534_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14534_tmp_bits );\
}

#define BM_MonitorOperator_operatorName_operatorName_BYTES_SIZE 100

#define BM_MonitorOperator_operatorName_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14535_tmp_bytes = 0;\
	UINT bmlocal14536_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOperator_operatorName_operatorName_GET_SIZE( base_ptr, bmlocal14535_tmp_bytes, bmlocal14536_tmp_bits );\
	out_bytes += bmlocal14535_tmp_bytes;\
	out_bits += bmlocal14536_tmp_bits;\
}

#define BM_MonitorOperator_operatorName_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14537_tmp_bits;\
	BM_MonitorOperator_operatorName_GET_SIZE( base_ptr, out_bytes, bmlocal14537_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14537_tmp_bits );\
}

#define BM_MonitorOperator_operatorName_BYTES_SIZE 100

#define BM_MonitorOperator_operatorName_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "operatorName", 1);\
	BM_MonitorOperator_operatorName_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_operatorName_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_operatorName_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOperator_pollingInterval_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14540_acc_bytes;\
	UINT bmlocal14541_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14540_acc_bytes = 100;\
	bmlocal14541_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14540_acc_bytes );\
	out_bitoff += bmlocal14541_acc_bits;\
}

#define BM_MonitorOperator_pollingInterval_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14542_tmp_bitoff;\
	BM_MonitorOperator_pollingInterval_GET_POS( base_ptr, out_ptr, bmlocal14542_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14542_tmp_bitoff);\
}

#define BM_MonitorOperator_pollingInterval_POS_ALIGNED 100

// Alignment of MonitorOperator_pollingInterval: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_pollingInterval_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_pollingInterval_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14543_my_ptr;\
	UINT bmlocal14544_my_bitoff;\
	BM_MonitorOperator_pollingInterval_GET_POS( base_ptr, bmlocal14543_my_ptr, bmlocal14544_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14543_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14543_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14543_my_ptr, bmlocal14544_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_pollingInterval_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14545_my_ptr;\
	UINT bmlocal14546_my_bitoff;\
	BM_MonitorOperator_pollingInterval_GET_POS( base_ptr, bmlocal14545_my_ptr, bmlocal14546_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14545_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14545_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14545_my_ptr, bmlocal14546_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_pollingInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_pollingInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_pollingInterval: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_pollingInterval: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_pollingInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_pollingInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_pollingInterval_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14547_out_val;\
	BM_MonitorOperator_pollingInterval_GET( base_ptr, bmlocal14547_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "pollingInterval", 32, (UINT)(bmlocal14547_out_val), "%d", 1);\
}

#define BM_MonitorOperator_pollingInterval_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_pollingInterval_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_pollingInterval_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14548_my_ptr;\
	UINT bmlocal14549_my_bitoff;\
	BM_MonitorOperator_pollingInterval_GET_POS( base_ptr, bmlocal14548_my_ptr, bmlocal14549_my_bitoff );\
	(*((UINT32*)bmlocal14548_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14549_my_bitoff );\
}

// MonitorOperator_pollingInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_pollingInterval_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14550_tmp_bits;\
	BM_MonitorOperator_pollingInterval_GET_SIZE( base_ptr, out_bytes, bmlocal14550_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14550_tmp_bits );\
}

#define BM_MonitorOperator_pollingInterval_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14553_acc_bytes;\
	UINT bmlocal14554_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14553_acc_bytes = 104;\
	bmlocal14554_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14553_acc_bytes );\
	out_bitoff += bmlocal14554_acc_bits;\
}

#define BM_MonitorOperator_Eaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14555_tmp_bitoff;\
	BM_MonitorOperator_Eaps_GET_POS( base_ptr, out_ptr, bmlocal14555_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14555_tmp_bitoff);\
}

#define BM_MonitorOperator_Eaps_POS_ALIGNED 104

// COMPOSITE: Full name: 'MonitorOperator_Eaps' Type: 'Eaps', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_NumOfEaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14556_parent_out_ptr;\
	BM_MonitorOperator_Eaps_GET_POS( base_ptr, bmlocal14556_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14556_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14557_tmp_bitoff;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET_POS( base_ptr, out_ptr, bmlocal14557_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14557_tmp_bitoff);\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_POS_ALIGNED 104

// Alignment of MonitorOperator_Eaps_NumOfEaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_NumOfEaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14558_my_ptr;\
	UINT bmlocal14559_my_bitoff;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal14558_my_ptr, bmlocal14559_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14558_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14558_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14558_my_ptr, bmlocal14559_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14560_my_ptr;\
	UINT bmlocal14561_my_bitoff;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal14560_my_ptr, bmlocal14561_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14560_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14560_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14560_my_ptr, bmlocal14561_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_NumOfEaps: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_NumOfEaps: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_NumOfEaps: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_NumOfEaps: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_NumOfEaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_NumOfEaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14562_out_val;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET( base_ptr, bmlocal14562_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfEaps", 32, (UINT)(bmlocal14562_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14563_my_ptr;\
	UINT bmlocal14564_my_bitoff;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET_POS( base_ptr, bmlocal14563_my_ptr, bmlocal14564_my_bitoff );\
	(*((UINT32*)bmlocal14563_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14564_my_bitoff );\
}

// MonitorOperator_Eaps_NumOfEaps: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_NumOfEaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14565_tmp_bits;\
	BM_MonitorOperator_Eaps_NumOfEaps_GET_SIZE( base_ptr, out_bytes, bmlocal14565_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14565_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_NumOfEaps_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14568_acc_bytes;\
	UINT bmlocal14569_acc_bits;\
	PVOID bmlocal14570_parent_out_ptr;\
	BM_MonitorOperator_Eaps_GET_POS( base_ptr, bmlocal14570_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14570_parent_out_ptr;\
	bmlocal14568_acc_bytes = 4;\
	bmlocal14569_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14568_acc_bytes );\
	out_bitoff += bmlocal14569_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14571_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_GET_POS( base_ptr, out_ptr, bmlocal14571_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14571_tmp_bitoff);\
}

#define BM_MonitorOperator_Eaps_EapList_POS_ALIGNED 108

// ARRAY: MonitorOperator_Eaps_EapList
#define BM_MonitorOperator_Eaps_EapList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal14572_var0;\
		BM_MonitorOperator_Eaps_NumOfEaps_GET( base_ptr, bmlocal14572_var0 );\
		out_bytes = (UINT)(352*(1*bmlocal14572_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal14573_var0;\
			BM_MonitorOperator_Eaps_NumOfEaps_GET( base_ptr, bmlocal14573_var0 );\
			out_element_count = (UINT)(bmlocal14573_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14574_out_ptr;\
	UINT bmlocal14575_out_bitoff;\
	UINT bmlocal14576_element_size_bytes;\
	UINT bmlocal14577_element_size_bits;\
	BM_MonitorOperator_Eaps_EapList_GET_POS( base_ptr, bmlocal14574_out_ptr, bmlocal14575_out_bitoff );\
	bmlocal14576_element_size_bytes = 352;\
	bmlocal14577_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14574_out_ptr) + (idx0) * bmlocal14576_element_size_bytes );\
	out_bitoff = bmlocal14575_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14577_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList' Type: 'EapMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14578_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14578_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14578_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14579_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, out_ptr, bmlocal14579_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14579_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_usePrivacy: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14580_my_ptr;\
	UINT bmlocal14581_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal14580_my_ptr, bmlocal14581_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14580_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14580_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14580_my_ptr, bmlocal14581_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14582_my_ptr;\
	UINT bmlocal14583_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal14582_my_ptr, bmlocal14583_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14582_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14582_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14582_my_ptr, bmlocal14583_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_EapList_usePrivacy: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_usePrivacy: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_usePrivacy: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_usePrivacy: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_usePrivacy: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_usePrivacy: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14584_out_val;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET( base_ptr, idx0, bmlocal14584_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "usePrivacy", 32, (UINT)(bmlocal14584_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14585_my_ptr;\
	UINT bmlocal14586_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_POS( base_ptr, idx0, bmlocal14585_my_ptr, bmlocal14586_my_bitoff );\
	(*((UINT32*)bmlocal14585_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14586_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_usePrivacy: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14587_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14587_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14587_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_usePrivacy_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14590_acc_bytes;\
	UINT bmlocal14591_acc_bits;\
	PVOID bmlocal14592_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14592_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14592_parent_out_ptr;\
	bmlocal14590_acc_bytes = 4;\
	bmlocal14591_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14590_acc_bytes );\
	out_bitoff += bmlocal14591_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14593_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, out_ptr, bmlocal14593_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14593_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_vendorId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_EapList_vendorId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14594_my_ptr;\
	UINT bmlocal14595_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal14594_my_ptr, bmlocal14595_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14594_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14594_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14594_my_ptr, bmlocal14595_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14596_my_ptr;\
	UINT bmlocal14597_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal14596_my_ptr, bmlocal14597_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14596_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14596_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14596_my_ptr, bmlocal14597_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_EapList_vendorId: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_vendorId: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_vendorId: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_vendorId: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_vendorId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_vendorId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14598_out_val;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET( base_ptr, idx0, bmlocal14598_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorId", 32, (UINT)(bmlocal14598_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14599_my_ptr;\
	UINT bmlocal14600_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET_POS( base_ptr, idx0, bmlocal14599_my_ptr, bmlocal14600_my_bitoff );\
	(*((UINT32*)bmlocal14599_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14600_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_vendorId: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_vendorId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14601_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_vendorId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14601_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14601_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorId_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14604_acc_bytes;\
	UINT bmlocal14605_acc_bits;\
	PVOID bmlocal14606_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14606_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14606_parent_out_ptr;\
	bmlocal14604_acc_bytes = 8;\
	bmlocal14605_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14604_acc_bytes );\
	out_bitoff += bmlocal14605_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14607_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, out_ptr, bmlocal14607_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14607_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_vendorType: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_EapList_vendorType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14608_my_ptr;\
	UINT bmlocal14609_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal14608_my_ptr, bmlocal14609_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14608_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14608_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14608_my_ptr, bmlocal14609_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14610_my_ptr;\
	UINT bmlocal14611_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal14610_my_ptr, bmlocal14611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14610_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14610_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14610_my_ptr, bmlocal14611_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_EapList_vendorType: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_vendorType: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_vendorType: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_vendorType: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_vendorType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_vendorType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14612_out_val;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET( base_ptr, idx0, bmlocal14612_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vendorType", 32, (UINT)(bmlocal14612_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14613_my_ptr;\
	UINT bmlocal14614_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET_POS( base_ptr, idx0, bmlocal14613_my_ptr, bmlocal14614_my_bitoff );\
	(*((UINT32*)bmlocal14613_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14614_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_vendorType: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_vendorType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14615_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_vendorType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14615_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14615_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_vendorType_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14618_acc_bytes;\
	UINT bmlocal14619_acc_bits;\
	PVOID bmlocal14620_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14620_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14620_parent_out_ptr;\
	bmlocal14618_acc_bytes = 12;\
	bmlocal14619_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14618_acc_bytes );\
	out_bitoff += bmlocal14619_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14621_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, out_ptr, bmlocal14621_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14621_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_EAPMethod: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14622_my_ptr;\
	UINT bmlocal14623_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal14622_my_ptr, bmlocal14623_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14622_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14622_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14622_my_ptr, bmlocal14623_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14624_my_ptr;\
	UINT bmlocal14625_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal14624_my_ptr, bmlocal14625_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14624_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14624_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14624_my_ptr, bmlocal14625_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_EapList_EAPMethod: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EAPMethod: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EAPMethod: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EAPMethod: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EAPMethod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_EAPMethod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal14626_out_val;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET( base_ptr, idx0, bmlocal14626_out_val );\
	if( bmlocal14626_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal14626_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal14626_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal14626_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal14626_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal14626_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "EAPMethod", "BM_CHAP", 1);\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14627_my_ptr;\
	UINT bmlocal14628_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_POS( base_ptr, idx0, bmlocal14627_my_ptr, bmlocal14628_my_bitoff );\
	(*((UINT32*)bmlocal14627_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14628_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_EAPMethod: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14629_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14629_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14629_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EAPMethod_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14632_acc_bytes;\
	UINT bmlocal14633_acc_bits;\
	PVOID bmlocal14634_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14634_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14634_parent_out_ptr;\
	bmlocal14632_acc_bytes = 16;\
	bmlocal14633_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14632_acc_bytes );\
	out_bitoff += bmlocal14633_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14635_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, out_ptr, bmlocal14635_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14635_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_EapId' Type: 'EapIdMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14636_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_EapId_GET_POS( base_ptr, idx0, bmlocal14636_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14636_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14637_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, out_ptr, bmlocal14637_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14637_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Eaps_EapList_EapId_EapId
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14638_out_ptr;\
	UINT bmlocal14639_out_bitoff;\
	UINT bmlocal14640_element_size_bytes;\
	UINT bmlocal14641_element_size_bits;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_POS( base_ptr, idx0, bmlocal14638_out_ptr, bmlocal14639_out_bitoff );\
	bmlocal14640_element_size_bytes = 1;\
	bmlocal14641_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14638_out_ptr) + (idx1) * bmlocal14640_element_size_bytes );\
	out_bitoff = bmlocal14639_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14641_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_EapId_EapId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14642_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14642_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14642_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14643_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14643_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14643_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14644_my_ptr;\
	UINT bmlocal14645_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14644_my_ptr, bmlocal14645_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14644_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14644_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14644_my_ptr, bmlocal14645_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14646_my_ptr;\
	UINT bmlocal14647_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14646_my_ptr, bmlocal14647_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14646_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14646_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14646_my_ptr, bmlocal14647_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14648_out_val;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14648_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14648_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14649_my_ptr;\
	UINT bmlocal14650_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14649_my_ptr, bmlocal14650_my_bitoff );\
	(*((UINT8*)bmlocal14649_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14650_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14651_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14651_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14651_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_BYTES_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14654_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14654_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14654_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14655_dim_size0;\
	UINT bmlocal14656_idx0;\
	bmlocal14655_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	for( bmlocal14656_idx0=0; bmlocal14656_idx0<bmlocal14655_dim_size0; bmlocal14656_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14656_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14656_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14657_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14657_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14657_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_EapId_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_EapId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14658_tmp_bytes = 0;\
	UINT bmlocal14659_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_GET_SIZE( base_ptr, idx0, bmlocal14658_tmp_bytes, bmlocal14659_tmp_bits );\
	out_bytes += bmlocal14658_tmp_bytes;\
	out_bits += bmlocal14659_tmp_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14660_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14660_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14660_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapId", 1);\
	BM_MonitorOperator_Eaps_EapList_EapId_EapId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14663_acc_bytes;\
	UINT bmlocal14664_acc_bits;\
	PVOID bmlocal14665_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14665_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14665_parent_out_ptr;\
	bmlocal14663_acc_bytes = 116;\
	bmlocal14664_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14663_acc_bytes );\
	out_bitoff += bmlocal14664_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14666_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, bmlocal14666_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14666_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_provisionedPseudoId' Type: 'provisionedPseudoIdMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14667_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_POS( base_ptr, idx0, bmlocal14667_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14667_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14668_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, out_ptr, bmlocal14668_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14668_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14669_out_ptr;\
	UINT bmlocal14670_out_bitoff;\
	UINT bmlocal14671_element_size_bytes;\
	UINT bmlocal14672_element_size_bits;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_POS( base_ptr, idx0, bmlocal14669_out_ptr, bmlocal14670_out_bitoff );\
	bmlocal14671_element_size_bytes = 1;\
	bmlocal14672_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14669_out_ptr) + (idx1) * bmlocal14671_element_size_bytes );\
	out_bitoff = bmlocal14670_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14672_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14673_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14673_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14673_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14674_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14674_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14674_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14675_my_ptr;\
	UINT bmlocal14676_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14675_my_ptr, bmlocal14676_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14675_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14675_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14675_my_ptr, bmlocal14676_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14677_my_ptr;\
	UINT bmlocal14678_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14677_my_ptr, bmlocal14678_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14677_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14677_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14677_my_ptr, bmlocal14678_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14679_out_val;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14679_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14679_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14680_my_ptr;\
	UINT bmlocal14681_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14680_my_ptr, bmlocal14681_my_bitoff );\
	(*((UINT8*)bmlocal14680_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14681_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14682_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14682_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14682_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_BYTES_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14685_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14685_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14685_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14686_dim_size0;\
	UINT bmlocal14687_idx0;\
	bmlocal14686_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	for( bmlocal14687_idx0=0; bmlocal14687_idx0<bmlocal14686_dim_size0; bmlocal14687_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14687_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14687_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14688_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14688_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14688_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14689_tmp_bytes = 0;\
	UINT bmlocal14690_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_GET_SIZE( base_ptr, idx0, bmlocal14689_tmp_bytes, bmlocal14690_tmp_bits );\
	out_bytes += bmlocal14689_tmp_bytes;\
	out_bits += bmlocal14690_tmp_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14691_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14691_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14691_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "provisionedPseudoId", 1);\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOperator_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14694_acc_bytes;\
	UINT bmlocal14695_acc_bits;\
	PVOID bmlocal14696_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14696_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14696_parent_out_ptr;\
	bmlocal14694_acc_bytes = 216;\
	bmlocal14695_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14694_acc_bytes );\
	out_bitoff += bmlocal14695_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14697_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, out_ptr, bmlocal14697_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14697_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_EapPassword' Type: 'EapPasswordMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14698_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_GET_POS( base_ptr, idx0, bmlocal14698_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14698_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14699_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, out_ptr, bmlocal14699_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14699_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Eaps_EapList_EapPassword_EapPassword
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 32;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14700_out_ptr;\
	UINT bmlocal14701_out_bitoff;\
	UINT bmlocal14702_element_size_bytes;\
	UINT bmlocal14703_element_size_bits;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_POS( base_ptr, idx0, bmlocal14700_out_ptr, bmlocal14701_out_bitoff );\
	bmlocal14702_element_size_bytes = 1;\
	bmlocal14703_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14700_out_ptr) + (idx1) * bmlocal14702_element_size_bytes );\
	out_bitoff = bmlocal14701_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14703_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_EapPassword_EapPassword' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14704_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14704_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14704_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14705_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14705_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14705_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14706_my_ptr;\
	UINT bmlocal14707_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14706_my_ptr, bmlocal14707_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14706_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14706_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14706_my_ptr, bmlocal14707_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14708_my_ptr;\
	UINT bmlocal14709_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14708_my_ptr, bmlocal14709_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14708_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14708_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14708_my_ptr, bmlocal14709_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14710_out_val;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14710_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14710_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14711_my_ptr;\
	UINT bmlocal14712_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14711_my_ptr, bmlocal14712_my_bitoff );\
	(*((UINT8*)bmlocal14711_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14712_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14713_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14713_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14713_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_BYTES_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14716_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14716_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14716_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14717_dim_size0;\
	UINT bmlocal14718_idx0;\
	bmlocal14717_dim_size0 = 32;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	for( bmlocal14718_idx0=0; bmlocal14718_idx0<bmlocal14717_dim_size0; bmlocal14718_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14718_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14718_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14719_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14719_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14719_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_BYTES_SIZE 32

#define BM_MonitorOperator_Eaps_EapList_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14720_tmp_bytes = 0;\
	UINT bmlocal14721_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_GET_SIZE( base_ptr, idx0, bmlocal14720_tmp_bytes, bmlocal14721_tmp_bits );\
	out_bytes += bmlocal14720_tmp_bytes;\
	out_bits += bmlocal14721_tmp_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14722_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_EapPassword_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14722_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14722_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_BYTES_SIZE 32

#define BM_MonitorOperator_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapPassword", 1);\
	BM_MonitorOperator_Eaps_EapList_EapPassword_EapPassword_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_EapPassword_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOperator_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14725_acc_bytes;\
	UINT bmlocal14726_acc_bits;\
	PVOID bmlocal14727_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14727_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14727_parent_out_ptr;\
	bmlocal14725_acc_bytes = 248;\
	bmlocal14726_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14725_acc_bytes );\
	out_bitoff += bmlocal14726_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14728_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, out_ptr, bmlocal14728_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14728_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_Realm' Type: 'RealmMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14729_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_Realm_GET_POS( base_ptr, idx0, bmlocal14729_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14729_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14730_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, out_ptr, bmlocal14730_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14730_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Eaps_EapList_Realm_Realm
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 100;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14731_out_ptr;\
	UINT bmlocal14732_out_bitoff;\
	UINT bmlocal14733_element_size_bytes;\
	UINT bmlocal14734_element_size_bits;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_POS( base_ptr, idx0, bmlocal14731_out_ptr, bmlocal14732_out_bitoff );\
	bmlocal14733_element_size_bytes = 1;\
	bmlocal14734_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14731_out_ptr) + (idx1) * bmlocal14733_element_size_bytes );\
	out_bitoff = bmlocal14732_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14734_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Eaps_EapList_Realm_Realm' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14735_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14735_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14735_parent_out_ptr;\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, idx1, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14736_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, out_ptr, bmlocal14736_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14736_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14737_my_ptr;\
	UINT bmlocal14738_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14737_my_ptr, bmlocal14738_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14737_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14737_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14737_my_ptr, bmlocal14738_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14739_my_ptr;\
	UINT bmlocal14740_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14739_my_ptr, bmlocal14740_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14739_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14739_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14739_my_ptr, bmlocal14740_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14741_out_val;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET( base_ptr, idx0, idx1, bmlocal14741_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14741_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14742_my_ptr;\
	UINT bmlocal14743_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_POS( base_ptr, idx0, idx1, bmlocal14742_my_ptr, bmlocal14743_my_bitoff );\
	(*((UINT8*)bmlocal14742_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14743_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14744_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14744_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14744_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_BYTES_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14747_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14747_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14747_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_BufferByte_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14748_dim_size0;\
	UINT bmlocal14749_idx0;\
	bmlocal14748_dim_size0 = 100;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	for( bmlocal14749_idx0=0; bmlocal14749_idx0<bmlocal14748_dim_size0; bmlocal14749_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14749_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14749_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14750_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14750_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14750_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_Realm_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_Realm_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14751_tmp_bytes = 0;\
	UINT bmlocal14752_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_GET_SIZE( base_ptr, idx0, bmlocal14751_tmp_bytes, bmlocal14752_tmp_bits );\
	out_bytes += bmlocal14751_tmp_bytes;\
	out_bits += bmlocal14752_tmp_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14753_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_Realm_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14753_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14753_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_BYTES_SIZE 100

#define BM_MonitorOperator_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Realm", 1);\
	BM_MonitorOperator_Eaps_EapList_Realm_Realm_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_Realm_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOperator_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14756_acc_bytes;\
	UINT bmlocal14757_acc_bits;\
	PVOID bmlocal14758_parent_out_ptr;\
	BM_MonitorOperator_Eaps_EapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14758_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14758_parent_out_ptr;\
	bmlocal14756_acc_bytes = 348;\
	bmlocal14757_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14756_acc_bytes );\
	out_bitoff += bmlocal14757_acc_bits;\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14759_tmp_bitoff;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, out_ptr, bmlocal14759_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14759_tmp_bitoff);\
}

// Alignment of MonitorOperator_Eaps_EapList_encaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOperator_Eaps_EapList_encaps_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14760_my_ptr;\
	UINT bmlocal14761_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal14760_my_ptr, bmlocal14761_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14760_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BM_EAPType)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14760_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14760_my_ptr, bmlocal14761_my_bitoff, 32, BM_EAPType, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14762_my_ptr;\
	UINT bmlocal14763_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal14762_my_ptr, bmlocal14763_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14762_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14762_my_ptr, bmlocal14763_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOperator_Eaps_EapList_encaps: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_encaps: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Eaps_EapList_encaps: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_encaps: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Eaps_EapList_encaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Eaps_EapList_encaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_EAPType bmlocal14764_out_val;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET( base_ptr, idx0, bmlocal14764_out_val );\
	if( bmlocal14764_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TLS", 1);\
	}\
	if( bmlocal14764_out_val == 21 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_TTLS", 1);\
	}\
	if( bmlocal14764_out_val == 23 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_AKA", 1);\
	}\
	if( bmlocal14764_out_val == 256 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_PLAIN_MSCHAPv2", 1);\
	}\
	if( bmlocal14764_out_val == 1000 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_EAP_MSCHAPv2", 1);\
	}\
	if( bmlocal14764_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "encaps", "BM_CHAP", 1);\
	}\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14765_my_ptr;\
	UINT bmlocal14766_my_bitoff;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET_POS( base_ptr, idx0, bmlocal14765_my_ptr, bmlocal14766_my_bitoff );\
	(*((UINT32*)bmlocal14765_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14766_my_bitoff );\
}

// MonitorOperator_Eaps_EapList_encaps: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Eaps_EapList_encaps_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14767_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_encaps_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14767_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14767_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_encaps_BYTES_SIZE 4

#define BM_MonitorOperator_Eaps_EapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 352;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14770_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14770_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14770_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_EapList_BYTES_CELL_SIZE 352

#define BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_usePrivacy_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_vendorId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_vendorType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_EAPMethod_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_EapId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_provisionedPseudoId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_EapPassword_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_Realm_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_encaps_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Eaps_EapList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14771_dim_size0;\
	UINT bmlocal14772_idx0;\
	{\
		UINT32 bmlocal14773_var0;\
		BM_MonitorOperator_Eaps_NumOfEaps_GET( base_ptr, bmlocal14773_var0 );\
		bmlocal14771_dim_size0 = (UINT)(bmlocal14773_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "EapList", 1);\
	for( bmlocal14772_idx0=0; bmlocal14772_idx0<bmlocal14771_dim_size0; bmlocal14772_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14772_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH_IDX( base_ptr, bmlocal14772_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_EapList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Eaps_EapList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14774_tmp_bits;\
	BM_MonitorOperator_Eaps_EapList_GET_SIZE( base_ptr, out_bytes, bmlocal14774_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14774_tmp_bits );\
}


#define BM_MonitorOperator_Eaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14775_tmp_bytes = 0;\
	UINT bmlocal14776_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_EapList_GET_SIZE( base_ptr, bmlocal14775_tmp_bytes, bmlocal14776_tmp_bits );\
	out_bytes += bmlocal14775_tmp_bytes;\
	out_bits += bmlocal14776_tmp_bits;\
}

#define BM_MonitorOperator_Eaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14777_tmp_bits;\
	BM_MonitorOperator_Eaps_GET_SIZE( base_ptr, out_bytes, bmlocal14777_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14777_tmp_bits );\
}

#define BM_MonitorOperator_Eaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Eaps", 1);\
	BM_MonitorOperator_Eaps_NumOfEaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Eaps_EapList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Eaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Eaps_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOperator_Capls_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14778_tmp_bytes = 0;\
	UINT bmlocal14779_tmp_bits = 0;\
	UINT bmlocal14780_acc_bytes;\
	UINT bmlocal14781_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14780_acc_bytes = 104;\
	bmlocal14781_acc_bits = 0;\
	BM_MonitorOperator_Eaps_GET_SIZE( base_ptr, bmlocal14778_tmp_bytes, bmlocal14779_tmp_bits );\
	bmlocal14780_acc_bytes += bmlocal14778_tmp_bytes;\
	bmlocal14781_acc_bits += bmlocal14779_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14780_acc_bytes );\
	out_bitoff += bmlocal14781_acc_bits;\
}

// COMPOSITE: Full name: 'MonitorOperator_Capls' Type: 'CaplMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Capls_NumOfNaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14782_parent_out_ptr;\
	BM_MonitorOperator_Capls_GET_POS( base_ptr, bmlocal14782_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14782_parent_out_ptr;\
}

#define BM_MonitorOperator_Capls_NumOfNaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14783_tmp_bitoff;\
	BM_MonitorOperator_Capls_NumOfNaps_GET_POS( base_ptr, out_ptr, bmlocal14783_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14783_tmp_bitoff);\
}

// Alignment of MonitorOperator_Capls_NumOfNaps: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Capls_NumOfNaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14784_my_ptr;\
	UINT bmlocal14785_my_bitoff;\
	BM_MonitorOperator_Capls_NumOfNaps_GET_POS( base_ptr, bmlocal14784_my_ptr, bmlocal14785_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14784_my_ptr, bmlocal14785_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Capls_NumOfNaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14786_my_ptr;\
	UINT bmlocal14787_my_bitoff;\
	BM_MonitorOperator_Capls_NumOfNaps_GET_POS( base_ptr, bmlocal14786_my_ptr, bmlocal14787_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14786_my_ptr, bmlocal14787_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Capls_NumOfNaps: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_NumOfNaps: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_NumOfNaps: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_NumOfNaps: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_NumOfNaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Capls_NumOfNaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Capls_NumOfNaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14788_out_val;\
	BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, bmlocal14788_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfNaps", 32, (UINT)(bmlocal14788_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Capls_NumOfNaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_NumOfNaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Capls_NumOfNaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14789_val;\
	BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, bmlocal14789_val );\
	(bmlocal14789_val)++;\
	BM_MonitorOperator_Capls_NumOfNaps_SET( base_ptr, bmlocal14789_val );\
}

// MonitorOperator_Capls_NumOfNaps: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Capls_NumOfNaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14790_tmp_bits;\
	BM_MonitorOperator_Capls_NumOfNaps_GET_SIZE( base_ptr, out_bytes, bmlocal14790_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14790_tmp_bits );\
}

#define BM_MonitorOperator_Capls_NumOfNaps_BYTES_SIZE 4

#define BM_MonitorOperator_Capls_CaplNapList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14793_acc_bytes;\
	UINT bmlocal14794_acc_bits;\
	PVOID bmlocal14795_parent_out_ptr;\
	BM_MonitorOperator_Capls_GET_POS( base_ptr, bmlocal14795_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14795_parent_out_ptr;\
	bmlocal14793_acc_bytes = 4;\
	bmlocal14794_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14793_acc_bytes );\
	out_bitoff += bmlocal14794_acc_bits;\
}

#define BM_MonitorOperator_Capls_CaplNapList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14796_tmp_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_GET_POS( base_ptr, out_ptr, bmlocal14796_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14796_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Capls_CaplNapList
#define BM_MonitorOperator_Capls_CaplNapList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal14797_var0;\
		BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, bmlocal14797_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal14797_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_CaplNapList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal14798_var0;\
			BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, bmlocal14798_var0 );\
			out_element_count = (UINT)(bmlocal14798_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14799_out_ptr;\
	UINT bmlocal14800_out_bitoff;\
	UINT bmlocal14801_element_size_bytes;\
	UINT bmlocal14802_element_size_bits;\
	BM_MonitorOperator_Capls_CaplNapList_GET_POS( base_ptr, bmlocal14799_out_ptr, bmlocal14800_out_bitoff );\
	bmlocal14801_element_size_bytes = 8;\
	bmlocal14802_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14799_out_ptr) + (idx0) * bmlocal14801_element_size_bytes );\
	out_bitoff = bmlocal14800_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14802_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Capls_CaplNapList' Type: 'CaplNapMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Capls_CaplNapList_priority_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14803_parent_out_ptr;\
	BM_MonitorOperator_Capls_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14803_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14803_parent_out_ptr;\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14804_tmp_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET_POS( base_ptr, idx0, out_ptr, bmlocal14804_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14804_tmp_bitoff);\
}

// Alignment of MonitorOperator_Capls_CaplNapList_priority: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Capls_CaplNapList_priority_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14805_my_ptr;\
	UINT bmlocal14806_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET_POS( base_ptr, idx0, bmlocal14805_my_ptr, bmlocal14806_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14805_my_ptr, bmlocal14806_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14807_my_ptr;\
	UINT bmlocal14808_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET_POS( base_ptr, idx0, bmlocal14807_my_ptr, bmlocal14808_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14807_my_ptr, bmlocal14808_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Capls_CaplNapList_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_priority: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_priority: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Capls_CaplNapList_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Capls_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14809_out_val;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET( base_ptr, idx0, bmlocal14809_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal14809_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14810_val;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET( base_ptr, idx0, bmlocal14810_val );\
	(bmlocal14810_val)++;\
	BM_MonitorOperator_Capls_CaplNapList_priority_SET( base_ptr, idx0, bmlocal14810_val );\
}

// MonitorOperator_Capls_CaplNapList_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Capls_CaplNapList_priority_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14811_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_priority_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14811_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14811_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_priority_BYTES_SIZE 4

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14814_acc_bytes;\
	UINT bmlocal14815_acc_bits;\
	PVOID bmlocal14816_parent_out_ptr;\
	BM_MonitorOperator_Capls_CaplNapList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14816_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14816_parent_out_ptr;\
	bmlocal14814_acc_bytes = 4;\
	bmlocal14815_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14814_acc_bytes );\
	out_bitoff += bmlocal14815_acc_bits;\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14817_tmp_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_POS( base_ptr, idx0, out_ptr, bmlocal14817_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14817_tmp_bitoff);\
}

// COMPOSITE: Full name: 'MonitorOperator_Capls_CaplNapList_NapMember' Type: 'NapMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14818_parent_out_ptr;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_POS( base_ptr, idx0, bmlocal14818_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14818_parent_out_ptr;\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14819_tmp_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, out_ptr, bmlocal14819_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14819_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Capls_CaplNapList_NapMember_napID
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 3;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14820_out_ptr;\
	UINT bmlocal14821_out_bitoff;\
	UINT bmlocal14822_element_size_bytes;\
	UINT bmlocal14823_element_size_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_POS( base_ptr, idx0, bmlocal14820_out_ptr, bmlocal14821_out_bitoff );\
	bmlocal14822_element_size_bytes = 1;\
	bmlocal14823_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14820_out_ptr) + (idx1) * bmlocal14822_element_size_bytes );\
	out_bitoff = bmlocal14821_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14823_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Capls_CaplNapList_NapMember_napID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14824_parent_out_ptr;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal14824_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14824_parent_out_ptr;\
}

// Alignment of MonitorOperator_Capls_CaplNapList_NapMember_napID_value: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14825_my_ptr;\
	UINT bmlocal14826_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, bmlocal14825_my_ptr, bmlocal14826_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14825_my_ptr, bmlocal14826_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14827_my_ptr;\
	UINT bmlocal14828_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_POS( base_ptr, idx0, idx1, bmlocal14827_my_ptr, bmlocal14828_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14827_my_ptr, bmlocal14828_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14829_out_val;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET( base_ptr, idx0, idx1, bmlocal14829_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal14829_out_val), "%u", 1);\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14830_val;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET( base_ptr, idx0, idx1, bmlocal14830_val );\
	(bmlocal14830_val)++;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_SET( base_ptr, idx0, idx1, bmlocal14830_val );\
}

// MonitorOperator_Capls_CaplNapList_NapMember_napID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14831_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14831_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14831_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_BYTES_SIZE 1

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14834_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal14834_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14834_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_BYTES_CELL_SIZE 1

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14835_dim_size0;\
	UINT bmlocal14836_idx0;\
	bmlocal14835_dim_size0 = 3;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "napID", 1);\
	for( bmlocal14836_idx0=0; bmlocal14836_idx0<bmlocal14835_dim_size0; bmlocal14836_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14836_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal14836_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14837_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14837_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14837_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_BYTES_SIZE 3

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14838_tmp_bytes = 0;\
	UINT bmlocal14839_tmp_bits = 0;\
	UINT bmlocal14840_acc_bytes;\
	UINT bmlocal14841_acc_bits;\
	PVOID bmlocal14842_parent_out_ptr;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_POS( base_ptr, idx0, bmlocal14842_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14842_parent_out_ptr;\
	bmlocal14840_acc_bytes = 0;\
	bmlocal14841_acc_bits = 0;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, bmlocal14838_tmp_bytes, bmlocal14839_tmp_bits );\
	bmlocal14840_acc_bytes += bmlocal14838_tmp_bytes;\
	bmlocal14841_acc_bits += bmlocal14839_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14840_acc_bytes );\
	out_bitoff += bmlocal14841_acc_bits;\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14843_tmp_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, out_ptr, bmlocal14843_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14843_tmp_bitoff);\
}

// Alignment of MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14844_my_ptr;\
	UINT bmlocal14845_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, bmlocal14844_my_ptr, bmlocal14845_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14844_my_ptr, bmlocal14845_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14846_my_ptr;\
	UINT bmlocal14847_my_bitoff;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_POS( base_ptr, idx0, bmlocal14846_my_ptr, bmlocal14847_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14846_my_ptr, bmlocal14847_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14848_out_val;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET( base_ptr, idx0, bmlocal14848_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal14848_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14849_val;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET( base_ptr, idx0, bmlocal14849_val );\
	(bmlocal14849_val)++;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_SET( base_ptr, idx0, bmlocal14849_val );\
}

// MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14850_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14850_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14850_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_BYTES_SIZE 1

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14851_tmp_bytes = 0;\
	UINT bmlocal14852_tmp_bits = 0;\
	out_bytes = 1;\
	out_bits = 0;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_GET_SIZE( base_ptr, idx0, bmlocal14851_tmp_bytes, bmlocal14852_tmp_bits );\
	out_bytes += bmlocal14851_tmp_bytes;\
	out_bits += bmlocal14852_tmp_bits;\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14853_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14853_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14853_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_BYTES_SIZE 4

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NapMember", 1);\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_napID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_Reserved_1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_NapMember_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_MonitorOperator_Capls_CaplNapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14856_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14856_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14856_tmp_bits );\
}

#define BM_MonitorOperator_Capls_CaplNapList_BYTES_CELL_SIZE 8

#define BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_priority_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Capls_CaplNapList_NapMember_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14857_dim_size0;\
	UINT bmlocal14858_idx0;\
	{\
		UINT32 bmlocal14859_var0;\
		BM_MonitorOperator_Capls_NumOfNaps_GET( base_ptr, bmlocal14859_var0 );\
		bmlocal14857_dim_size0 = (UINT)(bmlocal14859_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CaplNapList", 1);\
	for( bmlocal14858_idx0=0; bmlocal14858_idx0<bmlocal14857_dim_size0; bmlocal14858_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14858_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH_IDX( base_ptr, bmlocal14858_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_CaplNapList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Capls_CaplNapList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14860_tmp_bits;\
	BM_MonitorOperator_Capls_CaplNapList_GET_SIZE( base_ptr, out_bytes, bmlocal14860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14860_tmp_bits );\
}


#define BM_MonitorOperator_Capls_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14861_tmp_bytes = 0;\
	UINT bmlocal14862_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorOperator_Capls_CaplNapList_GET_SIZE( base_ptr, bmlocal14861_tmp_bytes, bmlocal14862_tmp_bits );\
	out_bytes += bmlocal14861_tmp_bytes;\
	out_bits += bmlocal14862_tmp_bits;\
}

#define BM_MonitorOperator_Capls_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14863_tmp_bits;\
	BM_MonitorOperator_Capls_GET_SIZE( base_ptr, out_bytes, bmlocal14863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14863_tmp_bits );\
}

#define BM_MonitorOperator_Capls_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Capls", 1);\
	BM_MonitorOperator_Capls_NumOfNaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Capls_CaplNapList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Capls_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Capls_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOperator_Rapls_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14864_tmp_bytes = 0;\
	UINT bmlocal14865_tmp_bits = 0;\
	UINT bmlocal14866_acc_bytes;\
	UINT bmlocal14867_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14866_acc_bytes = 104;\
	bmlocal14867_acc_bits = 0;\
	BM_MonitorOperator_Eaps_GET_SIZE( base_ptr, bmlocal14864_tmp_bytes, bmlocal14865_tmp_bits );\
	bmlocal14866_acc_bytes += bmlocal14864_tmp_bytes;\
	bmlocal14867_acc_bits += bmlocal14865_tmp_bits;\
	BM_MonitorOperator_Capls_GET_SIZE( base_ptr, bmlocal14864_tmp_bytes, bmlocal14865_tmp_bits );\
	bmlocal14866_acc_bytes += bmlocal14864_tmp_bytes;\
	bmlocal14867_acc_bits += bmlocal14865_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14866_acc_bytes );\
	out_bitoff += bmlocal14867_acc_bits;\
}

// COMPOSITE: Full name: 'MonitorOperator_Rapls' Type: 'RaplMember', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14868_parent_out_ptr;\
	BM_MonitorOperator_Rapls_GET_POS( base_ptr, bmlocal14868_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14868_parent_out_ptr;\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14869_tmp_bitoff;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_POS( base_ptr, out_ptr, bmlocal14869_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14869_tmp_bitoff);\
}

// Alignment of MonitorOperator_Rapls_NumOfRoamingPartners: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14870_my_ptr;\
	UINT bmlocal14871_my_bitoff;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_POS( base_ptr, bmlocal14870_my_ptr, bmlocal14871_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14870_my_ptr, bmlocal14871_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14872_my_ptr;\
	UINT bmlocal14873_my_bitoff;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_POS( base_ptr, bmlocal14872_my_ptr, bmlocal14873_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14872_my_ptr, bmlocal14873_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Rapls_NumOfRoamingPartners: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_NumOfRoamingPartners: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_NumOfRoamingPartners: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_NumOfRoamingPartners: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_NumOfRoamingPartners: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Rapls_NumOfRoamingPartners: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14874_out_val;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, bmlocal14874_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfRoamingPartners", 32, (UINT)(bmlocal14874_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14875_val;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, bmlocal14875_val );\
	(bmlocal14875_val)++;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_SET( base_ptr, bmlocal14875_val );\
}

// MonitorOperator_Rapls_NumOfRoamingPartners: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14876_tmp_bits;\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET_SIZE( base_ptr, out_bytes, bmlocal14876_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14876_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_NumOfRoamingPartners_BYTES_SIZE 4

#define BM_MonitorOperator_Rapls_RaplList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14879_acc_bytes;\
	UINT bmlocal14880_acc_bits;\
	PVOID bmlocal14881_parent_out_ptr;\
	BM_MonitorOperator_Rapls_GET_POS( base_ptr, bmlocal14881_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14881_parent_out_ptr;\
	bmlocal14879_acc_bytes = 4;\
	bmlocal14880_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14879_acc_bytes );\
	out_bitoff += bmlocal14880_acc_bits;\
}

#define BM_MonitorOperator_Rapls_RaplList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14882_tmp_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_GET_POS( base_ptr, out_ptr, bmlocal14882_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14882_tmp_bitoff);\
}

// ARRAY: MonitorOperator_Rapls_RaplList
#define BM_MonitorOperator_Rapls_RaplList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal14883_var0;\
		BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, bmlocal14883_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal14883_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_RaplList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal14884_var0;\
			BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, bmlocal14884_var0 );\
			out_element_count = (UINT)(bmlocal14884_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_RaplList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14885_out_ptr;\
	UINT bmlocal14886_out_bitoff;\
	UINT bmlocal14887_element_size_bytes;\
	UINT bmlocal14888_element_size_bits;\
	BM_MonitorOperator_Rapls_RaplList_GET_POS( base_ptr, bmlocal14885_out_ptr, bmlocal14886_out_bitoff );\
	bmlocal14887_element_size_bytes = 8;\
	bmlocal14888_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14885_out_ptr) + (idx0) * bmlocal14887_element_size_bytes );\
	out_bitoff = bmlocal14886_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14888_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorOperator_Rapls_RaplList' Type: 'RoamingPartnerInfo', Inner, Non-instance, No bitoff root
#define BM_MonitorOperator_Rapls_RaplList_vNspID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14889_parent_out_ptr;\
	BM_MonitorOperator_Rapls_RaplList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14889_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14889_parent_out_ptr;\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14890_tmp_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET_POS( base_ptr, idx0, out_ptr, bmlocal14890_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14890_tmp_bitoff);\
}

// Alignment of MonitorOperator_Rapls_RaplList_vNspID: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Rapls_RaplList_vNspID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14891_my_ptr;\
	UINT bmlocal14892_my_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET_POS( base_ptr, idx0, bmlocal14891_my_ptr, bmlocal14892_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14891_my_ptr, bmlocal14892_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14893_my_ptr;\
	UINT bmlocal14894_my_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET_POS( base_ptr, idx0, bmlocal14893_my_ptr, bmlocal14894_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14893_my_ptr, bmlocal14894_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Rapls_RaplList_vNspID: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_RaplList_vNspID: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_RaplList_vNspID: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_RaplList_vNspID: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_RaplList_vNspID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Rapls_RaplList_vNspID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Rapls_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14895_out_val;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET( base_ptr, idx0, bmlocal14895_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "vNspID", 32, (UINT)(bmlocal14895_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14896_val;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET( base_ptr, idx0, bmlocal14896_val );\
	(bmlocal14896_val)++;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_SET( base_ptr, idx0, bmlocal14896_val );\
}

// MonitorOperator_Rapls_RaplList_vNspID: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Rapls_RaplList_vNspID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14897_tmp_bits;\
	BM_MonitorOperator_Rapls_RaplList_vNspID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14897_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14897_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_RaplList_vNspID_BYTES_SIZE 4

#define BM_MonitorOperator_Rapls_RaplList_priority_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14900_acc_bytes;\
	UINT bmlocal14901_acc_bits;\
	PVOID bmlocal14902_parent_out_ptr;\
	BM_MonitorOperator_Rapls_RaplList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14902_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14902_parent_out_ptr;\
	bmlocal14900_acc_bytes = 4;\
	bmlocal14901_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14900_acc_bytes );\
	out_bitoff += bmlocal14901_acc_bits;\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14903_tmp_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET_POS( base_ptr, idx0, out_ptr, bmlocal14903_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14903_tmp_bitoff);\
}

// Alignment of MonitorOperator_Rapls_RaplList_priority: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Rapls_RaplList_priority_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14904_my_ptr;\
	UINT bmlocal14905_my_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET_POS( base_ptr, idx0, bmlocal14904_my_ptr, bmlocal14905_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14904_my_ptr, bmlocal14905_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14906_my_ptr;\
	UINT bmlocal14907_my_bitoff;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET_POS( base_ptr, idx0, bmlocal14906_my_ptr, bmlocal14907_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14906_my_ptr, bmlocal14907_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Rapls_RaplList_priority: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_RaplList_priority: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_RaplList_priority: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_RaplList_priority: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_RaplList_priority: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Rapls_RaplList_priority: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Rapls_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14908_out_val;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET( base_ptr, idx0, bmlocal14908_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "priority", 32, (UINT)(bmlocal14908_out_val), "%d", 1);\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14909_val;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET( base_ptr, idx0, bmlocal14909_val );\
	(bmlocal14909_val)++;\
	BM_MonitorOperator_Rapls_RaplList_priority_SET( base_ptr, idx0, bmlocal14909_val );\
}

// MonitorOperator_Rapls_RaplList_priority: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Rapls_RaplList_priority_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14910_tmp_bits;\
	BM_MonitorOperator_Rapls_RaplList_priority_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14910_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14910_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_RaplList_priority_BYTES_SIZE 4

#define BM_MonitorOperator_Rapls_RaplList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14913_tmp_bits;\
	BM_MonitorOperator_Rapls_RaplList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14913_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14913_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_RaplList_BYTES_CELL_SIZE 8

#define BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_RaplList_vNspID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_MonitorOperator_Rapls_RaplList_priority_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14914_dim_size0;\
	UINT bmlocal14915_idx0;\
	{\
		UINT32 bmlocal14916_var0;\
		BM_MonitorOperator_Rapls_NumOfRoamingPartners_GET( base_ptr, bmlocal14916_var0 );\
		bmlocal14914_dim_size0 = (UINT)(bmlocal14916_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RaplList", 1);\
	for( bmlocal14915_idx0=0; bmlocal14915_idx0<bmlocal14914_dim_size0; bmlocal14915_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14915_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH_IDX( base_ptr, bmlocal14915_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_RaplList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Rapls_RaplList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14917_tmp_bits;\
	BM_MonitorOperator_Rapls_RaplList_GET_SIZE( base_ptr, out_bytes, bmlocal14917_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14917_tmp_bits );\
}


#define BM_MonitorOperator_Rapls_Any_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14918_tmp_bytes = 0;\
	UINT bmlocal14919_tmp_bits = 0;\
	UINT bmlocal14920_acc_bytes;\
	UINT bmlocal14921_acc_bits;\
	PVOID bmlocal14922_parent_out_ptr;\
	BM_MonitorOperator_Rapls_GET_POS( base_ptr, bmlocal14922_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14922_parent_out_ptr;\
	bmlocal14920_acc_bytes = 4;\
	bmlocal14921_acc_bits = 0;\
	BM_MonitorOperator_Rapls_RaplList_GET_SIZE( base_ptr, bmlocal14918_tmp_bytes, bmlocal14919_tmp_bits );\
	bmlocal14920_acc_bytes += bmlocal14918_tmp_bytes;\
	bmlocal14921_acc_bits += bmlocal14919_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14920_acc_bytes );\
	out_bitoff += bmlocal14921_acc_bits;\
}

// Alignment of MonitorOperator_Rapls_Any: accumulated=(Variable), parent.base=(Variable)
#define BM_MonitorOperator_Rapls_Any_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_Any_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14923_my_ptr;\
	UINT bmlocal14924_my_bitoff;\
	BM_MonitorOperator_Rapls_Any_GET_POS( base_ptr, bmlocal14923_my_ptr, bmlocal14924_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14923_my_ptr, bmlocal14924_my_bitoff, 32, BME_Any, out_val, 0xFFFFFFFF );\
}

#define BM_MonitorOperator_Rapls_Any_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14925_my_ptr;\
	UINT bmlocal14926_my_bitoff;\
	BM_MonitorOperator_Rapls_Any_GET_POS( base_ptr, bmlocal14925_my_ptr, bmlocal14926_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14925_my_ptr, bmlocal14926_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// MonitorOperator_Rapls_Any: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_Any: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOperator_Rapls_Any: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_Any: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOperator_Rapls_Any: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOperator_Rapls_Any: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOperator_Rapls_Any_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_Any bmlocal14927_out_val;\
	BM_MonitorOperator_Rapls_Any_GET( base_ptr, bmlocal14927_out_val );\
	if( bmlocal14927_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_Reserved", 1);\
	}\
	if( bmlocal14927_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_OnlyList", 1);\
	}\
	if( bmlocal14927_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_ListFirst", 1);\
	}\
	if( bmlocal14927_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "Any", "BMV_Any", 1);\
	}\
}

#define BM_MonitorOperator_Rapls_Any_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_Any_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOperator_Rapls_Any_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	BME_Any bmlocal14928_val;\
	BM_MonitorOperator_Rapls_Any_GET( base_ptr, bmlocal14928_val );\
	(bmlocal14928_val)++;\
	BM_MonitorOperator_Rapls_Any_SET( base_ptr, bmlocal14928_val );\
}

// MonitorOperator_Rapls_Any: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOperator_Rapls_Any_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14929_tmp_bits;\
	BM_MonitorOperator_Rapls_Any_GET_SIZE( base_ptr, out_bytes, bmlocal14929_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14929_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_Any_BYTES_SIZE 4

#define BM_MonitorOperator_Rapls_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14930_tmp_bytes = 0;\
	UINT bmlocal14931_tmp_bits = 0;\
	out_bytes = 8;\
	out_bits = 0;\
	BM_MonitorOperator_Rapls_RaplList_GET_SIZE( base_ptr, bmlocal14930_tmp_bytes, bmlocal14931_tmp_bits );\
	out_bytes += bmlocal14930_tmp_bytes;\
	out_bits += bmlocal14931_tmp_bits;\
}

#define BM_MonitorOperator_Rapls_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14932_tmp_bits;\
	BM_MonitorOperator_Rapls_GET_SIZE( base_ptr, out_bytes, bmlocal14932_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14932_tmp_bits );\
}

#define BM_MonitorOperator_Rapls_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Rapls", 1);\
	BM_MonitorOperator_Rapls_NumOfRoamingPartners_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Rapls_RaplList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Rapls_Any_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_Rapls_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_Rapls_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MonitorOperator_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14933_tmp_bytes = 0;\
	UINT bmlocal14934_tmp_bits = 0;\
	out_bytes = 104;\
	out_bits = 0;\
	BM_MonitorOperator_Eaps_GET_SIZE( base_ptr, bmlocal14933_tmp_bytes, bmlocal14934_tmp_bits );\
	out_bytes += bmlocal14933_tmp_bytes;\
	out_bits += bmlocal14934_tmp_bits;\
	BM_MonitorOperator_Capls_GET_SIZE( base_ptr, bmlocal14933_tmp_bytes, bmlocal14934_tmp_bits );\
	out_bytes += bmlocal14933_tmp_bytes;\
	out_bits += bmlocal14934_tmp_bits;\
	BM_MonitorOperator_Rapls_GET_SIZE( base_ptr, bmlocal14933_tmp_bytes, bmlocal14934_tmp_bits );\
	out_bytes += bmlocal14933_tmp_bytes;\
	out_bits += bmlocal14934_tmp_bits;\
}

#define BM_MonitorOperator_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14935_tmp_bits;\
	BM_MonitorOperator_GET_SIZE( base_ptr, out_bytes, bmlocal14935_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14935_tmp_bits );\
}

#define BM_MonitorOperator_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorOperator", 1);\
	BM_MonitorOperator_operatorName_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_pollingInterval_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Eaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Capls_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorOperator_Rapls_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOperator_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOperator_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorOMASession[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BME_OMAStatus _OMAStatusInd;
} BMS_MonitorOMASession;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BME_OMAStatus _OMAStatusInd;
} BMS_MonitorOMASession;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorOMASession' Type: 'MonitorOMASession', Top-level, Non-instance, No bitoff root
#define BM_MonitorOMASession_OMAStatusInd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorOMASession_OMAStatusInd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14936_tmp_bitoff;\
	BM_MonitorOMASession_OMAStatusInd_GET_POS( base_ptr, out_ptr, bmlocal14936_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14936_tmp_bitoff);\
}

#define BM_MonitorOMASession_OMAStatusInd_POS_ALIGNED 0

// Alignment of MonitorOMASession_OMAStatusInd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorOMASession_OMAStatusInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMASession_OMAStatusInd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14937_my_ptr;\
	UINT bmlocal14938_my_bitoff;\
	BM_MonitorOMASession_OMAStatusInd_GET_POS( base_ptr, bmlocal14937_my_ptr, bmlocal14938_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_OMAStatus)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14937_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_OMAStatus)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14937_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14937_my_ptr, bmlocal14938_my_bitoff, 32, BME_OMAStatus, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorOMASession_OMAStatusInd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14939_my_ptr;\
	UINT bmlocal14940_my_bitoff;\
	BM_MonitorOMASession_OMAStatusInd_GET_POS( base_ptr, bmlocal14939_my_ptr, bmlocal14940_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14939_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14939_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14939_my_ptr, bmlocal14940_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorOMASession_OMAStatusInd: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMASession_OMAStatusInd: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorOMASession_OMAStatusInd: IS_RESET accessor is not defined because no reset value was specified.
// MonitorOMASession_OMAStatusInd: SET_RESET accessor is not defined because no reset value was specified.
// MonitorOMASession_OMAStatusInd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorOMASession_OMAStatusInd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorOMASession_OMAStatusInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_OMAStatus bmlocal14941_out_val;\
	BM_MonitorOMASession_OMAStatusInd_GET( base_ptr, bmlocal14941_out_val );\
	if( bmlocal14941_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionWaitingForBootstrap", 1);\
	}\
	if( bmlocal14941_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionBootstrapArrived", 1);\
	}\
	if( bmlocal14941_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionStart", 1);\
	}\
	if( bmlocal14941_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionEndSuccess", 1);\
	}\
	if( bmlocal14941_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionEndFailure", 1);\
	}\
	if( bmlocal14941_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionUpdateFailedNetworkDisconnect", 1);\
	}\
	if( bmlocal14941_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "OMAStatusInd", "BMV_SessionUpdateFailedBadAuthentication", 1);\
	}\
}

#define BM_MonitorOMASession_OMAStatusInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMASession_OMAStatusInd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorOMASession_OMAStatusInd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14942_my_ptr;\
	UINT bmlocal14943_my_bitoff;\
	BM_MonitorOMASession_OMAStatusInd_GET_POS( base_ptr, bmlocal14942_my_ptr, bmlocal14943_my_bitoff );\
	(*((UINT32*)bmlocal14942_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14943_my_bitoff );\
}

// MonitorOMASession_OMAStatusInd: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorOMASession_OMAStatusInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14944_tmp_bits;\
	BM_MonitorOMASession_OMAStatusInd_GET_SIZE( base_ptr, out_bytes, bmlocal14944_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14944_tmp_bits );\
}

#define BM_MonitorOMASession_OMAStatusInd_BYTES_SIZE 4

#define BM_MonitorOMASession_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMASession_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14947_tmp_bits;\
	BM_MonitorOMASession_GET_SIZE( base_ptr, out_bytes, bmlocal14947_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14947_tmp_bits );\
}

#define BM_MonitorOMASession_BYTES_SIZE 4

#define BM_MonitorOMASession_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorOMASession", 1);\
	BM_MonitorOMASession_OMAStatusInd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorOMASession_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorOMASession_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorNAI[4];

// COMPOSITE: Full name: 'MonitorNAI' Type: 'MonitorNAI', Top-level, Non-instance, No bitoff root
#define BM_MonitorNAI_NAISize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorNAI_NAISize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14948_tmp_bitoff;\
	BM_MonitorNAI_NAISize_GET_POS( base_ptr, out_ptr, bmlocal14948_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14948_tmp_bitoff);\
}

#define BM_MonitorNAI_NAISize_POS_ALIGNED 0

// Alignment of MonitorNAI_NAISize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorNAI_NAISize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorNAI_NAISize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14949_my_ptr;\
	UINT bmlocal14950_my_bitoff;\
	BM_MonitorNAI_NAISize_GET_POS( base_ptr, bmlocal14949_my_ptr, bmlocal14950_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14949_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14949_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14949_my_ptr, bmlocal14950_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorNAI_NAISize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14951_my_ptr;\
	UINT bmlocal14952_my_bitoff;\
	BM_MonitorNAI_NAISize_GET_POS( base_ptr, bmlocal14951_my_ptr, bmlocal14952_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14951_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14951_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14951_my_ptr, bmlocal14952_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorNAI_NAISize: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorNAI_NAISize: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorNAI_NAISize: IS_RESET accessor is not defined because no reset value was specified.
// MonitorNAI_NAISize: SET_RESET accessor is not defined because no reset value was specified.
// MonitorNAI_NAISize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorNAI_NAISize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorNAI_NAISize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14953_out_val;\
	BM_MonitorNAI_NAISize_GET( base_ptr, bmlocal14953_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NAISize", 32, (UINT)(bmlocal14953_out_val), "%d", 1);\
}

#define BM_MonitorNAI_NAISize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_NAISize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorNAI_NAISize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14954_my_ptr;\
	UINT bmlocal14955_my_bitoff;\
	BM_MonitorNAI_NAISize_GET_POS( base_ptr, bmlocal14954_my_ptr, bmlocal14955_my_bitoff );\
	(*((UINT32*)bmlocal14954_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14955_my_bitoff );\
}

// MonitorNAI_NAISize: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorNAI_NAISize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14956_tmp_bits;\
	BM_MonitorNAI_NAISize_GET_SIZE( base_ptr, out_bytes, bmlocal14956_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14956_tmp_bits );\
}

#define BM_MonitorNAI_NAISize_BYTES_SIZE 4

#define BM_MonitorNAI_NAI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal14959_acc_bytes;\
	UINT bmlocal14960_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal14959_acc_bytes = 4;\
	bmlocal14960_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal14959_acc_bytes );\
	out_bitoff += bmlocal14960_acc_bits;\
}

#define BM_MonitorNAI_NAI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14961_tmp_bitoff;\
	BM_MonitorNAI_NAI_GET_POS( base_ptr, out_ptr, bmlocal14961_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14961_tmp_bitoff);\
}

#define BM_MonitorNAI_NAI_POS_ALIGNED 4

// ARRAY: MonitorNAI_NAI
#define BM_MonitorNAI_NAI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal14962_var0;\
		BM_MonitorNAI_NAISize_GET( base_ptr, bmlocal14962_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal14962_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorNAI_NAI_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal14963_var0;\
			BM_MonitorNAI_NAISize_GET( base_ptr, bmlocal14963_var0 );\
			out_element_count = (UINT)(bmlocal14963_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorNAI_NAI_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14964_out_ptr;\
	UINT bmlocal14965_out_bitoff;\
	UINT bmlocal14966_element_size_bytes;\
	UINT bmlocal14967_element_size_bits;\
	BM_MonitorNAI_NAI_GET_POS( base_ptr, bmlocal14964_out_ptr, bmlocal14965_out_bitoff );\
	bmlocal14966_element_size_bytes = 1;\
	bmlocal14967_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal14964_out_ptr) + (idx0) * bmlocal14966_element_size_bytes );\
	out_bitoff = bmlocal14965_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal14967_element_size_bits );\
}

// COMPOSITE: Full name: 'MonitorNAI_NAI' Type: 'BufferString', Inner, Non-instance, No bitoff root
#define BM_MonitorNAI_NAI_BufferByte_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14968_parent_out_ptr;\
	BM_MonitorNAI_NAI_GET_ELEMENT_POS( base_ptr, idx0, bmlocal14968_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal14968_parent_out_ptr;\
}

#define BM_MonitorNAI_NAI_BufferByte_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14969_tmp_bitoff;\
	BM_MonitorNAI_NAI_BufferByte_GET_POS( base_ptr, idx0, out_ptr, bmlocal14969_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14969_tmp_bitoff);\
}

// Alignment of MonitorNAI_NAI_BufferByte: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MonitorNAI_NAI_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorNAI_NAI_BufferByte_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14970_my_ptr;\
	UINT bmlocal14971_my_bitoff;\
	BM_MonitorNAI_NAI_BufferByte_GET_POS( base_ptr, idx0, bmlocal14970_my_ptr, bmlocal14971_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14970_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14970_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14970_my_ptr, bmlocal14971_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MonitorNAI_NAI_BufferByte_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14972_my_ptr;\
	UINT bmlocal14973_my_bitoff;\
	BM_MonitorNAI_NAI_BufferByte_GET_POS( base_ptr, idx0, bmlocal14972_my_ptr, bmlocal14973_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14972_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14972_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14972_my_ptr, bmlocal14973_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MonitorNAI_NAI_BufferByte: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorNAI_NAI_BufferByte: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorNAI_NAI_BufferByte: IS_RESET accessor is not defined because no reset value was specified.
// MonitorNAI_NAI_BufferByte: SET_RESET accessor is not defined because no reset value was specified.
// MonitorNAI_NAI_BufferByte: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorNAI_NAI_BufferByte: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorNAI_NAI_BufferByte_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal14974_out_val;\
	BM_MonitorNAI_NAI_BufferByte_GET( base_ptr, idx0, bmlocal14974_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BufferByte", 8, (UINT)(bmlocal14974_out_val), "%d", 1);\
}

#define BM_MonitorNAI_NAI_BufferByte_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_NAI_BufferByte_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MonitorNAI_NAI_BufferByte_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14975_my_ptr;\
	UINT bmlocal14976_my_bitoff;\
	BM_MonitorNAI_NAI_BufferByte_GET_POS( base_ptr, idx0, bmlocal14975_my_ptr, bmlocal14976_my_bitoff );\
	(*((UINT8*)bmlocal14975_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14976_my_bitoff );\
}

// MonitorNAI_NAI_BufferByte: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorNAI_NAI_BufferByte_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14977_tmp_bits;\
	BM_MonitorNAI_NAI_BufferByte_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal14977_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14977_tmp_bits );\
}

#define BM_MonitorNAI_NAI_BufferByte_BYTES_SIZE 1

#define BM_MonitorNAI_NAI_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorNAI_NAI_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14980_tmp_bits;\
	BM_MonitorNAI_NAI_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal14980_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14980_tmp_bits );\
}

#define BM_MonitorNAI_NAI_BYTES_CELL_SIZE 1

#define BM_MonitorNAI_NAI_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_NAI_BufferByte_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MonitorNAI_NAI_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_NAI_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MonitorNAI_NAI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal14981_dim_size0;\
	UINT bmlocal14982_idx0;\
	{\
		UINT32 bmlocal14983_var0;\
		BM_MonitorNAI_NAISize_GET( base_ptr, bmlocal14983_var0 );\
		bmlocal14981_dim_size0 = (UINT)(bmlocal14983_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NAI", 1);\
	for( bmlocal14982_idx0=0; bmlocal14982_idx0<bmlocal14981_dim_size0; bmlocal14982_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal14982_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MonitorNAI_NAI_DUMP_DEPTH_IDX( base_ptr, bmlocal14982_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorNAI_NAI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_NAI_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorNAI_NAI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14984_tmp_bits;\
	BM_MonitorNAI_NAI_GET_SIZE( base_ptr, out_bytes, bmlocal14984_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14984_tmp_bits );\
}


#define BM_MonitorNAI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal14985_tmp_bytes = 0;\
	UINT bmlocal14986_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_MonitorNAI_NAI_GET_SIZE( base_ptr, bmlocal14985_tmp_bytes, bmlocal14986_tmp_bits );\
	out_bytes += bmlocal14985_tmp_bytes;\
	out_bits += bmlocal14986_tmp_bits;\
}

#define BM_MonitorNAI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14987_tmp_bits;\
	BM_MonitorNAI_GET_SIZE( base_ptr, out_bytes, bmlocal14987_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14987_tmp_bits );\
}

#define BM_MonitorNAI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorNAI", 1);\
	BM_MonitorNAI_NAISize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MonitorNAI_NAI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorNAI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorNAI_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorActivationStatusChange[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _ActivationStatusInd;
} BMS_MonitorActivationStatusChange;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _ActivationStatusInd;
} BMS_MonitorActivationStatusChange;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorActivationStatusChange' Type: 'MonitorActivationStatusChange', Top-level, Non-instance, No bitoff root
#define BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal14988_tmp_bitoff;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS( base_ptr, out_ptr, bmlocal14988_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal14988_tmp_bitoff);\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_POS_ALIGNED 0

// Alignment of MonitorActivationStatusChange_ActivationStatusInd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorActivationStatusChange_ActivationStatusInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14989_my_ptr;\
	UINT bmlocal14990_my_bitoff;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS( base_ptr, bmlocal14989_my_ptr, bmlocal14990_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14989_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14989_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal14989_my_ptr, bmlocal14990_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14991_my_ptr;\
	UINT bmlocal14992_my_bitoff;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS( base_ptr, bmlocal14991_my_ptr, bmlocal14992_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14991_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal14991_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal14991_my_ptr, bmlocal14992_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorActivationStatusChange_ActivationStatusInd: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorActivationStatusChange_ActivationStatusInd: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorActivationStatusChange_ActivationStatusInd: IS_RESET accessor is not defined because no reset value was specified.
// MonitorActivationStatusChange_ActivationStatusInd: SET_RESET accessor is not defined because no reset value was specified.
// MonitorActivationStatusChange_ActivationStatusInd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorActivationStatusChange_ActivationStatusInd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorActivationStatusChange_ActivationStatusInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal14993_out_val;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET( base_ptr, bmlocal14993_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ActivationStatusInd", 32, (UINT)(bmlocal14993_out_val), "%d", 1);\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorActivationStatusChange_ActivationStatusInd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal14994_my_ptr;\
	UINT bmlocal14995_my_bitoff;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET_POS( base_ptr, bmlocal14994_my_ptr, bmlocal14995_my_bitoff );\
	(*((UINT32*)bmlocal14994_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal14995_my_bitoff );\
}

// MonitorActivationStatusChange_ActivationStatusInd: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorActivationStatusChange_ActivationStatusInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14996_tmp_bits;\
	BM_MonitorActivationStatusChange_ActivationStatusInd_GET_SIZE( base_ptr, out_bytes, bmlocal14996_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14996_tmp_bits );\
}

#define BM_MonitorActivationStatusChange_ActivationStatusInd_BYTES_SIZE 4

#define BM_MonitorActivationStatusChange_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorActivationStatusChange_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal14999_tmp_bits;\
	BM_MonitorActivationStatusChange_GET_SIZE( base_ptr, out_bytes, bmlocal14999_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal14999_tmp_bits );\
}

#define BM_MonitorActivationStatusChange_BYTES_SIZE 4

#define BM_MonitorActivationStatusChange_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorActivationStatusChange", 1);\
	BM_MonitorActivationStatusChange_ActivationStatusInd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorActivationStatusChange_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorActivationStatusChange_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MonitorInstallationInd[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BME_MonitorInstallingInd _MonitorInstallingInd;
} BMS_MonitorInstallationInd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BME_MonitorInstallingInd _MonitorInstallingInd;
} BMS_MonitorInstallationInd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MonitorInstallationInd' Type: 'MonitorInstallationInd', Top-level, Non-instance, No bitoff root
#define BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal15000_tmp_bitoff;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS( base_ptr, out_ptr, bmlocal15000_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal15000_tmp_bitoff);\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_POS_ALIGNED 0

// Alignment of MonitorInstallationInd_MonitorInstallingInd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MonitorInstallationInd_MonitorInstallingInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal15001_my_ptr;\
	UINT bmlocal15002_my_bitoff;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS( base_ptr, bmlocal15001_my_ptr, bmlocal15002_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_MonitorInstallingInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15001_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (BME_MonitorInstallingInd)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15001_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal15001_my_ptr, bmlocal15002_my_bitoff, 32, BME_MonitorInstallingInd, out_val, 0x00000000 );\
	}\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal15003_my_ptr;\
	UINT bmlocal15004_my_bitoff;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS( base_ptr, bmlocal15003_my_ptr, bmlocal15004_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15003_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal15003_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal15003_my_ptr, bmlocal15004_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MonitorInstallationInd_MonitorInstallingInd: IS_DEFAULT accessor is not defined because no default value was specified.
// MonitorInstallationInd_MonitorInstallingInd: SET_DEFAULT accessor is not defined because no default value was specified.
// MonitorInstallationInd_MonitorInstallingInd: IS_RESET accessor is not defined because no reset value was specified.
// MonitorInstallationInd_MonitorInstallingInd: SET_RESET accessor is not defined because no reset value was specified.
// MonitorInstallationInd_MonitorInstallingInd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MonitorInstallationInd_MonitorInstallingInd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MonitorInstallationInd_MonitorInstallingInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BME_MonitorInstallingInd bmlocal15005_out_val;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET( base_ptr, bmlocal15005_out_val );\
	if( bmlocal15005_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "MonitorInstallingInd", "BMV_InstallingMonitorInit", 1);\
	}\
	if( bmlocal15005_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "MonitorInstallingInd", "BMV_InstallingMonitorSuccess", 1);\
	}\
	if( bmlocal15005_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "MonitorInstallingInd", "BMV_InstallingMonitorResetRegKey", 1);\
	}\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorInstallationInd_MonitorInstallingInd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal15006_my_ptr;\
	UINT bmlocal15007_my_bitoff;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET_POS( base_ptr, bmlocal15006_my_ptr, bmlocal15007_my_bitoff );\
	(*((UINT32*)bmlocal15006_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal15007_my_bitoff );\
}

// MonitorInstallationInd_MonitorInstallingInd: Validation accessors are not defined because validation condition was not specified.
#define BM_MonitorInstallationInd_MonitorInstallingInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal15008_tmp_bits;\
	BM_MonitorInstallationInd_MonitorInstallingInd_GET_SIZE( base_ptr, out_bytes, bmlocal15008_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal15008_tmp_bits );\
}

#define BM_MonitorInstallationInd_MonitorInstallingInd_BYTES_SIZE 4

#define BM_MonitorInstallationInd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorInstallationInd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal15011_tmp_bits;\
	BM_MonitorInstallationInd_GET_SIZE( base_ptr, out_bytes, bmlocal15011_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal15011_tmp_bits );\
}

#define BM_MonitorInstallationInd_BYTES_SIZE 4

#define BM_MonitorInstallationInd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MonitorInstallationInd", 1);\
	BM_MonitorInstallationInd_MonitorInstallingInd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MonitorInstallationInd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MonitorInstallationInd_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L4DMMONITORGROUPS_H_ */

