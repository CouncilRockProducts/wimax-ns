/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Baxter Peak
 * Module  : DM Monitor groups from all layers
 * Author  : Nir BM
 * Date    : 21/5/2007
 *****************************************************************************/

#if !defined(_BITMAN_L3DMMONITORGROUPS_H_)
#define _BITMAN_L3DMMONITORGROUPS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef enum
{
	E_MAC_STATE_UNINITIALIZED = 1,
	E_MAC_STATE_INIT = 2,
	E_MAC_STATE_READY = 3,
	E_MAC_STATE_SCAN = 4,
	E_MAC_STATE_STANDBY = 5,
	E_MAC_STATE_CONNECTING = 6,
	E_MAC_STATE_WIMAX_CONNECTED = 7,
	E_MAC_STATE_DATA_PATH_CONNECTED = 8,
	E_MAC_STATE_IDLE = 9,
	E_MAC_STATE_DISCONNECTING = 10,
	E_MAC_STATE_OOZ = 11,
	E_MAC_STATE_SLEEP_ACTIVE = 12,
	E_MAC_STATE_PRODUCTION = 13,
	E_MAC_STATE_CONFIG = 14,
	E_MAC_STATE_RF_OFF = 15,
	E_MAC_STATE_RF_SHUTDOWN = 16
} E_MacState;

typedef enum
{
	// Available only when SS tries to handover
	eHO_Invalid = 0,
	// Available only when SS tries to handover
	eHO_Start = 1,
	// Available only when handover failed
	eHO_Fail = 2,
	// Available only when  handover succeed
	eHO_Success = 3,
	// Available only when  handover Cancellations occur
	eHO_Cancel = 4,
	// Available only when  handover Reject occur
	eHO_Reject = 5,
	// Available only when  handover Not recommended
	eHO_NotRecommended = 6,
	// Available only when  L1 trigger L3 to start ho procees
	eHO_Trigger = 7
} E_HOStatus;

typedef enum
{
	// Invalid Bandwidth
	e_Invalid = 0,
	// BW:5Mhz
	e_BW_5 = 1,
	// BW:8.75Mhz
	e_BW_8_75 = 2,
	// BW:10Mhz
	e_BW_10 = 3,
	// BW:7Mhz
	e_BW_7 = 4
} E_BandWidth;

typedef enum
{
	// Invalid LinkLossReason
	e_reason_Invalid = 0,
	e_reason_DcdVersionError = 1,
	e_reason_UcdVersionError = 2,
	e_reason_DcdTimeout = 3,
	e_reason_UcdTimeout = 4,
	e_reason_CinrOutOfRange = 5,
	e_reason_PeriodicRangingFailure = 6,
	e_reason_CDMA_BWR_Retries_Exhausted = 7,
	e_reason_BWR_Header_Retries_Exhausted = 8,
	e_reason_UL_Map_Timeout = 9,
	e_reason_DL_Map_Timeout = 10
} E_LinkLossReason;

typedef enum
{
	HO_Invalid = 0,
	HO_NA = 1,
	HO_IntraFaType = 2,
	HO_InterFaType = 3
} E_HOTypeId;

typedef enum
{
	// 0. For initialization 
	eCANCEL_Invalid = 0,
	// 1. HO cancellation w/o actual HO and normal operation with SBS
	eCANCEL_Normal_Operation_WithSBS = 1,
	//  2. HO cancellation due to problem in reentry to TBS
	eCANCEL_Problem_Reentry_ToTBS = 2
} E_HOCancelStage;

typedef enum
{
	Invalid_Type = 1,
	// default
	BE_Type = 2,
	nrtPS_Type = 3,
	rtPS_Type = 4,
	ertPS_Type = 5,
	UGS_Type = 6
} SFSchedulingType;

typedef enum
{
	Provisioned_SetType = 1,
	Admitted_SetType = 2,
	Active_SetType = 4,
	Any_SetType = 7
} E_QoSParamsSetType;

typedef enum
{
	SideUndefined = 0,
	SideTx = 1,
	SideRx = 2,
	SideManagementBiDirectional = 3
} E_SfSide;

typedef enum
{
	eNETWORK_CELL_STATUS_SUCCESS = 0,
	eNETWORK_CELL_STATUS_REGISTRATION_FAILURE = 1,
	eNETWORK_CELL_STATUS_SBC_FAILURE = 2,
	eNETWORK_CELL_STATUS_AUTHENTICATION_FAILURE = 3,
	eNETWORK_CELL_STATUS_DEREGISTRATION = 4,
	eNETWORK_CELL_STATUS_MAC_RANGING_FAILURE = 5,
	eNETWORK_CELL_STATUS_PHY_RANGING_FAILURE = 6,
	eNETWORK_CELL_STATUS_HO_FAILURE = 7,
	eNETWORK_CELL_STATUS_UNKNOWN = 8
} ECellStatus;

typedef enum
{
	eFEC_TYPE_CC = 0,
	eFEC_TYPE_BTC = 1,
	eFEC_TYPE_CTC = 2,
	eFEC_TYPE_ZTCC = 3,
	eNUM_OF_FEC_TYPES
} FecType;

typedef enum
{
	eFEC_RATE_1_2 = 0,
	eFEC_RATE_2_3 = 1,
	eFEC_RATE_3_4 = 2,
	eFEC_RATE_5_6 = 3,
	eFEC_RATE_3_5 = 4,
	eFEC_RATE_4_5 = 5,
	eFEC_RATE_5_8 = 6,
	eNUM_OF_FEC_RATES
} FecRate;

typedef enum
{
	eMOD_QPSK = 0,
	eMOD_QAM16 = 1,
	eMOD_QAM64 = 2,
	eNUM_OF_MODULATIONS
} Modulation;

#define DMT_BS_ID_NUM_OF_BYTES (6)

#define DMT_NUM_OF_BYTES_IN_MAC_ADDRESS (6)

#define DREG_TLV_LENGTH_PAGING_CONTROLLER_ID (6)

typedef UINT8 MetricsInfo[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	INT16 _rssiMean : 16;
	INT16 _cinrMean : 16;
	UINT8 _preambleId : 8;
	UINT32 _frequency;
	E_BandWidth _bandWidth : 8;
	BMS_LittleEndianness_Uint8 _bsId[6];
} BMS_MetricsInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _bsId[6];
	E_BandWidth _bandWidth : 8;
	UINT32 _frequency;
	UINT8 _preambleId : 8;
	INT16 _cinrMean : 16;
	INT16 _rssiMean : 16;
} BMS_MetricsInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MetricsInfo' Type: 'MetricsInfo', Top-level, Non-instance, No bitoff root
#define BM_MetricsInfo_rssiMean_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MetricsInfo_rssiMean_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5642_tmp_bitoff;\
	BM_MetricsInfo_rssiMean_GET_POS( base_ptr, out_ptr, bmlocal5642_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5642_tmp_bitoff);\
}

#define BM_MetricsInfo_rssiMean_POS_ALIGNED 0

// Alignment of MetricsInfo_rssiMean: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsInfo_rssiMean_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_rssiMean_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5643_my_ptr;\
	UINT bmlocal5644_my_bitoff;\
	BM_MetricsInfo_rssiMean_GET_POS( base_ptr, bmlocal5643_my_ptr, bmlocal5644_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5643_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5643_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5643_my_ptr, bmlocal5644_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsInfo_rssiMean_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5645_my_ptr;\
	UINT bmlocal5646_my_bitoff;\
	BM_MetricsInfo_rssiMean_GET_POS( base_ptr, bmlocal5645_my_ptr, bmlocal5646_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5645_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5645_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5645_my_ptr, bmlocal5646_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// MetricsInfo_rssiMean: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_rssiMean: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_rssiMean: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_rssiMean: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_rssiMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_rssiMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_rssiMean_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal5647_out_val;\
	BM_MetricsInfo_rssiMean_GET( base_ptr, bmlocal5647_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rssiMean", 16, (UINT)(bmlocal5647_out_val), "%d", 1);\
}

#define BM_MetricsInfo_rssiMean_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_rssiMean_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsInfo_rssiMean_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5648_my_ptr;\
	UINT bmlocal5649_my_bitoff;\
	BM_MetricsInfo_rssiMean_GET_POS( base_ptr, bmlocal5648_my_ptr, bmlocal5649_my_bitoff );\
	(*((UINT16*)bmlocal5648_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5649_my_bitoff );\
}

// MetricsInfo_rssiMean: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_rssiMean_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5650_tmp_bits;\
	BM_MetricsInfo_rssiMean_GET_SIZE( base_ptr, out_bytes, bmlocal5650_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5650_tmp_bits );\
}

#define BM_MetricsInfo_rssiMean_BYTES_SIZE 2

#define BM_MetricsInfo_cinrMean_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5653_acc_bytes;\
	UINT bmlocal5654_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5653_acc_bytes = 2;\
	bmlocal5654_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5653_acc_bytes );\
	out_bitoff += bmlocal5654_acc_bits;\
}

#define BM_MetricsInfo_cinrMean_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5655_tmp_bitoff;\
	BM_MetricsInfo_cinrMean_GET_POS( base_ptr, out_ptr, bmlocal5655_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5655_tmp_bitoff);\
}

#define BM_MetricsInfo_cinrMean_POS_ALIGNED 2

// Alignment of MetricsInfo_cinrMean: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsInfo_cinrMean_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_cinrMean_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5656_my_ptr;\
	UINT bmlocal5657_my_bitoff;\
	BM_MetricsInfo_cinrMean_GET_POS( base_ptr, bmlocal5656_my_ptr, bmlocal5657_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5656_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5656_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5656_my_ptr, bmlocal5657_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_MetricsInfo_cinrMean_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5658_my_ptr;\
	UINT bmlocal5659_my_bitoff;\
	BM_MetricsInfo_cinrMean_GET_POS( base_ptr, bmlocal5658_my_ptr, bmlocal5659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5658_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5658_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5658_my_ptr, bmlocal5659_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// MetricsInfo_cinrMean: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_cinrMean: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_cinrMean: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_cinrMean: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_cinrMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_cinrMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_cinrMean_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal5660_out_val;\
	BM_MetricsInfo_cinrMean_GET( base_ptr, bmlocal5660_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cinrMean", 16, (UINT)(bmlocal5660_out_val), "%d", 1);\
}

#define BM_MetricsInfo_cinrMean_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_cinrMean_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsInfo_cinrMean_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5661_my_ptr;\
	UINT bmlocal5662_my_bitoff;\
	BM_MetricsInfo_cinrMean_GET_POS( base_ptr, bmlocal5661_my_ptr, bmlocal5662_my_bitoff );\
	(*((UINT16*)bmlocal5661_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5662_my_bitoff );\
}

// MetricsInfo_cinrMean: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_cinrMean_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5663_tmp_bits;\
	BM_MetricsInfo_cinrMean_GET_SIZE( base_ptr, out_bytes, bmlocal5663_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5663_tmp_bits );\
}

#define BM_MetricsInfo_cinrMean_BYTES_SIZE 2

#define BM_MetricsInfo_preambleId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5666_acc_bytes;\
	UINT bmlocal5667_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5666_acc_bytes = 4;\
	bmlocal5667_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5666_acc_bytes );\
	out_bitoff += bmlocal5667_acc_bits;\
}

#define BM_MetricsInfo_preambleId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5668_tmp_bitoff;\
	BM_MetricsInfo_preambleId_GET_POS( base_ptr, out_ptr, bmlocal5668_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5668_tmp_bitoff);\
}

#define BM_MetricsInfo_preambleId_POS_ALIGNED 4

// Alignment of MetricsInfo_preambleId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsInfo_preambleId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_preambleId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5669_my_ptr;\
	UINT bmlocal5670_my_bitoff;\
	BM_MetricsInfo_preambleId_GET_POS( base_ptr, bmlocal5669_my_ptr, bmlocal5670_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5669_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5669_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5669_my_ptr, bmlocal5670_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsInfo_preambleId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5671_my_ptr;\
	UINT bmlocal5672_my_bitoff;\
	BM_MetricsInfo_preambleId_GET_POS( base_ptr, bmlocal5671_my_ptr, bmlocal5672_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5671_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5671_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5671_my_ptr, bmlocal5672_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// MetricsInfo_preambleId: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_preambleId: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_preambleId: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_preambleId: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_preambleId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_preambleId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_preambleId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5673_out_val;\
	BM_MetricsInfo_preambleId_GET( base_ptr, bmlocal5673_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleId", 8, (UINT)(bmlocal5673_out_val), "%d", 1);\
}

#define BM_MetricsInfo_preambleId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_preambleId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsInfo_preambleId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5674_my_ptr;\
	UINT bmlocal5675_my_bitoff;\
	BM_MetricsInfo_preambleId_GET_POS( base_ptr, bmlocal5674_my_ptr, bmlocal5675_my_bitoff );\
	(*((UINT8*)bmlocal5674_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5675_my_bitoff );\
}

// MetricsInfo_preambleId: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_preambleId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5676_tmp_bits;\
	BM_MetricsInfo_preambleId_GET_SIZE( base_ptr, out_bytes, bmlocal5676_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5676_tmp_bits );\
}

#define BM_MetricsInfo_preambleId_BYTES_SIZE 1

#define BM_MetricsInfo_frequency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5679_acc_bytes;\
	UINT bmlocal5680_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5679_acc_bytes = 5;\
	bmlocal5680_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5679_acc_bytes );\
	out_bitoff += bmlocal5680_acc_bits;\
}

#define BM_MetricsInfo_frequency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5681_tmp_bitoff;\
	BM_MetricsInfo_frequency_GET_POS( base_ptr, out_ptr, bmlocal5681_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5681_tmp_bitoff);\
}

#define BM_MetricsInfo_frequency_POS_ALIGNED 5

// Alignment of MetricsInfo_frequency: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsInfo_frequency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_frequency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5682_my_ptr;\
	UINT bmlocal5683_my_bitoff;\
	BM_MetricsInfo_frequency_GET_POS( base_ptr, bmlocal5682_my_ptr, bmlocal5683_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5682_my_ptr)-1) ), 8, 24, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5682_my_ptr)+3) ), 0, 8, 24));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5682_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5682_my_ptr, bmlocal5683_my_bitoff, 32, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_MetricsInfo_frequency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5684_my_ptr;\
	UINT bmlocal5685_my_bitoff;\
	BM_MetricsInfo_frequency_GET_POS( base_ptr, bmlocal5684_my_ptr, bmlocal5685_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5684_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5684_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5684_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5684_my_ptr, bmlocal5685_my_bitoff, 32, in_val, 0x00000001 );\
	}\
}

// MetricsInfo_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_frequency: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_frequency: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_frequency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5686_out_val;\
	BM_MetricsInfo_frequency_GET( base_ptr, bmlocal5686_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal5686_out_val), "%d", 1);\
}

#define BM_MetricsInfo_frequency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_frequency_DUMP_DEPTH( base_ptr, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_MetricsInfo_frequency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5687_val;\
	BM_MetricsInfo_frequency_GET( base_ptr, bmlocal5687_val );\
	(bmlocal5687_val)++;\
	BM_MetricsInfo_frequency_SET( base_ptr, bmlocal5687_val );\
}

#else // NOT __arm || __arc
#define BM_MetricsInfo_frequency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5688_my_ptr;\
	UINT bmlocal5689_my_bitoff;\
	BM_MetricsInfo_frequency_GET_POS( base_ptr, bmlocal5688_my_ptr, bmlocal5689_my_bitoff );\
	(*((UINT32*)bmlocal5688_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5689_my_bitoff );\
}

#endif
// MetricsInfo_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_frequency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5690_tmp_bits;\
	BM_MetricsInfo_frequency_GET_SIZE( base_ptr, out_bytes, bmlocal5690_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5690_tmp_bits );\
}

#define BM_MetricsInfo_frequency_BYTES_SIZE 4

#define BM_MetricsInfo_bandWidth_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5693_acc_bytes;\
	UINT bmlocal5694_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5693_acc_bytes = 9;\
	bmlocal5694_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5693_acc_bytes );\
	out_bitoff += bmlocal5694_acc_bits;\
}

#define BM_MetricsInfo_bandWidth_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5695_tmp_bitoff;\
	BM_MetricsInfo_bandWidth_GET_POS( base_ptr, out_ptr, bmlocal5695_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5695_tmp_bitoff);\
}

#define BM_MetricsInfo_bandWidth_POS_ALIGNED 9

// Alignment of MetricsInfo_bandWidth: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsInfo_bandWidth_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_bandWidth_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5696_my_ptr;\
	UINT bmlocal5697_my_bitoff;\
	BM_MetricsInfo_bandWidth_GET_POS( base_ptr, bmlocal5696_my_ptr, bmlocal5697_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5696_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5696_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5696_my_ptr, bmlocal5697_my_bitoff, 8, E_BandWidth, out_val, 0x00000001 );\
	}\
}

#define BM_MetricsInfo_bandWidth_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5698_my_ptr;\
	UINT bmlocal5699_my_bitoff;\
	BM_MetricsInfo_bandWidth_GET_POS( base_ptr, bmlocal5698_my_ptr, bmlocal5699_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5698_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5698_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5698_my_ptr, bmlocal5699_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// MetricsInfo_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_bandWidth_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal5700_out_val;\
	BM_MetricsInfo_bandWidth_GET( base_ptr, bmlocal5700_out_val );\
	if( bmlocal5700_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal5700_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal5700_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal5700_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal5700_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_MetricsInfo_bandWidth_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_bandWidth_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsInfo_bandWidth_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5701_my_ptr;\
	UINT bmlocal5702_my_bitoff;\
	BM_MetricsInfo_bandWidth_GET_POS( base_ptr, bmlocal5701_my_ptr, bmlocal5702_my_bitoff );\
	(*((UINT8*)bmlocal5701_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5702_my_bitoff );\
}

// MetricsInfo_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_bandWidth_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5703_tmp_bits;\
	BM_MetricsInfo_bandWidth_GET_SIZE( base_ptr, out_bytes, bmlocal5703_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5703_tmp_bits );\
}

#define BM_MetricsInfo_bandWidth_BYTES_SIZE 1

#define BM_MetricsInfo_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5706_acc_bytes;\
	UINT bmlocal5707_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5706_acc_bytes = 10;\
	bmlocal5707_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5706_acc_bytes );\
	out_bitoff += bmlocal5707_acc_bits;\
}

#define BM_MetricsInfo_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5708_tmp_bitoff;\
	BM_MetricsInfo_bsId_GET_POS( base_ptr, out_ptr, bmlocal5708_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5708_tmp_bitoff);\
}

#define BM_MetricsInfo_bsId_POS_ALIGNED 10

// ARRAY: MetricsInfo_bsId
#define BM_MetricsInfo_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5709_out_ptr;\
	UINT bmlocal5710_out_bitoff;\
	UINT bmlocal5711_element_size_bytes;\
	UINT bmlocal5712_element_size_bits;\
	BM_MetricsInfo_bsId_GET_POS( base_ptr, bmlocal5709_out_ptr, bmlocal5710_out_bitoff );\
	bmlocal5711_element_size_bytes = 1;\
	bmlocal5712_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5709_out_ptr) + (idx0) * bmlocal5711_element_size_bytes );\
	out_bitoff = bmlocal5710_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5712_element_size_bits );\
}

// COMPOSITE: Full name: 'MetricsInfo_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MetricsInfo_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5713_parent_out_ptr;\
	BM_MetricsInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5713_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5713_parent_out_ptr;\
}

// Alignment of MetricsInfo_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MetricsInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsInfo_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5714_my_ptr;\
	UINT bmlocal5715_my_bitoff;\
	BM_MetricsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5714_my_ptr, bmlocal5715_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5714_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5714_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5714_my_ptr, bmlocal5715_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MetricsInfo_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5716_my_ptr;\
	UINT bmlocal5717_my_bitoff;\
	BM_MetricsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5716_my_ptr, bmlocal5717_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5716_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5716_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5716_my_ptr, bmlocal5717_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MetricsInfo_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsInfo_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// MetricsInfo_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsInfo_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5718_out_val;\
	BM_MetricsInfo_bsId_value_GET( base_ptr, idx0, bmlocal5718_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal5718_out_val), "%u", 1);\
}

#define BM_MetricsInfo_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MetricsInfo_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5719_my_ptr;\
	UINT bmlocal5720_my_bitoff;\
	BM_MetricsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5719_my_ptr, bmlocal5720_my_bitoff );\
	(*((UINT8*)bmlocal5719_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5720_my_bitoff );\
}

// MetricsInfo_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsInfo_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5721_tmp_bits;\
	BM_MetricsInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5721_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5721_tmp_bits );\
}

#define BM_MetricsInfo_bsId_value_BYTES_SIZE 1

#define BM_MetricsInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsInfo_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5724_tmp_bits;\
	BM_MetricsInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5724_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5724_tmp_bits );\
}

#define BM_MetricsInfo_bsId_BYTES_CELL_SIZE 1

#define BM_MetricsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsInfo_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MetricsInfo_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5725_dim_size0;\
	UINT bmlocal5726_idx0;\
	bmlocal5725_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal5726_idx0=0; bmlocal5726_idx0<bmlocal5725_dim_size0; bmlocal5726_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5726_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MetricsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal5726_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsInfo_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5727_tmp_bits;\
	BM_MetricsInfo_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal5727_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5727_tmp_bits );\
}

#define BM_MetricsInfo_bsId_BYTES_SIZE 6

#define BM_MetricsInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5728_tmp_bytes = 0;\
	UINT bmlocal5729_tmp_bits = 0;\
	out_bytes = 10;\
	out_bits = 0;\
	BM_MetricsInfo_bsId_GET_SIZE( base_ptr, bmlocal5728_tmp_bytes, bmlocal5729_tmp_bits );\
	out_bytes += bmlocal5728_tmp_bytes;\
	out_bits += bmlocal5729_tmp_bits;\
}

#define BM_MetricsInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5730_tmp_bits;\
	BM_MetricsInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5730_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5730_tmp_bits );\
}

#define BM_MetricsInfo_BYTES_SIZE 16

#define BM_MetricsInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MetricsInfo", 1);\
	BM_MetricsInfo_rssiMean_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsInfo_cinrMean_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsInfo_preambleId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsInfo_frequency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsInfo_bandWidth_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsInfo_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BsInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_LittleEndianness_Uint8 _bsId[6];
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
} BMS_BsInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
	BMS_LittleEndianness_Uint8 _bsId[6];
} BMS_BsInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BsInfo' Type: 'BsInfo', Top-level, Non-instance, No bitoff root
#define BM_BsInfo_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BsInfo_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5731_tmp_bitoff;\
	BM_BsInfo_bsId_GET_POS( base_ptr, out_ptr, bmlocal5731_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5731_tmp_bitoff);\
}

#define BM_BsInfo_bsId_POS_ALIGNED 0

// ARRAY: BsInfo_bsId
#define BM_BsInfo_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BsInfo_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BsInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5732_out_ptr;\
	UINT bmlocal5733_out_bitoff;\
	UINT bmlocal5734_element_size_bytes;\
	UINT bmlocal5735_element_size_bits;\
	BM_BsInfo_bsId_GET_POS( base_ptr, bmlocal5732_out_ptr, bmlocal5733_out_bitoff );\
	bmlocal5734_element_size_bytes = 1;\
	bmlocal5735_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5732_out_ptr) + (idx0) * bmlocal5734_element_size_bytes );\
	out_bitoff = bmlocal5733_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5735_element_size_bits );\
}

// COMPOSITE: Full name: 'BsInfo_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_BsInfo_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5736_parent_out_ptr;\
	BM_BsInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5736_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5736_parent_out_ptr;\
}

// Alignment of BsInfo_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BsInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BsInfo_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5737_my_ptr;\
	UINT bmlocal5738_my_bitoff;\
	BM_BsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5737_my_ptr, bmlocal5738_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5737_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5737_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5737_my_ptr, bmlocal5738_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_BsInfo_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5739_my_ptr;\
	UINT bmlocal5740_my_bitoff;\
	BM_BsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5739_my_ptr, bmlocal5740_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5739_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5739_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5739_my_ptr, bmlocal5740_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// BsInfo_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// BsInfo_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// BsInfo_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// BsInfo_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// BsInfo_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BsInfo_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5741_out_val;\
	BM_BsInfo_bsId_value_GET( base_ptr, idx0, bmlocal5741_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal5741_out_val), "%u", 1);\
}

#define BM_BsInfo_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BsInfo_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5742_my_ptr;\
	UINT bmlocal5743_my_bitoff;\
	BM_BsInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5742_my_ptr, bmlocal5743_my_bitoff );\
	(*((UINT8*)bmlocal5742_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5743_my_bitoff );\
}

// BsInfo_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_BsInfo_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5744_tmp_bits;\
	BM_BsInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5744_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5744_tmp_bits );\
}

#define BM_BsInfo_bsId_value_BYTES_SIZE 1

#define BM_BsInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BsInfo_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5747_tmp_bits;\
	BM_BsInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5747_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5747_tmp_bits );\
}

#define BM_BsInfo_bsId_BYTES_CELL_SIZE 1

#define BM_BsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BsInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BsInfo_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BsInfo_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5748_dim_size0;\
	UINT bmlocal5749_idx0;\
	bmlocal5748_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal5749_idx0=0; bmlocal5749_idx0<bmlocal5748_dim_size0; bmlocal5749_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5749_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BsInfo_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal5749_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BsInfo_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BsInfo_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BsInfo_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5750_tmp_bits;\
	BM_BsInfo_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal5750_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5750_tmp_bits );\
}

#define BM_BsInfo_bsId_BYTES_SIZE 6

#define BM_BsInfo_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5751_tmp_bytes = 0;\
	UINT bmlocal5752_tmp_bits = 0;\
	UINT bmlocal5753_acc_bytes;\
	UINT bmlocal5754_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5753_acc_bytes = 0;\
	bmlocal5754_acc_bits = 0;\
	BM_BsInfo_bsId_GET_SIZE( base_ptr, bmlocal5751_tmp_bytes, bmlocal5752_tmp_bits );\
	bmlocal5753_acc_bytes += bmlocal5751_tmp_bytes;\
	bmlocal5754_acc_bits += bmlocal5752_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5753_acc_bytes );\
	out_bitoff += bmlocal5754_acc_bits;\
}

#define BM_BsInfo_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5755_tmp_bitoff;\
	BM_BsInfo_reserved_GET_POS( base_ptr, out_ptr, bmlocal5755_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5755_tmp_bitoff);\
}

#define BM_BsInfo_reserved_POS_ALIGNED 6

#define BM_BsInfo_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5756_my_ptr;\
	UINT bmlocal5757_my_bitoff;\
	BM_BsInfo_reserved_GET_POS( base_ptr, bmlocal5756_my_ptr, bmlocal5757_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5756_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5756_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5756_my_ptr, bmlocal5757_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BsInfo_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5758_my_ptr;\
	UINT bmlocal5759_my_bitoff;\
	BM_BsInfo_reserved_GET_POS( base_ptr, bmlocal5758_my_ptr, bmlocal5759_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5758_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5758_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5758_my_ptr, bmlocal5759_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_BsInfo_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BsInfo_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5760_out_bytes;\
	UINT bmlocal5761_out_bits;\
	BM_BsInfo_reserved_GET_SIZE( base_ptr, bmlocal5760_out_bytes, bmlocal5761_out_bits );\
	bmlocal5761_out_bits += bmlocal5760_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal5761_out_bits), "%d", 1);\
}

#define BM_BsInfo_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BsInfo_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BsInfo_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5762_tmp_bits;\
	BM_BsInfo_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal5762_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5762_tmp_bits );\
}

#define BM_BsInfo_reserved_BYTES_SIZE 2

#define BM_BsInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5763_tmp_bytes = 0;\
	UINT bmlocal5764_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_BsInfo_bsId_GET_SIZE( base_ptr, bmlocal5763_tmp_bytes, bmlocal5764_tmp_bits );\
	out_bytes += bmlocal5763_tmp_bytes;\
	out_bits += bmlocal5764_tmp_bits;\
}

#define BM_BsInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5765_tmp_bits;\
	BM_BsInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5765_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5765_tmp_bits );\
}

#define BM_BsInfo_BYTES_SIZE 8

#define BM_BsInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BsInfo", 1);\
	BM_BsInfo_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BsInfo_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BsInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BsInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MetricsScanInfo[20];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _phyLinkId;
	UINT32 _frequency;
	INT16 _phyGrade : 16;
	UINT8 _preambleId : 8;
	E_BandWidth _bandWidth : 8;
	ECellStatus _bSValidityIndicator : 8; //indicates if last NE entry procedure failed
	BMS_LittleEndianness_Uint8 _bsId[6];
	UINT8 _reserved_bytes [1]; //reserved bytes, to make the next field start at an aligned address
} BMS_MetricsScanInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved_bytes [1]; //reserved bytes, to make the next field start at an aligned address
	BMS_LittleEndianness_Uint8 _bsId[6];
	ECellStatus _bSValidityIndicator : 8; //indicates if last NE entry procedure failed
	E_BandWidth _bandWidth : 8;
	UINT8 _preambleId : 8;
	INT16 _phyGrade : 16;
	UINT32 _frequency;
	UINT32 _phyLinkId;
} BMS_MetricsScanInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MetricsScanInfo' Type: 'MetricsScanInfo', Top-level, Non-instance, No bitoff root
#define BM_MetricsScanInfo_phyLinkId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MetricsScanInfo_phyLinkId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5766_tmp_bitoff;\
	BM_MetricsScanInfo_phyLinkId_GET_POS( base_ptr, out_ptr, bmlocal5766_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5766_tmp_bitoff);\
}

#define BM_MetricsScanInfo_phyLinkId_POS_ALIGNED 0

// Alignment of MetricsScanInfo_phyLinkId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_phyLinkId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_phyLinkId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5767_my_ptr;\
	UINT bmlocal5768_my_bitoff;\
	BM_MetricsScanInfo_phyLinkId_GET_POS( base_ptr, bmlocal5767_my_ptr, bmlocal5768_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5767_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5767_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5767_my_ptr, bmlocal5768_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsScanInfo_phyLinkId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5769_my_ptr;\
	UINT bmlocal5770_my_bitoff;\
	BM_MetricsScanInfo_phyLinkId_GET_POS( base_ptr, bmlocal5769_my_ptr, bmlocal5770_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5769_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5769_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5769_my_ptr, bmlocal5770_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MetricsScanInfo_phyLinkId: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_phyLinkId: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_phyLinkId: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_phyLinkId: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_phyLinkId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_phyLinkId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_phyLinkId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5771_out_val;\
	BM_MetricsScanInfo_phyLinkId_GET( base_ptr, bmlocal5771_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "phyLinkId", 32, (UINT)(bmlocal5771_out_val), "%d", 1);\
}

#define BM_MetricsScanInfo_phyLinkId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_phyLinkId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_phyLinkId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5772_my_ptr;\
	UINT bmlocal5773_my_bitoff;\
	BM_MetricsScanInfo_phyLinkId_GET_POS( base_ptr, bmlocal5772_my_ptr, bmlocal5773_my_bitoff );\
	(*((UINT32*)bmlocal5772_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5773_my_bitoff );\
}

// MetricsScanInfo_phyLinkId: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_phyLinkId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5774_tmp_bits;\
	BM_MetricsScanInfo_phyLinkId_GET_SIZE( base_ptr, out_bytes, bmlocal5774_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5774_tmp_bits );\
}

#define BM_MetricsScanInfo_phyLinkId_BYTES_SIZE 4

#define BM_MetricsScanInfo_frequency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5777_acc_bytes;\
	UINT bmlocal5778_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5777_acc_bytes = 4;\
	bmlocal5778_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5777_acc_bytes );\
	out_bitoff += bmlocal5778_acc_bits;\
}

#define BM_MetricsScanInfo_frequency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5779_tmp_bitoff;\
	BM_MetricsScanInfo_frequency_GET_POS( base_ptr, out_ptr, bmlocal5779_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5779_tmp_bitoff);\
}

#define BM_MetricsScanInfo_frequency_POS_ALIGNED 4

// Alignment of MetricsScanInfo_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_frequency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_frequency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5780_my_ptr;\
	UINT bmlocal5781_my_bitoff;\
	BM_MetricsScanInfo_frequency_GET_POS( base_ptr, bmlocal5780_my_ptr, bmlocal5781_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5780_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5780_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5780_my_ptr, bmlocal5781_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsScanInfo_frequency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5782_my_ptr;\
	UINT bmlocal5783_my_bitoff;\
	BM_MetricsScanInfo_frequency_GET_POS( base_ptr, bmlocal5782_my_ptr, bmlocal5783_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5782_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5782_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5782_my_ptr, bmlocal5783_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MetricsScanInfo_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_frequency: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_frequency: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_frequency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5784_out_val;\
	BM_MetricsScanInfo_frequency_GET( base_ptr, bmlocal5784_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal5784_out_val), "%d", 1);\
}

#define BM_MetricsScanInfo_frequency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_frequency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_frequency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5785_my_ptr;\
	UINT bmlocal5786_my_bitoff;\
	BM_MetricsScanInfo_frequency_GET_POS( base_ptr, bmlocal5785_my_ptr, bmlocal5786_my_bitoff );\
	(*((UINT32*)bmlocal5785_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5786_my_bitoff );\
}

// MetricsScanInfo_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_frequency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5787_tmp_bits;\
	BM_MetricsScanInfo_frequency_GET_SIZE( base_ptr, out_bytes, bmlocal5787_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5787_tmp_bits );\
}

#define BM_MetricsScanInfo_frequency_BYTES_SIZE 4

#define BM_MetricsScanInfo_phyGrade_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5790_acc_bytes;\
	UINT bmlocal5791_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5790_acc_bytes = 8;\
	bmlocal5791_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5790_acc_bytes );\
	out_bitoff += bmlocal5791_acc_bits;\
}

#define BM_MetricsScanInfo_phyGrade_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5792_tmp_bitoff;\
	BM_MetricsScanInfo_phyGrade_GET_POS( base_ptr, out_ptr, bmlocal5792_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5792_tmp_bitoff);\
}

#define BM_MetricsScanInfo_phyGrade_POS_ALIGNED 8

// Alignment of MetricsScanInfo_phyGrade: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_phyGrade_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_phyGrade_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5793_my_ptr;\
	UINT bmlocal5794_my_bitoff;\
	BM_MetricsScanInfo_phyGrade_GET_POS( base_ptr, bmlocal5793_my_ptr, bmlocal5794_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5793_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5793_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5793_my_ptr, bmlocal5794_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsScanInfo_phyGrade_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5795_my_ptr;\
	UINT bmlocal5796_my_bitoff;\
	BM_MetricsScanInfo_phyGrade_GET_POS( base_ptr, bmlocal5795_my_ptr, bmlocal5796_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5795_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5795_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5795_my_ptr, bmlocal5796_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// MetricsScanInfo_phyGrade: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_phyGrade: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_phyGrade: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_phyGrade: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_phyGrade: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_phyGrade: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_phyGrade_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal5797_out_val;\
	BM_MetricsScanInfo_phyGrade_GET( base_ptr, bmlocal5797_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "phyGrade", 16, (UINT)(bmlocal5797_out_val), "%d", 1);\
}

#define BM_MetricsScanInfo_phyGrade_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_phyGrade_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_phyGrade_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5798_my_ptr;\
	UINT bmlocal5799_my_bitoff;\
	BM_MetricsScanInfo_phyGrade_GET_POS( base_ptr, bmlocal5798_my_ptr, bmlocal5799_my_bitoff );\
	(*((UINT16*)bmlocal5798_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5799_my_bitoff );\
}

// MetricsScanInfo_phyGrade: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_phyGrade_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5800_tmp_bits;\
	BM_MetricsScanInfo_phyGrade_GET_SIZE( base_ptr, out_bytes, bmlocal5800_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5800_tmp_bits );\
}

#define BM_MetricsScanInfo_phyGrade_BYTES_SIZE 2

#define BM_MetricsScanInfo_preambleId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5803_acc_bytes;\
	UINT bmlocal5804_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5803_acc_bytes = 10;\
	bmlocal5804_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5803_acc_bytes );\
	out_bitoff += bmlocal5804_acc_bits;\
}

#define BM_MetricsScanInfo_preambleId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5805_tmp_bitoff;\
	BM_MetricsScanInfo_preambleId_GET_POS( base_ptr, out_ptr, bmlocal5805_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5805_tmp_bitoff);\
}

#define BM_MetricsScanInfo_preambleId_POS_ALIGNED 10

// Alignment of MetricsScanInfo_preambleId: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_preambleId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_preambleId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5806_my_ptr;\
	UINT bmlocal5807_my_bitoff;\
	BM_MetricsScanInfo_preambleId_GET_POS( base_ptr, bmlocal5806_my_ptr, bmlocal5807_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5806_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5806_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5806_my_ptr, bmlocal5807_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_MetricsScanInfo_preambleId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5808_my_ptr;\
	UINT bmlocal5809_my_bitoff;\
	BM_MetricsScanInfo_preambleId_GET_POS( base_ptr, bmlocal5808_my_ptr, bmlocal5809_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5808_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5808_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5808_my_ptr, bmlocal5809_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// MetricsScanInfo_preambleId: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_preambleId: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_preambleId: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_preambleId: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_preambleId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_preambleId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_preambleId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5810_out_val;\
	BM_MetricsScanInfo_preambleId_GET( base_ptr, bmlocal5810_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleId", 8, (UINT)(bmlocal5810_out_val), "%d", 1);\
}

#define BM_MetricsScanInfo_preambleId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_preambleId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_preambleId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5811_my_ptr;\
	UINT bmlocal5812_my_bitoff;\
	BM_MetricsScanInfo_preambleId_GET_POS( base_ptr, bmlocal5811_my_ptr, bmlocal5812_my_bitoff );\
	(*((UINT8*)bmlocal5811_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5812_my_bitoff );\
}

// MetricsScanInfo_preambleId: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_preambleId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5813_tmp_bits;\
	BM_MetricsScanInfo_preambleId_GET_SIZE( base_ptr, out_bytes, bmlocal5813_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5813_tmp_bits );\
}

#define BM_MetricsScanInfo_preambleId_BYTES_SIZE 1

#define BM_MetricsScanInfo_bandWidth_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5816_acc_bytes;\
	UINT bmlocal5817_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5816_acc_bytes = 11;\
	bmlocal5817_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5816_acc_bytes );\
	out_bitoff += bmlocal5817_acc_bits;\
}

#define BM_MetricsScanInfo_bandWidth_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5818_tmp_bitoff;\
	BM_MetricsScanInfo_bandWidth_GET_POS( base_ptr, out_ptr, bmlocal5818_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5818_tmp_bitoff);\
}

#define BM_MetricsScanInfo_bandWidth_POS_ALIGNED 11

// Alignment of MetricsScanInfo_bandWidth: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_bandWidth_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_bandWidth_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5819_my_ptr;\
	UINT bmlocal5820_my_bitoff;\
	BM_MetricsScanInfo_bandWidth_GET_POS( base_ptr, bmlocal5819_my_ptr, bmlocal5820_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5819_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5819_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5819_my_ptr, bmlocal5820_my_bitoff, 8, E_BandWidth, out_val, 0x00000003 );\
	}\
}

#define BM_MetricsScanInfo_bandWidth_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5821_my_ptr;\
	UINT bmlocal5822_my_bitoff;\
	BM_MetricsScanInfo_bandWidth_GET_POS( base_ptr, bmlocal5821_my_ptr, bmlocal5822_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5821_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5821_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5821_my_ptr, bmlocal5822_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// MetricsScanInfo_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_bandWidth_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal5823_out_val;\
	BM_MetricsScanInfo_bandWidth_GET( base_ptr, bmlocal5823_out_val );\
	if( bmlocal5823_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal5823_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal5823_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal5823_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal5823_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_MetricsScanInfo_bandWidth_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bandWidth_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_bandWidth_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5824_my_ptr;\
	UINT bmlocal5825_my_bitoff;\
	BM_MetricsScanInfo_bandWidth_GET_POS( base_ptr, bmlocal5824_my_ptr, bmlocal5825_my_bitoff );\
	(*((UINT8*)bmlocal5824_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5825_my_bitoff );\
}

// MetricsScanInfo_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_bandWidth_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5826_tmp_bits;\
	BM_MetricsScanInfo_bandWidth_GET_SIZE( base_ptr, out_bytes, bmlocal5826_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5826_tmp_bits );\
}

#define BM_MetricsScanInfo_bandWidth_BYTES_SIZE 1

#define BM_MetricsScanInfo_bSValidityIndicator_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5829_acc_bytes;\
	UINT bmlocal5830_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5829_acc_bytes = 12;\
	bmlocal5830_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5829_acc_bytes );\
	out_bitoff += bmlocal5830_acc_bits;\
}

#define BM_MetricsScanInfo_bSValidityIndicator_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5831_tmp_bitoff;\
	BM_MetricsScanInfo_bSValidityIndicator_GET_POS( base_ptr, out_ptr, bmlocal5831_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5831_tmp_bitoff);\
}

#define BM_MetricsScanInfo_bSValidityIndicator_POS_ALIGNED 12

// Alignment of MetricsScanInfo_bSValidityIndicator: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MetricsScanInfo_bSValidityIndicator_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_bSValidityIndicator_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5832_my_ptr;\
	UINT bmlocal5833_my_bitoff;\
	BM_MetricsScanInfo_bSValidityIndicator_GET_POS( base_ptr, bmlocal5832_my_ptr, bmlocal5833_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ECellStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5832_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ECellStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5832_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5832_my_ptr, bmlocal5833_my_bitoff, 8, ECellStatus, out_val, 0x00000000 );\
	}\
}

#define BM_MetricsScanInfo_bSValidityIndicator_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5834_my_ptr;\
	UINT bmlocal5835_my_bitoff;\
	BM_MetricsScanInfo_bSValidityIndicator_GET_POS( base_ptr, bmlocal5834_my_ptr, bmlocal5835_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5834_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5834_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5834_my_ptr, bmlocal5835_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// MetricsScanInfo_bSValidityIndicator: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bSValidityIndicator: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bSValidityIndicator: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bSValidityIndicator: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bSValidityIndicator: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_bSValidityIndicator: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_bSValidityIndicator_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	ECellStatus bmlocal5836_out_val;\
	BM_MetricsScanInfo_bSValidityIndicator_GET( base_ptr, bmlocal5836_out_val );\
	if( bmlocal5836_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_SUCCESS", 1);\
	}\
	if( bmlocal5836_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_REGISTRATION_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_SBC_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_AUTHENTICATION_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_DEREGISTRATION", 1);\
	}\
	if( bmlocal5836_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_MAC_RANGING_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_PHY_RANGING_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_HO_FAILURE", 1);\
	}\
	if( bmlocal5836_out_val == 8 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_UNKNOWN", 1);\
	}\
}

#define BM_MetricsScanInfo_bSValidityIndicator_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bSValidityIndicator_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_bSValidityIndicator_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5837_my_ptr;\
	UINT bmlocal5838_my_bitoff;\
	BM_MetricsScanInfo_bSValidityIndicator_GET_POS( base_ptr, bmlocal5837_my_ptr, bmlocal5838_my_bitoff );\
	(*((UINT8*)bmlocal5837_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5838_my_bitoff );\
}

// MetricsScanInfo_bSValidityIndicator: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_bSValidityIndicator_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5839_tmp_bits;\
	BM_MetricsScanInfo_bSValidityIndicator_GET_SIZE( base_ptr, out_bytes, bmlocal5839_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5839_tmp_bits );\
}

#define BM_MetricsScanInfo_bSValidityIndicator_BYTES_SIZE 1

#define BM_MetricsScanInfo_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5842_acc_bytes;\
	UINT bmlocal5843_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5842_acc_bytes = 13;\
	bmlocal5843_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5842_acc_bytes );\
	out_bitoff += bmlocal5843_acc_bits;\
}

#define BM_MetricsScanInfo_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5844_tmp_bitoff;\
	BM_MetricsScanInfo_bsId_GET_POS( base_ptr, out_ptr, bmlocal5844_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5844_tmp_bitoff);\
}

#define BM_MetricsScanInfo_bsId_POS_ALIGNED 13

// ARRAY: MetricsScanInfo_bsId
#define BM_MetricsScanInfo_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5845_out_ptr;\
	UINT bmlocal5846_out_bitoff;\
	UINT bmlocal5847_element_size_bytes;\
	UINT bmlocal5848_element_size_bits;\
	BM_MetricsScanInfo_bsId_GET_POS( base_ptr, bmlocal5845_out_ptr, bmlocal5846_out_bitoff );\
	bmlocal5847_element_size_bytes = 1;\
	bmlocal5848_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal5845_out_ptr) + (idx0) * bmlocal5847_element_size_bytes );\
	out_bitoff = bmlocal5846_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal5848_element_size_bits );\
}

// COMPOSITE: Full name: 'MetricsScanInfo_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_MetricsScanInfo_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5849_parent_out_ptr;\
	BM_MetricsScanInfo_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal5849_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal5849_parent_out_ptr;\
}

// Alignment of MetricsScanInfo_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_MetricsScanInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsScanInfo_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5850_my_ptr;\
	UINT bmlocal5851_my_bitoff;\
	BM_MetricsScanInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5850_my_ptr, bmlocal5851_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5850_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5850_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5850_my_ptr, bmlocal5851_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_MetricsScanInfo_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5852_my_ptr;\
	UINT bmlocal5853_my_bitoff;\
	BM_MetricsScanInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5852_my_ptr, bmlocal5853_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5852_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5852_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5852_my_ptr, bmlocal5853_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// MetricsScanInfo_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// MetricsScanInfo_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// MetricsScanInfo_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MetricsScanInfo_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MetricsScanInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal5854_out_val;\
	BM_MetricsScanInfo_bsId_value_GET( base_ptr, idx0, bmlocal5854_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal5854_out_val), "%u", 1);\
}

#define BM_MetricsScanInfo_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_MetricsScanInfo_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5855_my_ptr;\
	UINT bmlocal5856_my_bitoff;\
	BM_MetricsScanInfo_bsId_value_GET_POS( base_ptr, idx0, bmlocal5855_my_ptr, bmlocal5856_my_bitoff );\
	(*((UINT8*)bmlocal5855_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5856_my_bitoff );\
}

// MetricsScanInfo_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_MetricsScanInfo_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5857_tmp_bits;\
	BM_MetricsScanInfo_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal5857_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5857_tmp_bits );\
}

#define BM_MetricsScanInfo_bsId_value_BYTES_SIZE 1

#define BM_MetricsScanInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsScanInfo_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5860_tmp_bits;\
	BM_MetricsScanInfo_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal5860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5860_tmp_bits );\
}

#define BM_MetricsScanInfo_bsId_BYTES_CELL_SIZE 1

#define BM_MetricsScanInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_MetricsScanInfo_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_MetricsScanInfo_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5861_dim_size0;\
	UINT bmlocal5862_idx0;\
	bmlocal5861_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal5862_idx0=0; bmlocal5862_idx0<bmlocal5861_dim_size0; bmlocal5862_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal5862_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_MetricsScanInfo_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal5862_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5863_tmp_bits;\
	BM_MetricsScanInfo_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal5863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5863_tmp_bits );\
}

#define BM_MetricsScanInfo_bsId_BYTES_SIZE 6

#define BM_MetricsScanInfo_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5864_tmp_bytes = 0;\
	UINT bmlocal5865_tmp_bits = 0;\
	UINT bmlocal5866_acc_bytes;\
	UINT bmlocal5867_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5866_acc_bytes = 13;\
	bmlocal5867_acc_bits = 0;\
	BM_MetricsScanInfo_bsId_GET_SIZE( base_ptr, bmlocal5864_tmp_bytes, bmlocal5865_tmp_bits );\
	bmlocal5866_acc_bytes += bmlocal5864_tmp_bytes;\
	bmlocal5867_acc_bits += bmlocal5865_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5866_acc_bytes );\
	out_bitoff += bmlocal5867_acc_bits;\
}

#define BM_MetricsScanInfo_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5868_tmp_bitoff;\
	BM_MetricsScanInfo_reserved_GET_POS( base_ptr, out_ptr, bmlocal5868_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5868_tmp_bitoff);\
}

#define BM_MetricsScanInfo_reserved_POS_ALIGNED 19

#define BM_MetricsScanInfo_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5869_my_ptr;\
	UINT bmlocal5870_my_bitoff;\
	BM_MetricsScanInfo_reserved_GET_POS( base_ptr, bmlocal5869_my_ptr, bmlocal5870_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5869_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5869_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5869_my_ptr, bmlocal5870_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_MetricsScanInfo_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5871_my_ptr;\
	UINT bmlocal5872_my_bitoff;\
	BM_MetricsScanInfo_reserved_GET_POS( base_ptr, bmlocal5871_my_ptr, bmlocal5872_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5871_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5871_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5871_my_ptr, bmlocal5872_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

#define BM_MetricsScanInfo_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal5873_out_bytes;\
	UINT bmlocal5874_out_bits;\
	BM_MetricsScanInfo_reserved_GET_SIZE( base_ptr, bmlocal5873_out_bytes, bmlocal5874_out_bits );\
	bmlocal5874_out_bits += bmlocal5873_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal5874_out_bits), "%d", 1);\
}

#define BM_MetricsScanInfo_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MetricsScanInfo_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5875_tmp_bits;\
	BM_MetricsScanInfo_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal5875_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5875_tmp_bits );\
}

#define BM_MetricsScanInfo_reserved_BYTES_SIZE 1

#define BM_MetricsScanInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal5876_tmp_bytes = 0;\
	UINT bmlocal5877_tmp_bits = 0;\
	out_bytes = 14;\
	out_bits = 0;\
	BM_MetricsScanInfo_bsId_GET_SIZE( base_ptr, bmlocal5876_tmp_bytes, bmlocal5877_tmp_bits );\
	out_bytes += bmlocal5876_tmp_bytes;\
	out_bits += bmlocal5877_tmp_bits;\
}

#define BM_MetricsScanInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5878_tmp_bits;\
	BM_MetricsScanInfo_GET_SIZE( base_ptr, out_bytes, bmlocal5878_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5878_tmp_bits );\
}

#define BM_MetricsScanInfo_BYTES_SIZE 20

#define BM_MetricsScanInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MetricsScanInfo", 1);\
	BM_MetricsScanInfo_phyLinkId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_frequency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_phyGrade_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_preambleId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_bandWidth_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_bSValidityIndicator_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MetricsScanInfo_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MetricsScanInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MetricsScanInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CidInformation[36];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _sfId;
	UINT32 _maxSustainedTrafficRate;
	UINT32 _maxTrafficBurst; //in Bytes, the maximum burst size that shall be accomodated for the service
	UINT32 _toleratedJitter; //in ms
	UINT32 _maximumLatency; //in ms
	UINT32 _unsolicitedGrantInterval; //in ms
	UINT32 _minReservedTrafficRate;
	UINT16 _cid : 16;
	SFSchedulingType _sfSchedulingType : 8;
	E_QoSParamsSetType _qosParamsSetType : 8;
	UINT8 _trafficPrio : 8; //0-7 [higher number indicates higher priority]
	E_SfSide _sfSide : 8;
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
} BMS_CidInformation;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
	E_SfSide _sfSide : 8;
	UINT8 _trafficPrio : 8; //0-7 [higher number indicates higher priority]
	E_QoSParamsSetType _qosParamsSetType : 8;
	SFSchedulingType _sfSchedulingType : 8;
	UINT16 _cid : 16;
	UINT32 _minReservedTrafficRate;
	UINT32 _unsolicitedGrantInterval; //in ms
	UINT32 _maximumLatency; //in ms
	UINT32 _toleratedJitter; //in ms
	UINT32 _maxTrafficBurst; //in Bytes, the maximum burst size that shall be accomodated for the service
	UINT32 _maxSustainedTrafficRate;
	UINT32 _sfId;
} BMS_CidInformation;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'CidInformation' Type: 'CidInformation', Top-level, Non-instance, No bitoff root
#define BM_CidInformation_sfId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CidInformation_sfId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5879_tmp_bitoff;\
	BM_CidInformation_sfId_GET_POS( base_ptr, out_ptr, bmlocal5879_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5879_tmp_bitoff);\
}

#define BM_CidInformation_sfId_POS_ALIGNED 0

// Alignment of CidInformation_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_sfId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_sfId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5880_my_ptr;\
	UINT bmlocal5881_my_bitoff;\
	BM_CidInformation_sfId_GET_POS( base_ptr, bmlocal5880_my_ptr, bmlocal5881_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5880_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5880_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5880_my_ptr, bmlocal5881_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_sfId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5882_my_ptr;\
	UINT bmlocal5883_my_bitoff;\
	BM_CidInformation_sfId_GET_POS( base_ptr, bmlocal5882_my_ptr, bmlocal5883_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5882_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5882_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5882_my_ptr, bmlocal5883_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfId: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfId: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_sfId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5884_out_val;\
	BM_CidInformation_sfId_GET( base_ptr, bmlocal5884_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal5884_out_val), "%d", 1);\
}

#define BM_CidInformation_sfId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_sfId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_sfId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5885_my_ptr;\
	UINT bmlocal5886_my_bitoff;\
	BM_CidInformation_sfId_GET_POS( base_ptr, bmlocal5885_my_ptr, bmlocal5886_my_bitoff );\
	(*((UINT32*)bmlocal5885_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5886_my_bitoff );\
}

// CidInformation_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_sfId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5887_tmp_bits;\
	BM_CidInformation_sfId_GET_SIZE( base_ptr, out_bytes, bmlocal5887_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5887_tmp_bits );\
}

#define BM_CidInformation_sfId_BYTES_SIZE 4

#define BM_CidInformation_maxSustainedTrafficRate_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5890_acc_bytes;\
	UINT bmlocal5891_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5890_acc_bytes = 4;\
	bmlocal5891_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5890_acc_bytes );\
	out_bitoff += bmlocal5891_acc_bits;\
}

#define BM_CidInformation_maxSustainedTrafficRate_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5892_tmp_bitoff;\
	BM_CidInformation_maxSustainedTrafficRate_GET_POS( base_ptr, out_ptr, bmlocal5892_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5892_tmp_bitoff);\
}

#define BM_CidInformation_maxSustainedTrafficRate_POS_ALIGNED 4

// Alignment of CidInformation_maxSustainedTrafficRate: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_maxSustainedTrafficRate_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_maxSustainedTrafficRate_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5893_my_ptr;\
	UINT bmlocal5894_my_bitoff;\
	BM_CidInformation_maxSustainedTrafficRate_GET_POS( base_ptr, bmlocal5893_my_ptr, bmlocal5894_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5893_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5893_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5893_my_ptr, bmlocal5894_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_maxSustainedTrafficRate_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5895_my_ptr;\
	UINT bmlocal5896_my_bitoff;\
	BM_CidInformation_maxSustainedTrafficRate_GET_POS( base_ptr, bmlocal5895_my_ptr, bmlocal5896_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5895_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5895_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5895_my_ptr, bmlocal5896_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_maxSustainedTrafficRate: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maxSustainedTrafficRate: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maxSustainedTrafficRate: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_maxSustainedTrafficRate: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_maxSustainedTrafficRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_maxSustainedTrafficRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5897_out_val;\
	BM_CidInformation_maxSustainedTrafficRate_GET( base_ptr, bmlocal5897_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maxSustainedTrafficRate", 32, (UINT)(bmlocal5897_out_val), "%d", 1);\
}

#define BM_CidInformation_maxSustainedTrafficRate_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_maxSustainedTrafficRate_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5898_my_ptr;\
	UINT bmlocal5899_my_bitoff;\
	BM_CidInformation_maxSustainedTrafficRate_GET_POS( base_ptr, bmlocal5898_my_ptr, bmlocal5899_my_bitoff );\
	(*((UINT32*)bmlocal5898_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5899_my_bitoff );\
}

// CidInformation_maxSustainedTrafficRate: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_maxSustainedTrafficRate_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5900_tmp_bits;\
	BM_CidInformation_maxSustainedTrafficRate_GET_SIZE( base_ptr, out_bytes, bmlocal5900_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5900_tmp_bits );\
}

#define BM_CidInformation_maxSustainedTrafficRate_BYTES_SIZE 4

#define BM_CidInformation_maxTrafficBurst_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5903_acc_bytes;\
	UINT bmlocal5904_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5903_acc_bytes = 8;\
	bmlocal5904_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5903_acc_bytes );\
	out_bitoff += bmlocal5904_acc_bits;\
}

#define BM_CidInformation_maxTrafficBurst_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5905_tmp_bitoff;\
	BM_CidInformation_maxTrafficBurst_GET_POS( base_ptr, out_ptr, bmlocal5905_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5905_tmp_bitoff);\
}

#define BM_CidInformation_maxTrafficBurst_POS_ALIGNED 8

// Alignment of CidInformation_maxTrafficBurst: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_maxTrafficBurst_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_maxTrafficBurst_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5906_my_ptr;\
	UINT bmlocal5907_my_bitoff;\
	BM_CidInformation_maxTrafficBurst_GET_POS( base_ptr, bmlocal5906_my_ptr, bmlocal5907_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5906_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5906_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5906_my_ptr, bmlocal5907_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_maxTrafficBurst_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5908_my_ptr;\
	UINT bmlocal5909_my_bitoff;\
	BM_CidInformation_maxTrafficBurst_GET_POS( base_ptr, bmlocal5908_my_ptr, bmlocal5909_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5908_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5908_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5908_my_ptr, bmlocal5909_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_maxTrafficBurst: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maxTrafficBurst: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maxTrafficBurst: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_maxTrafficBurst: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_maxTrafficBurst: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_maxTrafficBurst: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_maxTrafficBurst_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5910_out_val;\
	BM_CidInformation_maxTrafficBurst_GET( base_ptr, bmlocal5910_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maxTrafficBurst", 32, (UINT)(bmlocal5910_out_val), "%d", 1);\
}

#define BM_CidInformation_maxTrafficBurst_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_maxTrafficBurst_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_maxTrafficBurst_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5911_my_ptr;\
	UINT bmlocal5912_my_bitoff;\
	BM_CidInformation_maxTrafficBurst_GET_POS( base_ptr, bmlocal5911_my_ptr, bmlocal5912_my_bitoff );\
	(*((UINT32*)bmlocal5911_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5912_my_bitoff );\
}

// CidInformation_maxTrafficBurst: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_maxTrafficBurst_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5913_tmp_bits;\
	BM_CidInformation_maxTrafficBurst_GET_SIZE( base_ptr, out_bytes, bmlocal5913_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5913_tmp_bits );\
}

#define BM_CidInformation_maxTrafficBurst_BYTES_SIZE 4

#define BM_CidInformation_toleratedJitter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5916_acc_bytes;\
	UINT bmlocal5917_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5916_acc_bytes = 12;\
	bmlocal5917_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5916_acc_bytes );\
	out_bitoff += bmlocal5917_acc_bits;\
}

#define BM_CidInformation_toleratedJitter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5918_tmp_bitoff;\
	BM_CidInformation_toleratedJitter_GET_POS( base_ptr, out_ptr, bmlocal5918_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5918_tmp_bitoff);\
}

#define BM_CidInformation_toleratedJitter_POS_ALIGNED 12

// Alignment of CidInformation_toleratedJitter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_toleratedJitter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_toleratedJitter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5919_my_ptr;\
	UINT bmlocal5920_my_bitoff;\
	BM_CidInformation_toleratedJitter_GET_POS( base_ptr, bmlocal5919_my_ptr, bmlocal5920_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5919_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5919_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5919_my_ptr, bmlocal5920_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_toleratedJitter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5921_my_ptr;\
	UINT bmlocal5922_my_bitoff;\
	BM_CidInformation_toleratedJitter_GET_POS( base_ptr, bmlocal5921_my_ptr, bmlocal5922_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5921_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5921_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5921_my_ptr, bmlocal5922_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_toleratedJitter: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_toleratedJitter: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_toleratedJitter: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_toleratedJitter: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_toleratedJitter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_toleratedJitter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_toleratedJitter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5923_out_val;\
	BM_CidInformation_toleratedJitter_GET( base_ptr, bmlocal5923_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "toleratedJitter", 32, (UINT)(bmlocal5923_out_val), "%d", 1);\
}

#define BM_CidInformation_toleratedJitter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_toleratedJitter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_toleratedJitter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5924_my_ptr;\
	UINT bmlocal5925_my_bitoff;\
	BM_CidInformation_toleratedJitter_GET_POS( base_ptr, bmlocal5924_my_ptr, bmlocal5925_my_bitoff );\
	(*((UINT32*)bmlocal5924_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5925_my_bitoff );\
}

// CidInformation_toleratedJitter: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_toleratedJitter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5926_tmp_bits;\
	BM_CidInformation_toleratedJitter_GET_SIZE( base_ptr, out_bytes, bmlocal5926_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5926_tmp_bits );\
}

#define BM_CidInformation_toleratedJitter_BYTES_SIZE 4

#define BM_CidInformation_maximumLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5929_acc_bytes;\
	UINT bmlocal5930_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5929_acc_bytes = 16;\
	bmlocal5930_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5929_acc_bytes );\
	out_bitoff += bmlocal5930_acc_bits;\
}

#define BM_CidInformation_maximumLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5931_tmp_bitoff;\
	BM_CidInformation_maximumLatency_GET_POS( base_ptr, out_ptr, bmlocal5931_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5931_tmp_bitoff);\
}

#define BM_CidInformation_maximumLatency_POS_ALIGNED 16

// Alignment of CidInformation_maximumLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_maximumLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_maximumLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5932_my_ptr;\
	UINT bmlocal5933_my_bitoff;\
	BM_CidInformation_maximumLatency_GET_POS( base_ptr, bmlocal5932_my_ptr, bmlocal5933_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5932_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5932_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5932_my_ptr, bmlocal5933_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_maximumLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5934_my_ptr;\
	UINT bmlocal5935_my_bitoff;\
	BM_CidInformation_maximumLatency_GET_POS( base_ptr, bmlocal5934_my_ptr, bmlocal5935_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5934_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5934_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5934_my_ptr, bmlocal5935_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_maximumLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maximumLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_maximumLatency: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_maximumLatency: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_maximumLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_maximumLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_maximumLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5936_out_val;\
	BM_CidInformation_maximumLatency_GET( base_ptr, bmlocal5936_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maximumLatency", 32, (UINT)(bmlocal5936_out_val), "%d", 1);\
}

#define BM_CidInformation_maximumLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_maximumLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_maximumLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5937_my_ptr;\
	UINT bmlocal5938_my_bitoff;\
	BM_CidInformation_maximumLatency_GET_POS( base_ptr, bmlocal5937_my_ptr, bmlocal5938_my_bitoff );\
	(*((UINT32*)bmlocal5937_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5938_my_bitoff );\
}

// CidInformation_maximumLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_maximumLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5939_tmp_bits;\
	BM_CidInformation_maximumLatency_GET_SIZE( base_ptr, out_bytes, bmlocal5939_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5939_tmp_bits );\
}

#define BM_CidInformation_maximumLatency_BYTES_SIZE 4

#define BM_CidInformation_unsolicitedGrantInterval_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5942_acc_bytes;\
	UINT bmlocal5943_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5942_acc_bytes = 20;\
	bmlocal5943_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5942_acc_bytes );\
	out_bitoff += bmlocal5943_acc_bits;\
}

#define BM_CidInformation_unsolicitedGrantInterval_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5944_tmp_bitoff;\
	BM_CidInformation_unsolicitedGrantInterval_GET_POS( base_ptr, out_ptr, bmlocal5944_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5944_tmp_bitoff);\
}

#define BM_CidInformation_unsolicitedGrantInterval_POS_ALIGNED 20

// Alignment of CidInformation_unsolicitedGrantInterval: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_unsolicitedGrantInterval_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_unsolicitedGrantInterval_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5945_my_ptr;\
	UINT bmlocal5946_my_bitoff;\
	BM_CidInformation_unsolicitedGrantInterval_GET_POS( base_ptr, bmlocal5945_my_ptr, bmlocal5946_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5945_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5945_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5945_my_ptr, bmlocal5946_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_unsolicitedGrantInterval_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5947_my_ptr;\
	UINT bmlocal5948_my_bitoff;\
	BM_CidInformation_unsolicitedGrantInterval_GET_POS( base_ptr, bmlocal5947_my_ptr, bmlocal5948_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5947_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5947_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5947_my_ptr, bmlocal5948_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_unsolicitedGrantInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_unsolicitedGrantInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_unsolicitedGrantInterval: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_unsolicitedGrantInterval: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_unsolicitedGrantInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_unsolicitedGrantInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5949_out_val;\
	BM_CidInformation_unsolicitedGrantInterval_GET( base_ptr, bmlocal5949_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "unsolicitedGrantInterval", 32, (UINT)(bmlocal5949_out_val), "%d", 1);\
}

#define BM_CidInformation_unsolicitedGrantInterval_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_unsolicitedGrantInterval_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5950_my_ptr;\
	UINT bmlocal5951_my_bitoff;\
	BM_CidInformation_unsolicitedGrantInterval_GET_POS( base_ptr, bmlocal5950_my_ptr, bmlocal5951_my_bitoff );\
	(*((UINT32*)bmlocal5950_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5951_my_bitoff );\
}

// CidInformation_unsolicitedGrantInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_unsolicitedGrantInterval_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5952_tmp_bits;\
	BM_CidInformation_unsolicitedGrantInterval_GET_SIZE( base_ptr, out_bytes, bmlocal5952_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5952_tmp_bits );\
}

#define BM_CidInformation_unsolicitedGrantInterval_BYTES_SIZE 4

#define BM_CidInformation_minReservedTrafficRate_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5955_acc_bytes;\
	UINT bmlocal5956_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5955_acc_bytes = 24;\
	bmlocal5956_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5955_acc_bytes );\
	out_bitoff += bmlocal5956_acc_bits;\
}

#define BM_CidInformation_minReservedTrafficRate_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5957_tmp_bitoff;\
	BM_CidInformation_minReservedTrafficRate_GET_POS( base_ptr, out_ptr, bmlocal5957_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5957_tmp_bitoff);\
}

#define BM_CidInformation_minReservedTrafficRate_POS_ALIGNED 24

// Alignment of CidInformation_minReservedTrafficRate: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_minReservedTrafficRate_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_minReservedTrafficRate_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5958_my_ptr;\
	UINT bmlocal5959_my_bitoff;\
	BM_CidInformation_minReservedTrafficRate_GET_POS( base_ptr, bmlocal5958_my_ptr, bmlocal5959_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5958_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5958_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5958_my_ptr, bmlocal5959_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_minReservedTrafficRate_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5960_my_ptr;\
	UINT bmlocal5961_my_bitoff;\
	BM_CidInformation_minReservedTrafficRate_GET_POS( base_ptr, bmlocal5960_my_ptr, bmlocal5961_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5960_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5960_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5960_my_ptr, bmlocal5961_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CidInformation_minReservedTrafficRate: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_minReservedTrafficRate: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_minReservedTrafficRate: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_minReservedTrafficRate: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_minReservedTrafficRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_minReservedTrafficRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_minReservedTrafficRate_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal5962_out_val;\
	BM_CidInformation_minReservedTrafficRate_GET( base_ptr, bmlocal5962_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "minReservedTrafficRate", 32, (UINT)(bmlocal5962_out_val), "%d", 1);\
}

#define BM_CidInformation_minReservedTrafficRate_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_minReservedTrafficRate_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_minReservedTrafficRate_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5963_my_ptr;\
	UINT bmlocal5964_my_bitoff;\
	BM_CidInformation_minReservedTrafficRate_GET_POS( base_ptr, bmlocal5963_my_ptr, bmlocal5964_my_bitoff );\
	(*((UINT32*)bmlocal5963_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5964_my_bitoff );\
}

// CidInformation_minReservedTrafficRate: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_minReservedTrafficRate_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5965_tmp_bits;\
	BM_CidInformation_minReservedTrafficRate_GET_SIZE( base_ptr, out_bytes, bmlocal5965_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5965_tmp_bits );\
}

#define BM_CidInformation_minReservedTrafficRate_BYTES_SIZE 4

#define BM_CidInformation_cid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5968_acc_bytes;\
	UINT bmlocal5969_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5968_acc_bytes = 28;\
	bmlocal5969_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5968_acc_bytes );\
	out_bitoff += bmlocal5969_acc_bits;\
}

#define BM_CidInformation_cid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5970_tmp_bitoff;\
	BM_CidInformation_cid_GET_POS( base_ptr, out_ptr, bmlocal5970_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5970_tmp_bitoff);\
}

#define BM_CidInformation_cid_POS_ALIGNED 28

// Alignment of CidInformation_cid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_cid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_cid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5971_my_ptr;\
	UINT bmlocal5972_my_bitoff;\
	BM_CidInformation_cid_GET_POS( base_ptr, bmlocal5971_my_ptr, bmlocal5972_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5971_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5971_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5971_my_ptr, bmlocal5972_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_cid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5973_my_ptr;\
	UINT bmlocal5974_my_bitoff;\
	BM_CidInformation_cid_GET_POS( base_ptr, bmlocal5973_my_ptr, bmlocal5974_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5973_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5973_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5973_my_ptr, bmlocal5974_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// CidInformation_cid: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_cid: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_cid: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_cid: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_cid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_cid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_cid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal5975_out_val;\
	BM_CidInformation_cid_GET( base_ptr, bmlocal5975_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cid", 16, (UINT)(bmlocal5975_out_val), "%d", 1);\
}

#define BM_CidInformation_cid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_cid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_cid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5976_my_ptr;\
	UINT bmlocal5977_my_bitoff;\
	BM_CidInformation_cid_GET_POS( base_ptr, bmlocal5976_my_ptr, bmlocal5977_my_bitoff );\
	(*((UINT16*)bmlocal5976_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5977_my_bitoff );\
}

// CidInformation_cid: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_cid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5978_tmp_bits;\
	BM_CidInformation_cid_GET_SIZE( base_ptr, out_bytes, bmlocal5978_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5978_tmp_bits );\
}

#define BM_CidInformation_cid_BYTES_SIZE 2

#define BM_CidInformation_sfSchedulingType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5981_acc_bytes;\
	UINT bmlocal5982_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5981_acc_bytes = 30;\
	bmlocal5982_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5981_acc_bytes );\
	out_bitoff += bmlocal5982_acc_bits;\
}

#define BM_CidInformation_sfSchedulingType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5983_tmp_bitoff;\
	BM_CidInformation_sfSchedulingType_GET_POS( base_ptr, out_ptr, bmlocal5983_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5983_tmp_bitoff);\
}

#define BM_CidInformation_sfSchedulingType_POS_ALIGNED 30

// Alignment of CidInformation_sfSchedulingType: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_sfSchedulingType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_sfSchedulingType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5984_my_ptr;\
	UINT bmlocal5985_my_bitoff;\
	BM_CidInformation_sfSchedulingType_GET_POS( base_ptr, bmlocal5984_my_ptr, bmlocal5985_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (SFSchedulingType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5984_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (SFSchedulingType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5984_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5984_my_ptr, bmlocal5985_my_bitoff, 8, SFSchedulingType, out_val, 0x00000002 );\
	}\
}

#define BM_CidInformation_sfSchedulingType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5986_my_ptr;\
	UINT bmlocal5987_my_bitoff;\
	BM_CidInformation_sfSchedulingType_GET_POS( base_ptr, bmlocal5986_my_ptr, bmlocal5987_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5986_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5986_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5986_my_ptr, bmlocal5987_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// CidInformation_sfSchedulingType: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfSchedulingType: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfSchedulingType: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfSchedulingType: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfSchedulingType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_sfSchedulingType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_sfSchedulingType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	SFSchedulingType bmlocal5988_out_val;\
	BM_CidInformation_sfSchedulingType_GET( base_ptr, bmlocal5988_out_val );\
	if( bmlocal5988_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "Invalid_Type", 1);\
	}\
	if( bmlocal5988_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "BE_Type", 1);\
	}\
	if( bmlocal5988_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "nrtPS_Type", 1);\
	}\
	if( bmlocal5988_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "rtPS_Type", 1);\
	}\
	if( bmlocal5988_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "ertPS_Type", 1);\
	}\
	if( bmlocal5988_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "UGS_Type", 1);\
	}\
}

#define BM_CidInformation_sfSchedulingType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_sfSchedulingType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_sfSchedulingType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5989_my_ptr;\
	UINT bmlocal5990_my_bitoff;\
	BM_CidInformation_sfSchedulingType_GET_POS( base_ptr, bmlocal5989_my_ptr, bmlocal5990_my_bitoff );\
	(*((UINT8*)bmlocal5989_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal5990_my_bitoff );\
}

// CidInformation_sfSchedulingType: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_sfSchedulingType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal5991_tmp_bits;\
	BM_CidInformation_sfSchedulingType_GET_SIZE( base_ptr, out_bytes, bmlocal5991_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal5991_tmp_bits );\
}

#define BM_CidInformation_sfSchedulingType_BYTES_SIZE 1

#define BM_CidInformation_qosParamsSetType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal5994_acc_bytes;\
	UINT bmlocal5995_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal5994_acc_bytes = 31;\
	bmlocal5995_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal5994_acc_bytes );\
	out_bitoff += bmlocal5995_acc_bits;\
}

#define BM_CidInformation_qosParamsSetType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal5996_tmp_bitoff;\
	BM_CidInformation_qosParamsSetType_GET_POS( base_ptr, out_ptr, bmlocal5996_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal5996_tmp_bitoff);\
}

#define BM_CidInformation_qosParamsSetType_POS_ALIGNED 31

// Alignment of CidInformation_qosParamsSetType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_qosParamsSetType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_qosParamsSetType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5997_my_ptr;\
	UINT bmlocal5998_my_bitoff;\
	BM_CidInformation_qosParamsSetType_GET_POS( base_ptr, bmlocal5997_my_ptr, bmlocal5998_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_QoSParamsSetType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5997_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_QoSParamsSetType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5997_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal5997_my_ptr, bmlocal5998_my_bitoff, 8, E_QoSParamsSetType, out_val, 0x00000003 );\
	}\
}

#define BM_CidInformation_qosParamsSetType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal5999_my_ptr;\
	UINT bmlocal6000_my_bitoff;\
	BM_CidInformation_qosParamsSetType_GET_POS( base_ptr, bmlocal5999_my_ptr, bmlocal6000_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5999_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal5999_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal5999_my_ptr, bmlocal6000_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// CidInformation_qosParamsSetType: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_qosParamsSetType: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_qosParamsSetType: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_qosParamsSetType: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_qosParamsSetType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_qosParamsSetType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_qosParamsSetType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_QoSParamsSetType bmlocal6001_out_val;\
	BM_CidInformation_qosParamsSetType_GET( base_ptr, bmlocal6001_out_val );\
	if( bmlocal6001_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Provisioned_SetType", 1);\
	}\
	if( bmlocal6001_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Admitted_SetType", 1);\
	}\
	if( bmlocal6001_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Active_SetType", 1);\
	}\
	if( bmlocal6001_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Any_SetType", 1);\
	}\
}

#define BM_CidInformation_qosParamsSetType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_qosParamsSetType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_qosParamsSetType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6002_my_ptr;\
	UINT bmlocal6003_my_bitoff;\
	BM_CidInformation_qosParamsSetType_GET_POS( base_ptr, bmlocal6002_my_ptr, bmlocal6003_my_bitoff );\
	(*((UINT8*)bmlocal6002_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6003_my_bitoff );\
}

// CidInformation_qosParamsSetType: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_qosParamsSetType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6004_tmp_bits;\
	BM_CidInformation_qosParamsSetType_GET_SIZE( base_ptr, out_bytes, bmlocal6004_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6004_tmp_bits );\
}

#define BM_CidInformation_qosParamsSetType_BYTES_SIZE 1

#define BM_CidInformation_trafficPrio_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6007_acc_bytes;\
	UINT bmlocal6008_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6007_acc_bytes = 32;\
	bmlocal6008_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6007_acc_bytes );\
	out_bitoff += bmlocal6008_acc_bits;\
}

#define BM_CidInformation_trafficPrio_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6009_tmp_bitoff;\
	BM_CidInformation_trafficPrio_GET_POS( base_ptr, out_ptr, bmlocal6009_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6009_tmp_bitoff);\
}

#define BM_CidInformation_trafficPrio_POS_ALIGNED 32

// Alignment of CidInformation_trafficPrio: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_trafficPrio_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_trafficPrio_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6010_my_ptr;\
	UINT bmlocal6011_my_bitoff;\
	BM_CidInformation_trafficPrio_GET_POS( base_ptr, bmlocal6010_my_ptr, bmlocal6011_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6010_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6010_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6010_my_ptr, bmlocal6011_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_CidInformation_trafficPrio_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6012_my_ptr;\
	UINT bmlocal6013_my_bitoff;\
	BM_CidInformation_trafficPrio_GET_POS( base_ptr, bmlocal6012_my_ptr, bmlocal6013_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6012_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6012_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6012_my_ptr, bmlocal6013_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// CidInformation_trafficPrio: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_trafficPrio: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_trafficPrio: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_trafficPrio: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_trafficPrio: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_trafficPrio: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_trafficPrio_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6014_out_val;\
	BM_CidInformation_trafficPrio_GET( base_ptr, bmlocal6014_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "trafficPrio", 8, (UINT)(bmlocal6014_out_val), "%d", 1);\
}

#define BM_CidInformation_trafficPrio_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_trafficPrio_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_trafficPrio_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6015_my_ptr;\
	UINT bmlocal6016_my_bitoff;\
	BM_CidInformation_trafficPrio_GET_POS( base_ptr, bmlocal6015_my_ptr, bmlocal6016_my_bitoff );\
	(*((UINT8*)bmlocal6015_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6016_my_bitoff );\
}

// CidInformation_trafficPrio: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_trafficPrio_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6017_tmp_bits;\
	BM_CidInformation_trafficPrio_GET_SIZE( base_ptr, out_bytes, bmlocal6017_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6017_tmp_bits );\
}

#define BM_CidInformation_trafficPrio_BYTES_SIZE 1

#define BM_CidInformation_sfSide_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6020_acc_bytes;\
	UINT bmlocal6021_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6020_acc_bytes = 33;\
	bmlocal6021_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6020_acc_bytes );\
	out_bitoff += bmlocal6021_acc_bits;\
}

#define BM_CidInformation_sfSide_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6022_tmp_bitoff;\
	BM_CidInformation_sfSide_GET_POS( base_ptr, out_ptr, bmlocal6022_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6022_tmp_bitoff);\
}

#define BM_CidInformation_sfSide_POS_ALIGNED 33

// Alignment of CidInformation_sfSide: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CidInformation_sfSide_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_sfSide_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6023_my_ptr;\
	UINT bmlocal6024_my_bitoff;\
	BM_CidInformation_sfSide_GET_POS( base_ptr, bmlocal6023_my_ptr, bmlocal6024_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_SfSide)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6023_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_SfSide)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6023_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6023_my_ptr, bmlocal6024_my_bitoff, 8, E_SfSide, out_val, 0x00000001 );\
	}\
}

#define BM_CidInformation_sfSide_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6025_my_ptr;\
	UINT bmlocal6026_my_bitoff;\
	BM_CidInformation_sfSide_GET_POS( base_ptr, bmlocal6025_my_ptr, bmlocal6026_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6025_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6025_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6025_my_ptr, bmlocal6026_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// CidInformation_sfSide: IS_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfSide: SET_DEFAULT accessor is not defined because no default value was specified.
// CidInformation_sfSide: IS_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfSide: SET_RESET accessor is not defined because no reset value was specified.
// CidInformation_sfSide: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CidInformation_sfSide: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CidInformation_sfSide_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_SfSide bmlocal6027_out_val;\
	BM_CidInformation_sfSide_GET( base_ptr, bmlocal6027_out_val );\
	if( bmlocal6027_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideUndefined", 1);\
	}\
	if( bmlocal6027_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideTx", 1);\
	}\
	if( bmlocal6027_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideRx", 1);\
	}\
	if( bmlocal6027_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideManagementBiDirectional", 1);\
	}\
}

#define BM_CidInformation_sfSide_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_sfSide_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_sfSide_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6028_my_ptr;\
	UINT bmlocal6029_my_bitoff;\
	BM_CidInformation_sfSide_GET_POS( base_ptr, bmlocal6028_my_ptr, bmlocal6029_my_bitoff );\
	(*((UINT8*)bmlocal6028_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6029_my_bitoff );\
}

// CidInformation_sfSide: Validation accessors are not defined because validation condition was not specified.
#define BM_CidInformation_sfSide_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6030_tmp_bits;\
	BM_CidInformation_sfSide_GET_SIZE( base_ptr, out_bytes, bmlocal6030_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6030_tmp_bits );\
}

#define BM_CidInformation_sfSide_BYTES_SIZE 1

#define BM_CidInformation_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6033_acc_bytes;\
	UINT bmlocal6034_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6033_acc_bytes = 34;\
	bmlocal6034_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6033_acc_bytes );\
	out_bitoff += bmlocal6034_acc_bits;\
}

#define BM_CidInformation_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6035_tmp_bitoff;\
	BM_CidInformation_reserved_GET_POS( base_ptr, out_ptr, bmlocal6035_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6035_tmp_bitoff);\
}

#define BM_CidInformation_reserved_POS_ALIGNED 34

#define BM_CidInformation_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6036_my_ptr;\
	UINT bmlocal6037_my_bitoff;\
	BM_CidInformation_reserved_GET_POS( base_ptr, bmlocal6036_my_ptr, bmlocal6037_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6036_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6036_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6036_my_ptr, bmlocal6037_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CidInformation_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6038_my_ptr;\
	UINT bmlocal6039_my_bitoff;\
	BM_CidInformation_reserved_GET_POS( base_ptr, bmlocal6038_my_ptr, bmlocal6039_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6038_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6038_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6038_my_ptr, bmlocal6039_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_CidInformation_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal6040_out_bytes;\
	UINT bmlocal6041_out_bits;\
	BM_CidInformation_reserved_GET_SIZE( base_ptr, bmlocal6040_out_bytes, bmlocal6041_out_bits );\
	bmlocal6041_out_bits += bmlocal6040_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal6041_out_bits), "%d", 1);\
}

#define BM_CidInformation_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CidInformation_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6042_tmp_bits;\
	BM_CidInformation_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal6042_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6042_tmp_bits );\
}

#define BM_CidInformation_reserved_BYTES_SIZE 2

#define BM_CidInformation_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 36;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6045_tmp_bits;\
	BM_CidInformation_GET_SIZE( base_ptr, out_bytes, bmlocal6045_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6045_tmp_bits );\
}

#define BM_CidInformation_BYTES_SIZE 36

#define BM_CidInformation_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CidInformation", 1);\
	BM_CidInformation_sfId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_maxTrafficBurst_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_toleratedJitter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_maximumLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_minReservedTrafficRate_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_cid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_sfSchedulingType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_qosParamsSetType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_trafficPrio_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_sfSide_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CidInformation_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CidInformation_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CidInformation_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BurstStatusPerConnection[32];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _CID;
	UINT32 _CIN;
	UINT32 _totalUlSduRateLimitDropCount;
	UINT32 _rateUlDropPackets;
	UINT32 _totalDlReceivedPdu;
	UINT32 _totalUlTransmittedSdu;
	UINT32 _totalOfPduDlBytes;
	UINT32 _totalOfSduDlBytes;
} BMS_BurstStatusPerConnection;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _totalOfSduDlBytes;
	UINT32 _totalOfPduDlBytes;
	UINT32 _totalUlTransmittedSdu;
	UINT32 _totalDlReceivedPdu;
	UINT32 _rateUlDropPackets;
	UINT32 _totalUlSduRateLimitDropCount;
	UINT32 _CIN;
	UINT32 _CID;
} BMS_BurstStatusPerConnection;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BurstStatusPerConnection' Type: 'BurstStatusPerConnection', Top-level, Non-instance, No bitoff root
#define BM_BurstStatusPerConnection_CID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BurstStatusPerConnection_CID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6046_tmp_bitoff;\
	BM_BurstStatusPerConnection_CID_GET_POS( base_ptr, out_ptr, bmlocal6046_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6046_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_CID_POS_ALIGNED 0

// Alignment of BurstStatusPerConnection_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_CID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_CID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6047_my_ptr;\
	UINT bmlocal6048_my_bitoff;\
	BM_BurstStatusPerConnection_CID_GET_POS( base_ptr, bmlocal6047_my_ptr, bmlocal6048_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6047_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6047_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6047_my_ptr, bmlocal6048_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_CID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6049_my_ptr;\
	UINT bmlocal6050_my_bitoff;\
	BM_BurstStatusPerConnection_CID_GET_POS( base_ptr, bmlocal6049_my_ptr, bmlocal6050_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6049_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6049_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6049_my_ptr, bmlocal6050_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_CID: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_CID: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6051_out_val;\
	BM_BurstStatusPerConnection_CID_GET( base_ptr, bmlocal6051_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal6051_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_CID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_CID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6052_my_ptr;\
	UINT bmlocal6053_my_bitoff;\
	BM_BurstStatusPerConnection_CID_GET_POS( base_ptr, bmlocal6052_my_ptr, bmlocal6053_my_bitoff );\
	(*((UINT32*)bmlocal6052_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6053_my_bitoff );\
}

// BurstStatusPerConnection_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_CID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6054_tmp_bits;\
	BM_BurstStatusPerConnection_CID_GET_SIZE( base_ptr, out_bytes, bmlocal6054_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6054_tmp_bits );\
}

#define BM_BurstStatusPerConnection_CID_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_CIN_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6057_acc_bytes;\
	UINT bmlocal6058_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6057_acc_bytes = 4;\
	bmlocal6058_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6057_acc_bytes );\
	out_bitoff += bmlocal6058_acc_bits;\
}

#define BM_BurstStatusPerConnection_CIN_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6059_tmp_bitoff;\
	BM_BurstStatusPerConnection_CIN_GET_POS( base_ptr, out_ptr, bmlocal6059_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6059_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_CIN_POS_ALIGNED 4

// Alignment of BurstStatusPerConnection_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_CIN_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_CIN_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6060_my_ptr;\
	UINT bmlocal6061_my_bitoff;\
	BM_BurstStatusPerConnection_CIN_GET_POS( base_ptr, bmlocal6060_my_ptr, bmlocal6061_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6060_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6060_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6060_my_ptr, bmlocal6061_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_CIN_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6062_my_ptr;\
	UINT bmlocal6063_my_bitoff;\
	BM_BurstStatusPerConnection_CIN_GET_POS( base_ptr, bmlocal6062_my_ptr, bmlocal6063_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6062_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6062_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6062_my_ptr, bmlocal6063_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_CIN: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_CIN: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6064_out_val;\
	BM_BurstStatusPerConnection_CIN_GET( base_ptr, bmlocal6064_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal6064_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_CIN_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_CIN_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6065_my_ptr;\
	UINT bmlocal6066_my_bitoff;\
	BM_BurstStatusPerConnection_CIN_GET_POS( base_ptr, bmlocal6065_my_ptr, bmlocal6066_my_bitoff );\
	(*((UINT32*)bmlocal6065_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6066_my_bitoff );\
}

// BurstStatusPerConnection_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_CIN_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6067_tmp_bits;\
	BM_BurstStatusPerConnection_CIN_GET_SIZE( base_ptr, out_bytes, bmlocal6067_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6067_tmp_bits );\
}

#define BM_BurstStatusPerConnection_CIN_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6070_acc_bytes;\
	UINT bmlocal6071_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6070_acc_bytes = 8;\
	bmlocal6071_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6070_acc_bytes );\
	out_bitoff += bmlocal6071_acc_bits;\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6072_tmp_bitoff;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, out_ptr, bmlocal6072_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6072_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_POS_ALIGNED 8

// Alignment of BurstStatusPerConnection_totalUlSduRateLimitDropCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6073_my_ptr;\
	UINT bmlocal6074_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, bmlocal6073_my_ptr, bmlocal6074_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6073_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6073_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6073_my_ptr, bmlocal6074_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6075_my_ptr;\
	UINT bmlocal6076_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, bmlocal6075_my_ptr, bmlocal6076_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6075_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6075_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6075_my_ptr, bmlocal6076_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_totalUlSduRateLimitDropCount: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalUlSduRateLimitDropCount: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalUlSduRateLimitDropCount: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalUlSduRateLimitDropCount: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalUlSduRateLimitDropCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_totalUlSduRateLimitDropCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6077_out_val;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET( base_ptr, bmlocal6077_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalUlSduRateLimitDropCount", 32, (UINT)(bmlocal6077_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6078_my_ptr;\
	UINT bmlocal6079_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, bmlocal6078_my_ptr, bmlocal6079_my_bitoff );\
	(*((UINT32*)bmlocal6078_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6079_my_bitoff );\
}

// BurstStatusPerConnection_totalUlSduRateLimitDropCount: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6080_tmp_bits;\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_GET_SIZE( base_ptr, out_bytes, bmlocal6080_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6080_tmp_bits );\
}

#define BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6083_acc_bytes;\
	UINT bmlocal6084_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6083_acc_bytes = 12;\
	bmlocal6084_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6083_acc_bytes );\
	out_bitoff += bmlocal6084_acc_bits;\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6085_tmp_bitoff;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, out_ptr, bmlocal6085_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6085_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_POS_ALIGNED 12

// Alignment of BurstStatusPerConnection_rateUlDropPackets: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_rateUlDropPackets_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6086_my_ptr;\
	UINT bmlocal6087_my_bitoff;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, bmlocal6086_my_ptr, bmlocal6087_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6086_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6086_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6086_my_ptr, bmlocal6087_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6088_my_ptr;\
	UINT bmlocal6089_my_bitoff;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, bmlocal6088_my_ptr, bmlocal6089_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6088_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6088_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6088_my_ptr, bmlocal6089_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_rateUlDropPackets: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_rateUlDropPackets: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_rateUlDropPackets: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_rateUlDropPackets: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_rateUlDropPackets: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_rateUlDropPackets: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6090_out_val;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET( base_ptr, bmlocal6090_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rateUlDropPackets", 32, (UINT)(bmlocal6090_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6091_my_ptr;\
	UINT bmlocal6092_my_bitoff;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, bmlocal6091_my_ptr, bmlocal6092_my_bitoff );\
	(*((UINT32*)bmlocal6091_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6092_my_bitoff );\
}

// BurstStatusPerConnection_rateUlDropPackets: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_rateUlDropPackets_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6093_tmp_bits;\
	BM_BurstStatusPerConnection_rateUlDropPackets_GET_SIZE( base_ptr, out_bytes, bmlocal6093_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6093_tmp_bits );\
}

#define BM_BurstStatusPerConnection_rateUlDropPackets_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6096_acc_bytes;\
	UINT bmlocal6097_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6096_acc_bytes = 16;\
	bmlocal6097_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6096_acc_bytes );\
	out_bitoff += bmlocal6097_acc_bits;\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6098_tmp_bitoff;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, out_ptr, bmlocal6098_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6098_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_POS_ALIGNED 16

// Alignment of BurstStatusPerConnection_totalDlReceivedPdu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6099_my_ptr;\
	UINT bmlocal6100_my_bitoff;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, bmlocal6099_my_ptr, bmlocal6100_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6099_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6099_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6099_my_ptr, bmlocal6100_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6101_my_ptr;\
	UINT bmlocal6102_my_bitoff;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, bmlocal6101_my_ptr, bmlocal6102_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6101_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6101_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6101_my_ptr, bmlocal6102_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_totalDlReceivedPdu: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalDlReceivedPdu: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalDlReceivedPdu: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalDlReceivedPdu: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalDlReceivedPdu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_totalDlReceivedPdu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6103_out_val;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET( base_ptr, bmlocal6103_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalDlReceivedPdu", 32, (UINT)(bmlocal6103_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6104_my_ptr;\
	UINT bmlocal6105_my_bitoff;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, bmlocal6104_my_ptr, bmlocal6105_my_bitoff );\
	(*((UINT32*)bmlocal6104_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6105_my_bitoff );\
}

// BurstStatusPerConnection_totalDlReceivedPdu: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6106_tmp_bits;\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_GET_SIZE( base_ptr, out_bytes, bmlocal6106_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6106_tmp_bits );\
}

#define BM_BurstStatusPerConnection_totalDlReceivedPdu_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6109_acc_bytes;\
	UINT bmlocal6110_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6109_acc_bytes = 20;\
	bmlocal6110_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6109_acc_bytes );\
	out_bitoff += bmlocal6110_acc_bits;\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6111_tmp_bitoff;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, out_ptr, bmlocal6111_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6111_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_POS_ALIGNED 20

// Alignment of BurstStatusPerConnection_totalUlTransmittedSdu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6112_my_ptr;\
	UINT bmlocal6113_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, bmlocal6112_my_ptr, bmlocal6113_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6112_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6112_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6112_my_ptr, bmlocal6113_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6114_my_ptr;\
	UINT bmlocal6115_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, bmlocal6114_my_ptr, bmlocal6115_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6114_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6114_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6114_my_ptr, bmlocal6115_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_totalUlTransmittedSdu: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalUlTransmittedSdu: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalUlTransmittedSdu: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalUlTransmittedSdu: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalUlTransmittedSdu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_totalUlTransmittedSdu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6116_out_val;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET( base_ptr, bmlocal6116_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalUlTransmittedSdu", 32, (UINT)(bmlocal6116_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6117_my_ptr;\
	UINT bmlocal6118_my_bitoff;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, bmlocal6117_my_ptr, bmlocal6118_my_bitoff );\
	(*((UINT32*)bmlocal6117_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6118_my_bitoff );\
}

// BurstStatusPerConnection_totalUlTransmittedSdu: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6119_tmp_bits;\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_GET_SIZE( base_ptr, out_bytes, bmlocal6119_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6119_tmp_bits );\
}

#define BM_BurstStatusPerConnection_totalUlTransmittedSdu_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6122_acc_bytes;\
	UINT bmlocal6123_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6122_acc_bytes = 24;\
	bmlocal6123_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6122_acc_bytes );\
	out_bitoff += bmlocal6123_acc_bits;\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6124_tmp_bitoff;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, out_ptr, bmlocal6124_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6124_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_POS_ALIGNED 24

// Alignment of BurstStatusPerConnection_totalOfPduDlBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6125_my_ptr;\
	UINT bmlocal6126_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, bmlocal6125_my_ptr, bmlocal6126_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6125_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6125_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6125_my_ptr, bmlocal6126_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6127_my_ptr;\
	UINT bmlocal6128_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, bmlocal6127_my_ptr, bmlocal6128_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6127_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6127_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6127_my_ptr, bmlocal6128_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_totalOfPduDlBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalOfPduDlBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalOfPduDlBytes: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalOfPduDlBytes: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalOfPduDlBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_totalOfPduDlBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6129_out_val;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET( base_ptr, bmlocal6129_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalOfPduDlBytes", 32, (UINT)(bmlocal6129_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6130_my_ptr;\
	UINT bmlocal6131_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, bmlocal6130_my_ptr, bmlocal6131_my_bitoff );\
	(*((UINT32*)bmlocal6130_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6131_my_bitoff );\
}

// BurstStatusPerConnection_totalOfPduDlBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6132_tmp_bits;\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_GET_SIZE( base_ptr, out_bytes, bmlocal6132_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6132_tmp_bits );\
}

#define BM_BurstStatusPerConnection_totalOfPduDlBytes_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6135_acc_bytes;\
	UINT bmlocal6136_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6135_acc_bytes = 28;\
	bmlocal6136_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6135_acc_bytes );\
	out_bitoff += bmlocal6136_acc_bits;\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6137_tmp_bitoff;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, out_ptr, bmlocal6137_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6137_tmp_bitoff);\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_POS_ALIGNED 28

// Alignment of BurstStatusPerConnection_totalOfSduDlBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6138_my_ptr;\
	UINT bmlocal6139_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, bmlocal6138_my_ptr, bmlocal6139_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6138_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6138_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6138_my_ptr, bmlocal6139_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6140_my_ptr;\
	UINT bmlocal6141_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, bmlocal6140_my_ptr, bmlocal6141_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6140_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6140_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6140_my_ptr, bmlocal6141_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatusPerConnection_totalOfSduDlBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalOfSduDlBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatusPerConnection_totalOfSduDlBytes: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalOfSduDlBytes: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatusPerConnection_totalOfSduDlBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatusPerConnection_totalOfSduDlBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6142_out_val;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET( base_ptr, bmlocal6142_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalOfSduDlBytes", 32, (UINT)(bmlocal6142_out_val), "%d", 1);\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6143_my_ptr;\
	UINT bmlocal6144_my_bitoff;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, bmlocal6143_my_ptr, bmlocal6144_my_bitoff );\
	(*((UINT32*)bmlocal6143_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6144_my_bitoff );\
}

// BurstStatusPerConnection_totalOfSduDlBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6145_tmp_bits;\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_GET_SIZE( base_ptr, out_bytes, bmlocal6145_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6145_tmp_bits );\
}

#define BM_BurstStatusPerConnection_totalOfSduDlBytes_BYTES_SIZE 4

#define BM_BurstStatusPerConnection_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6148_tmp_bits;\
	BM_BurstStatusPerConnection_GET_SIZE( base_ptr, out_bytes, bmlocal6148_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6148_tmp_bits );\
}

#define BM_BurstStatusPerConnection_BYTES_SIZE 32

#define BM_BurstStatusPerConnection_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BurstStatusPerConnection", 1);\
	BM_BurstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatusPerConnection_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatusPerConnection_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SfPeformancePerConnection[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _CID;
	UINT32 _CIN;
	UINT32 _ulIpThroughput;
	UINT32 _dlIpThroughput;
} BMS_SfPeformancePerConnection;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _dlIpThroughput;
	UINT32 _ulIpThroughput;
	UINT32 _CIN;
	UINT32 _CID;
} BMS_SfPeformancePerConnection;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'SfPeformancePerConnection' Type: 'SfPeformancePerConnection', Top-level, Non-instance, No bitoff root
#define BM_SfPeformancePerConnection_CID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SfPeformancePerConnection_CID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6149_tmp_bitoff;\
	BM_SfPeformancePerConnection_CID_GET_POS( base_ptr, out_ptr, bmlocal6149_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6149_tmp_bitoff);\
}

#define BM_SfPeformancePerConnection_CID_POS_ALIGNED 0

// Alignment of SfPeformancePerConnection_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPeformancePerConnection_CID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_CID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6150_my_ptr;\
	UINT bmlocal6151_my_bitoff;\
	BM_SfPeformancePerConnection_CID_GET_POS( base_ptr, bmlocal6150_my_ptr, bmlocal6151_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6150_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6150_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6150_my_ptr, bmlocal6151_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPeformancePerConnection_CID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6152_my_ptr;\
	UINT bmlocal6153_my_bitoff;\
	BM_SfPeformancePerConnection_CID_GET_POS( base_ptr, bmlocal6152_my_ptr, bmlocal6153_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6152_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6152_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6152_my_ptr, bmlocal6153_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPeformancePerConnection_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_CID: IS_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_CID: SET_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPeformancePerConnection_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6154_out_val;\
	BM_SfPeformancePerConnection_CID_GET( base_ptr, bmlocal6154_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal6154_out_val), "%d", 1);\
}

#define BM_SfPeformancePerConnection_CID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPeformancePerConnection_CID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6155_my_ptr;\
	UINT bmlocal6156_my_bitoff;\
	BM_SfPeformancePerConnection_CID_GET_POS( base_ptr, bmlocal6155_my_ptr, bmlocal6156_my_bitoff );\
	(*((UINT32*)bmlocal6155_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6156_my_bitoff );\
}

// SfPeformancePerConnection_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPeformancePerConnection_CID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6157_tmp_bits;\
	BM_SfPeformancePerConnection_CID_GET_SIZE( base_ptr, out_bytes, bmlocal6157_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6157_tmp_bits );\
}

#define BM_SfPeformancePerConnection_CID_BYTES_SIZE 4

#define BM_SfPeformancePerConnection_CIN_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6160_acc_bytes;\
	UINT bmlocal6161_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6160_acc_bytes = 4;\
	bmlocal6161_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6160_acc_bytes );\
	out_bitoff += bmlocal6161_acc_bits;\
}

#define BM_SfPeformancePerConnection_CIN_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6162_tmp_bitoff;\
	BM_SfPeformancePerConnection_CIN_GET_POS( base_ptr, out_ptr, bmlocal6162_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6162_tmp_bitoff);\
}

#define BM_SfPeformancePerConnection_CIN_POS_ALIGNED 4

// Alignment of SfPeformancePerConnection_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPeformancePerConnection_CIN_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_CIN_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6163_my_ptr;\
	UINT bmlocal6164_my_bitoff;\
	BM_SfPeformancePerConnection_CIN_GET_POS( base_ptr, bmlocal6163_my_ptr, bmlocal6164_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6163_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6163_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6163_my_ptr, bmlocal6164_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPeformancePerConnection_CIN_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6165_my_ptr;\
	UINT bmlocal6166_my_bitoff;\
	BM_SfPeformancePerConnection_CIN_GET_POS( base_ptr, bmlocal6165_my_ptr, bmlocal6166_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6165_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6165_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6165_my_ptr, bmlocal6166_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPeformancePerConnection_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_CIN: IS_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_CIN: SET_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPeformancePerConnection_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6167_out_val;\
	BM_SfPeformancePerConnection_CIN_GET( base_ptr, bmlocal6167_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal6167_out_val), "%d", 1);\
}

#define BM_SfPeformancePerConnection_CIN_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPeformancePerConnection_CIN_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6168_my_ptr;\
	UINT bmlocal6169_my_bitoff;\
	BM_SfPeformancePerConnection_CIN_GET_POS( base_ptr, bmlocal6168_my_ptr, bmlocal6169_my_bitoff );\
	(*((UINT32*)bmlocal6168_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6169_my_bitoff );\
}

// SfPeformancePerConnection_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPeformancePerConnection_CIN_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6170_tmp_bits;\
	BM_SfPeformancePerConnection_CIN_GET_SIZE( base_ptr, out_bytes, bmlocal6170_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6170_tmp_bits );\
}

#define BM_SfPeformancePerConnection_CIN_BYTES_SIZE 4

#define BM_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6173_acc_bytes;\
	UINT bmlocal6174_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6173_acc_bytes = 8;\
	bmlocal6174_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6173_acc_bytes );\
	out_bitoff += bmlocal6174_acc_bits;\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6175_tmp_bitoff;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, out_ptr, bmlocal6175_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6175_tmp_bitoff);\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_POS_ALIGNED 8

// Alignment of SfPeformancePerConnection_ulIpThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPeformancePerConnection_ulIpThroughput_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6176_my_ptr;\
	UINT bmlocal6177_my_bitoff;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, bmlocal6176_my_ptr, bmlocal6177_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6176_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6176_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6176_my_ptr, bmlocal6177_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6178_my_ptr;\
	UINT bmlocal6179_my_bitoff;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, bmlocal6178_my_ptr, bmlocal6179_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6178_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6178_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6178_my_ptr, bmlocal6179_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPeformancePerConnection_ulIpThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_ulIpThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_ulIpThroughput: IS_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_ulIpThroughput: SET_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_ulIpThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPeformancePerConnection_ulIpThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6180_out_val;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET( base_ptr, bmlocal6180_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ulIpThroughput", 32, (UINT)(bmlocal6180_out_val), "%d", 1);\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6181_my_ptr;\
	UINT bmlocal6182_my_bitoff;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, bmlocal6181_my_ptr, bmlocal6182_my_bitoff );\
	(*((UINT32*)bmlocal6181_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6182_my_bitoff );\
}

// SfPeformancePerConnection_ulIpThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPeformancePerConnection_ulIpThroughput_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6183_tmp_bits;\
	BM_SfPeformancePerConnection_ulIpThroughput_GET_SIZE( base_ptr, out_bytes, bmlocal6183_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6183_tmp_bits );\
}

#define BM_SfPeformancePerConnection_ulIpThroughput_BYTES_SIZE 4

#define BM_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6186_acc_bytes;\
	UINT bmlocal6187_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6186_acc_bytes = 12;\
	bmlocal6187_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6186_acc_bytes );\
	out_bitoff += bmlocal6187_acc_bits;\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6188_tmp_bitoff;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, out_ptr, bmlocal6188_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6188_tmp_bitoff);\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_POS_ALIGNED 12

// Alignment of SfPeformancePerConnection_dlIpThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPeformancePerConnection_dlIpThroughput_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6189_my_ptr;\
	UINT bmlocal6190_my_bitoff;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, bmlocal6189_my_ptr, bmlocal6190_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6189_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6189_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6189_my_ptr, bmlocal6190_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6191_my_ptr;\
	UINT bmlocal6192_my_bitoff;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, bmlocal6191_my_ptr, bmlocal6192_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6191_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6191_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6191_my_ptr, bmlocal6192_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPeformancePerConnection_dlIpThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_dlIpThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPeformancePerConnection_dlIpThroughput: IS_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_dlIpThroughput: SET_RESET accessor is not defined because no reset value was specified.
// SfPeformancePerConnection_dlIpThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPeformancePerConnection_dlIpThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6193_out_val;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET( base_ptr, bmlocal6193_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dlIpThroughput", 32, (UINT)(bmlocal6193_out_val), "%d", 1);\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6194_my_ptr;\
	UINT bmlocal6195_my_bitoff;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, bmlocal6194_my_ptr, bmlocal6195_my_bitoff );\
	(*((UINT32*)bmlocal6194_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6195_my_bitoff );\
}

// SfPeformancePerConnection_dlIpThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPeformancePerConnection_dlIpThroughput_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6196_tmp_bits;\
	BM_SfPeformancePerConnection_dlIpThroughput_GET_SIZE( base_ptr, out_bytes, bmlocal6196_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6196_tmp_bits );\
}

#define BM_SfPeformancePerConnection_dlIpThroughput_BYTES_SIZE 4

#define BM_SfPeformancePerConnection_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6199_tmp_bits;\
	BM_SfPeformancePerConnection_GET_SIZE( base_ptr, out_bytes, bmlocal6199_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6199_tmp_bits );\
}

#define BM_SfPeformancePerConnection_BYTES_SIZE 16

#define BM_SfPeformancePerConnection_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SfPeformancePerConnection", 1);\
	BM_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPeformancePerConnection_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPeformancePerConnection_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ArqInfo[40];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _sfId;
	UINT32 _arqWindowSize;
	UINT32 _arqTransmitterDelay; //0-650,350 (10 us granularity)
	UINT32 _arqReceiverDelay; //0-650,350 (10 us granularity)
	UINT32 _arqBlockLifeTime; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqSyncLossTimeout; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqRxPurgeTimeout; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqBlockSize; //Desired/agreed size in bytes (0-15 and 2041-65535 reserved)
	UINT32 _t22;
	UINT8 _arqEnable : 8;
	UINT8 _arqDeliverInOrder : 8; //0: order is NOT preserved; 1:order is preserved
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
} BMS_ArqInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved_bytes [2]; //reserved bytes, to make the next field start at an aligned address
	UINT8 _arqDeliverInOrder : 8; //0: order is NOT preserved; 1:order is preserved
	UINT8 _arqEnable : 8;
	UINT32 _t22;
	UINT32 _arqBlockSize; //Desired/agreed size in bytes (0-15 and 2041-65535 reserved)
	UINT32 _arqRxPurgeTimeout; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqSyncLossTimeout; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqBlockLifeTime; //0: infinite; 1-650,350 (10 us granularity)
	UINT32 _arqReceiverDelay; //0-650,350 (10 us granularity)
	UINT32 _arqTransmitterDelay; //0-650,350 (10 us granularity)
	UINT32 _arqWindowSize;
	UINT32 _sfId;
} BMS_ArqInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ArqInfo' Type: 'ArqInfo', Top-level, Non-instance, No bitoff root
#define BM_ArqInfo_sfId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ArqInfo_sfId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6200_tmp_bitoff;\
	BM_ArqInfo_sfId_GET_POS( base_ptr, out_ptr, bmlocal6200_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6200_tmp_bitoff);\
}

#define BM_ArqInfo_sfId_POS_ALIGNED 0

// Alignment of ArqInfo_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_sfId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_sfId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6201_my_ptr;\
	UINT bmlocal6202_my_bitoff;\
	BM_ArqInfo_sfId_GET_POS( base_ptr, bmlocal6201_my_ptr, bmlocal6202_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6201_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6201_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6201_my_ptr, bmlocal6202_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_sfId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6203_my_ptr;\
	UINT bmlocal6204_my_bitoff;\
	BM_ArqInfo_sfId_GET_POS( base_ptr, bmlocal6203_my_ptr, bmlocal6204_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6203_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6203_my_ptr, bmlocal6204_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_sfId: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_sfId: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_sfId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6205_out_val;\
	BM_ArqInfo_sfId_GET( base_ptr, bmlocal6205_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal6205_out_val), "%d", 1);\
}

#define BM_ArqInfo_sfId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_sfId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_sfId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6206_my_ptr;\
	UINT bmlocal6207_my_bitoff;\
	BM_ArqInfo_sfId_GET_POS( base_ptr, bmlocal6206_my_ptr, bmlocal6207_my_bitoff );\
	(*((UINT32*)bmlocal6206_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6207_my_bitoff );\
}

// ArqInfo_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_sfId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6208_tmp_bits;\
	BM_ArqInfo_sfId_GET_SIZE( base_ptr, out_bytes, bmlocal6208_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6208_tmp_bits );\
}

#define BM_ArqInfo_sfId_BYTES_SIZE 4

#define BM_ArqInfo_arqWindowSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6211_acc_bytes;\
	UINT bmlocal6212_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6211_acc_bytes = 4;\
	bmlocal6212_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6211_acc_bytes );\
	out_bitoff += bmlocal6212_acc_bits;\
}

#define BM_ArqInfo_arqWindowSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6213_tmp_bitoff;\
	BM_ArqInfo_arqWindowSize_GET_POS( base_ptr, out_ptr, bmlocal6213_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6213_tmp_bitoff);\
}

#define BM_ArqInfo_arqWindowSize_POS_ALIGNED 4

// Alignment of ArqInfo_arqWindowSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqWindowSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqWindowSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6214_my_ptr;\
	UINT bmlocal6215_my_bitoff;\
	BM_ArqInfo_arqWindowSize_GET_POS( base_ptr, bmlocal6214_my_ptr, bmlocal6215_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6214_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6214_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6214_my_ptr, bmlocal6215_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqWindowSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6216_my_ptr;\
	UINT bmlocal6217_my_bitoff;\
	BM_ArqInfo_arqWindowSize_GET_POS( base_ptr, bmlocal6216_my_ptr, bmlocal6217_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6216_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6216_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6216_my_ptr, bmlocal6217_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqWindowSize: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqWindowSize: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqWindowSize: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqWindowSize: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqWindowSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqWindowSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6218_out_val;\
	BM_ArqInfo_arqWindowSize_GET( base_ptr, bmlocal6218_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqWindowSize", 32, (UINT)(bmlocal6218_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqWindowSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqWindowSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6219_my_ptr;\
	UINT bmlocal6220_my_bitoff;\
	BM_ArqInfo_arqWindowSize_GET_POS( base_ptr, bmlocal6219_my_ptr, bmlocal6220_my_bitoff );\
	(*((UINT32*)bmlocal6219_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6220_my_bitoff );\
}

// ArqInfo_arqWindowSize: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqWindowSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6221_tmp_bits;\
	BM_ArqInfo_arqWindowSize_GET_SIZE( base_ptr, out_bytes, bmlocal6221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6221_tmp_bits );\
}

#define BM_ArqInfo_arqWindowSize_BYTES_SIZE 4

#define BM_ArqInfo_arqTransmitterDelay_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6224_acc_bytes;\
	UINT bmlocal6225_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6224_acc_bytes = 8;\
	bmlocal6225_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6224_acc_bytes );\
	out_bitoff += bmlocal6225_acc_bits;\
}

#define BM_ArqInfo_arqTransmitterDelay_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6226_tmp_bitoff;\
	BM_ArqInfo_arqTransmitterDelay_GET_POS( base_ptr, out_ptr, bmlocal6226_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6226_tmp_bitoff);\
}

#define BM_ArqInfo_arqTransmitterDelay_POS_ALIGNED 8

// Alignment of ArqInfo_arqTransmitterDelay: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqTransmitterDelay_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqTransmitterDelay_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6227_my_ptr;\
	UINT bmlocal6228_my_bitoff;\
	BM_ArqInfo_arqTransmitterDelay_GET_POS( base_ptr, bmlocal6227_my_ptr, bmlocal6228_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6227_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6227_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6227_my_ptr, bmlocal6228_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqTransmitterDelay_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6229_my_ptr;\
	UINT bmlocal6230_my_bitoff;\
	BM_ArqInfo_arqTransmitterDelay_GET_POS( base_ptr, bmlocal6229_my_ptr, bmlocal6230_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6229_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6229_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6229_my_ptr, bmlocal6230_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqTransmitterDelay: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqTransmitterDelay: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqTransmitterDelay: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqTransmitterDelay: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqTransmitterDelay: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqTransmitterDelay: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6231_out_val;\
	BM_ArqInfo_arqTransmitterDelay_GET( base_ptr, bmlocal6231_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqTransmitterDelay", 32, (UINT)(bmlocal6231_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqTransmitterDelay_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqTransmitterDelay_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6232_my_ptr;\
	UINT bmlocal6233_my_bitoff;\
	BM_ArqInfo_arqTransmitterDelay_GET_POS( base_ptr, bmlocal6232_my_ptr, bmlocal6233_my_bitoff );\
	(*((UINT32*)bmlocal6232_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6233_my_bitoff );\
}

// ArqInfo_arqTransmitterDelay: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqTransmitterDelay_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6234_tmp_bits;\
	BM_ArqInfo_arqTransmitterDelay_GET_SIZE( base_ptr, out_bytes, bmlocal6234_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6234_tmp_bits );\
}

#define BM_ArqInfo_arqTransmitterDelay_BYTES_SIZE 4

#define BM_ArqInfo_arqReceiverDelay_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6237_acc_bytes;\
	UINT bmlocal6238_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6237_acc_bytes = 12;\
	bmlocal6238_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6237_acc_bytes );\
	out_bitoff += bmlocal6238_acc_bits;\
}

#define BM_ArqInfo_arqReceiverDelay_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6239_tmp_bitoff;\
	BM_ArqInfo_arqReceiverDelay_GET_POS( base_ptr, out_ptr, bmlocal6239_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6239_tmp_bitoff);\
}

#define BM_ArqInfo_arqReceiverDelay_POS_ALIGNED 12

// Alignment of ArqInfo_arqReceiverDelay: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqReceiverDelay_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqReceiverDelay_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6240_my_ptr;\
	UINT bmlocal6241_my_bitoff;\
	BM_ArqInfo_arqReceiverDelay_GET_POS( base_ptr, bmlocal6240_my_ptr, bmlocal6241_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6240_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6240_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6240_my_ptr, bmlocal6241_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqReceiverDelay_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6242_my_ptr;\
	UINT bmlocal6243_my_bitoff;\
	BM_ArqInfo_arqReceiverDelay_GET_POS( base_ptr, bmlocal6242_my_ptr, bmlocal6243_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6242_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6242_my_ptr, bmlocal6243_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqReceiverDelay: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqReceiverDelay: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqReceiverDelay: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqReceiverDelay: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqReceiverDelay: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqReceiverDelay: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6244_out_val;\
	BM_ArqInfo_arqReceiverDelay_GET( base_ptr, bmlocal6244_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqReceiverDelay", 32, (UINT)(bmlocal6244_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqReceiverDelay_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqReceiverDelay_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6245_my_ptr;\
	UINT bmlocal6246_my_bitoff;\
	BM_ArqInfo_arqReceiverDelay_GET_POS( base_ptr, bmlocal6245_my_ptr, bmlocal6246_my_bitoff );\
	(*((UINT32*)bmlocal6245_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6246_my_bitoff );\
}

// ArqInfo_arqReceiverDelay: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqReceiverDelay_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6247_tmp_bits;\
	BM_ArqInfo_arqReceiverDelay_GET_SIZE( base_ptr, out_bytes, bmlocal6247_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6247_tmp_bits );\
}

#define BM_ArqInfo_arqReceiverDelay_BYTES_SIZE 4

#define BM_ArqInfo_arqBlockLifeTime_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6250_acc_bytes;\
	UINT bmlocal6251_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6250_acc_bytes = 16;\
	bmlocal6251_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6250_acc_bytes );\
	out_bitoff += bmlocal6251_acc_bits;\
}

#define BM_ArqInfo_arqBlockLifeTime_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6252_tmp_bitoff;\
	BM_ArqInfo_arqBlockLifeTime_GET_POS( base_ptr, out_ptr, bmlocal6252_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6252_tmp_bitoff);\
}

#define BM_ArqInfo_arqBlockLifeTime_POS_ALIGNED 16

// Alignment of ArqInfo_arqBlockLifeTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqBlockLifeTime_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqBlockLifeTime_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6253_my_ptr;\
	UINT bmlocal6254_my_bitoff;\
	BM_ArqInfo_arqBlockLifeTime_GET_POS( base_ptr, bmlocal6253_my_ptr, bmlocal6254_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6253_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6253_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6253_my_ptr, bmlocal6254_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqBlockLifeTime_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6255_my_ptr;\
	UINT bmlocal6256_my_bitoff;\
	BM_ArqInfo_arqBlockLifeTime_GET_POS( base_ptr, bmlocal6255_my_ptr, bmlocal6256_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6255_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6255_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6255_my_ptr, bmlocal6256_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqBlockLifeTime: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqBlockLifeTime: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqBlockLifeTime: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqBlockLifeTime: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqBlockLifeTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqBlockLifeTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6257_out_val;\
	BM_ArqInfo_arqBlockLifeTime_GET( base_ptr, bmlocal6257_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqBlockLifeTime", 32, (UINT)(bmlocal6257_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqBlockLifeTime_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqBlockLifeTime_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6258_my_ptr;\
	UINT bmlocal6259_my_bitoff;\
	BM_ArqInfo_arqBlockLifeTime_GET_POS( base_ptr, bmlocal6258_my_ptr, bmlocal6259_my_bitoff );\
	(*((UINT32*)bmlocal6258_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6259_my_bitoff );\
}

// ArqInfo_arqBlockLifeTime: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqBlockLifeTime_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6260_tmp_bits;\
	BM_ArqInfo_arqBlockLifeTime_GET_SIZE( base_ptr, out_bytes, bmlocal6260_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6260_tmp_bits );\
}

#define BM_ArqInfo_arqBlockLifeTime_BYTES_SIZE 4

#define BM_ArqInfo_arqSyncLossTimeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6263_acc_bytes;\
	UINT bmlocal6264_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6263_acc_bytes = 20;\
	bmlocal6264_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6263_acc_bytes );\
	out_bitoff += bmlocal6264_acc_bits;\
}

#define BM_ArqInfo_arqSyncLossTimeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6265_tmp_bitoff;\
	BM_ArqInfo_arqSyncLossTimeout_GET_POS( base_ptr, out_ptr, bmlocal6265_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6265_tmp_bitoff);\
}

#define BM_ArqInfo_arqSyncLossTimeout_POS_ALIGNED 20

// Alignment of ArqInfo_arqSyncLossTimeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqSyncLossTimeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqSyncLossTimeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6266_my_ptr;\
	UINT bmlocal6267_my_bitoff;\
	BM_ArqInfo_arqSyncLossTimeout_GET_POS( base_ptr, bmlocal6266_my_ptr, bmlocal6267_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6266_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6266_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6266_my_ptr, bmlocal6267_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqSyncLossTimeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6268_my_ptr;\
	UINT bmlocal6269_my_bitoff;\
	BM_ArqInfo_arqSyncLossTimeout_GET_POS( base_ptr, bmlocal6268_my_ptr, bmlocal6269_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6268_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6268_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6268_my_ptr, bmlocal6269_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqSyncLossTimeout: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqSyncLossTimeout: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqSyncLossTimeout: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqSyncLossTimeout: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqSyncLossTimeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqSyncLossTimeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6270_out_val;\
	BM_ArqInfo_arqSyncLossTimeout_GET( base_ptr, bmlocal6270_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqSyncLossTimeout", 32, (UINT)(bmlocal6270_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqSyncLossTimeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqSyncLossTimeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6271_my_ptr;\
	UINT bmlocal6272_my_bitoff;\
	BM_ArqInfo_arqSyncLossTimeout_GET_POS( base_ptr, bmlocal6271_my_ptr, bmlocal6272_my_bitoff );\
	(*((UINT32*)bmlocal6271_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6272_my_bitoff );\
}

// ArqInfo_arqSyncLossTimeout: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqSyncLossTimeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6273_tmp_bits;\
	BM_ArqInfo_arqSyncLossTimeout_GET_SIZE( base_ptr, out_bytes, bmlocal6273_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6273_tmp_bits );\
}

#define BM_ArqInfo_arqSyncLossTimeout_BYTES_SIZE 4

#define BM_ArqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6276_acc_bytes;\
	UINT bmlocal6277_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6276_acc_bytes = 24;\
	bmlocal6277_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6276_acc_bytes );\
	out_bitoff += bmlocal6277_acc_bits;\
}

#define BM_ArqInfo_arqRxPurgeTimeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6278_tmp_bitoff;\
	BM_ArqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, out_ptr, bmlocal6278_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6278_tmp_bitoff);\
}

#define BM_ArqInfo_arqRxPurgeTimeout_POS_ALIGNED 24

// Alignment of ArqInfo_arqRxPurgeTimeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqRxPurgeTimeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqRxPurgeTimeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6279_my_ptr;\
	UINT bmlocal6280_my_bitoff;\
	BM_ArqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, bmlocal6279_my_ptr, bmlocal6280_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6279_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6279_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6279_my_ptr, bmlocal6280_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqRxPurgeTimeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6281_my_ptr;\
	UINT bmlocal6282_my_bitoff;\
	BM_ArqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, bmlocal6281_my_ptr, bmlocal6282_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6281_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6281_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6281_my_ptr, bmlocal6282_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqRxPurgeTimeout: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqRxPurgeTimeout: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqRxPurgeTimeout: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqRxPurgeTimeout: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqRxPurgeTimeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqRxPurgeTimeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6283_out_val;\
	BM_ArqInfo_arqRxPurgeTimeout_GET( base_ptr, bmlocal6283_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqRxPurgeTimeout", 32, (UINT)(bmlocal6283_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqRxPurgeTimeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqRxPurgeTimeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6284_my_ptr;\
	UINT bmlocal6285_my_bitoff;\
	BM_ArqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, bmlocal6284_my_ptr, bmlocal6285_my_bitoff );\
	(*((UINT32*)bmlocal6284_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6285_my_bitoff );\
}

// ArqInfo_arqRxPurgeTimeout: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqRxPurgeTimeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6286_tmp_bits;\
	BM_ArqInfo_arqRxPurgeTimeout_GET_SIZE( base_ptr, out_bytes, bmlocal6286_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6286_tmp_bits );\
}

#define BM_ArqInfo_arqRxPurgeTimeout_BYTES_SIZE 4

#define BM_ArqInfo_arqBlockSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6289_acc_bytes;\
	UINT bmlocal6290_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6289_acc_bytes = 28;\
	bmlocal6290_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6289_acc_bytes );\
	out_bitoff += bmlocal6290_acc_bits;\
}

#define BM_ArqInfo_arqBlockSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6291_tmp_bitoff;\
	BM_ArqInfo_arqBlockSize_GET_POS( base_ptr, out_ptr, bmlocal6291_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6291_tmp_bitoff);\
}

#define BM_ArqInfo_arqBlockSize_POS_ALIGNED 28

// Alignment of ArqInfo_arqBlockSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqBlockSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqBlockSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6292_my_ptr;\
	UINT bmlocal6293_my_bitoff;\
	BM_ArqInfo_arqBlockSize_GET_POS( base_ptr, bmlocal6292_my_ptr, bmlocal6293_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6292_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6292_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6292_my_ptr, bmlocal6293_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqBlockSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6294_my_ptr;\
	UINT bmlocal6295_my_bitoff;\
	BM_ArqInfo_arqBlockSize_GET_POS( base_ptr, bmlocal6294_my_ptr, bmlocal6295_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6294_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6294_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6294_my_ptr, bmlocal6295_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqBlockSize: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqBlockSize: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqBlockSize: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqBlockSize: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqBlockSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqBlockSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6296_out_val;\
	BM_ArqInfo_arqBlockSize_GET( base_ptr, bmlocal6296_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqBlockSize", 32, (UINT)(bmlocal6296_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqBlockSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqBlockSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6297_my_ptr;\
	UINT bmlocal6298_my_bitoff;\
	BM_ArqInfo_arqBlockSize_GET_POS( base_ptr, bmlocal6297_my_ptr, bmlocal6298_my_bitoff );\
	(*((UINT32*)bmlocal6297_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6298_my_bitoff );\
}

// ArqInfo_arqBlockSize: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqBlockSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6299_tmp_bits;\
	BM_ArqInfo_arqBlockSize_GET_SIZE( base_ptr, out_bytes, bmlocal6299_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6299_tmp_bits );\
}

#define BM_ArqInfo_arqBlockSize_BYTES_SIZE 4

#define BM_ArqInfo_t22_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6302_acc_bytes;\
	UINT bmlocal6303_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6302_acc_bytes = 32;\
	bmlocal6303_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6302_acc_bytes );\
	out_bitoff += bmlocal6303_acc_bits;\
}

#define BM_ArqInfo_t22_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6304_tmp_bitoff;\
	BM_ArqInfo_t22_GET_POS( base_ptr, out_ptr, bmlocal6304_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6304_tmp_bitoff);\
}

#define BM_ArqInfo_t22_POS_ALIGNED 32

// Alignment of ArqInfo_t22: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_t22_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_t22_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6305_my_ptr;\
	UINT bmlocal6306_my_bitoff;\
	BM_ArqInfo_t22_GET_POS( base_ptr, bmlocal6305_my_ptr, bmlocal6306_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6305_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6305_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6305_my_ptr, bmlocal6306_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_t22_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6307_my_ptr;\
	UINT bmlocal6308_my_bitoff;\
	BM_ArqInfo_t22_GET_POS( base_ptr, bmlocal6307_my_ptr, bmlocal6308_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6307_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6307_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6307_my_ptr, bmlocal6308_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqInfo_t22: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_t22: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_t22: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_t22: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_t22: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_t22: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_t22_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6309_out_val;\
	BM_ArqInfo_t22_GET( base_ptr, bmlocal6309_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t22", 32, (UINT)(bmlocal6309_out_val), "%d", 1);\
}

#define BM_ArqInfo_t22_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_t22_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_t22_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6310_my_ptr;\
	UINT bmlocal6311_my_bitoff;\
	BM_ArqInfo_t22_GET_POS( base_ptr, bmlocal6310_my_ptr, bmlocal6311_my_bitoff );\
	(*((UINT32*)bmlocal6310_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6311_my_bitoff );\
}

// ArqInfo_t22: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_t22_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6312_tmp_bits;\
	BM_ArqInfo_t22_GET_SIZE( base_ptr, out_bytes, bmlocal6312_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6312_tmp_bits );\
}

#define BM_ArqInfo_t22_BYTES_SIZE 4

#define BM_ArqInfo_arqEnable_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6315_acc_bytes;\
	UINT bmlocal6316_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6315_acc_bytes = 36;\
	bmlocal6316_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6315_acc_bytes );\
	out_bitoff += bmlocal6316_acc_bits;\
}

#define BM_ArqInfo_arqEnable_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6317_tmp_bitoff;\
	BM_ArqInfo_arqEnable_GET_POS( base_ptr, out_ptr, bmlocal6317_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6317_tmp_bitoff);\
}

#define BM_ArqInfo_arqEnable_POS_ALIGNED 36

// Alignment of ArqInfo_arqEnable: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqEnable_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqEnable_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6318_my_ptr;\
	UINT bmlocal6319_my_bitoff;\
	BM_ArqInfo_arqEnable_GET_POS( base_ptr, bmlocal6318_my_ptr, bmlocal6319_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6318_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6318_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6318_my_ptr, bmlocal6319_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ArqInfo_arqEnable_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6320_my_ptr;\
	UINT bmlocal6321_my_bitoff;\
	BM_ArqInfo_arqEnable_GET_POS( base_ptr, bmlocal6320_my_ptr, bmlocal6321_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6320_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6320_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6320_my_ptr, bmlocal6321_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ArqInfo_arqEnable: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqEnable: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqEnable: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqEnable: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqEnable: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqEnable: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqEnable_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6322_out_val;\
	BM_ArqInfo_arqEnable_GET( base_ptr, bmlocal6322_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqEnable", 8, (UINT)(bmlocal6322_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqEnable_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqEnable_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqEnable_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6323_my_ptr;\
	UINT bmlocal6324_my_bitoff;\
	BM_ArqInfo_arqEnable_GET_POS( base_ptr, bmlocal6323_my_ptr, bmlocal6324_my_bitoff );\
	(*((UINT8*)bmlocal6323_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6324_my_bitoff );\
}

// ArqInfo_arqEnable: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqEnable_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6325_tmp_bits;\
	BM_ArqInfo_arqEnable_GET_SIZE( base_ptr, out_bytes, bmlocal6325_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6325_tmp_bits );\
}

#define BM_ArqInfo_arqEnable_BYTES_SIZE 1

#define BM_ArqInfo_arqDeliverInOrder_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6328_acc_bytes;\
	UINT bmlocal6329_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6328_acc_bytes = 37;\
	bmlocal6329_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6328_acc_bytes );\
	out_bitoff += bmlocal6329_acc_bits;\
}

#define BM_ArqInfo_arqDeliverInOrder_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6330_tmp_bitoff;\
	BM_ArqInfo_arqDeliverInOrder_GET_POS( base_ptr, out_ptr, bmlocal6330_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6330_tmp_bitoff);\
}

#define BM_ArqInfo_arqDeliverInOrder_POS_ALIGNED 37

// Alignment of ArqInfo_arqDeliverInOrder: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqInfo_arqDeliverInOrder_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_arqDeliverInOrder_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6331_my_ptr;\
	UINT bmlocal6332_my_bitoff;\
	BM_ArqInfo_arqDeliverInOrder_GET_POS( base_ptr, bmlocal6331_my_ptr, bmlocal6332_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6331_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6331_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6331_my_ptr, bmlocal6332_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ArqInfo_arqDeliverInOrder_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6333_my_ptr;\
	UINT bmlocal6334_my_bitoff;\
	BM_ArqInfo_arqDeliverInOrder_GET_POS( base_ptr, bmlocal6333_my_ptr, bmlocal6334_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6333_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6333_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6333_my_ptr, bmlocal6334_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ArqInfo_arqDeliverInOrder: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqDeliverInOrder: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqInfo_arqDeliverInOrder: IS_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqDeliverInOrder: SET_RESET accessor is not defined because no reset value was specified.
// ArqInfo_arqDeliverInOrder: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqInfo_arqDeliverInOrder: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6335_out_val;\
	BM_ArqInfo_arqDeliverInOrder_GET( base_ptr, bmlocal6335_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqDeliverInOrder", 8, (UINT)(bmlocal6335_out_val), "%d", 1);\
}

#define BM_ArqInfo_arqDeliverInOrder_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_arqDeliverInOrder_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6336_my_ptr;\
	UINT bmlocal6337_my_bitoff;\
	BM_ArqInfo_arqDeliverInOrder_GET_POS( base_ptr, bmlocal6336_my_ptr, bmlocal6337_my_bitoff );\
	(*((UINT8*)bmlocal6336_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6337_my_bitoff );\
}

// ArqInfo_arqDeliverInOrder: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqInfo_arqDeliverInOrder_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6338_tmp_bits;\
	BM_ArqInfo_arqDeliverInOrder_GET_SIZE( base_ptr, out_bytes, bmlocal6338_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6338_tmp_bits );\
}

#define BM_ArqInfo_arqDeliverInOrder_BYTES_SIZE 1

#define BM_ArqInfo_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6341_acc_bytes;\
	UINT bmlocal6342_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6341_acc_bytes = 38;\
	bmlocal6342_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6341_acc_bytes );\
	out_bitoff += bmlocal6342_acc_bits;\
}

#define BM_ArqInfo_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6343_tmp_bitoff;\
	BM_ArqInfo_reserved_GET_POS( base_ptr, out_ptr, bmlocal6343_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6343_tmp_bitoff);\
}

#define BM_ArqInfo_reserved_POS_ALIGNED 38

#define BM_ArqInfo_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6344_my_ptr;\
	UINT bmlocal6345_my_bitoff;\
	BM_ArqInfo_reserved_GET_POS( base_ptr, bmlocal6344_my_ptr, bmlocal6345_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6344_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6344_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6344_my_ptr, bmlocal6345_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_ArqInfo_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6346_my_ptr;\
	UINT bmlocal6347_my_bitoff;\
	BM_ArqInfo_reserved_GET_POS( base_ptr, bmlocal6346_my_ptr, bmlocal6347_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6346_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6346_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6346_my_ptr, bmlocal6347_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_ArqInfo_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal6348_out_bytes;\
	UINT bmlocal6349_out_bits;\
	BM_ArqInfo_reserved_GET_SIZE( base_ptr, bmlocal6348_out_bytes, bmlocal6349_out_bits );\
	bmlocal6349_out_bits += bmlocal6348_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal6349_out_bits), "%d", 1);\
}

#define BM_ArqInfo_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqInfo_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6350_tmp_bits;\
	BM_ArqInfo_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal6350_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6350_tmp_bits );\
}

#define BM_ArqInfo_reserved_BYTES_SIZE 2

#define BM_ArqInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 40;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6353_tmp_bits;\
	BM_ArqInfo_GET_SIZE( base_ptr, out_bytes, bmlocal6353_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6353_tmp_bits );\
}

#define BM_ArqInfo_BYTES_SIZE 40

#define BM_ArqInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ArqInfo", 1);\
	BM_ArqInfo_sfId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_t22_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqEnable_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqInfo_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ArqTxPerformance[48];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _CID;
	UINT32 _CIN;
	UINT32 _numOfRetransmittedArqBlocksTotalUL;
	UINT32 _numOfRetransmittedBlocksUL;
	UINT32 _numOfBLTs;
	UINT32 _numOfBlocksLostDueToArqBLT;
	UINT32 _totalNumOfAcksReceived;
	UINT32 _numOfTxArqResetsReceived;
	UINT32 _numOfTxArqResetsInitiated;
	UINT32 _numOfArqDiscardsTxd;
	UINT32 _txThroughput;
	UINT32 _numOfSduLostDueToNoFreeSpaceInTransmitter;
} BMS_ArqTxPerformance;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numOfSduLostDueToNoFreeSpaceInTransmitter;
	UINT32 _txThroughput;
	UINT32 _numOfArqDiscardsTxd;
	UINT32 _numOfTxArqResetsInitiated;
	UINT32 _numOfTxArqResetsReceived;
	UINT32 _totalNumOfAcksReceived;
	UINT32 _numOfBlocksLostDueToArqBLT;
	UINT32 _numOfBLTs;
	UINT32 _numOfRetransmittedBlocksUL;
	UINT32 _numOfRetransmittedArqBlocksTotalUL;
	UINT32 _CIN;
	UINT32 _CID;
} BMS_ArqTxPerformance;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ArqTxPerformance' Type: 'ArqTxPerformance', Top-level, Non-instance, No bitoff root
#define BM_ArqTxPerformance_CID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ArqTxPerformance_CID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6354_tmp_bitoff;\
	BM_ArqTxPerformance_CID_GET_POS( base_ptr, out_ptr, bmlocal6354_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6354_tmp_bitoff);\
}

#define BM_ArqTxPerformance_CID_POS_ALIGNED 0

// Alignment of ArqTxPerformance_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_CID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_CID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6355_my_ptr;\
	UINT bmlocal6356_my_bitoff;\
	BM_ArqTxPerformance_CID_GET_POS( base_ptr, bmlocal6355_my_ptr, bmlocal6356_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6355_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6355_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6355_my_ptr, bmlocal6356_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_CID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6357_my_ptr;\
	UINT bmlocal6358_my_bitoff;\
	BM_ArqTxPerformance_CID_GET_POS( base_ptr, bmlocal6357_my_ptr, bmlocal6358_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6357_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6357_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6357_my_ptr, bmlocal6358_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_CID: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_CID: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_CID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6359_out_val;\
	BM_ArqTxPerformance_CID_GET( base_ptr, bmlocal6359_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal6359_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_CID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_CID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_CID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6360_my_ptr;\
	UINT bmlocal6361_my_bitoff;\
	BM_ArqTxPerformance_CID_GET_POS( base_ptr, bmlocal6360_my_ptr, bmlocal6361_my_bitoff );\
	(*((UINT32*)bmlocal6360_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6361_my_bitoff );\
}

// ArqTxPerformance_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_CID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6362_tmp_bits;\
	BM_ArqTxPerformance_CID_GET_SIZE( base_ptr, out_bytes, bmlocal6362_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6362_tmp_bits );\
}

#define BM_ArqTxPerformance_CID_BYTES_SIZE 4

#define BM_ArqTxPerformance_CIN_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6365_acc_bytes;\
	UINT bmlocal6366_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6365_acc_bytes = 4;\
	bmlocal6366_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6365_acc_bytes );\
	out_bitoff += bmlocal6366_acc_bits;\
}

#define BM_ArqTxPerformance_CIN_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6367_tmp_bitoff;\
	BM_ArqTxPerformance_CIN_GET_POS( base_ptr, out_ptr, bmlocal6367_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6367_tmp_bitoff);\
}

#define BM_ArqTxPerformance_CIN_POS_ALIGNED 4

// Alignment of ArqTxPerformance_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_CIN_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_CIN_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6368_my_ptr;\
	UINT bmlocal6369_my_bitoff;\
	BM_ArqTxPerformance_CIN_GET_POS( base_ptr, bmlocal6368_my_ptr, bmlocal6369_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6368_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6368_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6368_my_ptr, bmlocal6369_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_CIN_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6370_my_ptr;\
	UINT bmlocal6371_my_bitoff;\
	BM_ArqTxPerformance_CIN_GET_POS( base_ptr, bmlocal6370_my_ptr, bmlocal6371_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6370_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6370_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6370_my_ptr, bmlocal6371_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_CIN: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_CIN: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_CIN_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6372_out_val;\
	BM_ArqTxPerformance_CIN_GET( base_ptr, bmlocal6372_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal6372_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_CIN_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_CIN_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_CIN_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6373_my_ptr;\
	UINT bmlocal6374_my_bitoff;\
	BM_ArqTxPerformance_CIN_GET_POS( base_ptr, bmlocal6373_my_ptr, bmlocal6374_my_bitoff );\
	(*((UINT32*)bmlocal6373_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6374_my_bitoff );\
}

// ArqTxPerformance_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_CIN_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6375_tmp_bits;\
	BM_ArqTxPerformance_CIN_GET_SIZE( base_ptr, out_bytes, bmlocal6375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6375_tmp_bits );\
}

#define BM_ArqTxPerformance_CIN_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6378_acc_bytes;\
	UINT bmlocal6379_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6378_acc_bytes = 8;\
	bmlocal6379_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6378_acc_bytes );\
	out_bitoff += bmlocal6379_acc_bits;\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6380_tmp_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, out_ptr, bmlocal6380_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6380_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_POS_ALIGNED 8

// Alignment of ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6381_my_ptr;\
	UINT bmlocal6382_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, bmlocal6381_my_ptr, bmlocal6382_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6381_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6381_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6381_my_ptr, bmlocal6382_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6383_my_ptr;\
	UINT bmlocal6384_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, bmlocal6383_my_ptr, bmlocal6384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6383_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6383_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6383_my_ptr, bmlocal6384_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6385_out_val;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET( base_ptr, bmlocal6385_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRetransmittedArqBlocksTotalUL", 32, (UINT)(bmlocal6385_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6386_my_ptr;\
	UINT bmlocal6387_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, bmlocal6386_my_ptr, bmlocal6387_my_bitoff );\
	(*((UINT32*)bmlocal6386_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6387_my_bitoff );\
}

// ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6388_tmp_bits;\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_SIZE( base_ptr, out_bytes, bmlocal6388_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6388_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6391_acc_bytes;\
	UINT bmlocal6392_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6391_acc_bytes = 12;\
	bmlocal6392_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6391_acc_bytes );\
	out_bitoff += bmlocal6392_acc_bits;\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6393_tmp_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, out_ptr, bmlocal6393_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6393_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_POS_ALIGNED 12

// Alignment of ArqTxPerformance_numOfRetransmittedBlocksUL: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6394_my_ptr;\
	UINT bmlocal6395_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, bmlocal6394_my_ptr, bmlocal6395_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6394_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6394_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6394_my_ptr, bmlocal6395_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6396_my_ptr;\
	UINT bmlocal6397_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, bmlocal6396_my_ptr, bmlocal6397_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6396_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6396_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6396_my_ptr, bmlocal6397_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfRetransmittedBlocksUL: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfRetransmittedBlocksUL: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfRetransmittedBlocksUL: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfRetransmittedBlocksUL: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfRetransmittedBlocksUL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfRetransmittedBlocksUL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6398_out_val;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET( base_ptr, bmlocal6398_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRetransmittedBlocksUL", 32, (UINT)(bmlocal6398_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6399_my_ptr;\
	UINT bmlocal6400_my_bitoff;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, bmlocal6399_my_ptr, bmlocal6400_my_bitoff );\
	(*((UINT32*)bmlocal6399_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6400_my_bitoff );\
}

// ArqTxPerformance_numOfRetransmittedBlocksUL: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6401_tmp_bits;\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_GET_SIZE( base_ptr, out_bytes, bmlocal6401_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6401_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfRetransmittedBlocksUL_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfBLTs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6404_acc_bytes;\
	UINT bmlocal6405_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6404_acc_bytes = 16;\
	bmlocal6405_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6404_acc_bytes );\
	out_bitoff += bmlocal6405_acc_bits;\
}

#define BM_ArqTxPerformance_numOfBLTs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6406_tmp_bitoff;\
	BM_ArqTxPerformance_numOfBLTs_GET_POS( base_ptr, out_ptr, bmlocal6406_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6406_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfBLTs_POS_ALIGNED 16

// Alignment of ArqTxPerformance_numOfBLTs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfBLTs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfBLTs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6407_my_ptr;\
	UINT bmlocal6408_my_bitoff;\
	BM_ArqTxPerformance_numOfBLTs_GET_POS( base_ptr, bmlocal6407_my_ptr, bmlocal6408_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6407_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6407_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6407_my_ptr, bmlocal6408_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfBLTs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6409_my_ptr;\
	UINT bmlocal6410_my_bitoff;\
	BM_ArqTxPerformance_numOfBLTs_GET_POS( base_ptr, bmlocal6409_my_ptr, bmlocal6410_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6409_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6409_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6409_my_ptr, bmlocal6410_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfBLTs: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfBLTs: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfBLTs: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfBLTs: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfBLTs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfBLTs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6411_out_val;\
	BM_ArqTxPerformance_numOfBLTs_GET( base_ptr, bmlocal6411_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBLTs", 32, (UINT)(bmlocal6411_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfBLTs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfBLTs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6412_my_ptr;\
	UINT bmlocal6413_my_bitoff;\
	BM_ArqTxPerformance_numOfBLTs_GET_POS( base_ptr, bmlocal6412_my_ptr, bmlocal6413_my_bitoff );\
	(*((UINT32*)bmlocal6412_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6413_my_bitoff );\
}

// ArqTxPerformance_numOfBLTs: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfBLTs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6414_tmp_bits;\
	BM_ArqTxPerformance_numOfBLTs_GET_SIZE( base_ptr, out_bytes, bmlocal6414_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6414_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfBLTs_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6417_acc_bytes;\
	UINT bmlocal6418_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6417_acc_bytes = 20;\
	bmlocal6418_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6417_acc_bytes );\
	out_bitoff += bmlocal6418_acc_bits;\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6419_tmp_bitoff;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, out_ptr, bmlocal6419_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6419_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_POS_ALIGNED 20

// Alignment of ArqTxPerformance_numOfBlocksLostDueToArqBLT: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6420_my_ptr;\
	UINT bmlocal6421_my_bitoff;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, bmlocal6420_my_ptr, bmlocal6421_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6420_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6420_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6420_my_ptr, bmlocal6421_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6422_my_ptr;\
	UINT bmlocal6423_my_bitoff;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, bmlocal6422_my_ptr, bmlocal6423_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6422_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6422_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6422_my_ptr, bmlocal6423_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfBlocksLostDueToArqBLT: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfBlocksLostDueToArqBLT: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfBlocksLostDueToArqBLT: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfBlocksLostDueToArqBLT: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfBlocksLostDueToArqBLT: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfBlocksLostDueToArqBLT: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6424_out_val;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET( base_ptr, bmlocal6424_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBlocksLostDueToArqBLT", 32, (UINT)(bmlocal6424_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6425_my_ptr;\
	UINT bmlocal6426_my_bitoff;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, bmlocal6425_my_ptr, bmlocal6426_my_bitoff );\
	(*((UINT32*)bmlocal6425_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6426_my_bitoff );\
}

// ArqTxPerformance_numOfBlocksLostDueToArqBLT: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6427_tmp_bits;\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_GET_SIZE( base_ptr, out_bytes, bmlocal6427_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6427_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_BYTES_SIZE 4

#define BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6430_acc_bytes;\
	UINT bmlocal6431_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6430_acc_bytes = 24;\
	bmlocal6431_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6430_acc_bytes );\
	out_bitoff += bmlocal6431_acc_bits;\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6432_tmp_bitoff;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, out_ptr, bmlocal6432_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6432_tmp_bitoff);\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_POS_ALIGNED 24

// Alignment of ArqTxPerformance_totalNumOfAcksReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_totalNumOfAcksReceived_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6433_my_ptr;\
	UINT bmlocal6434_my_bitoff;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, bmlocal6433_my_ptr, bmlocal6434_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6433_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6433_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6433_my_ptr, bmlocal6434_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6435_my_ptr;\
	UINT bmlocal6436_my_bitoff;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, bmlocal6435_my_ptr, bmlocal6436_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6435_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6435_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6435_my_ptr, bmlocal6436_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_totalNumOfAcksReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_totalNumOfAcksReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_totalNumOfAcksReceived: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_totalNumOfAcksReceived: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_totalNumOfAcksReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_totalNumOfAcksReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6437_out_val;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET( base_ptr, bmlocal6437_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalNumOfAcksReceived", 32, (UINT)(bmlocal6437_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6438_my_ptr;\
	UINT bmlocal6439_my_bitoff;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, bmlocal6438_my_ptr, bmlocal6439_my_bitoff );\
	(*((UINT32*)bmlocal6438_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6439_my_bitoff );\
}

// ArqTxPerformance_totalNumOfAcksReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_totalNumOfAcksReceived_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6440_tmp_bits;\
	BM_ArqTxPerformance_totalNumOfAcksReceived_GET_SIZE( base_ptr, out_bytes, bmlocal6440_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6440_tmp_bits );\
}

#define BM_ArqTxPerformance_totalNumOfAcksReceived_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6443_acc_bytes;\
	UINT bmlocal6444_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6443_acc_bytes = 28;\
	bmlocal6444_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6443_acc_bytes );\
	out_bitoff += bmlocal6444_acc_bits;\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6445_tmp_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, out_ptr, bmlocal6445_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6445_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_POS_ALIGNED 28

// Alignment of ArqTxPerformance_numOfTxArqResetsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6446_my_ptr;\
	UINT bmlocal6447_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, bmlocal6446_my_ptr, bmlocal6447_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6446_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6446_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6446_my_ptr, bmlocal6447_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6448_my_ptr;\
	UINT bmlocal6449_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, bmlocal6448_my_ptr, bmlocal6449_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6448_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6448_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6448_my_ptr, bmlocal6449_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfTxArqResetsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfTxArqResetsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfTxArqResetsReceived: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfTxArqResetsReceived: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfTxArqResetsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfTxArqResetsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6450_out_val;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET( base_ptr, bmlocal6450_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfTxArqResetsReceived", 32, (UINT)(bmlocal6450_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6451_my_ptr;\
	UINT bmlocal6452_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, bmlocal6451_my_ptr, bmlocal6452_my_bitoff );\
	(*((UINT32*)bmlocal6451_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6452_my_bitoff );\
}

// ArqTxPerformance_numOfTxArqResetsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6453_tmp_bits;\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_GET_SIZE( base_ptr, out_bytes, bmlocal6453_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6453_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsReceived_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6456_acc_bytes;\
	UINT bmlocal6457_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6456_acc_bytes = 32;\
	bmlocal6457_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6456_acc_bytes );\
	out_bitoff += bmlocal6457_acc_bits;\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6458_tmp_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, out_ptr, bmlocal6458_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6458_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_POS_ALIGNED 32

// Alignment of ArqTxPerformance_numOfTxArqResetsInitiated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6459_my_ptr;\
	UINT bmlocal6460_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, bmlocal6459_my_ptr, bmlocal6460_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6459_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6459_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6459_my_ptr, bmlocal6460_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6461_my_ptr;\
	UINT bmlocal6462_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, bmlocal6461_my_ptr, bmlocal6462_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6461_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6461_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6461_my_ptr, bmlocal6462_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfTxArqResetsInitiated: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfTxArqResetsInitiated: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfTxArqResetsInitiated: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfTxArqResetsInitiated: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfTxArqResetsInitiated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfTxArqResetsInitiated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6463_out_val;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET( base_ptr, bmlocal6463_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfTxArqResetsInitiated", 32, (UINT)(bmlocal6463_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6464_my_ptr;\
	UINT bmlocal6465_my_bitoff;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, bmlocal6464_my_ptr, bmlocal6465_my_bitoff );\
	(*((UINT32*)bmlocal6464_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6465_my_bitoff );\
}

// ArqTxPerformance_numOfTxArqResetsInitiated: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6466_tmp_bits;\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_GET_SIZE( base_ptr, out_bytes, bmlocal6466_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6466_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfTxArqResetsInitiated_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6469_acc_bytes;\
	UINT bmlocal6470_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6469_acc_bytes = 36;\
	bmlocal6470_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6469_acc_bytes );\
	out_bitoff += bmlocal6470_acc_bits;\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6471_tmp_bitoff;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, out_ptr, bmlocal6471_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6471_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_POS_ALIGNED 36

// Alignment of ArqTxPerformance_numOfArqDiscardsTxd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6472_my_ptr;\
	UINT bmlocal6473_my_bitoff;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, bmlocal6472_my_ptr, bmlocal6473_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6472_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6472_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6472_my_ptr, bmlocal6473_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6474_my_ptr;\
	UINT bmlocal6475_my_bitoff;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, bmlocal6474_my_ptr, bmlocal6475_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6474_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6474_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6474_my_ptr, bmlocal6475_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfArqDiscardsTxd: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfArqDiscardsTxd: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfArqDiscardsTxd: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfArqDiscardsTxd: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfArqDiscardsTxd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfArqDiscardsTxd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6476_out_val;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET( base_ptr, bmlocal6476_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfArqDiscardsTxd", 32, (UINT)(bmlocal6476_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6477_my_ptr;\
	UINT bmlocal6478_my_bitoff;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, bmlocal6477_my_ptr, bmlocal6478_my_bitoff );\
	(*((UINT32*)bmlocal6477_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6478_my_bitoff );\
}

// ArqTxPerformance_numOfArqDiscardsTxd: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6479_tmp_bits;\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_GET_SIZE( base_ptr, out_bytes, bmlocal6479_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6479_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfArqDiscardsTxd_BYTES_SIZE 4

#define BM_ArqTxPerformance_txThroughput_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6482_acc_bytes;\
	UINT bmlocal6483_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6482_acc_bytes = 40;\
	bmlocal6483_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6482_acc_bytes );\
	out_bitoff += bmlocal6483_acc_bits;\
}

#define BM_ArqTxPerformance_txThroughput_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6484_tmp_bitoff;\
	BM_ArqTxPerformance_txThroughput_GET_POS( base_ptr, out_ptr, bmlocal6484_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6484_tmp_bitoff);\
}

#define BM_ArqTxPerformance_txThroughput_POS_ALIGNED 40

// Alignment of ArqTxPerformance_txThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_txThroughput_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_txThroughput_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6485_my_ptr;\
	UINT bmlocal6486_my_bitoff;\
	BM_ArqTxPerformance_txThroughput_GET_POS( base_ptr, bmlocal6485_my_ptr, bmlocal6486_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6485_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6485_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6485_my_ptr, bmlocal6486_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_txThroughput_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6487_my_ptr;\
	UINT bmlocal6488_my_bitoff;\
	BM_ArqTxPerformance_txThroughput_GET_POS( base_ptr, bmlocal6487_my_ptr, bmlocal6488_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6487_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6487_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6487_my_ptr, bmlocal6488_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_txThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_txThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_txThroughput: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_txThroughput: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_txThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_txThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6489_out_val;\
	BM_ArqTxPerformance_txThroughput_GET( base_ptr, bmlocal6489_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "txThroughput", 32, (UINT)(bmlocal6489_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_txThroughput_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_txThroughput_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6490_my_ptr;\
	UINT bmlocal6491_my_bitoff;\
	BM_ArqTxPerformance_txThroughput_GET_POS( base_ptr, bmlocal6490_my_ptr, bmlocal6491_my_bitoff );\
	(*((UINT32*)bmlocal6490_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6491_my_bitoff );\
}

// ArqTxPerformance_txThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_txThroughput_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6492_tmp_bits;\
	BM_ArqTxPerformance_txThroughput_GET_SIZE( base_ptr, out_bytes, bmlocal6492_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6492_tmp_bits );\
}

#define BM_ArqTxPerformance_txThroughput_BYTES_SIZE 4

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6495_acc_bytes;\
	UINT bmlocal6496_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6495_acc_bytes = 44;\
	bmlocal6496_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6495_acc_bytes );\
	out_bitoff += bmlocal6496_acc_bits;\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6497_tmp_bitoff;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, out_ptr, bmlocal6497_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6497_tmp_bitoff);\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_POS_ALIGNED 44

// Alignment of ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6498_my_ptr;\
	UINT bmlocal6499_my_bitoff;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, bmlocal6498_my_ptr, bmlocal6499_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6498_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6498_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6498_my_ptr, bmlocal6499_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6500_my_ptr;\
	UINT bmlocal6501_my_bitoff;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, bmlocal6500_my_ptr, bmlocal6501_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6500_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6500_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6500_my_ptr, bmlocal6501_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: IS_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET_RESET accessor is not defined because no reset value was specified.
// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6502_out_val;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET( base_ptr, bmlocal6502_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfSduLostDueToNoFreeSpaceInTransmitter", 32, (UINT)(bmlocal6502_out_val), "%d", 1);\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6503_my_ptr;\
	UINT bmlocal6504_my_bitoff;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, bmlocal6503_my_ptr, bmlocal6504_my_bitoff );\
	(*((UINT32*)bmlocal6503_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6504_my_bitoff );\
}

// ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6505_tmp_bits;\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_SIZE( base_ptr, out_bytes, bmlocal6505_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6505_tmp_bits );\
}

#define BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_BYTES_SIZE 4

#define BM_ArqTxPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 48;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6508_tmp_bits;\
	BM_ArqTxPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal6508_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6508_tmp_bits );\
}

#define BM_ArqTxPerformance_BYTES_SIZE 48

#define BM_ArqTxPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ArqTxPerformance", 1);\
	BM_ArqTxPerformance_CID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_CIN_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqTxPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqTxPerformance_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ArqRxPerformance[44];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _CID;
	UINT32 _CIN;
	UINT32 _numOfDuplicateReceivedBlocks;
	UINT32 _numOfPurgeTimeouts;
	UINT32 _numOfBlocksLostDueToRxPurgeTimout;
	UINT32 _totalNumOfAcksTxd;
	UINT32 _numOfRxArqResetsReceived;
	UINT32 _numOfRxArqResetsInitiated;
	UINT32 _numOfArqDiscardsReceived;
	UINT32 _rxThroughput;
	UINT32 _numOfPduLostDueToNoFreeSpaceInReceiver;
} BMS_ArqRxPerformance;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numOfPduLostDueToNoFreeSpaceInReceiver;
	UINT32 _rxThroughput;
	UINT32 _numOfArqDiscardsReceived;
	UINT32 _numOfRxArqResetsInitiated;
	UINT32 _numOfRxArqResetsReceived;
	UINT32 _totalNumOfAcksTxd;
	UINT32 _numOfBlocksLostDueToRxPurgeTimout;
	UINT32 _numOfPurgeTimeouts;
	UINT32 _numOfDuplicateReceivedBlocks;
	UINT32 _CIN;
	UINT32 _CID;
} BMS_ArqRxPerformance;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ArqRxPerformance' Type: 'ArqRxPerformance', Top-level, Non-instance, No bitoff root
#define BM_ArqRxPerformance_CID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ArqRxPerformance_CID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6509_tmp_bitoff;\
	BM_ArqRxPerformance_CID_GET_POS( base_ptr, out_ptr, bmlocal6509_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6509_tmp_bitoff);\
}

#define BM_ArqRxPerformance_CID_POS_ALIGNED 0

// Alignment of ArqRxPerformance_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_CID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_CID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6510_my_ptr;\
	UINT bmlocal6511_my_bitoff;\
	BM_ArqRxPerformance_CID_GET_POS( base_ptr, bmlocal6510_my_ptr, bmlocal6511_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6510_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6510_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6510_my_ptr, bmlocal6511_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_CID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6512_my_ptr;\
	UINT bmlocal6513_my_bitoff;\
	BM_ArqRxPerformance_CID_GET_POS( base_ptr, bmlocal6512_my_ptr, bmlocal6513_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6512_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6512_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6512_my_ptr, bmlocal6513_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_CID: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_CID: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_CID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6514_out_val;\
	BM_ArqRxPerformance_CID_GET( base_ptr, bmlocal6514_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal6514_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_CID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_CID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_CID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6515_my_ptr;\
	UINT bmlocal6516_my_bitoff;\
	BM_ArqRxPerformance_CID_GET_POS( base_ptr, bmlocal6515_my_ptr, bmlocal6516_my_bitoff );\
	(*((UINT32*)bmlocal6515_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6516_my_bitoff );\
}

// ArqRxPerformance_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_CID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6517_tmp_bits;\
	BM_ArqRxPerformance_CID_GET_SIZE( base_ptr, out_bytes, bmlocal6517_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6517_tmp_bits );\
}

#define BM_ArqRxPerformance_CID_BYTES_SIZE 4

#define BM_ArqRxPerformance_CIN_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6520_acc_bytes;\
	UINT bmlocal6521_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6520_acc_bytes = 4;\
	bmlocal6521_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6520_acc_bytes );\
	out_bitoff += bmlocal6521_acc_bits;\
}

#define BM_ArqRxPerformance_CIN_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6522_tmp_bitoff;\
	BM_ArqRxPerformance_CIN_GET_POS( base_ptr, out_ptr, bmlocal6522_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6522_tmp_bitoff);\
}

#define BM_ArqRxPerformance_CIN_POS_ALIGNED 4

// Alignment of ArqRxPerformance_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_CIN_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_CIN_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6523_my_ptr;\
	UINT bmlocal6524_my_bitoff;\
	BM_ArqRxPerformance_CIN_GET_POS( base_ptr, bmlocal6523_my_ptr, bmlocal6524_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6523_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6523_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6523_my_ptr, bmlocal6524_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_CIN_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6525_my_ptr;\
	UINT bmlocal6526_my_bitoff;\
	BM_ArqRxPerformance_CIN_GET_POS( base_ptr, bmlocal6525_my_ptr, bmlocal6526_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6525_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6525_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6525_my_ptr, bmlocal6526_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_CIN: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_CIN: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_CIN_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6527_out_val;\
	BM_ArqRxPerformance_CIN_GET( base_ptr, bmlocal6527_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal6527_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_CIN_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_CIN_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_CIN_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6528_my_ptr;\
	UINT bmlocal6529_my_bitoff;\
	BM_ArqRxPerformance_CIN_GET_POS( base_ptr, bmlocal6528_my_ptr, bmlocal6529_my_bitoff );\
	(*((UINT32*)bmlocal6528_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6529_my_bitoff );\
}

// ArqRxPerformance_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_CIN_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6530_tmp_bits;\
	BM_ArqRxPerformance_CIN_GET_SIZE( base_ptr, out_bytes, bmlocal6530_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6530_tmp_bits );\
}

#define BM_ArqRxPerformance_CIN_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6533_acc_bytes;\
	UINT bmlocal6534_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6533_acc_bytes = 8;\
	bmlocal6534_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6533_acc_bytes );\
	out_bitoff += bmlocal6534_acc_bits;\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6535_tmp_bitoff;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, out_ptr, bmlocal6535_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6535_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_POS_ALIGNED 8

// Alignment of ArqRxPerformance_numOfDuplicateReceivedBlocks: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6536_my_ptr;\
	UINT bmlocal6537_my_bitoff;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, bmlocal6536_my_ptr, bmlocal6537_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6536_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6536_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6536_my_ptr, bmlocal6537_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6538_my_ptr;\
	UINT bmlocal6539_my_bitoff;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, bmlocal6538_my_ptr, bmlocal6539_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6538_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6538_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6538_my_ptr, bmlocal6539_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfDuplicateReceivedBlocks: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfDuplicateReceivedBlocks: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfDuplicateReceivedBlocks: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfDuplicateReceivedBlocks: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfDuplicateReceivedBlocks: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfDuplicateReceivedBlocks: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6540_out_val;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET( base_ptr, bmlocal6540_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfDuplicateReceivedBlocks", 32, (UINT)(bmlocal6540_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6541_my_ptr;\
	UINT bmlocal6542_my_bitoff;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, bmlocal6541_my_ptr, bmlocal6542_my_bitoff );\
	(*((UINT32*)bmlocal6541_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6542_my_bitoff );\
}

// ArqRxPerformance_numOfDuplicateReceivedBlocks: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6543_tmp_bits;\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_GET_SIZE( base_ptr, out_bytes, bmlocal6543_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6543_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6546_acc_bytes;\
	UINT bmlocal6547_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6546_acc_bytes = 12;\
	bmlocal6547_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6546_acc_bytes );\
	out_bitoff += bmlocal6547_acc_bits;\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6548_tmp_bitoff;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, out_ptr, bmlocal6548_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6548_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_POS_ALIGNED 12

// Alignment of ArqRxPerformance_numOfPurgeTimeouts: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfPurgeTimeouts_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6549_my_ptr;\
	UINT bmlocal6550_my_bitoff;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, bmlocal6549_my_ptr, bmlocal6550_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6549_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6549_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6549_my_ptr, bmlocal6550_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6551_my_ptr;\
	UINT bmlocal6552_my_bitoff;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, bmlocal6551_my_ptr, bmlocal6552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6551_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6551_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6551_my_ptr, bmlocal6552_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfPurgeTimeouts: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfPurgeTimeouts: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfPurgeTimeouts: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfPurgeTimeouts: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfPurgeTimeouts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfPurgeTimeouts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6553_out_val;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET( base_ptr, bmlocal6553_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfPurgeTimeouts", 32, (UINT)(bmlocal6553_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6554_my_ptr;\
	UINT bmlocal6555_my_bitoff;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, bmlocal6554_my_ptr, bmlocal6555_my_bitoff );\
	(*((UINT32*)bmlocal6554_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6555_my_bitoff );\
}

// ArqRxPerformance_numOfPurgeTimeouts: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfPurgeTimeouts_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6556_tmp_bits;\
	BM_ArqRxPerformance_numOfPurgeTimeouts_GET_SIZE( base_ptr, out_bytes, bmlocal6556_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6556_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfPurgeTimeouts_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6559_acc_bytes;\
	UINT bmlocal6560_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6559_acc_bytes = 16;\
	bmlocal6560_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6559_acc_bytes );\
	out_bitoff += bmlocal6560_acc_bits;\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6561_tmp_bitoff;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, out_ptr, bmlocal6561_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6561_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_POS_ALIGNED 16

// Alignment of ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6562_my_ptr;\
	UINT bmlocal6563_my_bitoff;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, bmlocal6562_my_ptr, bmlocal6563_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6562_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6562_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6562_my_ptr, bmlocal6563_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6564_my_ptr;\
	UINT bmlocal6565_my_bitoff;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, bmlocal6564_my_ptr, bmlocal6565_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6564_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6564_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6564_my_ptr, bmlocal6565_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6566_out_val;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET( base_ptr, bmlocal6566_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBlocksLostDueToRxPurgeTimout", 32, (UINT)(bmlocal6566_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6567_my_ptr;\
	UINT bmlocal6568_my_bitoff;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, bmlocal6567_my_ptr, bmlocal6568_my_bitoff );\
	(*((UINT32*)bmlocal6567_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6568_my_bitoff );\
}

// ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6569_tmp_bits;\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_SIZE( base_ptr, out_bytes, bmlocal6569_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6569_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_BYTES_SIZE 4

#define BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6572_acc_bytes;\
	UINT bmlocal6573_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6572_acc_bytes = 20;\
	bmlocal6573_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6572_acc_bytes );\
	out_bitoff += bmlocal6573_acc_bits;\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6574_tmp_bitoff;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, out_ptr, bmlocal6574_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6574_tmp_bitoff);\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_POS_ALIGNED 20

// Alignment of ArqRxPerformance_totalNumOfAcksTxd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_totalNumOfAcksTxd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6575_my_ptr;\
	UINT bmlocal6576_my_bitoff;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, bmlocal6575_my_ptr, bmlocal6576_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6575_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6575_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6575_my_ptr, bmlocal6576_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6577_my_ptr;\
	UINT bmlocal6578_my_bitoff;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, bmlocal6577_my_ptr, bmlocal6578_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6577_my_ptr, bmlocal6578_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_totalNumOfAcksTxd: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_totalNumOfAcksTxd: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_totalNumOfAcksTxd: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_totalNumOfAcksTxd: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_totalNumOfAcksTxd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_totalNumOfAcksTxd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6579_out_val;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET( base_ptr, bmlocal6579_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalNumOfAcksTxd", 32, (UINT)(bmlocal6579_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6580_my_ptr;\
	UINT bmlocal6581_my_bitoff;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, bmlocal6580_my_ptr, bmlocal6581_my_bitoff );\
	(*((UINT32*)bmlocal6580_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6581_my_bitoff );\
}

// ArqRxPerformance_totalNumOfAcksTxd: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_totalNumOfAcksTxd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6582_tmp_bits;\
	BM_ArqRxPerformance_totalNumOfAcksTxd_GET_SIZE( base_ptr, out_bytes, bmlocal6582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6582_tmp_bits );\
}

#define BM_ArqRxPerformance_totalNumOfAcksTxd_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6585_acc_bytes;\
	UINT bmlocal6586_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6585_acc_bytes = 24;\
	bmlocal6586_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6585_acc_bytes );\
	out_bitoff += bmlocal6586_acc_bits;\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6587_tmp_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, out_ptr, bmlocal6587_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6587_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_POS_ALIGNED 24

// Alignment of ArqRxPerformance_numOfRxArqResetsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6588_my_ptr;\
	UINT bmlocal6589_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, bmlocal6588_my_ptr, bmlocal6589_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6588_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6588_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6588_my_ptr, bmlocal6589_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6590_my_ptr;\
	UINT bmlocal6591_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, bmlocal6590_my_ptr, bmlocal6591_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6590_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6590_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6590_my_ptr, bmlocal6591_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfRxArqResetsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfRxArqResetsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfRxArqResetsReceived: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfRxArqResetsReceived: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfRxArqResetsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfRxArqResetsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6592_out_val;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET( base_ptr, bmlocal6592_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRxArqResetsReceived", 32, (UINT)(bmlocal6592_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6593_my_ptr;\
	UINT bmlocal6594_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, bmlocal6593_my_ptr, bmlocal6594_my_bitoff );\
	(*((UINT32*)bmlocal6593_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6594_my_bitoff );\
}

// ArqRxPerformance_numOfRxArqResetsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6595_tmp_bits;\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_GET_SIZE( base_ptr, out_bytes, bmlocal6595_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6595_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsReceived_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6598_acc_bytes;\
	UINT bmlocal6599_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6598_acc_bytes = 28;\
	bmlocal6599_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6598_acc_bytes );\
	out_bitoff += bmlocal6599_acc_bits;\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6600_tmp_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, out_ptr, bmlocal6600_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6600_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_POS_ALIGNED 28

// Alignment of ArqRxPerformance_numOfRxArqResetsInitiated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6601_my_ptr;\
	UINT bmlocal6602_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, bmlocal6601_my_ptr, bmlocal6602_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6601_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6601_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6601_my_ptr, bmlocal6602_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6603_my_ptr;\
	UINT bmlocal6604_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, bmlocal6603_my_ptr, bmlocal6604_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6603_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6603_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6603_my_ptr, bmlocal6604_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfRxArqResetsInitiated: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfRxArqResetsInitiated: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfRxArqResetsInitiated: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfRxArqResetsInitiated: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfRxArqResetsInitiated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfRxArqResetsInitiated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6605_out_val;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET( base_ptr, bmlocal6605_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRxArqResetsInitiated", 32, (UINT)(bmlocal6605_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6606_my_ptr;\
	UINT bmlocal6607_my_bitoff;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, bmlocal6606_my_ptr, bmlocal6607_my_bitoff );\
	(*((UINT32*)bmlocal6606_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6607_my_bitoff );\
}

// ArqRxPerformance_numOfRxArqResetsInitiated: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6608_tmp_bits;\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_GET_SIZE( base_ptr, out_bytes, bmlocal6608_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6608_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfRxArqResetsInitiated_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6611_acc_bytes;\
	UINT bmlocal6612_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6611_acc_bytes = 32;\
	bmlocal6612_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6611_acc_bytes );\
	out_bitoff += bmlocal6612_acc_bits;\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6613_tmp_bitoff;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, out_ptr, bmlocal6613_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6613_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_POS_ALIGNED 32

// Alignment of ArqRxPerformance_numOfArqDiscardsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6614_my_ptr;\
	UINT bmlocal6615_my_bitoff;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, bmlocal6614_my_ptr, bmlocal6615_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6614_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6614_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6614_my_ptr, bmlocal6615_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6616_my_ptr;\
	UINT bmlocal6617_my_bitoff;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, bmlocal6616_my_ptr, bmlocal6617_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6616_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6616_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6616_my_ptr, bmlocal6617_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfArqDiscardsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfArqDiscardsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfArqDiscardsReceived: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfArqDiscardsReceived: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfArqDiscardsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfArqDiscardsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6618_out_val;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET( base_ptr, bmlocal6618_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfArqDiscardsReceived", 32, (UINT)(bmlocal6618_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6619_my_ptr;\
	UINT bmlocal6620_my_bitoff;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, bmlocal6619_my_ptr, bmlocal6620_my_bitoff );\
	(*((UINT32*)bmlocal6619_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6620_my_bitoff );\
}

// ArqRxPerformance_numOfArqDiscardsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6621_tmp_bits;\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_GET_SIZE( base_ptr, out_bytes, bmlocal6621_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6621_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfArqDiscardsReceived_BYTES_SIZE 4

#define BM_ArqRxPerformance_rxThroughput_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6624_acc_bytes;\
	UINT bmlocal6625_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6624_acc_bytes = 36;\
	bmlocal6625_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6624_acc_bytes );\
	out_bitoff += bmlocal6625_acc_bits;\
}

#define BM_ArqRxPerformance_rxThroughput_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6626_tmp_bitoff;\
	BM_ArqRxPerformance_rxThroughput_GET_POS( base_ptr, out_ptr, bmlocal6626_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6626_tmp_bitoff);\
}

#define BM_ArqRxPerformance_rxThroughput_POS_ALIGNED 36

// Alignment of ArqRxPerformance_rxThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_rxThroughput_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_rxThroughput_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6627_my_ptr;\
	UINT bmlocal6628_my_bitoff;\
	BM_ArqRxPerformance_rxThroughput_GET_POS( base_ptr, bmlocal6627_my_ptr, bmlocal6628_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6627_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6627_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6627_my_ptr, bmlocal6628_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_rxThroughput_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6629_my_ptr;\
	UINT bmlocal6630_my_bitoff;\
	BM_ArqRxPerformance_rxThroughput_GET_POS( base_ptr, bmlocal6629_my_ptr, bmlocal6630_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6629_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6629_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6629_my_ptr, bmlocal6630_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_rxThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_rxThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_rxThroughput: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_rxThroughput: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_rxThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_rxThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6631_out_val;\
	BM_ArqRxPerformance_rxThroughput_GET( base_ptr, bmlocal6631_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rxThroughput", 32, (UINT)(bmlocal6631_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_rxThroughput_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_rxThroughput_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6632_my_ptr;\
	UINT bmlocal6633_my_bitoff;\
	BM_ArqRxPerformance_rxThroughput_GET_POS( base_ptr, bmlocal6632_my_ptr, bmlocal6633_my_bitoff );\
	(*((UINT32*)bmlocal6632_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6633_my_bitoff );\
}

// ArqRxPerformance_rxThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_rxThroughput_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6634_tmp_bits;\
	BM_ArqRxPerformance_rxThroughput_GET_SIZE( base_ptr, out_bytes, bmlocal6634_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6634_tmp_bits );\
}

#define BM_ArqRxPerformance_rxThroughput_BYTES_SIZE 4

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6637_acc_bytes;\
	UINT bmlocal6638_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6637_acc_bytes = 40;\
	bmlocal6638_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6637_acc_bytes );\
	out_bitoff += bmlocal6638_acc_bits;\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6639_tmp_bitoff;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, out_ptr, bmlocal6639_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6639_tmp_bitoff);\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_POS_ALIGNED 40

// Alignment of ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6640_my_ptr;\
	UINT bmlocal6641_my_bitoff;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, bmlocal6640_my_ptr, bmlocal6641_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6640_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6640_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6640_my_ptr, bmlocal6641_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6642_my_ptr;\
	UINT bmlocal6643_my_bitoff;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, bmlocal6642_my_ptr, bmlocal6643_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6642_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6642_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6642_my_ptr, bmlocal6643_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: IS_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET_DEFAULT accessor is not defined because no default value was specified.
// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: IS_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET_RESET accessor is not defined because no reset value was specified.
// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6644_out_val;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET( base_ptr, bmlocal6644_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfPduLostDueToNoFreeSpaceInReceiver", 32, (UINT)(bmlocal6644_out_val), "%d", 1);\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6645_my_ptr;\
	UINT bmlocal6646_my_bitoff;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, bmlocal6645_my_ptr, bmlocal6646_my_bitoff );\
	(*((UINT32*)bmlocal6645_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6646_my_bitoff );\
}

// ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: Validation accessors are not defined because validation condition was not specified.
#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6647_tmp_bits;\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_SIZE( base_ptr, out_bytes, bmlocal6647_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6647_tmp_bits );\
}

#define BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_BYTES_SIZE 4

#define BM_ArqRxPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 44;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6650_tmp_bits;\
	BM_ArqRxPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal6650_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6650_tmp_bits );\
}

#define BM_ArqRxPerformance_BYTES_SIZE 44

#define BM_ArqRxPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ArqRxPerformance", 1);\
	BM_ArqRxPerformance_CID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_CIN_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ArqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ArqRxPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ArqRxPerformance_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 HarqInfo[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _harqChannelMapping : 16;
	UINT8 _harqEnable : 8;
	UINT8 _harqisForReorder : 8; //0: order is NOT preserved; 1:order is preserved
	UINT32 _sfId;
} BMS_HarqInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _sfId;
	UINT8 _harqisForReorder : 8; //0: order is NOT preserved; 1:order is preserved
	UINT8 _harqEnable : 8;
	UINT16 _harqChannelMapping : 16;
} BMS_HarqInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'HarqInfo' Type: 'HarqInfo', Top-level, Non-instance, No bitoff root
#define BM_HarqInfo_harqChannelMapping_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_HarqInfo_harqChannelMapping_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6651_tmp_bitoff;\
	BM_HarqInfo_harqChannelMapping_GET_POS( base_ptr, out_ptr, bmlocal6651_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6651_tmp_bitoff);\
}

#define BM_HarqInfo_harqChannelMapping_POS_ALIGNED 0

// Alignment of HarqInfo_harqChannelMapping: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqInfo_harqChannelMapping_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_harqChannelMapping_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6652_my_ptr;\
	UINT bmlocal6653_my_bitoff;\
	BM_HarqInfo_harqChannelMapping_GET_POS( base_ptr, bmlocal6652_my_ptr, bmlocal6653_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6652_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6652_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6652_my_ptr, bmlocal6653_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_HarqInfo_harqChannelMapping_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6654_my_ptr;\
	UINT bmlocal6655_my_bitoff;\
	BM_HarqInfo_harqChannelMapping_GET_POS( base_ptr, bmlocal6654_my_ptr, bmlocal6655_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6654_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6654_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6654_my_ptr, bmlocal6655_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// HarqInfo_harqChannelMapping: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqChannelMapping: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqChannelMapping: IS_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqChannelMapping: SET_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqChannelMapping: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqInfo_harqChannelMapping: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal6656_out_val;\
	BM_HarqInfo_harqChannelMapping_GET( base_ptr, bmlocal6656_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqChannelMapping", 16, (UINT)(bmlocal6656_out_val), "%d", 1);\
}

#define BM_HarqInfo_harqChannelMapping_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqInfo_harqChannelMapping_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6657_my_ptr;\
	UINT bmlocal6658_my_bitoff;\
	BM_HarqInfo_harqChannelMapping_GET_POS( base_ptr, bmlocal6657_my_ptr, bmlocal6658_my_bitoff );\
	(*((UINT16*)bmlocal6657_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6658_my_bitoff );\
}

// HarqInfo_harqChannelMapping: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqInfo_harqChannelMapping_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6659_tmp_bits;\
	BM_HarqInfo_harqChannelMapping_GET_SIZE( base_ptr, out_bytes, bmlocal6659_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6659_tmp_bits );\
}

#define BM_HarqInfo_harqChannelMapping_BYTES_SIZE 2

#define BM_HarqInfo_harqEnable_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6662_acc_bytes;\
	UINT bmlocal6663_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6662_acc_bytes = 2;\
	bmlocal6663_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6662_acc_bytes );\
	out_bitoff += bmlocal6663_acc_bits;\
}

#define BM_HarqInfo_harqEnable_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6664_tmp_bitoff;\
	BM_HarqInfo_harqEnable_GET_POS( base_ptr, out_ptr, bmlocal6664_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6664_tmp_bitoff);\
}

#define BM_HarqInfo_harqEnable_POS_ALIGNED 2

// Alignment of HarqInfo_harqEnable: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqInfo_harqEnable_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_harqEnable_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6665_my_ptr;\
	UINT bmlocal6666_my_bitoff;\
	BM_HarqInfo_harqEnable_GET_POS( base_ptr, bmlocal6665_my_ptr, bmlocal6666_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6665_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6665_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6665_my_ptr, bmlocal6666_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_HarqInfo_harqEnable_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6667_my_ptr;\
	UINT bmlocal6668_my_bitoff;\
	BM_HarqInfo_harqEnable_GET_POS( base_ptr, bmlocal6667_my_ptr, bmlocal6668_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6667_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6667_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6667_my_ptr, bmlocal6668_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// HarqInfo_harqEnable: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqEnable: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqEnable: IS_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqEnable: SET_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqEnable: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqInfo_harqEnable: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqInfo_harqEnable_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6669_out_val;\
	BM_HarqInfo_harqEnable_GET( base_ptr, bmlocal6669_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqEnable", 8, (UINT)(bmlocal6669_out_val), "%d", 1);\
}

#define BM_HarqInfo_harqEnable_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqInfo_harqEnable_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqInfo_harqEnable_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6670_my_ptr;\
	UINT bmlocal6671_my_bitoff;\
	BM_HarqInfo_harqEnable_GET_POS( base_ptr, bmlocal6670_my_ptr, bmlocal6671_my_bitoff );\
	(*((UINT8*)bmlocal6670_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6671_my_bitoff );\
}

// HarqInfo_harqEnable: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqInfo_harqEnable_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6672_tmp_bits;\
	BM_HarqInfo_harqEnable_GET_SIZE( base_ptr, out_bytes, bmlocal6672_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6672_tmp_bits );\
}

#define BM_HarqInfo_harqEnable_BYTES_SIZE 1

#define BM_HarqInfo_harqisForReorder_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6675_acc_bytes;\
	UINT bmlocal6676_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6675_acc_bytes = 3;\
	bmlocal6676_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6675_acc_bytes );\
	out_bitoff += bmlocal6676_acc_bits;\
}

#define BM_HarqInfo_harqisForReorder_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6677_tmp_bitoff;\
	BM_HarqInfo_harqisForReorder_GET_POS( base_ptr, out_ptr, bmlocal6677_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6677_tmp_bitoff);\
}

#define BM_HarqInfo_harqisForReorder_POS_ALIGNED 3

// Alignment of HarqInfo_harqisForReorder: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqInfo_harqisForReorder_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_harqisForReorder_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6678_my_ptr;\
	UINT bmlocal6679_my_bitoff;\
	BM_HarqInfo_harqisForReorder_GET_POS( base_ptr, bmlocal6678_my_ptr, bmlocal6679_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6678_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6678_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6678_my_ptr, bmlocal6679_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_HarqInfo_harqisForReorder_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6680_my_ptr;\
	UINT bmlocal6681_my_bitoff;\
	BM_HarqInfo_harqisForReorder_GET_POS( base_ptr, bmlocal6680_my_ptr, bmlocal6681_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6680_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6680_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6680_my_ptr, bmlocal6681_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// HarqInfo_harqisForReorder: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqisForReorder: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_harqisForReorder: IS_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqisForReorder: SET_RESET accessor is not defined because no reset value was specified.
// HarqInfo_harqisForReorder: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqInfo_harqisForReorder: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6682_out_val;\
	BM_HarqInfo_harqisForReorder_GET( base_ptr, bmlocal6682_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqisForReorder", 8, (UINT)(bmlocal6682_out_val), "%d", 1);\
}

#define BM_HarqInfo_harqisForReorder_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqInfo_harqisForReorder_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6683_my_ptr;\
	UINT bmlocal6684_my_bitoff;\
	BM_HarqInfo_harqisForReorder_GET_POS( base_ptr, bmlocal6683_my_ptr, bmlocal6684_my_bitoff );\
	(*((UINT8*)bmlocal6683_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6684_my_bitoff );\
}

// HarqInfo_harqisForReorder: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqInfo_harqisForReorder_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6685_tmp_bits;\
	BM_HarqInfo_harqisForReorder_GET_SIZE( base_ptr, out_bytes, bmlocal6685_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6685_tmp_bits );\
}

#define BM_HarqInfo_harqisForReorder_BYTES_SIZE 1

#define BM_HarqInfo_sfId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6688_acc_bytes;\
	UINT bmlocal6689_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6688_acc_bytes = 4;\
	bmlocal6689_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6688_acc_bytes );\
	out_bitoff += bmlocal6689_acc_bits;\
}

#define BM_HarqInfo_sfId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6690_tmp_bitoff;\
	BM_HarqInfo_sfId_GET_POS( base_ptr, out_ptr, bmlocal6690_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6690_tmp_bitoff);\
}

#define BM_HarqInfo_sfId_POS_ALIGNED 4

// Alignment of HarqInfo_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqInfo_sfId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_sfId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6691_my_ptr;\
	UINT bmlocal6692_my_bitoff;\
	BM_HarqInfo_sfId_GET_POS( base_ptr, bmlocal6691_my_ptr, bmlocal6692_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6691_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6691_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6691_my_ptr, bmlocal6692_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_HarqInfo_sfId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6693_my_ptr;\
	UINT bmlocal6694_my_bitoff;\
	BM_HarqInfo_sfId_GET_POS( base_ptr, bmlocal6693_my_ptr, bmlocal6694_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6693_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6693_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6693_my_ptr, bmlocal6694_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// HarqInfo_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqInfo_sfId: IS_RESET accessor is not defined because no reset value was specified.
// HarqInfo_sfId: SET_RESET accessor is not defined because no reset value was specified.
// HarqInfo_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqInfo_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqInfo_sfId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6695_out_val;\
	BM_HarqInfo_sfId_GET( base_ptr, bmlocal6695_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal6695_out_val), "%d", 1);\
}

#define BM_HarqInfo_sfId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqInfo_sfId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqInfo_sfId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6696_my_ptr;\
	UINT bmlocal6697_my_bitoff;\
	BM_HarqInfo_sfId_GET_POS( base_ptr, bmlocal6696_my_ptr, bmlocal6697_my_bitoff );\
	(*((UINT32*)bmlocal6696_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6697_my_bitoff );\
}

// HarqInfo_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqInfo_sfId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6698_tmp_bits;\
	BM_HarqInfo_sfId_GET_SIZE( base_ptr, out_bytes, bmlocal6698_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6698_tmp_bits );\
}

#define BM_HarqInfo_sfId_BYTES_SIZE 4

#define BM_HarqInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6701_tmp_bits;\
	BM_HarqInfo_GET_SIZE( base_ptr, out_bytes, bmlocal6701_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6701_tmp_bits );\
}

#define BM_HarqInfo_BYTES_SIZE 8

#define BM_HarqInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HarqInfo", 1);\
	BM_HarqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqInfo_harqEnable_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqInfo_sfId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqInfo_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 NwEntryMsgLatency_L3[24];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _initRengLatency; //Initial renging latency
	UINT32 _sbcLatency; //SBC latency
	UINT32 _pkmLatency; //PKM latency
	UINT32 _regLatency; //Registration latency
	UINT32 _dsaLatency; //DSA latency
	UINT32 _setuUpTime; //connection set up time
} BMS_NwEntryMsgLatency_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _setuUpTime; //connection set up time
	UINT32 _dsaLatency; //DSA latency
	UINT32 _regLatency; //Registration latency
	UINT32 _pkmLatency; //PKM latency
	UINT32 _sbcLatency; //SBC latency
	UINT32 _initRengLatency; //Initial renging latency
} BMS_NwEntryMsgLatency_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'NwEntryMsgLatency_L3' Type: 'NwEntryMsgLatency_L3', Top-level, Non-instance, No bitoff root
#define BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6702_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS( base_ptr, out_ptr, bmlocal6702_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6702_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_POS_ALIGNED 0

// Alignment of NwEntryMsgLatency_L3_initRengLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_initRengLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6703_my_ptr;\
	UINT bmlocal6704_my_bitoff;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS( base_ptr, bmlocal6703_my_ptr, bmlocal6704_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6703_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6703_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6703_my_ptr, bmlocal6704_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6705_my_ptr;\
	UINT bmlocal6706_my_bitoff;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS( base_ptr, bmlocal6705_my_ptr, bmlocal6706_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6705_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6705_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6705_my_ptr, bmlocal6706_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_initRengLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_initRengLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_initRengLatency: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_initRengLatency: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_initRengLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_initRengLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_initRengLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6707_out_val;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET( base_ptr, bmlocal6707_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "initRengLatency", 32, (UINT)(bmlocal6707_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_initRengLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6708_my_ptr;\
	UINT bmlocal6709_my_bitoff;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET_POS( base_ptr, bmlocal6708_my_ptr, bmlocal6709_my_bitoff );\
	(*((UINT32*)bmlocal6708_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6709_my_bitoff );\
}

// NwEntryMsgLatency_L3_initRengLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_initRengLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6710_tmp_bits;\
	BM_NwEntryMsgLatency_L3_initRengLatency_GET_SIZE( base_ptr, out_bytes, bmlocal6710_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6710_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_initRengLatency_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6713_acc_bytes;\
	UINT bmlocal6714_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6713_acc_bytes = 4;\
	bmlocal6714_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6713_acc_bytes );\
	out_bitoff += bmlocal6714_acc_bits;\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6715_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS( base_ptr, out_ptr, bmlocal6715_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6715_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_POS_ALIGNED 4

// Alignment of NwEntryMsgLatency_L3_sbcLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_sbcLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6716_my_ptr;\
	UINT bmlocal6717_my_bitoff;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS( base_ptr, bmlocal6716_my_ptr, bmlocal6717_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6716_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6716_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6716_my_ptr, bmlocal6717_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6718_my_ptr;\
	UINT bmlocal6719_my_bitoff;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS( base_ptr, bmlocal6718_my_ptr, bmlocal6719_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6718_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6718_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6718_my_ptr, bmlocal6719_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_sbcLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_sbcLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_sbcLatency: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_sbcLatency: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_sbcLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_sbcLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_sbcLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6720_out_val;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET( base_ptr, bmlocal6720_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sbcLatency", 32, (UINT)(bmlocal6720_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_sbcLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6721_my_ptr;\
	UINT bmlocal6722_my_bitoff;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET_POS( base_ptr, bmlocal6721_my_ptr, bmlocal6722_my_bitoff );\
	(*((UINT32*)bmlocal6721_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6722_my_bitoff );\
}

// NwEntryMsgLatency_L3_sbcLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_sbcLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6723_tmp_bits;\
	BM_NwEntryMsgLatency_L3_sbcLatency_GET_SIZE( base_ptr, out_bytes, bmlocal6723_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6723_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_sbcLatency_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6726_acc_bytes;\
	UINT bmlocal6727_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6726_acc_bytes = 8;\
	bmlocal6727_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6726_acc_bytes );\
	out_bitoff += bmlocal6727_acc_bits;\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6728_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS( base_ptr, out_ptr, bmlocal6728_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6728_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_POS_ALIGNED 8

// Alignment of NwEntryMsgLatency_L3_pkmLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_pkmLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6729_my_ptr;\
	UINT bmlocal6730_my_bitoff;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS( base_ptr, bmlocal6729_my_ptr, bmlocal6730_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6729_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6729_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6729_my_ptr, bmlocal6730_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6731_my_ptr;\
	UINT bmlocal6732_my_bitoff;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS( base_ptr, bmlocal6731_my_ptr, bmlocal6732_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6731_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6731_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6731_my_ptr, bmlocal6732_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_pkmLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_pkmLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_pkmLatency: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_pkmLatency: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_pkmLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_pkmLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_pkmLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6733_out_val;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET( base_ptr, bmlocal6733_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "pkmLatency", 32, (UINT)(bmlocal6733_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_pkmLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6734_my_ptr;\
	UINT bmlocal6735_my_bitoff;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET_POS( base_ptr, bmlocal6734_my_ptr, bmlocal6735_my_bitoff );\
	(*((UINT32*)bmlocal6734_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6735_my_bitoff );\
}

// NwEntryMsgLatency_L3_pkmLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_pkmLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6736_tmp_bits;\
	BM_NwEntryMsgLatency_L3_pkmLatency_GET_SIZE( base_ptr, out_bytes, bmlocal6736_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6736_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_pkmLatency_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_regLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6739_acc_bytes;\
	UINT bmlocal6740_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6739_acc_bytes = 12;\
	bmlocal6740_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6739_acc_bytes );\
	out_bitoff += bmlocal6740_acc_bits;\
}

#define BM_NwEntryMsgLatency_L3_regLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6741_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_regLatency_GET_POS( base_ptr, out_ptr, bmlocal6741_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6741_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_regLatency_POS_ALIGNED 12

// Alignment of NwEntryMsgLatency_L3_regLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_regLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_regLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6742_my_ptr;\
	UINT bmlocal6743_my_bitoff;\
	BM_NwEntryMsgLatency_L3_regLatency_GET_POS( base_ptr, bmlocal6742_my_ptr, bmlocal6743_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6742_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6742_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6742_my_ptr, bmlocal6743_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_regLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6744_my_ptr;\
	UINT bmlocal6745_my_bitoff;\
	BM_NwEntryMsgLatency_L3_regLatency_GET_POS( base_ptr, bmlocal6744_my_ptr, bmlocal6745_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6744_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6744_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6744_my_ptr, bmlocal6745_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_regLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_regLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_regLatency: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_regLatency: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_regLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_regLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_regLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6746_out_val;\
	BM_NwEntryMsgLatency_L3_regLatency_GET( base_ptr, bmlocal6746_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "regLatency", 32, (UINT)(bmlocal6746_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_regLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_regLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_regLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6747_my_ptr;\
	UINT bmlocal6748_my_bitoff;\
	BM_NwEntryMsgLatency_L3_regLatency_GET_POS( base_ptr, bmlocal6747_my_ptr, bmlocal6748_my_bitoff );\
	(*((UINT32*)bmlocal6747_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6748_my_bitoff );\
}

// NwEntryMsgLatency_L3_regLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_regLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6749_tmp_bits;\
	BM_NwEntryMsgLatency_L3_regLatency_GET_SIZE( base_ptr, out_bytes, bmlocal6749_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6749_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_regLatency_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6752_acc_bytes;\
	UINT bmlocal6753_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6752_acc_bytes = 16;\
	bmlocal6753_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6752_acc_bytes );\
	out_bitoff += bmlocal6753_acc_bits;\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6754_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS( base_ptr, out_ptr, bmlocal6754_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6754_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_POS_ALIGNED 16

// Alignment of NwEntryMsgLatency_L3_dsaLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_dsaLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6755_my_ptr;\
	UINT bmlocal6756_my_bitoff;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS( base_ptr, bmlocal6755_my_ptr, bmlocal6756_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6755_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6755_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6755_my_ptr, bmlocal6756_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6757_my_ptr;\
	UINT bmlocal6758_my_bitoff;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS( base_ptr, bmlocal6757_my_ptr, bmlocal6758_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6757_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6757_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6757_my_ptr, bmlocal6758_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_dsaLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_dsaLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_dsaLatency: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_dsaLatency: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_dsaLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_dsaLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_dsaLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6759_out_val;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET( base_ptr, bmlocal6759_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dsaLatency", 32, (UINT)(bmlocal6759_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_dsaLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6760_my_ptr;\
	UINT bmlocal6761_my_bitoff;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET_POS( base_ptr, bmlocal6760_my_ptr, bmlocal6761_my_bitoff );\
	(*((UINT32*)bmlocal6760_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6761_my_bitoff );\
}

// NwEntryMsgLatency_L3_dsaLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_dsaLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6762_tmp_bits;\
	BM_NwEntryMsgLatency_L3_dsaLatency_GET_SIZE( base_ptr, out_bytes, bmlocal6762_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6762_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_dsaLatency_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6765_acc_bytes;\
	UINT bmlocal6766_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6765_acc_bytes = 20;\
	bmlocal6766_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6765_acc_bytes );\
	out_bitoff += bmlocal6766_acc_bits;\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6767_tmp_bitoff;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS( base_ptr, out_ptr, bmlocal6767_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6767_tmp_bitoff);\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_POS_ALIGNED 20

// Alignment of NwEntryMsgLatency_L3_setuUpTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NwEntryMsgLatency_L3_setuUpTime_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6768_my_ptr;\
	UINT bmlocal6769_my_bitoff;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS( base_ptr, bmlocal6768_my_ptr, bmlocal6769_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6768_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6768_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6768_my_ptr, bmlocal6769_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6770_my_ptr;\
	UINT bmlocal6771_my_bitoff;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS( base_ptr, bmlocal6770_my_ptr, bmlocal6771_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6770_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6770_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6770_my_ptr, bmlocal6771_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// NwEntryMsgLatency_L3_setuUpTime: IS_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_setuUpTime: SET_DEFAULT accessor is not defined because no default value was specified.
// NwEntryMsgLatency_L3_setuUpTime: IS_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_setuUpTime: SET_RESET accessor is not defined because no reset value was specified.
// NwEntryMsgLatency_L3_setuUpTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NwEntryMsgLatency_L3_setuUpTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NwEntryMsgLatency_L3_setuUpTime_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal6772_out_val;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET( base_ptr, bmlocal6772_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "setuUpTime", 32, (UINT)(bmlocal6772_out_val), "%d", 1);\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_setuUpTime_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6773_my_ptr;\
	UINT bmlocal6774_my_bitoff;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET_POS( base_ptr, bmlocal6773_my_ptr, bmlocal6774_my_bitoff );\
	(*((UINT32*)bmlocal6773_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6774_my_bitoff );\
}

// NwEntryMsgLatency_L3_setuUpTime: Validation accessors are not defined because validation condition was not specified.
#define BM_NwEntryMsgLatency_L3_setuUpTime_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6775_tmp_bits;\
	BM_NwEntryMsgLatency_L3_setuUpTime_GET_SIZE( base_ptr, out_bytes, bmlocal6775_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6775_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_setuUpTime_BYTES_SIZE 4

#define BM_NwEntryMsgLatency_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 24;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6778_tmp_bits;\
	BM_NwEntryMsgLatency_L3_GET_SIZE( base_ptr, out_bytes, bmlocal6778_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6778_tmp_bits );\
}

#define BM_NwEntryMsgLatency_L3_BYTES_SIZE 24

#define BM_NwEntryMsgLatency_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NwEntryMsgLatency_L3", 1);\
	BM_NwEntryMsgLatency_L3_initRengLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NwEntryMsgLatency_L3_sbcLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NwEntryMsgLatency_L3_pkmLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NwEntryMsgLatency_L3_regLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NwEntryMsgLatency_L3_dsaLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NwEntryMsgLatency_L3_setuUpTime_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NwEntryMsgLatency_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NwEntryMsgLatency_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BmBurstProfile[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _intervalUsageCode : 8; //uiuc for Up link, diuc for down link
	FecType _fecType : 8;
	FecRate _fecRate : 8;
	Modulation _modulation : 8;
} BMS_BmBurstProfile;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	Modulation _modulation : 8;
	FecRate _fecRate : 8;
	FecType _fecType : 8;
	UINT8 _intervalUsageCode : 8; //uiuc for Up link, diuc for down link
} BMS_BmBurstProfile;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BmBurstProfile' Type: 'BmBurstProfile', Top-level, Non-instance, No bitoff root
#define BM_BmBurstProfile_intervalUsageCode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BmBurstProfile_intervalUsageCode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6779_tmp_bitoff;\
	BM_BmBurstProfile_intervalUsageCode_GET_POS( base_ptr, out_ptr, bmlocal6779_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6779_tmp_bitoff);\
}

#define BM_BmBurstProfile_intervalUsageCode_POS_ALIGNED 0

// Alignment of BmBurstProfile_intervalUsageCode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BmBurstProfile_intervalUsageCode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_intervalUsageCode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6780_my_ptr;\
	UINT bmlocal6781_my_bitoff;\
	BM_BmBurstProfile_intervalUsageCode_GET_POS( base_ptr, bmlocal6780_my_ptr, bmlocal6781_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6780_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6780_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6780_my_ptr, bmlocal6781_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_BmBurstProfile_intervalUsageCode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6782_my_ptr;\
	UINT bmlocal6783_my_bitoff;\
	BM_BmBurstProfile_intervalUsageCode_GET_POS( base_ptr, bmlocal6782_my_ptr, bmlocal6783_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6782_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6782_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6782_my_ptr, bmlocal6783_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// BmBurstProfile_intervalUsageCode: IS_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_intervalUsageCode: SET_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_intervalUsageCode: IS_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_intervalUsageCode: SET_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_intervalUsageCode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BmBurstProfile_intervalUsageCode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BmBurstProfile_intervalUsageCode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6784_out_val;\
	BM_BmBurstProfile_intervalUsageCode_GET( base_ptr, bmlocal6784_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "intervalUsageCode", 8, (UINT)(bmlocal6784_out_val), "%d", 1);\
}

#define BM_BmBurstProfile_intervalUsageCode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BmBurstProfile_intervalUsageCode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BmBurstProfile_intervalUsageCode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6785_my_ptr;\
	UINT bmlocal6786_my_bitoff;\
	BM_BmBurstProfile_intervalUsageCode_GET_POS( base_ptr, bmlocal6785_my_ptr, bmlocal6786_my_bitoff );\
	(*((UINT8*)bmlocal6785_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6786_my_bitoff );\
}

// BmBurstProfile_intervalUsageCode: Validation accessors are not defined because validation condition was not specified.
#define BM_BmBurstProfile_intervalUsageCode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6787_tmp_bits;\
	BM_BmBurstProfile_intervalUsageCode_GET_SIZE( base_ptr, out_bytes, bmlocal6787_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6787_tmp_bits );\
}

#define BM_BmBurstProfile_intervalUsageCode_BYTES_SIZE 1

#define BM_BmBurstProfile_fecType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6790_acc_bytes;\
	UINT bmlocal6791_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6790_acc_bytes = 1;\
	bmlocal6791_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6790_acc_bytes );\
	out_bitoff += bmlocal6791_acc_bits;\
}

#define BM_BmBurstProfile_fecType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6792_tmp_bitoff;\
	BM_BmBurstProfile_fecType_GET_POS( base_ptr, out_ptr, bmlocal6792_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6792_tmp_bitoff);\
}

#define BM_BmBurstProfile_fecType_POS_ALIGNED 1

// Alignment of BmBurstProfile_fecType: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BmBurstProfile_fecType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_fecType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6793_my_ptr;\
	UINT bmlocal6794_my_bitoff;\
	BM_BmBurstProfile_fecType_GET_POS( base_ptr, bmlocal6793_my_ptr, bmlocal6794_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6793_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6793_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6793_my_ptr, bmlocal6794_my_bitoff, 8, FecType, out_val, 0x00000001 );\
	}\
}

#define BM_BmBurstProfile_fecType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6795_my_ptr;\
	UINT bmlocal6796_my_bitoff;\
	BM_BmBurstProfile_fecType_GET_POS( base_ptr, bmlocal6795_my_ptr, bmlocal6796_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6795_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6795_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6795_my_ptr, bmlocal6796_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// BmBurstProfile_fecType: IS_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_fecType: SET_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_fecType: IS_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_fecType: SET_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_fecType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BmBurstProfile_fecType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BmBurstProfile_fecType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	FecType bmlocal6797_out_val;\
	BM_BmBurstProfile_fecType_GET( base_ptr, bmlocal6797_out_val );\
	if( bmlocal6797_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CC", 1);\
	}\
	if( bmlocal6797_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_BTC", 1);\
	}\
	if( bmlocal6797_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CTC", 1);\
	}\
	if( bmlocal6797_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_ZTCC", 1);\
	}\
	if( bmlocal6797_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eNUM_OF_FEC_TYPES", 1);\
	}\
}

#define BM_BmBurstProfile_fecType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BmBurstProfile_fecType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BmBurstProfile_fecType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6798_my_ptr;\
	UINT bmlocal6799_my_bitoff;\
	BM_BmBurstProfile_fecType_GET_POS( base_ptr, bmlocal6798_my_ptr, bmlocal6799_my_bitoff );\
	(*((UINT8*)bmlocal6798_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6799_my_bitoff );\
}

// BmBurstProfile_fecType: Validation accessors are not defined because validation condition was not specified.
#define BM_BmBurstProfile_fecType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6800_tmp_bits;\
	BM_BmBurstProfile_fecType_GET_SIZE( base_ptr, out_bytes, bmlocal6800_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6800_tmp_bits );\
}

#define BM_BmBurstProfile_fecType_BYTES_SIZE 1

#define BM_BmBurstProfile_fecRate_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6803_acc_bytes;\
	UINT bmlocal6804_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6803_acc_bytes = 2;\
	bmlocal6804_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6803_acc_bytes );\
	out_bitoff += bmlocal6804_acc_bits;\
}

#define BM_BmBurstProfile_fecRate_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6805_tmp_bitoff;\
	BM_BmBurstProfile_fecRate_GET_POS( base_ptr, out_ptr, bmlocal6805_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6805_tmp_bitoff);\
}

#define BM_BmBurstProfile_fecRate_POS_ALIGNED 2

// Alignment of BmBurstProfile_fecRate: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BmBurstProfile_fecRate_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_fecRate_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6806_my_ptr;\
	UINT bmlocal6807_my_bitoff;\
	BM_BmBurstProfile_fecRate_GET_POS( base_ptr, bmlocal6806_my_ptr, bmlocal6807_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecRate)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6806_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecRate)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6806_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6806_my_ptr, bmlocal6807_my_bitoff, 8, FecRate, out_val, 0x00000002 );\
	}\
}

#define BM_BmBurstProfile_fecRate_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6808_my_ptr;\
	UINT bmlocal6809_my_bitoff;\
	BM_BmBurstProfile_fecRate_GET_POS( base_ptr, bmlocal6808_my_ptr, bmlocal6809_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6808_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6808_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6808_my_ptr, bmlocal6809_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// BmBurstProfile_fecRate: IS_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_fecRate: SET_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_fecRate: IS_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_fecRate: SET_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_fecRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BmBurstProfile_fecRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BmBurstProfile_fecRate_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	FecRate bmlocal6810_out_val;\
	BM_BmBurstProfile_fecRate_GET( base_ptr, bmlocal6810_out_val );\
	if( bmlocal6810_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_1_2", 1);\
	}\
	if( bmlocal6810_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_2_3", 1);\
	}\
	if( bmlocal6810_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_4", 1);\
	}\
	if( bmlocal6810_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_6", 1);\
	}\
	if( bmlocal6810_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_5", 1);\
	}\
	if( bmlocal6810_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_4_5", 1);\
	}\
	if( bmlocal6810_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_8", 1);\
	}\
	if( bmlocal6810_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eNUM_OF_FEC_RATES", 1);\
	}\
}

#define BM_BmBurstProfile_fecRate_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BmBurstProfile_fecRate_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BmBurstProfile_fecRate_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6811_my_ptr;\
	UINT bmlocal6812_my_bitoff;\
	BM_BmBurstProfile_fecRate_GET_POS( base_ptr, bmlocal6811_my_ptr, bmlocal6812_my_bitoff );\
	(*((UINT8*)bmlocal6811_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6812_my_bitoff );\
}

// BmBurstProfile_fecRate: Validation accessors are not defined because validation condition was not specified.
#define BM_BmBurstProfile_fecRate_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6813_tmp_bits;\
	BM_BmBurstProfile_fecRate_GET_SIZE( base_ptr, out_bytes, bmlocal6813_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6813_tmp_bits );\
}

#define BM_BmBurstProfile_fecRate_BYTES_SIZE 1

#define BM_BmBurstProfile_modulation_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6816_acc_bytes;\
	UINT bmlocal6817_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6816_acc_bytes = 3;\
	bmlocal6817_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6816_acc_bytes );\
	out_bitoff += bmlocal6817_acc_bits;\
}

#define BM_BmBurstProfile_modulation_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6818_tmp_bitoff;\
	BM_BmBurstProfile_modulation_GET_POS( base_ptr, out_ptr, bmlocal6818_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6818_tmp_bitoff);\
}

#define BM_BmBurstProfile_modulation_POS_ALIGNED 3

// Alignment of BmBurstProfile_modulation: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BmBurstProfile_modulation_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_modulation_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6819_my_ptr;\
	UINT bmlocal6820_my_bitoff;\
	BM_BmBurstProfile_modulation_GET_POS( base_ptr, bmlocal6819_my_ptr, bmlocal6820_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (Modulation)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6819_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (Modulation)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6819_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6819_my_ptr, bmlocal6820_my_bitoff, 8, Modulation, out_val, 0x00000003 );\
	}\
}

#define BM_BmBurstProfile_modulation_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6821_my_ptr;\
	UINT bmlocal6822_my_bitoff;\
	BM_BmBurstProfile_modulation_GET_POS( base_ptr, bmlocal6821_my_ptr, bmlocal6822_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6821_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6821_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6821_my_ptr, bmlocal6822_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// BmBurstProfile_modulation: IS_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_modulation: SET_DEFAULT accessor is not defined because no default value was specified.
// BmBurstProfile_modulation: IS_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_modulation: SET_RESET accessor is not defined because no reset value was specified.
// BmBurstProfile_modulation: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BmBurstProfile_modulation: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BmBurstProfile_modulation_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	Modulation bmlocal6823_out_val;\
	BM_BmBurstProfile_modulation_GET( base_ptr, bmlocal6823_out_val );\
	if( bmlocal6823_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QPSK", 1);\
	}\
	if( bmlocal6823_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM16", 1);\
	}\
	if( bmlocal6823_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM64", 1);\
	}\
	if( bmlocal6823_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eNUM_OF_MODULATIONS", 1);\
	}\
}

#define BM_BmBurstProfile_modulation_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BmBurstProfile_modulation_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BmBurstProfile_modulation_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6824_my_ptr;\
	UINT bmlocal6825_my_bitoff;\
	BM_BmBurstProfile_modulation_GET_POS( base_ptr, bmlocal6824_my_ptr, bmlocal6825_my_bitoff );\
	(*((UINT8*)bmlocal6824_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6825_my_bitoff );\
}

// BmBurstProfile_modulation: Validation accessors are not defined because validation condition was not specified.
#define BM_BmBurstProfile_modulation_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6826_tmp_bits;\
	BM_BmBurstProfile_modulation_GET_SIZE( base_ptr, out_bytes, bmlocal6826_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6826_tmp_bits );\
}

#define BM_BmBurstProfile_modulation_BYTES_SIZE 1

#define BM_BmBurstProfile_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6829_tmp_bits;\
	BM_BmBurstProfile_GET_SIZE( base_ptr, out_bytes, bmlocal6829_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6829_tmp_bits );\
}

#define BM_BmBurstProfile_BYTES_SIZE 4

#define BM_BmBurstProfile_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BmBurstProfile", 1);\
	BM_BmBurstProfile_intervalUsageCode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BmBurstProfile_fecType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BmBurstProfile_fecRate_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BmBurstProfile_modulation_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BmBurstProfile_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BmBurstProfile_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 McsIndexTable_L3[4];

// COMPOSITE: Full name: 'McsIndexTable_L3' Type: 'McsIndexTable_L3', Top-level, Non-instance, No bitoff root
#define BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6830_tmp_bitoff;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS( base_ptr, out_ptr, bmlocal6830_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6830_tmp_bitoff);\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_POS_ALIGNED 0

// Alignment of McsIndexTable_L3_NumDlburstProfiles: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_NumDlburstProfiles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6831_my_ptr;\
	UINT bmlocal6832_my_bitoff;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS( base_ptr, bmlocal6831_my_ptr, bmlocal6832_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6831_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6831_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6831_my_ptr, bmlocal6832_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6833_my_ptr;\
	UINT bmlocal6834_my_bitoff;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS( base_ptr, bmlocal6833_my_ptr, bmlocal6834_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6833_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6833_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6833_my_ptr, bmlocal6834_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// McsIndexTable_L3_NumDlburstProfiles: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_NumDlburstProfiles: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_NumDlburstProfiles: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_NumDlburstProfiles: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_NumDlburstProfiles: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_NumDlburstProfiles: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_NumDlburstProfiles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6835_out_val;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET( base_ptr, bmlocal6835_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumDlburstProfiles", 8, (UINT)(bmlocal6835_out_val), "%d", 1);\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_NumDlburstProfiles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6836_my_ptr;\
	UINT bmlocal6837_my_bitoff;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET_POS( base_ptr, bmlocal6836_my_ptr, bmlocal6837_my_bitoff );\
	(*((UINT8*)bmlocal6836_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6837_my_bitoff );\
}

// McsIndexTable_L3_NumDlburstProfiles: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_NumDlburstProfiles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6838_tmp_bits;\
	BM_McsIndexTable_L3_NumDlburstProfiles_GET_SIZE( base_ptr, out_bytes, bmlocal6838_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6838_tmp_bits );\
}

#define BM_McsIndexTable_L3_NumDlburstProfiles_BYTES_SIZE 1

#define BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6841_acc_bytes;\
	UINT bmlocal6842_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6841_acc_bytes = 1;\
	bmlocal6842_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6841_acc_bytes );\
	out_bitoff += bmlocal6842_acc_bits;\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6843_tmp_bitoff;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS( base_ptr, out_ptr, bmlocal6843_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6843_tmp_bitoff);\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_POS_ALIGNED 1

// Alignment of McsIndexTable_L3_NumUlburstProfiles: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_NumUlburstProfiles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6844_my_ptr;\
	UINT bmlocal6845_my_bitoff;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS( base_ptr, bmlocal6844_my_ptr, bmlocal6845_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6844_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6844_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6844_my_ptr, bmlocal6845_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6846_my_ptr;\
	UINT bmlocal6847_my_bitoff;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS( base_ptr, bmlocal6846_my_ptr, bmlocal6847_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6846_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6846_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6846_my_ptr, bmlocal6847_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// McsIndexTable_L3_NumUlburstProfiles: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_NumUlburstProfiles: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_NumUlburstProfiles: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_NumUlburstProfiles: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_NumUlburstProfiles: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_NumUlburstProfiles: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_NumUlburstProfiles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6848_out_val;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET( base_ptr, bmlocal6848_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumUlburstProfiles", 8, (UINT)(bmlocal6848_out_val), "%d", 1);\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_NumUlburstProfiles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6849_my_ptr;\
	UINT bmlocal6850_my_bitoff;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET_POS( base_ptr, bmlocal6849_my_ptr, bmlocal6850_my_bitoff );\
	(*((UINT8*)bmlocal6849_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6850_my_bitoff );\
}

// McsIndexTable_L3_NumUlburstProfiles: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_NumUlburstProfiles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6851_tmp_bits;\
	BM_McsIndexTable_L3_NumUlburstProfiles_GET_SIZE( base_ptr, out_bytes, bmlocal6851_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6851_tmp_bits );\
}

#define BM_McsIndexTable_L3_NumUlburstProfiles_BYTES_SIZE 1

#define BM_McsIndexTable_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6854_acc_bytes;\
	UINT bmlocal6855_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6854_acc_bytes = 2;\
	bmlocal6855_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6854_acc_bytes );\
	out_bitoff += bmlocal6855_acc_bits;\
}

#define BM_McsIndexTable_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6856_tmp_bitoff;\
	BM_McsIndexTable_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal6856_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6856_tmp_bitoff);\
}

#define BM_McsIndexTable_L3_reserved_POS_ALIGNED 2

#define BM_McsIndexTable_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6857_my_ptr;\
	UINT bmlocal6858_my_bitoff;\
	BM_McsIndexTable_L3_reserved_GET_POS( base_ptr, bmlocal6857_my_ptr, bmlocal6858_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6857_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6857_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6857_my_ptr, bmlocal6858_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_McsIndexTable_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6859_my_ptr;\
	UINT bmlocal6860_my_bitoff;\
	BM_McsIndexTable_L3_reserved_GET_POS( base_ptr, bmlocal6859_my_ptr, bmlocal6860_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6859_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6859_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6859_my_ptr, bmlocal6860_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_McsIndexTable_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal6861_out_bytes;\
	UINT bmlocal6862_out_bits;\
	BM_McsIndexTable_L3_reserved_GET_SIZE( base_ptr, bmlocal6861_out_bytes, bmlocal6862_out_bits );\
	bmlocal6862_out_bits += bmlocal6861_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal6862_out_bits), "%d", 1);\
}

#define BM_McsIndexTable_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_McsIndexTable_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6863_tmp_bits;\
	BM_McsIndexTable_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal6863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6863_tmp_bits );\
}

#define BM_McsIndexTable_L3_reserved_BYTES_SIZE 2

#define BM_McsIndexTable_L3_DlburstProfiles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6866_acc_bytes;\
	UINT bmlocal6867_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6866_acc_bytes = 4;\
	bmlocal6867_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6866_acc_bytes );\
	out_bitoff += bmlocal6867_acc_bits;\
}

#define BM_McsIndexTable_L3_DlburstProfiles_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6868_tmp_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_POS( base_ptr, out_ptr, bmlocal6868_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6868_tmp_bitoff);\
}

#define BM_McsIndexTable_L3_DlburstProfiles_POS_ALIGNED 4

// ARRAY: McsIndexTable_L3_DlburstProfiles
#define BM_McsIndexTable_L3_DlburstProfiles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal6869_var0;\
		BM_McsIndexTable_L3_NumDlburstProfiles_GET( base_ptr, bmlocal6869_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal6869_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal6870_var0;\
			BM_McsIndexTable_L3_NumDlburstProfiles_GET( base_ptr, bmlocal6870_var0 );\
			out_element_count = (UINT)(bmlocal6870_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6871_out_ptr;\
	UINT bmlocal6872_out_bitoff;\
	UINT bmlocal6873_element_size_bytes;\
	UINT bmlocal6874_element_size_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_POS( base_ptr, bmlocal6871_out_ptr, bmlocal6872_out_bitoff );\
	bmlocal6873_element_size_bytes = 4;\
	bmlocal6874_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal6871_out_ptr) + (idx0) * bmlocal6873_element_size_bytes );\
	out_bitoff = bmlocal6872_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal6874_element_size_bits );\
}

// COMPOSITE: Full name: 'McsIndexTable_L3_DlburstProfiles' Type: 'BmBurstProfile', Inner, Non-instance, No bitoff root
#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6875_parent_out_ptr;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6875_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6875_parent_out_ptr;\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6876_tmp_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, out_ptr, bmlocal6876_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6876_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_DlburstProfiles_intervalUsageCode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6877_my_ptr;\
	UINT bmlocal6878_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, bmlocal6877_my_ptr, bmlocal6878_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6877_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6877_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6877_my_ptr, bmlocal6878_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6879_my_ptr;\
	UINT bmlocal6880_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, bmlocal6879_my_ptr, bmlocal6880_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6879_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6879_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6879_my_ptr, bmlocal6880_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6881_out_val;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET( base_ptr, idx0, bmlocal6881_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "intervalUsageCode", 8, (UINT)(bmlocal6881_out_val), "%d", 1);\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6882_my_ptr;\
	UINT bmlocal6883_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, bmlocal6882_my_ptr, bmlocal6883_my_bitoff );\
	(*((UINT8*)bmlocal6882_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6883_my_bitoff );\
}

// McsIndexTable_L3_DlburstProfiles_intervalUsageCode: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6884_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6884_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6884_tmp_bits );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_BYTES_SIZE 1

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6887_acc_bytes;\
	UINT bmlocal6888_acc_bits;\
	PVOID bmlocal6889_parent_out_ptr;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6889_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6889_parent_out_ptr;\
	bmlocal6887_acc_bytes = 1;\
	bmlocal6888_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6887_acc_bytes );\
	out_bitoff += bmlocal6888_acc_bits;\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6890_tmp_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS( base_ptr, idx0, out_ptr, bmlocal6890_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6890_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_DlburstProfiles_fecType: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6891_my_ptr;\
	UINT bmlocal6892_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS( base_ptr, idx0, bmlocal6891_my_ptr, bmlocal6892_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6891_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6891_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6891_my_ptr, bmlocal6892_my_bitoff, 8, FecType, out_val, 0x00000001 );\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6893_my_ptr;\
	UINT bmlocal6894_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS( base_ptr, idx0, bmlocal6893_my_ptr, bmlocal6894_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6893_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6893_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6893_my_ptr, bmlocal6894_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// McsIndexTable_L3_DlburstProfiles_fecType: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_fecType: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_fecType: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_fecType: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_fecType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_DlburstProfiles_fecType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_DlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	FecType bmlocal6895_out_val;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET( base_ptr, idx0, bmlocal6895_out_val );\
	if( bmlocal6895_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CC", 1);\
	}\
	if( bmlocal6895_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_BTC", 1);\
	}\
	if( bmlocal6895_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CTC", 1);\
	}\
	if( bmlocal6895_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_ZTCC", 1);\
	}\
	if( bmlocal6895_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eNUM_OF_FEC_TYPES", 1);\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6896_my_ptr;\
	UINT bmlocal6897_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_POS( base_ptr, idx0, bmlocal6896_my_ptr, bmlocal6897_my_bitoff );\
	(*((UINT8*)bmlocal6896_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6897_my_bitoff );\
}

// McsIndexTable_L3_DlburstProfiles_fecType: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6898_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6898_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6898_tmp_bits );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecType_BYTES_SIZE 1

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6901_acc_bytes;\
	UINT bmlocal6902_acc_bits;\
	PVOID bmlocal6903_parent_out_ptr;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6903_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6903_parent_out_ptr;\
	bmlocal6901_acc_bytes = 2;\
	bmlocal6902_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6901_acc_bytes );\
	out_bitoff += bmlocal6902_acc_bits;\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6904_tmp_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS( base_ptr, idx0, out_ptr, bmlocal6904_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6904_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_DlburstProfiles_fecRate: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6905_my_ptr;\
	UINT bmlocal6906_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS( base_ptr, idx0, bmlocal6905_my_ptr, bmlocal6906_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecRate)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6905_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (FecRate)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6905_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6905_my_ptr, bmlocal6906_my_bitoff, 8, FecRate, out_val, 0x00000002 );\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6907_my_ptr;\
	UINT bmlocal6908_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS( base_ptr, idx0, bmlocal6907_my_ptr, bmlocal6908_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6907_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6907_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6907_my_ptr, bmlocal6908_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// McsIndexTable_L3_DlburstProfiles_fecRate: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_fecRate: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_fecRate: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_fecRate: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_fecRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_DlburstProfiles_fecRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	FecRate bmlocal6909_out_val;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET( base_ptr, idx0, bmlocal6909_out_val );\
	if( bmlocal6909_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_1_2", 1);\
	}\
	if( bmlocal6909_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_2_3", 1);\
	}\
	if( bmlocal6909_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_4", 1);\
	}\
	if( bmlocal6909_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_6", 1);\
	}\
	if( bmlocal6909_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_5", 1);\
	}\
	if( bmlocal6909_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_4_5", 1);\
	}\
	if( bmlocal6909_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_8", 1);\
	}\
	if( bmlocal6909_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eNUM_OF_FEC_RATES", 1);\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6910_my_ptr;\
	UINT bmlocal6911_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_POS( base_ptr, idx0, bmlocal6910_my_ptr, bmlocal6911_my_bitoff );\
	(*((UINT8*)bmlocal6910_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6911_my_bitoff );\
}

// McsIndexTable_L3_DlburstProfiles_fecRate: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6912_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6912_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6912_tmp_bits );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_fecRate_BYTES_SIZE 1

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6915_acc_bytes;\
	UINT bmlocal6916_acc_bits;\
	PVOID bmlocal6917_parent_out_ptr;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6917_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6917_parent_out_ptr;\
	bmlocal6915_acc_bytes = 3;\
	bmlocal6916_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6915_acc_bytes );\
	out_bitoff += bmlocal6916_acc_bits;\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6918_tmp_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS( base_ptr, idx0, out_ptr, bmlocal6918_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6918_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_DlburstProfiles_modulation: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6919_my_ptr;\
	UINT bmlocal6920_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS( base_ptr, idx0, bmlocal6919_my_ptr, bmlocal6920_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (Modulation)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6919_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (Modulation)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6919_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6919_my_ptr, bmlocal6920_my_bitoff, 8, Modulation, out_val, 0x00000003 );\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6921_my_ptr;\
	UINT bmlocal6922_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS( base_ptr, idx0, bmlocal6921_my_ptr, bmlocal6922_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6921_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal6921_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6921_my_ptr, bmlocal6922_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// McsIndexTable_L3_DlburstProfiles_modulation: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_modulation: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_DlburstProfiles_modulation: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_modulation: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_DlburstProfiles_modulation: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_DlburstProfiles_modulation: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_DlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	Modulation bmlocal6923_out_val;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET( base_ptr, idx0, bmlocal6923_out_val );\
	if( bmlocal6923_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QPSK", 1);\
	}\
	if( bmlocal6923_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM16", 1);\
	}\
	if( bmlocal6923_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM64", 1);\
	}\
	if( bmlocal6923_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eNUM_OF_MODULATIONS", 1);\
	}\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6924_my_ptr;\
	UINT bmlocal6925_my_bitoff;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_POS( base_ptr, idx0, bmlocal6924_my_ptr, bmlocal6925_my_bitoff );\
	(*((UINT8*)bmlocal6924_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal6925_my_bitoff );\
}

// McsIndexTable_L3_DlburstProfiles_modulation: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6926_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6926_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6926_tmp_bits );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_modulation_BYTES_SIZE 1

#define BM_McsIndexTable_L3_DlburstProfiles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6929_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal6929_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6929_tmp_bits );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_BYTES_CELL_SIZE 4

#define BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_DlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_DlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_DlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal6930_dim_size0;\
	UINT bmlocal6931_idx0;\
	{\
		UINT8 bmlocal6932_var0;\
		BM_McsIndexTable_L3_NumDlburstProfiles_GET( base_ptr, bmlocal6932_var0 );\
		bmlocal6930_dim_size0 = (UINT)(bmlocal6932_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DlburstProfiles", 1);\
	for( bmlocal6931_idx0=0; bmlocal6931_idx0<bmlocal6930_dim_size0; bmlocal6931_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal6931_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH_IDX( base_ptr, bmlocal6931_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_McsIndexTable_L3_DlburstProfiles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6933_tmp_bits;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_SIZE( base_ptr, out_bytes, bmlocal6933_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6933_tmp_bits );\
}


#define BM_McsIndexTable_L3_UlburstProfiles_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6934_tmp_bytes = 0;\
	UINT bmlocal6935_tmp_bits = 0;\
	UINT bmlocal6936_acc_bytes;\
	UINT bmlocal6937_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal6936_acc_bytes = 4;\
	bmlocal6937_acc_bits = 0;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_SIZE( base_ptr, bmlocal6934_tmp_bytes, bmlocal6935_tmp_bits );\
	bmlocal6936_acc_bytes += bmlocal6934_tmp_bytes;\
	bmlocal6937_acc_bits += bmlocal6935_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6936_acc_bytes );\
	out_bitoff += bmlocal6937_acc_bits;\
}

// ARRAY: McsIndexTable_L3_UlburstProfiles
#define BM_McsIndexTable_L3_UlburstProfiles_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal6938_var0;\
		BM_McsIndexTable_L3_NumUlburstProfiles_GET( base_ptr, bmlocal6938_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal6938_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal6939_var0;\
			BM_McsIndexTable_L3_NumUlburstProfiles_GET( base_ptr, bmlocal6939_var0 );\
			out_element_count = (UINT)(bmlocal6939_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6940_out_ptr;\
	UINT bmlocal6941_out_bitoff;\
	UINT bmlocal6942_element_size_bytes;\
	UINT bmlocal6943_element_size_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_POS( base_ptr, bmlocal6940_out_ptr, bmlocal6941_out_bitoff );\
	bmlocal6942_element_size_bytes = 4;\
	bmlocal6943_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal6940_out_ptr) + (idx0) * bmlocal6942_element_size_bytes );\
	out_bitoff = bmlocal6941_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal6943_element_size_bits );\
}

// COMPOSITE: Full name: 'McsIndexTable_L3_UlburstProfiles' Type: 'BmBurstProfile', Inner, Non-instance, No bitoff root
#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6944_parent_out_ptr;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6944_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6944_parent_out_ptr;\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6945_tmp_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, out_ptr, bmlocal6945_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6945_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_UlburstProfiles_intervalUsageCode: accumulated=(Variable), parent.base=(Variable)
#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6946_my_ptr;\
	UINT bmlocal6947_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, bmlocal6946_my_ptr, bmlocal6947_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6946_my_ptr, bmlocal6947_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6948_my_ptr;\
	UINT bmlocal6949_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_POS( base_ptr, idx0, bmlocal6948_my_ptr, bmlocal6949_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6948_my_ptr, bmlocal6949_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6950_out_val;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET( base_ptr, idx0, bmlocal6950_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "intervalUsageCode", 8, (UINT)(bmlocal6950_out_val), "%d", 1);\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal6951_val;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET( base_ptr, idx0, bmlocal6951_val );\
	(bmlocal6951_val)++;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_SET( base_ptr, idx0, bmlocal6951_val );\
}

// McsIndexTable_L3_UlburstProfiles_intervalUsageCode: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6952_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6952_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6952_tmp_bits );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_BYTES_SIZE 1

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6955_acc_bytes;\
	UINT bmlocal6956_acc_bits;\
	PVOID bmlocal6957_parent_out_ptr;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6957_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6957_parent_out_ptr;\
	bmlocal6955_acc_bytes = 1;\
	bmlocal6956_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6955_acc_bytes );\
	out_bitoff += bmlocal6956_acc_bits;\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6958_tmp_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_POS( base_ptr, idx0, out_ptr, bmlocal6958_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6958_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_UlburstProfiles_fecType: accumulated=(Variable), parent.base=(Variable)
#define BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6959_my_ptr;\
	UINT bmlocal6960_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_POS( base_ptr, idx0, bmlocal6959_my_ptr, bmlocal6960_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6959_my_ptr, bmlocal6960_my_bitoff, 8, FecType, out_val, 0xFFFFFFFF );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6961_my_ptr;\
	UINT bmlocal6962_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_POS( base_ptr, idx0, bmlocal6961_my_ptr, bmlocal6962_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6961_my_ptr, bmlocal6962_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// McsIndexTable_L3_UlburstProfiles_fecType: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_fecType: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_fecType: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_fecType: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_fecType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_UlburstProfiles_fecType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_UlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	FecType bmlocal6963_out_val;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET( base_ptr, idx0, bmlocal6963_out_val );\
	if( bmlocal6963_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CC", 1);\
	}\
	if( bmlocal6963_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_BTC", 1);\
	}\
	if( bmlocal6963_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_CTC", 1);\
	}\
	if( bmlocal6963_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eFEC_TYPE_ZTCC", 1);\
	}\
	if( bmlocal6963_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecType", "eNUM_OF_FEC_TYPES", 1);\
	}\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	FecType bmlocal6964_val;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET( base_ptr, idx0, bmlocal6964_val );\
	(bmlocal6964_val)++;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_SET( base_ptr, idx0, bmlocal6964_val );\
}

// McsIndexTable_L3_UlburstProfiles_fecType: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6965_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6965_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6965_tmp_bits );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecType_BYTES_SIZE 1

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6968_acc_bytes;\
	UINT bmlocal6969_acc_bits;\
	PVOID bmlocal6970_parent_out_ptr;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6970_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6970_parent_out_ptr;\
	bmlocal6968_acc_bytes = 2;\
	bmlocal6969_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6968_acc_bytes );\
	out_bitoff += bmlocal6969_acc_bits;\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6971_tmp_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_POS( base_ptr, idx0, out_ptr, bmlocal6971_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6971_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_UlburstProfiles_fecRate: accumulated=(Variable), parent.base=(Variable)
#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6972_my_ptr;\
	UINT bmlocal6973_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_POS( base_ptr, idx0, bmlocal6972_my_ptr, bmlocal6973_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6972_my_ptr, bmlocal6973_my_bitoff, 8, FecRate, out_val, 0xFFFFFFFF );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6974_my_ptr;\
	UINT bmlocal6975_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_POS( base_ptr, idx0, bmlocal6974_my_ptr, bmlocal6975_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6974_my_ptr, bmlocal6975_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// McsIndexTable_L3_UlburstProfiles_fecRate: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_fecRate: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_fecRate: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_fecRate: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_fecRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_UlburstProfiles_fecRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	FecRate bmlocal6976_out_val;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET( base_ptr, idx0, bmlocal6976_out_val );\
	if( bmlocal6976_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_1_2", 1);\
	}\
	if( bmlocal6976_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_2_3", 1);\
	}\
	if( bmlocal6976_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_4", 1);\
	}\
	if( bmlocal6976_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_6", 1);\
	}\
	if( bmlocal6976_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_3_5", 1);\
	}\
	if( bmlocal6976_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_4_5", 1);\
	}\
	if( bmlocal6976_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eFEC_RATE_5_8", 1);\
	}\
	if( bmlocal6976_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "fecRate", "eNUM_OF_FEC_RATES", 1);\
	}\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	FecRate bmlocal6977_val;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET( base_ptr, idx0, bmlocal6977_val );\
	(bmlocal6977_val)++;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_SET( base_ptr, idx0, bmlocal6977_val );\
}

// McsIndexTable_L3_UlburstProfiles_fecRate: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6978_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6978_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6978_tmp_bits );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_fecRate_BYTES_SIZE 1

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal6981_acc_bytes;\
	UINT bmlocal6982_acc_bits;\
	PVOID bmlocal6983_parent_out_ptr;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_ELEMENT_POS( base_ptr, idx0, bmlocal6983_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal6983_parent_out_ptr;\
	bmlocal6981_acc_bytes = 3;\
	bmlocal6982_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal6981_acc_bytes );\
	out_bitoff += bmlocal6982_acc_bits;\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal6984_tmp_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_POS( base_ptr, idx0, out_ptr, bmlocal6984_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal6984_tmp_bitoff);\
}

// Alignment of McsIndexTable_L3_UlburstProfiles_modulation: accumulated=(Variable), parent.base=(Variable)
#define BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6985_my_ptr;\
	UINT bmlocal6986_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_POS( base_ptr, idx0, bmlocal6985_my_ptr, bmlocal6986_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal6985_my_ptr, bmlocal6986_my_bitoff, 8, Modulation, out_val, 0xFFFFFFFF );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal6987_my_ptr;\
	UINT bmlocal6988_my_bitoff;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_POS( base_ptr, idx0, bmlocal6987_my_ptr, bmlocal6988_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal6987_my_ptr, bmlocal6988_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// McsIndexTable_L3_UlburstProfiles_modulation: IS_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_modulation: SET_DEFAULT accessor is not defined because no default value was specified.
// McsIndexTable_L3_UlburstProfiles_modulation: IS_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_modulation: SET_RESET accessor is not defined because no reset value was specified.
// McsIndexTable_L3_UlburstProfiles_modulation: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// McsIndexTable_L3_UlburstProfiles_modulation: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_McsIndexTable_L3_UlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	Modulation bmlocal6989_out_val;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET( base_ptr, idx0, bmlocal6989_out_val );\
	if( bmlocal6989_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QPSK", 1);\
	}\
	if( bmlocal6989_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM16", 1);\
	}\
	if( bmlocal6989_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eMOD_QAM64", 1);\
	}\
	if( bmlocal6989_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "modulation", "eNUM_OF_MODULATIONS", 1);\
	}\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	Modulation bmlocal6990_val;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET( base_ptr, idx0, bmlocal6990_val );\
	(bmlocal6990_val)++;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_SET( base_ptr, idx0, bmlocal6990_val );\
}

// McsIndexTable_L3_UlburstProfiles_modulation: Validation accessors are not defined because validation condition was not specified.
#define BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6991_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal6991_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6991_tmp_bits );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_modulation_BYTES_SIZE 1

#define BM_McsIndexTable_L3_UlburstProfiles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6994_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal6994_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6994_tmp_bits );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_BYTES_CELL_SIZE 4

#define BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_intervalUsageCode_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_UlburstProfiles_fecType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_UlburstProfiles_fecRate_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_McsIndexTable_L3_UlburstProfiles_modulation_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal6995_dim_size0;\
	UINT bmlocal6996_idx0;\
	{\
		UINT8 bmlocal6997_var0;\
		BM_McsIndexTable_L3_NumUlburstProfiles_GET( base_ptr, bmlocal6997_var0 );\
		bmlocal6995_dim_size0 = (UINT)(bmlocal6997_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "UlburstProfiles", 1);\
	for( bmlocal6996_idx0=0; bmlocal6996_idx0<bmlocal6995_dim_size0; bmlocal6996_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal6996_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH_IDX( base_ptr, bmlocal6996_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_McsIndexTable_L3_UlburstProfiles_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal6998_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_SIZE( base_ptr, out_bytes, bmlocal6998_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal6998_tmp_bits );\
}


#define BM_McsIndexTable_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal6999_tmp_bytes = 0;\
	UINT bmlocal7000_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_McsIndexTable_L3_DlburstProfiles_GET_SIZE( base_ptr, bmlocal6999_tmp_bytes, bmlocal7000_tmp_bits );\
	out_bytes += bmlocal6999_tmp_bytes;\
	out_bits += bmlocal7000_tmp_bits;\
	BM_McsIndexTable_L3_UlburstProfiles_GET_SIZE( base_ptr, bmlocal6999_tmp_bytes, bmlocal7000_tmp_bits );\
	out_bytes += bmlocal6999_tmp_bytes;\
	out_bits += bmlocal7000_tmp_bits;\
}

#define BM_McsIndexTable_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7001_tmp_bits;\
	BM_McsIndexTable_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7001_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7001_tmp_bits );\
}

#define BM_McsIndexTable_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "McsIndexTable_L3", 1);\
	BM_McsIndexTable_L3_NumDlburstProfiles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_McsIndexTable_L3_NumUlburstProfiles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_McsIndexTable_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_McsIndexTable_L3_DlburstProfiles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_McsIndexTable_L3_UlburstProfiles_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_McsIndexTable_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_McsIndexTable_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CoordinateHo_L3[52];

// COMPOSITE: Full name: 'CoordinateHo_L3' Type: 'CoordinateHo_L3', Top-level, Non-instance, No bitoff root
#define BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7002_tmp_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS( base_ptr, out_ptr, bmlocal7002_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7002_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_POS_ALIGNED 0

// Alignment of CoordinateHo_L3_numOfBsInHoReq: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_numOfBsInHoReq_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7003_my_ptr;\
	UINT bmlocal7004_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS( base_ptr, bmlocal7003_my_ptr, bmlocal7004_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7003_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7003_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7003_my_ptr, bmlocal7004_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7005_my_ptr;\
	UINT bmlocal7006_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS( base_ptr, bmlocal7005_my_ptr, bmlocal7006_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7005_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7005_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7005_my_ptr, bmlocal7006_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_numOfBsInHoReq: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numOfBsInHoReq: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numOfBsInHoReq: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numOfBsInHoReq: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numOfBsInHoReq: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_numOfBsInHoReq: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_numOfBsInHoReq_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7007_out_val;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET( base_ptr, bmlocal7007_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBsInHoReq", 8, (UINT)(bmlocal7007_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_numOfBsInHoReq_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7008_my_ptr;\
	UINT bmlocal7009_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET_POS( base_ptr, bmlocal7008_my_ptr, bmlocal7009_my_bitoff );\
	(*((UINT8*)bmlocal7008_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7009_my_bitoff );\
}

// CoordinateHo_L3_numOfBsInHoReq: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_numOfBsInHoReq_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7010_tmp_bits;\
	BM_CoordinateHo_L3_numOfBsInHoReq_GET_SIZE( base_ptr, out_bytes, bmlocal7010_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7010_tmp_bits );\
}

#define BM_CoordinateHo_L3_numOfBsInHoReq_BYTES_SIZE 1

#define BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7013_acc_bytes;\
	UINT bmlocal7014_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7013_acc_bytes = 1;\
	bmlocal7014_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7013_acc_bytes );\
	out_bitoff += bmlocal7014_acc_bits;\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7015_tmp_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS( base_ptr, out_ptr, bmlocal7015_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7015_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_POS_ALIGNED 1

// Alignment of CoordinateHo_L3_numOfBsInHoRsp: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_numOfBsInHoRsp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7016_my_ptr;\
	UINT bmlocal7017_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS( base_ptr, bmlocal7016_my_ptr, bmlocal7017_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7016_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7016_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7016_my_ptr, bmlocal7017_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7018_my_ptr;\
	UINT bmlocal7019_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS( base_ptr, bmlocal7018_my_ptr, bmlocal7019_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7018_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7018_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7018_my_ptr, bmlocal7019_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// CoordinateHo_L3_numOfBsInHoRsp: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numOfBsInHoRsp: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numOfBsInHoRsp: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numOfBsInHoRsp: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numOfBsInHoRsp: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_numOfBsInHoRsp: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_numOfBsInHoRsp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7020_out_val;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET( base_ptr, bmlocal7020_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBsInHoRsp", 8, (UINT)(bmlocal7020_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_numOfBsInHoRsp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7021_my_ptr;\
	UINT bmlocal7022_my_bitoff;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET_POS( base_ptr, bmlocal7021_my_ptr, bmlocal7022_my_bitoff );\
	(*((UINT8*)bmlocal7021_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7022_my_bitoff );\
}

// CoordinateHo_L3_numOfBsInHoRsp: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_numOfBsInHoRsp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7023_tmp_bits;\
	BM_CoordinateHo_L3_numOfBsInHoRsp_GET_SIZE( base_ptr, out_bytes, bmlocal7023_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7023_tmp_bits );\
}

#define BM_CoordinateHo_L3_numOfBsInHoRsp_BYTES_SIZE 1

#define BM_CoordinateHo_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7026_acc_bytes;\
	UINT bmlocal7027_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7026_acc_bytes = 2;\
	bmlocal7027_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7026_acc_bytes );\
	out_bitoff += bmlocal7027_acc_bits;\
}

#define BM_CoordinateHo_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7028_tmp_bitoff;\
	BM_CoordinateHo_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7028_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7028_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_reserved_POS_ALIGNED 2

#define BM_CoordinateHo_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7029_my_ptr;\
	UINT bmlocal7030_my_bitoff;\
	BM_CoordinateHo_L3_reserved_GET_POS( base_ptr, bmlocal7029_my_ptr, bmlocal7030_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7029_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7029_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7029_my_ptr, bmlocal7030_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7031_my_ptr;\
	UINT bmlocal7032_my_bitoff;\
	BM_CoordinateHo_L3_reserved_GET_POS( base_ptr, bmlocal7031_my_ptr, bmlocal7032_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7031_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7031_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7031_my_ptr, bmlocal7032_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7033_out_bytes;\
	UINT bmlocal7034_out_bits;\
	BM_CoordinateHo_L3_reserved_GET_SIZE( base_ptr, bmlocal7033_out_bytes, bmlocal7034_out_bits );\
	bmlocal7034_out_bits += bmlocal7033_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7034_out_bits), "%d", 1);\
}

#define BM_CoordinateHo_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7035_tmp_bits;\
	BM_CoordinateHo_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal7035_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7035_tmp_bits );\
}

#define BM_CoordinateHo_L3_reserved_BYTES_SIZE 2

#define BM_CoordinateHo_L3_HoSuccessCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7038_acc_bytes;\
	UINT bmlocal7039_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7038_acc_bytes = 4;\
	bmlocal7039_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7038_acc_bytes );\
	out_bitoff += bmlocal7039_acc_bits;\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7040_tmp_bitoff;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET_POS( base_ptr, out_ptr, bmlocal7040_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7040_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_POS_ALIGNED 4

// Alignment of CoordinateHo_L3_HoSuccessCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoSuccessCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7041_my_ptr;\
	UINT bmlocal7042_my_bitoff;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET_POS( base_ptr, bmlocal7041_my_ptr, bmlocal7042_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7041_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7041_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7041_my_ptr, bmlocal7042_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7043_my_ptr;\
	UINT bmlocal7044_my_bitoff;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET_POS( base_ptr, bmlocal7043_my_ptr, bmlocal7044_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7043_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7043_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7043_my_ptr, bmlocal7044_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_HoSuccessCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoSuccessCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoSuccessCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoSuccessCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoSuccessCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoSuccessCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoSuccessCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7045_out_val;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET( base_ptr, bmlocal7045_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoSuccessCounter", 32, (UINT)(bmlocal7045_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoSuccessCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7046_my_ptr;\
	UINT bmlocal7047_my_bitoff;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET_POS( base_ptr, bmlocal7046_my_ptr, bmlocal7047_my_bitoff );\
	(*((UINT32*)bmlocal7046_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7047_my_bitoff );\
}

// CoordinateHo_L3_HoSuccessCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoSuccessCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7048_tmp_bits;\
	BM_CoordinateHo_L3_HoSuccessCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7048_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7048_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoSuccessCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_HoFailCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7051_acc_bytes;\
	UINT bmlocal7052_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7051_acc_bytes = 8;\
	bmlocal7052_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7051_acc_bytes );\
	out_bitoff += bmlocal7052_acc_bits;\
}

#define BM_CoordinateHo_L3_HoFailCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7053_tmp_bitoff;\
	BM_CoordinateHo_L3_HoFailCounter_GET_POS( base_ptr, out_ptr, bmlocal7053_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7053_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_HoFailCounter_POS_ALIGNED 8

// Alignment of CoordinateHo_L3_HoFailCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoFailCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoFailCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7054_my_ptr;\
	UINT bmlocal7055_my_bitoff;\
	BM_CoordinateHo_L3_HoFailCounter_GET_POS( base_ptr, bmlocal7054_my_ptr, bmlocal7055_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7054_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7054_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7054_my_ptr, bmlocal7055_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_HoFailCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7056_my_ptr;\
	UINT bmlocal7057_my_bitoff;\
	BM_CoordinateHo_L3_HoFailCounter_GET_POS( base_ptr, bmlocal7056_my_ptr, bmlocal7057_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7056_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7056_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7056_my_ptr, bmlocal7057_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_HoFailCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoFailCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoFailCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoFailCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoFailCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoFailCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoFailCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7058_out_val;\
	BM_CoordinateHo_L3_HoFailCounter_GET( base_ptr, bmlocal7058_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoFailCounter", 32, (UINT)(bmlocal7058_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoFailCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoFailCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoFailCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7059_my_ptr;\
	UINT bmlocal7060_my_bitoff;\
	BM_CoordinateHo_L3_HoFailCounter_GET_POS( base_ptr, bmlocal7059_my_ptr, bmlocal7060_my_bitoff );\
	(*((UINT32*)bmlocal7059_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7060_my_bitoff );\
}

// CoordinateHo_L3_HoFailCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoFailCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7061_tmp_bits;\
	BM_CoordinateHo_L3_HoFailCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7061_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7061_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoFailCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7064_acc_bytes;\
	UINT bmlocal7065_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7064_acc_bytes = 12;\
	bmlocal7065_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7064_acc_bytes );\
	out_bitoff += bmlocal7065_acc_bits;\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7066_tmp_bitoff;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS( base_ptr, out_ptr, bmlocal7066_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7066_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_POS_ALIGNED 12

// Alignment of CoordinateHo_L3_HoAttemptsCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoAttemptsCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7067_my_ptr;\
	UINT bmlocal7068_my_bitoff;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS( base_ptr, bmlocal7067_my_ptr, bmlocal7068_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7067_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7067_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7067_my_ptr, bmlocal7068_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7069_my_ptr;\
	UINT bmlocal7070_my_bitoff;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS( base_ptr, bmlocal7069_my_ptr, bmlocal7070_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7069_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7069_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7069_my_ptr, bmlocal7070_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_HoAttemptsCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoAttemptsCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoAttemptsCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoAttemptsCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoAttemptsCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoAttemptsCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoAttemptsCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7071_out_val;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET( base_ptr, bmlocal7071_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoAttemptsCounter", 32, (UINT)(bmlocal7071_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoAttemptsCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7072_my_ptr;\
	UINT bmlocal7073_my_bitoff;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET_POS( base_ptr, bmlocal7072_my_ptr, bmlocal7073_my_bitoff );\
	(*((UINT32*)bmlocal7072_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7073_my_bitoff );\
}

// CoordinateHo_L3_HoAttemptsCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoAttemptsCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7074_tmp_bits;\
	BM_CoordinateHo_L3_HoAttemptsCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7074_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7074_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoAttemptsCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_HoRejectsCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7077_acc_bytes;\
	UINT bmlocal7078_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7077_acc_bytes = 16;\
	bmlocal7078_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7077_acc_bytes );\
	out_bitoff += bmlocal7078_acc_bits;\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7079_tmp_bitoff;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET_POS( base_ptr, out_ptr, bmlocal7079_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7079_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_POS_ALIGNED 16

// Alignment of CoordinateHo_L3_HoRejectsCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoRejectsCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7080_my_ptr;\
	UINT bmlocal7081_my_bitoff;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET_POS( base_ptr, bmlocal7080_my_ptr, bmlocal7081_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7080_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7080_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7080_my_ptr, bmlocal7081_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7082_my_ptr;\
	UINT bmlocal7083_my_bitoff;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET_POS( base_ptr, bmlocal7082_my_ptr, bmlocal7083_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7082_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7082_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7082_my_ptr, bmlocal7083_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_HoRejectsCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoRejectsCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoRejectsCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoRejectsCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoRejectsCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoRejectsCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoRejectsCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7084_out_val;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET( base_ptr, bmlocal7084_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoRejectsCounter", 32, (UINT)(bmlocal7084_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoRejectsCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7085_my_ptr;\
	UINT bmlocal7086_my_bitoff;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET_POS( base_ptr, bmlocal7085_my_ptr, bmlocal7086_my_bitoff );\
	(*((UINT32*)bmlocal7085_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7086_my_bitoff );\
}

// CoordinateHo_L3_HoRejectsCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoRejectsCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7087_tmp_bits;\
	BM_CoordinateHo_L3_HoRejectsCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7087_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7087_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoRejectsCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7090_acc_bytes;\
	UINT bmlocal7091_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7090_acc_bytes = 20;\
	bmlocal7091_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7090_acc_bytes );\
	out_bitoff += bmlocal7091_acc_bits;\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7092_tmp_bitoff;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS( base_ptr, out_ptr, bmlocal7092_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7092_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_POS_ALIGNED 20

// Alignment of CoordinateHo_L3_HoNotRecommendedCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7093_my_ptr;\
	UINT bmlocal7094_my_bitoff;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS( base_ptr, bmlocal7093_my_ptr, bmlocal7094_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7093_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7093_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7093_my_ptr, bmlocal7094_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7095_my_ptr;\
	UINT bmlocal7096_my_bitoff;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS( base_ptr, bmlocal7095_my_ptr, bmlocal7096_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7095_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7095_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7095_my_ptr, bmlocal7096_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_HoNotRecommendedCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoNotRecommendedCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoNotRecommendedCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoNotRecommendedCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoNotRecommendedCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoNotRecommendedCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoNotRecommendedCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7097_out_val;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET( base_ptr, bmlocal7097_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoNotRecommendedCounter", 32, (UINT)(bmlocal7097_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7098_my_ptr;\
	UINT bmlocal7099_my_bitoff;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_POS( base_ptr, bmlocal7098_my_ptr, bmlocal7099_my_bitoff );\
	(*((UINT32*)bmlocal7098_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7099_my_bitoff );\
}

// CoordinateHo_L3_HoNotRecommendedCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7100_tmp_bits;\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7100_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7100_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoNotRecommendedCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7103_acc_bytes;\
	UINT bmlocal7104_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7103_acc_bytes = 24;\
	bmlocal7104_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7103_acc_bytes );\
	out_bitoff += bmlocal7104_acc_bits;\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7105_tmp_bitoff;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS( base_ptr, out_ptr, bmlocal7105_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7105_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_POS_ALIGNED 24

// Alignment of CoordinateHo_L3_numberOfTBSAttempted: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_numberOfTBSAttempted_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7106_my_ptr;\
	UINT bmlocal7107_my_bitoff;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS( base_ptr, bmlocal7106_my_ptr, bmlocal7107_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7106_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7106_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7106_my_ptr, bmlocal7107_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7108_my_ptr;\
	UINT bmlocal7109_my_bitoff;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS( base_ptr, bmlocal7108_my_ptr, bmlocal7109_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7108_my_ptr, bmlocal7109_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_numberOfTBSAttempted: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numberOfTBSAttempted: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_numberOfTBSAttempted: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numberOfTBSAttempted: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_numberOfTBSAttempted: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_numberOfTBSAttempted: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_numberOfTBSAttempted_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7110_out_val;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET( base_ptr, bmlocal7110_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numberOfTBSAttempted", 32, (UINT)(bmlocal7110_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_numberOfTBSAttempted_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7111_my_ptr;\
	UINT bmlocal7112_my_bitoff;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET_POS( base_ptr, bmlocal7111_my_ptr, bmlocal7112_my_bitoff );\
	(*((UINT32*)bmlocal7111_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7112_my_bitoff );\
}

// CoordinateHo_L3_numberOfTBSAttempted: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_numberOfTBSAttempted_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7113_tmp_bits;\
	BM_CoordinateHo_L3_numberOfTBSAttempted_GET_SIZE( base_ptr, out_bytes, bmlocal7113_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7113_tmp_bits );\
}

#define BM_CoordinateHo_L3_numberOfTBSAttempted_BYTES_SIZE 4

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7116_acc_bytes;\
	UINT bmlocal7117_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7116_acc_bytes = 28;\
	bmlocal7117_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7116_acc_bytes );\
	out_bitoff += bmlocal7117_acc_bits;\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7118_tmp_bitoff;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS( base_ptr, out_ptr, bmlocal7118_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7118_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_POS_ALIGNED 28

// Alignment of CoordinateHo_L3_cancellationWithNormalOperation: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7119_my_ptr;\
	UINT bmlocal7120_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS( base_ptr, bmlocal7119_my_ptr, bmlocal7120_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7119_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7119_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7119_my_ptr, bmlocal7120_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7121_my_ptr;\
	UINT bmlocal7122_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS( base_ptr, bmlocal7121_my_ptr, bmlocal7122_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7121_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7121_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7121_my_ptr, bmlocal7122_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_cancellationWithNormalOperation: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cancellationWithNormalOperation: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cancellationWithNormalOperation: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cancellationWithNormalOperation: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cancellationWithNormalOperation: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_cancellationWithNormalOperation: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_cancellationWithNormalOperation_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7123_out_val;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET( base_ptr, bmlocal7123_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cancellationWithNormalOperation", 32, (UINT)(bmlocal7123_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7124_my_ptr;\
	UINT bmlocal7125_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_POS( base_ptr, bmlocal7124_my_ptr, bmlocal7125_my_bitoff );\
	(*((UINT32*)bmlocal7124_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7125_my_bitoff );\
}

// CoordinateHo_L3_cancellationWithNormalOperation: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7126_tmp_bits;\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_GET_SIZE( base_ptr, out_bytes, bmlocal7126_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7126_tmp_bits );\
}

#define BM_CoordinateHo_L3_cancellationWithNormalOperation_BYTES_SIZE 4

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7129_acc_bytes;\
	UINT bmlocal7130_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7129_acc_bytes = 32;\
	bmlocal7130_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7129_acc_bytes );\
	out_bitoff += bmlocal7130_acc_bits;\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7131_tmp_bitoff;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS( base_ptr, out_ptr, bmlocal7131_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7131_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_POS_ALIGNED 32

// Alignment of CoordinateHo_L3_cancellationWithReentryProblem: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7132_my_ptr;\
	UINT bmlocal7133_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS( base_ptr, bmlocal7132_my_ptr, bmlocal7133_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7132_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7132_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7132_my_ptr, bmlocal7133_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7134_my_ptr;\
	UINT bmlocal7135_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS( base_ptr, bmlocal7134_my_ptr, bmlocal7135_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7134_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7134_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7134_my_ptr, bmlocal7135_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_cancellationWithReentryProblem: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cancellationWithReentryProblem: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cancellationWithReentryProblem: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cancellationWithReentryProblem: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cancellationWithReentryProblem: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_cancellationWithReentryProblem: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_cancellationWithReentryProblem_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7136_out_val;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET( base_ptr, bmlocal7136_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cancellationWithReentryProblem", 32, (UINT)(bmlocal7136_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7137_my_ptr;\
	UINT bmlocal7138_my_bitoff;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_POS( base_ptr, bmlocal7137_my_ptr, bmlocal7138_my_bitoff );\
	(*((UINT32*)bmlocal7137_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7138_my_bitoff );\
}

// CoordinateHo_L3_cancellationWithReentryProblem: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7139_tmp_bits;\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_GET_SIZE( base_ptr, out_bytes, bmlocal7139_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7139_tmp_bits );\
}

#define BM_CoordinateHo_L3_cancellationWithReentryProblem_BYTES_SIZE 4

#define BM_CoordinateHo_L3_coordHoLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7142_acc_bytes;\
	UINT bmlocal7143_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7142_acc_bytes = 36;\
	bmlocal7143_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7142_acc_bytes );\
	out_bitoff += bmlocal7143_acc_bits;\
}

#define BM_CoordinateHo_L3_coordHoLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7144_tmp_bitoff;\
	BM_CoordinateHo_L3_coordHoLatency_GET_POS( base_ptr, out_ptr, bmlocal7144_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7144_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_coordHoLatency_POS_ALIGNED 36

// Alignment of CoordinateHo_L3_coordHoLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_coordHoLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_coordHoLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7145_my_ptr;\
	UINT bmlocal7146_my_bitoff;\
	BM_CoordinateHo_L3_coordHoLatency_GET_POS( base_ptr, bmlocal7145_my_ptr, bmlocal7146_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7145_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7145_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7145_my_ptr, bmlocal7146_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_coordHoLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7147_my_ptr;\
	UINT bmlocal7148_my_bitoff;\
	BM_CoordinateHo_L3_coordHoLatency_GET_POS( base_ptr, bmlocal7147_my_ptr, bmlocal7148_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7147_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7147_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7147_my_ptr, bmlocal7148_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_coordHoLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_coordHoLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_coordHoLatency: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_coordHoLatency: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_coordHoLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_coordHoLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_coordHoLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7149_out_val;\
	BM_CoordinateHo_L3_coordHoLatency_GET( base_ptr, bmlocal7149_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "coordHoLatency", 32, (UINT)(bmlocal7149_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_coordHoLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_coordHoLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_coordHoLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7150_my_ptr;\
	UINT bmlocal7151_my_bitoff;\
	BM_CoordinateHo_L3_coordHoLatency_GET_POS( base_ptr, bmlocal7150_my_ptr, bmlocal7151_my_bitoff );\
	(*((UINT32*)bmlocal7150_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7151_my_bitoff );\
}

// CoordinateHo_L3_coordHoLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_coordHoLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7152_tmp_bits;\
	BM_CoordinateHo_L3_coordHoLatency_GET_SIZE( base_ptr, out_bytes, bmlocal7152_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7152_tmp_bits );\
}

#define BM_CoordinateHo_L3_coordHoLatency_BYTES_SIZE 4

#define BM_CoordinateHo_L3_cutOffLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7155_acc_bytes;\
	UINT bmlocal7156_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7155_acc_bytes = 40;\
	bmlocal7156_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7155_acc_bytes );\
	out_bitoff += bmlocal7156_acc_bits;\
}

#define BM_CoordinateHo_L3_cutOffLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7157_tmp_bitoff;\
	BM_CoordinateHo_L3_cutOffLatency_GET_POS( base_ptr, out_ptr, bmlocal7157_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7157_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_cutOffLatency_POS_ALIGNED 40

// Alignment of CoordinateHo_L3_cutOffLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_cutOffLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_cutOffLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7158_my_ptr;\
	UINT bmlocal7159_my_bitoff;\
	BM_CoordinateHo_L3_cutOffLatency_GET_POS( base_ptr, bmlocal7158_my_ptr, bmlocal7159_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7158_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7158_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7158_my_ptr, bmlocal7159_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_cutOffLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7160_my_ptr;\
	UINT bmlocal7161_my_bitoff;\
	BM_CoordinateHo_L3_cutOffLatency_GET_POS( base_ptr, bmlocal7160_my_ptr, bmlocal7161_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7160_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7160_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7160_my_ptr, bmlocal7161_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_cutOffLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cutOffLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_cutOffLatency: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cutOffLatency: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_cutOffLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_cutOffLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_cutOffLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7162_out_val;\
	BM_CoordinateHo_L3_cutOffLatency_GET( base_ptr, bmlocal7162_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cutOffLatency", 32, (UINT)(bmlocal7162_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_cutOffLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_cutOffLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_cutOffLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7163_my_ptr;\
	UINT bmlocal7164_my_bitoff;\
	BM_CoordinateHo_L3_cutOffLatency_GET_POS( base_ptr, bmlocal7163_my_ptr, bmlocal7164_my_bitoff );\
	(*((UINT32*)bmlocal7163_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7164_my_bitoff );\
}

// CoordinateHo_L3_cutOffLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_cutOffLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7165_tmp_bits;\
	BM_CoordinateHo_L3_cutOffLatency_GET_SIZE( base_ptr, out_bytes, bmlocal7165_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7165_tmp_bits );\
}

#define BM_CoordinateHo_L3_cutOffLatency_BYTES_SIZE 4

#define BM_CoordinateHo_L3_status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7168_acc_bytes;\
	UINT bmlocal7169_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7168_acc_bytes = 44;\
	bmlocal7169_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7168_acc_bytes );\
	out_bitoff += bmlocal7169_acc_bits;\
}

#define BM_CoordinateHo_L3_status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7170_tmp_bitoff;\
	BM_CoordinateHo_L3_status_GET_POS( base_ptr, out_ptr, bmlocal7170_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7170_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_status_POS_ALIGNED 44

// Alignment of CoordinateHo_L3_status: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7171_my_ptr;\
	UINT bmlocal7172_my_bitoff;\
	BM_CoordinateHo_L3_status_GET_POS( base_ptr, bmlocal7171_my_ptr, bmlocal7172_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_HOStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7171_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_HOStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7171_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7171_my_ptr, bmlocal7172_my_bitoff, 8, E_HOStatus, out_val, 0x00000000 );\
	}\
}

#define BM_CoordinateHo_L3_status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7173_my_ptr;\
	UINT bmlocal7174_my_bitoff;\
	BM_CoordinateHo_L3_status_GET_POS( base_ptr, bmlocal7173_my_ptr, bmlocal7174_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7173_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7173_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7173_my_ptr, bmlocal7174_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// CoordinateHo_L3_status: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_status: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_status: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_status: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_status: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_status: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_HOStatus bmlocal7175_out_val;\
	BM_CoordinateHo_L3_status_GET( base_ptr, bmlocal7175_out_val );\
	if( bmlocal7175_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Invalid", 1);\
	}\
	if( bmlocal7175_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Start", 1);\
	}\
	if( bmlocal7175_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Fail", 1);\
	}\
	if( bmlocal7175_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Success", 1);\
	}\
	if( bmlocal7175_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Cancel", 1);\
	}\
	if( bmlocal7175_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Reject", 1);\
	}\
	if( bmlocal7175_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_NotRecommended", 1);\
	}\
	if( bmlocal7175_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "status", "eHO_Trigger", 1);\
	}\
}

#define BM_CoordinateHo_L3_status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_status_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_status_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7176_my_ptr;\
	UINT bmlocal7177_my_bitoff;\
	BM_CoordinateHo_L3_status_GET_POS( base_ptr, bmlocal7176_my_ptr, bmlocal7177_my_bitoff );\
	(*((UINT8*)bmlocal7176_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7177_my_bitoff );\
}

// CoordinateHo_L3_status: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7178_tmp_bits;\
	BM_CoordinateHo_L3_status_GET_SIZE( base_ptr, out_bytes, bmlocal7178_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7178_tmp_bits );\
}

#define BM_CoordinateHo_L3_status_BYTES_SIZE 1

#define BM_CoordinateHo_L3_typeId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7181_acc_bytes;\
	UINT bmlocal7182_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7181_acc_bytes = 45;\
	bmlocal7182_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7181_acc_bytes );\
	out_bitoff += bmlocal7182_acc_bits;\
}

#define BM_CoordinateHo_L3_typeId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7183_tmp_bitoff;\
	BM_CoordinateHo_L3_typeId_GET_POS( base_ptr, out_ptr, bmlocal7183_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7183_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_typeId_POS_ALIGNED 45

// Alignment of CoordinateHo_L3_typeId: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_typeId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_typeId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7184_my_ptr;\
	UINT bmlocal7185_my_bitoff;\
	BM_CoordinateHo_L3_typeId_GET_POS( base_ptr, bmlocal7184_my_ptr, bmlocal7185_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_HOTypeId)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7184_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_HOTypeId)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7184_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7184_my_ptr, bmlocal7185_my_bitoff, 8, E_HOTypeId, out_val, 0x00000001 );\
	}\
}

#define BM_CoordinateHo_L3_typeId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7186_my_ptr;\
	UINT bmlocal7187_my_bitoff;\
	BM_CoordinateHo_L3_typeId_GET_POS( base_ptr, bmlocal7186_my_ptr, bmlocal7187_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7186_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7186_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7186_my_ptr, bmlocal7187_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// CoordinateHo_L3_typeId: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_typeId: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_typeId: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_typeId: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_typeId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_typeId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_typeId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_HOTypeId bmlocal7188_out_val;\
	BM_CoordinateHo_L3_typeId_GET( base_ptr, bmlocal7188_out_val );\
	if( bmlocal7188_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "typeId", "HO_Invalid", 1);\
	}\
	if( bmlocal7188_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "typeId", "HO_NA", 1);\
	}\
	if( bmlocal7188_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "typeId", "HO_IntraFaType", 1);\
	}\
	if( bmlocal7188_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "typeId", "HO_InterFaType", 1);\
	}\
}

#define BM_CoordinateHo_L3_typeId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_typeId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_typeId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7189_my_ptr;\
	UINT bmlocal7190_my_bitoff;\
	BM_CoordinateHo_L3_typeId_GET_POS( base_ptr, bmlocal7189_my_ptr, bmlocal7190_my_bitoff );\
	(*((UINT8*)bmlocal7189_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7190_my_bitoff );\
}

// CoordinateHo_L3_typeId: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_typeId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7191_tmp_bits;\
	BM_CoordinateHo_L3_typeId_GET_SIZE( base_ptr, out_bytes, bmlocal7191_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7191_tmp_bits );\
}

#define BM_CoordinateHo_L3_typeId_BYTES_SIZE 1

#define BM_CoordinateHo_L3_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7194_acc_bytes;\
	UINT bmlocal7195_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7194_acc_bytes = 46;\
	bmlocal7195_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7194_acc_bytes );\
	out_bitoff += bmlocal7195_acc_bits;\
}

#define BM_CoordinateHo_L3_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7196_tmp_bitoff;\
	BM_CoordinateHo_L3_reserved1_GET_POS( base_ptr, out_ptr, bmlocal7196_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7196_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_reserved1_POS_ALIGNED 46

#define BM_CoordinateHo_L3_reserved1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7197_my_ptr;\
	UINT bmlocal7198_my_bitoff;\
	BM_CoordinateHo_L3_reserved1_GET_POS( base_ptr, bmlocal7197_my_ptr, bmlocal7198_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7197_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7197_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7197_my_ptr, bmlocal7198_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_reserved1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7199_my_ptr;\
	UINT bmlocal7200_my_bitoff;\
	BM_CoordinateHo_L3_reserved1_GET_POS( base_ptr, bmlocal7199_my_ptr, bmlocal7200_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7199_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7199_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7199_my_ptr, bmlocal7200_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_reserved1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7201_out_bytes;\
	UINT bmlocal7202_out_bits;\
	BM_CoordinateHo_L3_reserved1_GET_SIZE( base_ptr, bmlocal7201_out_bytes, bmlocal7202_out_bits );\
	bmlocal7202_out_bits += bmlocal7201_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved1", 32, (UINT)(bmlocal7202_out_bits), "%d", 1);\
}

#define BM_CoordinateHo_L3_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_reserved1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7203_tmp_bits;\
	BM_CoordinateHo_L3_reserved1_GET_SIZE( base_ptr, out_bytes, bmlocal7203_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7203_tmp_bits );\
}

#define BM_CoordinateHo_L3_reserved1_BYTES_SIZE 2

#define BM_CoordinateHo_L3_hoReqBsList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7206_acc_bytes;\
	UINT bmlocal7207_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7206_acc_bytes = 48;\
	bmlocal7207_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7206_acc_bytes );\
	out_bitoff += bmlocal7207_acc_bits;\
}

#define BM_CoordinateHo_L3_hoReqBsList_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7208_tmp_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_GET_POS( base_ptr, out_ptr, bmlocal7208_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7208_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_hoReqBsList_POS_ALIGNED 48

// ARRAY: CoordinateHo_L3_hoReqBsList
#define BM_CoordinateHo_L3_hoReqBsList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal7209_var0;\
		BM_CoordinateHo_L3_numOfBsInHoReq_GET( base_ptr, bmlocal7209_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal7209_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoReqBsList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal7210_var0;\
			BM_CoordinateHo_L3_numOfBsInHoReq_GET( base_ptr, bmlocal7210_var0 );\
			out_element_count = (UINT)(bmlocal7210_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoReqBsList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7211_out_ptr;\
	UINT bmlocal7212_out_bitoff;\
	UINT bmlocal7213_element_size_bytes;\
	UINT bmlocal7214_element_size_bits;\
	BM_CoordinateHo_L3_hoReqBsList_GET_POS( base_ptr, bmlocal7211_out_ptr, bmlocal7212_out_bitoff );\
	bmlocal7213_element_size_bytes = 8;\
	bmlocal7214_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7211_out_ptr) + (idx0) * bmlocal7213_element_size_bytes );\
	out_bitoff = bmlocal7212_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7214_element_size_bits );\
}

// COMPOSITE: Full name: 'CoordinateHo_L3_hoReqBsList' Type: 'BsInfo', Inner, Non-instance, No bitoff root
#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7215_parent_out_ptr;\
	BM_CoordinateHo_L3_hoReqBsList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7215_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7215_parent_out_ptr;\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7216_tmp_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_POS( base_ptr, idx0, out_ptr, bmlocal7216_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7216_tmp_bitoff);\
}

// ARRAY: CoordinateHo_L3_hoReqBsList_bsId
#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7217_out_ptr;\
	UINT bmlocal7218_out_bitoff;\
	UINT bmlocal7219_element_size_bytes;\
	UINT bmlocal7220_element_size_bits;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_POS( base_ptr, idx0, bmlocal7217_out_ptr, bmlocal7218_out_bitoff );\
	bmlocal7219_element_size_bytes = 1;\
	bmlocal7220_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7217_out_ptr) + (idx1) * bmlocal7219_element_size_bytes );\
	out_bitoff = bmlocal7218_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7220_element_size_bits );\
}

// COMPOSITE: Full name: 'CoordinateHo_L3_hoReqBsList_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7221_parent_out_ptr;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal7221_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7221_parent_out_ptr;\
}

// Alignment of CoordinateHo_L3_hoReqBsList_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7222_my_ptr;\
	UINT bmlocal7223_my_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7222_my_ptr, bmlocal7223_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7222_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7222_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7222_my_ptr, bmlocal7223_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7224_my_ptr;\
	UINT bmlocal7225_my_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7224_my_ptr, bmlocal7225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7224_my_ptr, bmlocal7225_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// CoordinateHo_L3_hoReqBsList_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_hoReqBsList_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_hoReqBsList_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_hoReqBsList_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_hoReqBsList_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_hoReqBsList_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7226_out_val;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET( base_ptr, idx0, idx1, bmlocal7226_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7226_out_val), "%u", 1);\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7227_my_ptr;\
	UINT bmlocal7228_my_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7227_my_ptr, bmlocal7228_my_bitoff );\
	(*((UINT8*)bmlocal7227_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7228_my_bitoff );\
}

// CoordinateHo_L3_hoReqBsList_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7229_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7229_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7229_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_value_BYTES_SIZE 1

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7232_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7232_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_BYTES_CELL_SIZE 1

#define BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7233_dim_size0;\
	UINT bmlocal7234_idx0;\
	bmlocal7233_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal7234_idx0=0; bmlocal7234_idx0<bmlocal7233_dim_size0; bmlocal7234_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7234_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal7234_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7235_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7235_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7235_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoReqBsList_bsId_BYTES_SIZE 6

#define BM_CoordinateHo_L3_hoReqBsList_reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7236_tmp_bytes = 0;\
	UINT bmlocal7237_tmp_bits = 0;\
	UINT bmlocal7238_acc_bytes;\
	UINT bmlocal7239_acc_bits;\
	PVOID bmlocal7240_parent_out_ptr;\
	BM_CoordinateHo_L3_hoReqBsList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7240_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7240_parent_out_ptr;\
	bmlocal7238_acc_bytes = 0;\
	bmlocal7239_acc_bits = 0;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_SIZE( base_ptr, idx0, bmlocal7236_tmp_bytes, bmlocal7237_tmp_bits );\
	bmlocal7238_acc_bytes += bmlocal7236_tmp_bytes;\
	bmlocal7239_acc_bits += bmlocal7237_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7238_acc_bytes );\
	out_bitoff += bmlocal7239_acc_bits;\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7241_tmp_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_reserved_GET_POS( base_ptr, idx0, out_ptr, bmlocal7241_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7241_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7242_my_ptr;\
	UINT bmlocal7243_my_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_reserved_GET_POS( base_ptr, idx0, bmlocal7242_my_ptr, bmlocal7243_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7242_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7242_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7242_my_ptr, bmlocal7243_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7244_my_ptr;\
	UINT bmlocal7245_my_bitoff;\
	BM_CoordinateHo_L3_hoReqBsList_reserved_GET_POS( base_ptr, idx0, bmlocal7244_my_ptr, bmlocal7245_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7244_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7244_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7244_my_ptr, bmlocal7245_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7246_out_bytes;\
	UINT bmlocal7247_out_bits;\
	BM_CoordinateHo_L3_hoReqBsList_reserved_GET_SIZE( base_ptr, idx0, bmlocal7246_out_bytes, bmlocal7247_out_bits );\
	bmlocal7247_out_bits += bmlocal7246_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7247_out_bits), "%d", 1);\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7248_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7248_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7248_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoReqBsList_reserved_BYTES_SIZE 2

#define BM_CoordinateHo_L3_hoReqBsList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7249_tmp_bytes = 0;\
	UINT bmlocal7250_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_CoordinateHo_L3_hoReqBsList_bsId_GET_SIZE( base_ptr, idx0, bmlocal7249_tmp_bytes, bmlocal7250_tmp_bits );\
	out_bytes += bmlocal7249_tmp_bytes;\
	out_bits += bmlocal7250_tmp_bits;\
}

#define BM_CoordinateHo_L3_hoReqBsList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7251_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7251_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7251_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoReqBsList_BYTES_CELL_SIZE 8

#define BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_bsId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_CoordinateHo_L3_hoReqBsList_reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7252_dim_size0;\
	UINT bmlocal7253_idx0;\
	{\
		UINT8 bmlocal7254_var0;\
		BM_CoordinateHo_L3_numOfBsInHoReq_GET( base_ptr, bmlocal7254_var0 );\
		bmlocal7252_dim_size0 = (UINT)(bmlocal7254_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hoReqBsList", 1);\
	for( bmlocal7253_idx0=0; bmlocal7253_idx0<bmlocal7252_dim_size0; bmlocal7253_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7253_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH_IDX( base_ptr, bmlocal7253_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoReqBsList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_hoReqBsList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7255_tmp_bits;\
	BM_CoordinateHo_L3_hoReqBsList_GET_SIZE( base_ptr, out_bytes, bmlocal7255_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7255_tmp_bits );\
}


#define BM_CoordinateHo_L3_hoRspBsList_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7256_tmp_bytes = 0;\
	UINT bmlocal7257_tmp_bits = 0;\
	UINT bmlocal7258_acc_bytes;\
	UINT bmlocal7259_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7258_acc_bytes = 48;\
	bmlocal7259_acc_bits = 0;\
	BM_CoordinateHo_L3_hoReqBsList_GET_SIZE( base_ptr, bmlocal7256_tmp_bytes, bmlocal7257_tmp_bits );\
	bmlocal7258_acc_bytes += bmlocal7256_tmp_bytes;\
	bmlocal7259_acc_bits += bmlocal7257_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7258_acc_bytes );\
	out_bitoff += bmlocal7259_acc_bits;\
}

// ARRAY: CoordinateHo_L3_hoRspBsList
#define BM_CoordinateHo_L3_hoRspBsList_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal7260_var0;\
		BM_CoordinateHo_L3_numOfBsInHoRsp_GET( base_ptr, bmlocal7260_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal7260_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoRspBsList_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal7261_var0;\
			BM_CoordinateHo_L3_numOfBsInHoRsp_GET( base_ptr, bmlocal7261_var0 );\
			out_element_count = (UINT)(bmlocal7261_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoRspBsList_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7262_out_ptr;\
	UINT bmlocal7263_out_bitoff;\
	UINT bmlocal7264_element_size_bytes;\
	UINT bmlocal7265_element_size_bits;\
	BM_CoordinateHo_L3_hoRspBsList_GET_POS( base_ptr, bmlocal7262_out_ptr, bmlocal7263_out_bitoff );\
	bmlocal7264_element_size_bytes = 8;\
	bmlocal7265_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7262_out_ptr) + (idx0) * bmlocal7264_element_size_bytes );\
	out_bitoff = bmlocal7263_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7265_element_size_bits );\
}

// COMPOSITE: Full name: 'CoordinateHo_L3_hoRspBsList' Type: 'BsInfo', Inner, Non-instance, No bitoff root
#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7266_parent_out_ptr;\
	BM_CoordinateHo_L3_hoRspBsList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7266_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7266_parent_out_ptr;\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7267_tmp_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_POS( base_ptr, idx0, out_ptr, bmlocal7267_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7267_tmp_bitoff);\
}

// ARRAY: CoordinateHo_L3_hoRspBsList_bsId
#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7268_out_ptr;\
	UINT bmlocal7269_out_bitoff;\
	UINT bmlocal7270_element_size_bytes;\
	UINT bmlocal7271_element_size_bits;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_POS( base_ptr, idx0, bmlocal7268_out_ptr, bmlocal7269_out_bitoff );\
	bmlocal7270_element_size_bytes = 1;\
	bmlocal7271_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7268_out_ptr) + (idx1) * bmlocal7270_element_size_bytes );\
	out_bitoff = bmlocal7269_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7271_element_size_bits );\
}

// COMPOSITE: Full name: 'CoordinateHo_L3_hoRspBsList_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7272_parent_out_ptr;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal7272_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7272_parent_out_ptr;\
}

// Alignment of CoordinateHo_L3_hoRspBsList_bsId_value: accumulated=(Variable), parent.base=(Variable)
#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7273_my_ptr;\
	UINT bmlocal7274_my_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7273_my_ptr, bmlocal7274_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7273_my_ptr, bmlocal7274_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7275_my_ptr;\
	UINT bmlocal7276_my_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7275_my_ptr, bmlocal7276_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7275_my_ptr, bmlocal7276_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// CoordinateHo_L3_hoRspBsList_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_hoRspBsList_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_hoRspBsList_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_hoRspBsList_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_hoRspBsList_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_hoRspBsList_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7277_out_val;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET( base_ptr, idx0, idx1, bmlocal7277_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7277_out_val), "%u", 1);\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7278_val;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET( base_ptr, idx0, idx1, bmlocal7278_val );\
	(bmlocal7278_val)++;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_SET( base_ptr, idx0, idx1, bmlocal7278_val );\
}

// CoordinateHo_L3_hoRspBsList_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7279_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7279_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7279_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_value_BYTES_SIZE 1

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7282_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7282_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_BYTES_CELL_SIZE 1

#define BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7283_dim_size0;\
	UINT bmlocal7284_idx0;\
	bmlocal7283_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal7284_idx0=0; bmlocal7284_idx0<bmlocal7283_dim_size0; bmlocal7284_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7284_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal7284_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7285_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7285_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoRspBsList_bsId_BYTES_SIZE 6

#define BM_CoordinateHo_L3_hoRspBsList_reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7286_tmp_bytes = 0;\
	UINT bmlocal7287_tmp_bits = 0;\
	UINT bmlocal7288_acc_bytes;\
	UINT bmlocal7289_acc_bits;\
	PVOID bmlocal7290_parent_out_ptr;\
	BM_CoordinateHo_L3_hoRspBsList_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7290_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7290_parent_out_ptr;\
	bmlocal7288_acc_bytes = 0;\
	bmlocal7289_acc_bits = 0;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_SIZE( base_ptr, idx0, bmlocal7286_tmp_bytes, bmlocal7287_tmp_bits );\
	bmlocal7288_acc_bytes += bmlocal7286_tmp_bytes;\
	bmlocal7289_acc_bits += bmlocal7287_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7288_acc_bytes );\
	out_bitoff += bmlocal7289_acc_bits;\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7291_tmp_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_reserved_GET_POS( base_ptr, idx0, out_ptr, bmlocal7291_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7291_tmp_bitoff);\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7292_my_ptr;\
	UINT bmlocal7293_my_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_reserved_GET_POS( base_ptr, idx0, bmlocal7292_my_ptr, bmlocal7293_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7292_my_ptr, bmlocal7293_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7294_my_ptr;\
	UINT bmlocal7295_my_bitoff;\
	BM_CoordinateHo_L3_hoRspBsList_reserved_GET_POS( base_ptr, idx0, bmlocal7294_my_ptr, bmlocal7295_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7294_my_ptr, bmlocal7295_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7296_out_bytes;\
	UINT bmlocal7297_out_bits;\
	BM_CoordinateHo_L3_hoRspBsList_reserved_GET_SIZE( base_ptr, idx0, bmlocal7296_out_bytes, bmlocal7297_out_bits );\
	bmlocal7297_out_bits += bmlocal7296_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7297_out_bits), "%d", 1);\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7298_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7298_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7298_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoRspBsList_reserved_BYTES_SIZE 2

#define BM_CoordinateHo_L3_hoRspBsList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7299_tmp_bytes = 0;\
	UINT bmlocal7300_tmp_bits = 0;\
	out_bytes = 2;\
	out_bits = 0;\
	BM_CoordinateHo_L3_hoRspBsList_bsId_GET_SIZE( base_ptr, idx0, bmlocal7299_tmp_bytes, bmlocal7300_tmp_bits );\
	out_bytes += bmlocal7299_tmp_bytes;\
	out_bits += bmlocal7300_tmp_bits;\
}

#define BM_CoordinateHo_L3_hoRspBsList_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7301_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7301_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7301_tmp_bits );\
}

#define BM_CoordinateHo_L3_hoRspBsList_BYTES_CELL_SIZE 8

#define BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_bsId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_CoordinateHo_L3_hoRspBsList_reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7302_dim_size0;\
	UINT bmlocal7303_idx0;\
	{\
		UINT8 bmlocal7304_var0;\
		BM_CoordinateHo_L3_numOfBsInHoRsp_GET( base_ptr, bmlocal7304_var0 );\
		bmlocal7302_dim_size0 = (UINT)(bmlocal7304_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "hoRspBsList", 1);\
	for( bmlocal7303_idx0=0; bmlocal7303_idx0<bmlocal7302_dim_size0; bmlocal7303_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7303_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH_IDX( base_ptr, bmlocal7303_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_hoRspBsList_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_hoRspBsList_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7305_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_GET_SIZE( base_ptr, out_bytes, bmlocal7305_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7305_tmp_bits );\
}


#define BM_CoordinateHo_L3_HoTriggersCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7306_tmp_bytes = 0;\
	UINT bmlocal7307_tmp_bits = 0;\
	UINT bmlocal7308_acc_bytes;\
	UINT bmlocal7309_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7308_acc_bytes = 48;\
	bmlocal7309_acc_bits = 0;\
	BM_CoordinateHo_L3_hoReqBsList_GET_SIZE( base_ptr, bmlocal7306_tmp_bytes, bmlocal7307_tmp_bits );\
	bmlocal7308_acc_bytes += bmlocal7306_tmp_bytes;\
	bmlocal7309_acc_bits += bmlocal7307_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_GET_SIZE( base_ptr, bmlocal7306_tmp_bytes, bmlocal7307_tmp_bits );\
	bmlocal7308_acc_bytes += bmlocal7306_tmp_bytes;\
	bmlocal7309_acc_bits += bmlocal7307_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7308_acc_bytes );\
	out_bitoff += bmlocal7309_acc_bits;\
}

// Alignment of CoordinateHo_L3_HoTriggersCounter: accumulated=(Variable), parent.base=(0,0, ABA=4)
#define BM_CoordinateHo_L3_HoTriggersCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_HoTriggersCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7310_my_ptr;\
	UINT bmlocal7311_my_bitoff;\
	BM_CoordinateHo_L3_HoTriggersCounter_GET_POS( base_ptr, bmlocal7310_my_ptr, bmlocal7311_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7310_my_ptr, bmlocal7311_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_CoordinateHo_L3_HoTriggersCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7312_my_ptr;\
	UINT bmlocal7313_my_bitoff;\
	BM_CoordinateHo_L3_HoTriggersCounter_GET_POS( base_ptr, bmlocal7312_my_ptr, bmlocal7313_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7312_my_ptr, bmlocal7313_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// CoordinateHo_L3_HoTriggersCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoTriggersCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// CoordinateHo_L3_HoTriggersCounter: IS_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoTriggersCounter: SET_RESET accessor is not defined because no reset value was specified.
// CoordinateHo_L3_HoTriggersCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CoordinateHo_L3_HoTriggersCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CoordinateHo_L3_HoTriggersCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7314_out_val;\
	BM_CoordinateHo_L3_HoTriggersCounter_GET( base_ptr, bmlocal7314_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoTriggersCounter", 32, (UINT)(bmlocal7314_out_val), "%d", 1);\
}

#define BM_CoordinateHo_L3_HoTriggersCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_HoTriggersCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CoordinateHo_L3_HoTriggersCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7315_val;\
	BM_CoordinateHo_L3_HoTriggersCounter_GET( base_ptr, bmlocal7315_val );\
	(bmlocal7315_val)++;\
	BM_CoordinateHo_L3_HoTriggersCounter_SET( base_ptr, bmlocal7315_val );\
}

// CoordinateHo_L3_HoTriggersCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_CoordinateHo_L3_HoTriggersCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7316_tmp_bits;\
	BM_CoordinateHo_L3_HoTriggersCounter_GET_SIZE( base_ptr, out_bytes, bmlocal7316_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7316_tmp_bits );\
}

#define BM_CoordinateHo_L3_HoTriggersCounter_BYTES_SIZE 4

#define BM_CoordinateHo_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7317_tmp_bytes = 0;\
	UINT bmlocal7318_tmp_bits = 0;\
	out_bytes = 52;\
	out_bits = 0;\
	BM_CoordinateHo_L3_hoReqBsList_GET_SIZE( base_ptr, bmlocal7317_tmp_bytes, bmlocal7318_tmp_bits );\
	out_bytes += bmlocal7317_tmp_bytes;\
	out_bits += bmlocal7318_tmp_bits;\
	BM_CoordinateHo_L3_hoRspBsList_GET_SIZE( base_ptr, bmlocal7317_tmp_bytes, bmlocal7318_tmp_bits );\
	out_bytes += bmlocal7317_tmp_bytes;\
	out_bits += bmlocal7318_tmp_bits;\
}

#define BM_CoordinateHo_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7319_tmp_bits;\
	BM_CoordinateHo_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7319_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7319_tmp_bits );\
}

#define BM_CoordinateHo_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CoordinateHo_L3", 1);\
	BM_CoordinateHo_L3_numOfBsInHoReq_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_numOfBsInHoRsp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoSuccessCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoFailCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoAttemptsCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoRejectsCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoNotRecommendedCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_numberOfTBSAttempted_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_cancellationWithNormalOperation_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_cancellationWithReentryProblem_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_coordHoLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_cutOffLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_typeId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_hoReqBsList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_hoRspBsList_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CoordinateHo_L3_HoTriggersCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CoordinateHo_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CoordinateHo_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 linkLossStatistics_L3[20];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _occurrenceTime;
	UINT32 _linkLossLatency; //Link Loss latency
	UINT32 _HoRangingLatency; //ranging latency
	BMS_LittleEndianness_Uint8 _bsId[6];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_linkLossStatistics_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_LittleEndianness_Uint8 _bsId[6];
	UINT32 _HoRangingLatency; //ranging latency
	UINT32 _linkLossLatency; //Link Loss latency
	UINT32 _occurrenceTime;
} BMS_linkLossStatistics_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'linkLossStatistics_L3' Type: 'linkLossStatistics_L3', Top-level, Non-instance, No bitoff root
#define BM_linkLossStatistics_L3_occurrenceTime_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_linkLossStatistics_L3_occurrenceTime_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7320_tmp_bitoff;\
	BM_linkLossStatistics_L3_occurrenceTime_GET_POS( base_ptr, out_ptr, bmlocal7320_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7320_tmp_bitoff);\
}

#define BM_linkLossStatistics_L3_occurrenceTime_POS_ALIGNED 0

// Alignment of linkLossStatistics_L3_occurrenceTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_linkLossStatistics_L3_occurrenceTime_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_occurrenceTime_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7321_my_ptr;\
	UINT bmlocal7322_my_bitoff;\
	BM_linkLossStatistics_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7321_my_ptr, bmlocal7322_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7321_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7321_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7321_my_ptr, bmlocal7322_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_linkLossStatistics_L3_occurrenceTime_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7323_my_ptr;\
	UINT bmlocal7324_my_bitoff;\
	BM_linkLossStatistics_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7323_my_ptr, bmlocal7324_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7323_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7323_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7323_my_ptr, bmlocal7324_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// linkLossStatistics_L3_occurrenceTime: IS_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_occurrenceTime: SET_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_occurrenceTime: IS_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_occurrenceTime: SET_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_occurrenceTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// linkLossStatistics_L3_occurrenceTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_linkLossStatistics_L3_occurrenceTime_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7325_out_val;\
	BM_linkLossStatistics_L3_occurrenceTime_GET( base_ptr, bmlocal7325_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "occurrenceTime", 32, (UINT)(bmlocal7325_out_val), "%d", 1);\
}

#define BM_linkLossStatistics_L3_occurrenceTime_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_occurrenceTime_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_linkLossStatistics_L3_occurrenceTime_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7326_my_ptr;\
	UINT bmlocal7327_my_bitoff;\
	BM_linkLossStatistics_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7326_my_ptr, bmlocal7327_my_bitoff );\
	(*((UINT32*)bmlocal7326_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7327_my_bitoff );\
}

// linkLossStatistics_L3_occurrenceTime: Validation accessors are not defined because validation condition was not specified.
#define BM_linkLossStatistics_L3_occurrenceTime_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7328_tmp_bits;\
	BM_linkLossStatistics_L3_occurrenceTime_GET_SIZE( base_ptr, out_bytes, bmlocal7328_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7328_tmp_bits );\
}

#define BM_linkLossStatistics_L3_occurrenceTime_BYTES_SIZE 4

#define BM_linkLossStatistics_L3_linkLossLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7331_acc_bytes;\
	UINT bmlocal7332_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7331_acc_bytes = 4;\
	bmlocal7332_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7331_acc_bytes );\
	out_bitoff += bmlocal7332_acc_bits;\
}

#define BM_linkLossStatistics_L3_linkLossLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7333_tmp_bitoff;\
	BM_linkLossStatistics_L3_linkLossLatency_GET_POS( base_ptr, out_ptr, bmlocal7333_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7333_tmp_bitoff);\
}

#define BM_linkLossStatistics_L3_linkLossLatency_POS_ALIGNED 4

// Alignment of linkLossStatistics_L3_linkLossLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_linkLossStatistics_L3_linkLossLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_linkLossLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7334_my_ptr;\
	UINT bmlocal7335_my_bitoff;\
	BM_linkLossStatistics_L3_linkLossLatency_GET_POS( base_ptr, bmlocal7334_my_ptr, bmlocal7335_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7334_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7334_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7334_my_ptr, bmlocal7335_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_linkLossStatistics_L3_linkLossLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7336_my_ptr;\
	UINT bmlocal7337_my_bitoff;\
	BM_linkLossStatistics_L3_linkLossLatency_GET_POS( base_ptr, bmlocal7336_my_ptr, bmlocal7337_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7336_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7336_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7336_my_ptr, bmlocal7337_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// linkLossStatistics_L3_linkLossLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_linkLossLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_linkLossLatency: IS_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_linkLossLatency: SET_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_linkLossLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// linkLossStatistics_L3_linkLossLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_linkLossStatistics_L3_linkLossLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7338_out_val;\
	BM_linkLossStatistics_L3_linkLossLatency_GET( base_ptr, bmlocal7338_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "linkLossLatency", 32, (UINT)(bmlocal7338_out_val), "%d", 1);\
}

#define BM_linkLossStatistics_L3_linkLossLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_linkLossLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_linkLossStatistics_L3_linkLossLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7339_my_ptr;\
	UINT bmlocal7340_my_bitoff;\
	BM_linkLossStatistics_L3_linkLossLatency_GET_POS( base_ptr, bmlocal7339_my_ptr, bmlocal7340_my_bitoff );\
	(*((UINT32*)bmlocal7339_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7340_my_bitoff );\
}

// linkLossStatistics_L3_linkLossLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_linkLossStatistics_L3_linkLossLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7341_tmp_bits;\
	BM_linkLossStatistics_L3_linkLossLatency_GET_SIZE( base_ptr, out_bytes, bmlocal7341_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7341_tmp_bits );\
}

#define BM_linkLossStatistics_L3_linkLossLatency_BYTES_SIZE 4

#define BM_linkLossStatistics_L3_HoRangingLatency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7344_acc_bytes;\
	UINT bmlocal7345_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7344_acc_bytes = 8;\
	bmlocal7345_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7344_acc_bytes );\
	out_bitoff += bmlocal7345_acc_bits;\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7346_tmp_bitoff;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET_POS( base_ptr, out_ptr, bmlocal7346_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7346_tmp_bitoff);\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_POS_ALIGNED 8

// Alignment of linkLossStatistics_L3_HoRangingLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_linkLossStatistics_L3_HoRangingLatency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7347_my_ptr;\
	UINT bmlocal7348_my_bitoff;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET_POS( base_ptr, bmlocal7347_my_ptr, bmlocal7348_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7347_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7347_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7347_my_ptr, bmlocal7348_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7349_my_ptr;\
	UINT bmlocal7350_my_bitoff;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET_POS( base_ptr, bmlocal7349_my_ptr, bmlocal7350_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7349_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7349_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7349_my_ptr, bmlocal7350_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// linkLossStatistics_L3_HoRangingLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_HoRangingLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_HoRangingLatency: IS_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_HoRangingLatency: SET_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_HoRangingLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// linkLossStatistics_L3_HoRangingLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_linkLossStatistics_L3_HoRangingLatency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7351_out_val;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET( base_ptr, bmlocal7351_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "HoRangingLatency", 32, (UINT)(bmlocal7351_out_val), "%d", 1);\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_HoRangingLatency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7352_my_ptr;\
	UINT bmlocal7353_my_bitoff;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET_POS( base_ptr, bmlocal7352_my_ptr, bmlocal7353_my_bitoff );\
	(*((UINT32*)bmlocal7352_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7353_my_bitoff );\
}

// linkLossStatistics_L3_HoRangingLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_linkLossStatistics_L3_HoRangingLatency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7354_tmp_bits;\
	BM_linkLossStatistics_L3_HoRangingLatency_GET_SIZE( base_ptr, out_bytes, bmlocal7354_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7354_tmp_bits );\
}

#define BM_linkLossStatistics_L3_HoRangingLatency_BYTES_SIZE 4

#define BM_linkLossStatistics_L3_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7357_acc_bytes;\
	UINT bmlocal7358_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7357_acc_bytes = 12;\
	bmlocal7358_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7357_acc_bytes );\
	out_bitoff += bmlocal7358_acc_bits;\
}

#define BM_linkLossStatistics_L3_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7359_tmp_bitoff;\
	BM_linkLossStatistics_L3_bsId_GET_POS( base_ptr, out_ptr, bmlocal7359_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7359_tmp_bitoff);\
}

#define BM_linkLossStatistics_L3_bsId_POS_ALIGNED 12

// ARRAY: linkLossStatistics_L3_bsId
#define BM_linkLossStatistics_L3_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7360_out_ptr;\
	UINT bmlocal7361_out_bitoff;\
	UINT bmlocal7362_element_size_bytes;\
	UINT bmlocal7363_element_size_bits;\
	BM_linkLossStatistics_L3_bsId_GET_POS( base_ptr, bmlocal7360_out_ptr, bmlocal7361_out_bitoff );\
	bmlocal7362_element_size_bytes = 1;\
	bmlocal7363_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7360_out_ptr) + (idx0) * bmlocal7362_element_size_bytes );\
	out_bitoff = bmlocal7361_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7363_element_size_bits );\
}

// COMPOSITE: Full name: 'linkLossStatistics_L3_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_linkLossStatistics_L3_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7364_parent_out_ptr;\
	BM_linkLossStatistics_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7364_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7364_parent_out_ptr;\
}

// Alignment of linkLossStatistics_L3_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_linkLossStatistics_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_linkLossStatistics_L3_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7365_my_ptr;\
	UINT bmlocal7366_my_bitoff;\
	BM_linkLossStatistics_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7365_my_ptr, bmlocal7366_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7365_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7365_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7365_my_ptr, bmlocal7366_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_linkLossStatistics_L3_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7367_my_ptr;\
	UINT bmlocal7368_my_bitoff;\
	BM_linkLossStatistics_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7367_my_ptr, bmlocal7368_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7367_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7367_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7367_my_ptr, bmlocal7368_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// linkLossStatistics_L3_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// linkLossStatistics_L3_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// linkLossStatistics_L3_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// linkLossStatistics_L3_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_linkLossStatistics_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7369_out_val;\
	BM_linkLossStatistics_L3_bsId_value_GET( base_ptr, idx0, bmlocal7369_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7369_out_val), "%u", 1);\
}

#define BM_linkLossStatistics_L3_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_linkLossStatistics_L3_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7370_my_ptr;\
	UINT bmlocal7371_my_bitoff;\
	BM_linkLossStatistics_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7370_my_ptr, bmlocal7371_my_bitoff );\
	(*((UINT8*)bmlocal7370_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7371_my_bitoff );\
}

// linkLossStatistics_L3_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_linkLossStatistics_L3_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7372_tmp_bits;\
	BM_linkLossStatistics_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7372_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7372_tmp_bits );\
}

#define BM_linkLossStatistics_L3_bsId_value_BYTES_SIZE 1

#define BM_linkLossStatistics_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_linkLossStatistics_L3_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7375_tmp_bits;\
	BM_linkLossStatistics_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7375_tmp_bits );\
}

#define BM_linkLossStatistics_L3_bsId_BYTES_CELL_SIZE 1

#define BM_linkLossStatistics_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_linkLossStatistics_L3_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_linkLossStatistics_L3_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7376_dim_size0;\
	UINT bmlocal7377_idx0;\
	bmlocal7376_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal7377_idx0=0; bmlocal7377_idx0<bmlocal7376_dim_size0; bmlocal7377_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7377_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_linkLossStatistics_L3_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal7377_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_linkLossStatistics_L3_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7378_tmp_bits;\
	BM_linkLossStatistics_L3_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal7378_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7378_tmp_bits );\
}

#define BM_linkLossStatistics_L3_bsId_BYTES_SIZE 6

#define BM_linkLossStatistics_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7379_tmp_bytes = 0;\
	UINT bmlocal7380_tmp_bits = 0;\
	UINT bmlocal7381_acc_bytes;\
	UINT bmlocal7382_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7381_acc_bytes = 12;\
	bmlocal7382_acc_bits = 0;\
	BM_linkLossStatistics_L3_bsId_GET_SIZE( base_ptr, bmlocal7379_tmp_bytes, bmlocal7380_tmp_bits );\
	bmlocal7381_acc_bytes += bmlocal7379_tmp_bytes;\
	bmlocal7382_acc_bits += bmlocal7380_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7381_acc_bytes );\
	out_bitoff += bmlocal7382_acc_bits;\
}

#define BM_linkLossStatistics_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7383_tmp_bitoff;\
	BM_linkLossStatistics_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7383_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7383_tmp_bitoff);\
}

#define BM_linkLossStatistics_L3_reserved_POS_ALIGNED 18

#define BM_linkLossStatistics_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_linkLossStatistics_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7384_tmp_bytes = 0;\
	UINT bmlocal7385_tmp_bits = 0;\
	out_bytes = 14;\
	out_bits = 0;\
	BM_linkLossStatistics_L3_bsId_GET_SIZE( base_ptr, bmlocal7384_tmp_bytes, bmlocal7385_tmp_bits );\
	out_bytes += bmlocal7384_tmp_bytes;\
	out_bits += bmlocal7385_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_linkLossStatistics_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7386_tmp_bits;\
	BM_linkLossStatistics_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7386_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7386_tmp_bits );\
}

#define BM_linkLossStatistics_L3_BYTES_SIZE 20

#define BM_linkLossStatistics_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "linkLossStatistics_L3", 1);\
	BM_linkLossStatistics_L3_occurrenceTime_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_linkLossStatistics_L3_linkLossLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_linkLossStatistics_L3_HoRangingLatency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_linkLossStatistics_L3_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_linkLossStatistics_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_linkLossStatistics_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_linkLossStatistics_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 LinkLossOccur_L3[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _occurrenceTime; //Time stamp link loss occur 
	E_LinkLossReason _LastLinkLossReason : 8;
	BMS_LittleEndianness_Uint8 _bsId[6];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_LinkLossOccur_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_LittleEndianness_Uint8 _bsId[6];
	E_LinkLossReason _LastLinkLossReason : 8;
	UINT32 _occurrenceTime; //Time stamp link loss occur 
} BMS_LinkLossOccur_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'LinkLossOccur_L3' Type: 'LinkLossOccur_L3', Top-level, Non-instance, No bitoff root
#define BM_LinkLossOccur_L3_occurrenceTime_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_LinkLossOccur_L3_occurrenceTime_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7387_tmp_bitoff;\
	BM_LinkLossOccur_L3_occurrenceTime_GET_POS( base_ptr, out_ptr, bmlocal7387_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7387_tmp_bitoff);\
}

#define BM_LinkLossOccur_L3_occurrenceTime_POS_ALIGNED 0

// Alignment of LinkLossOccur_L3_occurrenceTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_LinkLossOccur_L3_occurrenceTime_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_occurrenceTime_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7388_my_ptr;\
	UINT bmlocal7389_my_bitoff;\
	BM_LinkLossOccur_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7388_my_ptr, bmlocal7389_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7388_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7388_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7388_my_ptr, bmlocal7389_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_LinkLossOccur_L3_occurrenceTime_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7390_my_ptr;\
	UINT bmlocal7391_my_bitoff;\
	BM_LinkLossOccur_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7390_my_ptr, bmlocal7391_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7390_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7390_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7390_my_ptr, bmlocal7391_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// LinkLossOccur_L3_occurrenceTime: IS_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_occurrenceTime: SET_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_occurrenceTime: IS_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_occurrenceTime: SET_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_occurrenceTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LinkLossOccur_L3_occurrenceTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LinkLossOccur_L3_occurrenceTime_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7392_out_val;\
	BM_LinkLossOccur_L3_occurrenceTime_GET( base_ptr, bmlocal7392_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "occurrenceTime", 32, (UINT)(bmlocal7392_out_val), "%d", 1);\
}

#define BM_LinkLossOccur_L3_occurrenceTime_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_occurrenceTime_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_LinkLossOccur_L3_occurrenceTime_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7393_my_ptr;\
	UINT bmlocal7394_my_bitoff;\
	BM_LinkLossOccur_L3_occurrenceTime_GET_POS( base_ptr, bmlocal7393_my_ptr, bmlocal7394_my_bitoff );\
	(*((UINT32*)bmlocal7393_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7394_my_bitoff );\
}

// LinkLossOccur_L3_occurrenceTime: Validation accessors are not defined because validation condition was not specified.
#define BM_LinkLossOccur_L3_occurrenceTime_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7395_tmp_bits;\
	BM_LinkLossOccur_L3_occurrenceTime_GET_SIZE( base_ptr, out_bytes, bmlocal7395_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7395_tmp_bits );\
}

#define BM_LinkLossOccur_L3_occurrenceTime_BYTES_SIZE 4

#define BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7398_acc_bytes;\
	UINT bmlocal7399_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7398_acc_bytes = 4;\
	bmlocal7399_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7398_acc_bytes );\
	out_bitoff += bmlocal7399_acc_bits;\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7400_tmp_bitoff;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS( base_ptr, out_ptr, bmlocal7400_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7400_tmp_bitoff);\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_POS_ALIGNED 4

// Alignment of LinkLossOccur_L3_LastLinkLossReason: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_LinkLossOccur_L3_LastLinkLossReason_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7401_my_ptr;\
	UINT bmlocal7402_my_bitoff;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS( base_ptr, bmlocal7401_my_ptr, bmlocal7402_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_LinkLossReason)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7401_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_LinkLossReason)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7401_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7401_my_ptr, bmlocal7402_my_bitoff, 8, E_LinkLossReason, out_val, 0x00000000 );\
	}\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7403_my_ptr;\
	UINT bmlocal7404_my_bitoff;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS( base_ptr, bmlocal7403_my_ptr, bmlocal7404_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7403_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7403_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7403_my_ptr, bmlocal7404_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// LinkLossOccur_L3_LastLinkLossReason: IS_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_LastLinkLossReason: SET_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_LastLinkLossReason: IS_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_LastLinkLossReason: SET_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_LastLinkLossReason: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LinkLossOccur_L3_LastLinkLossReason: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LinkLossOccur_L3_LastLinkLossReason_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_LinkLossReason bmlocal7405_out_val;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET( base_ptr, bmlocal7405_out_val );\
	if( bmlocal7405_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_Invalid", 1);\
	}\
	if( bmlocal7405_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_DcdVersionError", 1);\
	}\
	if( bmlocal7405_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_UcdVersionError", 1);\
	}\
	if( bmlocal7405_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_DcdTimeout", 1);\
	}\
	if( bmlocal7405_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_UcdTimeout", 1);\
	}\
	if( bmlocal7405_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_CinrOutOfRange", 1);\
	}\
	if( bmlocal7405_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_PeriodicRangingFailure", 1);\
	}\
	if( bmlocal7405_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_CDMA_BWR_Retries_Exhausted", 1);\
	}\
	if( bmlocal7405_out_val == 8 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_BWR_Header_Retries_Exhausted", 1);\
	}\
	if( bmlocal7405_out_val == 9 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_UL_Map_Timeout", 1);\
	}\
	if( bmlocal7405_out_val == 10 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "LastLinkLossReason", "e_reason_DL_Map_Timeout", 1);\
	}\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_LastLinkLossReason_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7406_my_ptr;\
	UINT bmlocal7407_my_bitoff;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET_POS( base_ptr, bmlocal7406_my_ptr, bmlocal7407_my_bitoff );\
	(*((UINT8*)bmlocal7406_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7407_my_bitoff );\
}

// LinkLossOccur_L3_LastLinkLossReason: Validation accessors are not defined because validation condition was not specified.
#define BM_LinkLossOccur_L3_LastLinkLossReason_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7408_tmp_bits;\
	BM_LinkLossOccur_L3_LastLinkLossReason_GET_SIZE( base_ptr, out_bytes, bmlocal7408_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7408_tmp_bits );\
}

#define BM_LinkLossOccur_L3_LastLinkLossReason_BYTES_SIZE 1

#define BM_LinkLossOccur_L3_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7411_acc_bytes;\
	UINT bmlocal7412_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7411_acc_bytes = 5;\
	bmlocal7412_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7411_acc_bytes );\
	out_bitoff += bmlocal7412_acc_bits;\
}

#define BM_LinkLossOccur_L3_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7413_tmp_bitoff;\
	BM_LinkLossOccur_L3_bsId_GET_POS( base_ptr, out_ptr, bmlocal7413_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7413_tmp_bitoff);\
}

#define BM_LinkLossOccur_L3_bsId_POS_ALIGNED 5

// ARRAY: LinkLossOccur_L3_bsId
#define BM_LinkLossOccur_L3_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7414_out_ptr;\
	UINT bmlocal7415_out_bitoff;\
	UINT bmlocal7416_element_size_bytes;\
	UINT bmlocal7417_element_size_bits;\
	BM_LinkLossOccur_L3_bsId_GET_POS( base_ptr, bmlocal7414_out_ptr, bmlocal7415_out_bitoff );\
	bmlocal7416_element_size_bytes = 1;\
	bmlocal7417_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7414_out_ptr) + (idx0) * bmlocal7416_element_size_bytes );\
	out_bitoff = bmlocal7415_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7417_element_size_bits );\
}

// COMPOSITE: Full name: 'LinkLossOccur_L3_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_LinkLossOccur_L3_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7418_parent_out_ptr;\
	BM_LinkLossOccur_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7418_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7418_parent_out_ptr;\
}

// Alignment of LinkLossOccur_L3_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_LinkLossOccur_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LinkLossOccur_L3_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7419_my_ptr;\
	UINT bmlocal7420_my_bitoff;\
	BM_LinkLossOccur_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7419_my_ptr, bmlocal7420_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7419_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7419_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7419_my_ptr, bmlocal7420_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_LinkLossOccur_L3_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7421_my_ptr;\
	UINT bmlocal7422_my_bitoff;\
	BM_LinkLossOccur_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7421_my_ptr, bmlocal7422_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7421_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7421_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7421_my_ptr, bmlocal7422_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// LinkLossOccur_L3_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// LinkLossOccur_L3_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// LinkLossOccur_L3_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LinkLossOccur_L3_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LinkLossOccur_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7423_out_val;\
	BM_LinkLossOccur_L3_bsId_value_GET( base_ptr, idx0, bmlocal7423_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7423_out_val), "%u", 1);\
}

#define BM_LinkLossOccur_L3_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_LinkLossOccur_L3_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7424_my_ptr;\
	UINT bmlocal7425_my_bitoff;\
	BM_LinkLossOccur_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal7424_my_ptr, bmlocal7425_my_bitoff );\
	(*((UINT8*)bmlocal7424_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7425_my_bitoff );\
}

// LinkLossOccur_L3_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_LinkLossOccur_L3_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7426_tmp_bits;\
	BM_LinkLossOccur_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7426_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7426_tmp_bits );\
}

#define BM_LinkLossOccur_L3_bsId_value_BYTES_SIZE 1

#define BM_LinkLossOccur_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LinkLossOccur_L3_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7429_tmp_bits;\
	BM_LinkLossOccur_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7429_tmp_bits );\
}

#define BM_LinkLossOccur_L3_bsId_BYTES_CELL_SIZE 1

#define BM_LinkLossOccur_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LinkLossOccur_L3_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_LinkLossOccur_L3_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7430_dim_size0;\
	UINT bmlocal7431_idx0;\
	bmlocal7430_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal7431_idx0=0; bmlocal7431_idx0<bmlocal7430_dim_size0; bmlocal7431_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7431_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_LinkLossOccur_L3_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal7431_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_LinkLossOccur_L3_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7432_tmp_bits;\
	BM_LinkLossOccur_L3_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal7432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7432_tmp_bits );\
}

#define BM_LinkLossOccur_L3_bsId_BYTES_SIZE 6

#define BM_LinkLossOccur_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7433_tmp_bytes = 0;\
	UINT bmlocal7434_tmp_bits = 0;\
	UINT bmlocal7435_acc_bytes;\
	UINT bmlocal7436_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7435_acc_bytes = 5;\
	bmlocal7436_acc_bits = 0;\
	BM_LinkLossOccur_L3_bsId_GET_SIZE( base_ptr, bmlocal7433_tmp_bytes, bmlocal7434_tmp_bits );\
	bmlocal7435_acc_bytes += bmlocal7433_tmp_bytes;\
	bmlocal7436_acc_bits += bmlocal7434_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7435_acc_bytes );\
	out_bitoff += bmlocal7436_acc_bits;\
}

#define BM_LinkLossOccur_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7437_tmp_bitoff;\
	BM_LinkLossOccur_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7437_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7437_tmp_bitoff);\
}

#define BM_LinkLossOccur_L3_reserved_POS_ALIGNED 11

#define BM_LinkLossOccur_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_LinkLossOccur_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7438_tmp_bytes = 0;\
	UINT bmlocal7439_tmp_bits = 0;\
	out_bytes = 6;\
	out_bits = 0;\
	BM_LinkLossOccur_L3_bsId_GET_SIZE( base_ptr, bmlocal7438_tmp_bytes, bmlocal7439_tmp_bits );\
	out_bytes += bmlocal7438_tmp_bytes;\
	out_bits += bmlocal7439_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_LinkLossOccur_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7440_tmp_bits;\
	BM_LinkLossOccur_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7440_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7440_tmp_bits );\
}

#define BM_LinkLossOccur_L3_BYTES_SIZE 12

#define BM_LinkLossOccur_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "LinkLossOccur_L3", 1);\
	BM_LinkLossOccur_L3_occurrenceTime_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_LinkLossOccur_L3_LastLinkLossReason_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_LinkLossOccur_L3_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_LinkLossOccur_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_LinkLossOccur_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_LinkLossOccur_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ConnectionDropCount_L3[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _counterConnectionDropEvent; //connection drop event
} BMS_ConnectionDropCount_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _counterConnectionDropEvent; //connection drop event
} BMS_ConnectionDropCount_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ConnectionDropCount_L3' Type: 'ConnectionDropCount_L3', Top-level, Non-instance, No bitoff root
#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7441_tmp_bitoff;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS( base_ptr, out_ptr, bmlocal7441_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7441_tmp_bitoff);\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_POS_ALIGNED 0

// Alignment of ConnectionDropCount_L3_counterConnectionDropEvent: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7442_my_ptr;\
	UINT bmlocal7443_my_bitoff;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS( base_ptr, bmlocal7442_my_ptr, bmlocal7443_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7442_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7442_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7442_my_ptr, bmlocal7443_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7444_my_ptr;\
	UINT bmlocal7445_my_bitoff;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS( base_ptr, bmlocal7444_my_ptr, bmlocal7445_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7444_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7444_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7444_my_ptr, bmlocal7445_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ConnectionDropCount_L3_counterConnectionDropEvent: IS_DEFAULT accessor is not defined because no default value was specified.
// ConnectionDropCount_L3_counterConnectionDropEvent: SET_DEFAULT accessor is not defined because no default value was specified.
// ConnectionDropCount_L3_counterConnectionDropEvent: IS_RESET accessor is not defined because no reset value was specified.
// ConnectionDropCount_L3_counterConnectionDropEvent: SET_RESET accessor is not defined because no reset value was specified.
// ConnectionDropCount_L3_counterConnectionDropEvent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ConnectionDropCount_L3_counterConnectionDropEvent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7446_out_val;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET( base_ptr, bmlocal7446_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterConnectionDropEvent", 32, (UINT)(bmlocal7446_out_val), "%d", 1);\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7447_my_ptr;\
	UINT bmlocal7448_my_bitoff;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_POS( base_ptr, bmlocal7447_my_ptr, bmlocal7448_my_bitoff );\
	(*((UINT32*)bmlocal7447_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7448_my_bitoff );\
}

// ConnectionDropCount_L3_counterConnectionDropEvent: Validation accessors are not defined because validation condition was not specified.
#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7449_tmp_bits;\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_GET_SIZE( base_ptr, out_bytes, bmlocal7449_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7449_tmp_bits );\
}

#define BM_ConnectionDropCount_L3_counterConnectionDropEvent_BYTES_SIZE 4

#define BM_ConnectionDropCount_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ConnectionDropCount_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7452_tmp_bits;\
	BM_ConnectionDropCount_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7452_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7452_tmp_bits );\
}

#define BM_ConnectionDropCount_L3_BYTES_SIZE 4

#define BM_ConnectionDropCount_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ConnectionDropCount_L3", 1);\
	BM_ConnectionDropCount_L3_counterConnectionDropEvent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ConnectionDropCount_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ConnectionDropCount_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DcdUcdTimeout_L3[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _countDcdUcdTimeOut;
} BMS_DcdUcdTimeout_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _countDcdUcdTimeOut;
} BMS_DcdUcdTimeout_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DcdUcdTimeout_L3' Type: 'DcdUcdTimeout_L3', Top-level, Non-instance, No bitoff root
#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7453_tmp_bitoff;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS( base_ptr, out_ptr, bmlocal7453_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7453_tmp_bitoff);\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_POS_ALIGNED 0

// Alignment of DcdUcdTimeout_L3_countDcdUcdTimeOut: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7454_my_ptr;\
	UINT bmlocal7455_my_bitoff;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS( base_ptr, bmlocal7454_my_ptr, bmlocal7455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7454_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7454_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7454_my_ptr, bmlocal7455_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7456_my_ptr;\
	UINT bmlocal7457_my_bitoff;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS( base_ptr, bmlocal7456_my_ptr, bmlocal7457_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7456_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7456_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7456_my_ptr, bmlocal7457_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// DcdUcdTimeout_L3_countDcdUcdTimeOut: IS_DEFAULT accessor is not defined because no default value was specified.
// DcdUcdTimeout_L3_countDcdUcdTimeOut: SET_DEFAULT accessor is not defined because no default value was specified.
// DcdUcdTimeout_L3_countDcdUcdTimeOut: IS_RESET accessor is not defined because no reset value was specified.
// DcdUcdTimeout_L3_countDcdUcdTimeOut: SET_RESET accessor is not defined because no reset value was specified.
// DcdUcdTimeout_L3_countDcdUcdTimeOut: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DcdUcdTimeout_L3_countDcdUcdTimeOut: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7458_out_val;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET( base_ptr, bmlocal7458_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "countDcdUcdTimeOut", 32, (UINT)(bmlocal7458_out_val), "%d", 1);\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7459_my_ptr;\
	UINT bmlocal7460_my_bitoff;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_POS( base_ptr, bmlocal7459_my_ptr, bmlocal7460_my_bitoff );\
	(*((UINT32*)bmlocal7459_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7460_my_bitoff );\
}

// DcdUcdTimeout_L3_countDcdUcdTimeOut: Validation accessors are not defined because validation condition was not specified.
#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7461_tmp_bits;\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_GET_SIZE( base_ptr, out_bytes, bmlocal7461_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7461_tmp_bits );\
}

#define BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_BYTES_SIZE 4

#define BM_DcdUcdTimeout_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DcdUcdTimeout_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7464_tmp_bits;\
	BM_DcdUcdTimeout_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7464_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7464_tmp_bits );\
}

#define BM_DcdUcdTimeout_L3_BYTES_SIZE 4

#define BM_DcdUcdTimeout_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DcdUcdTimeout_L3", 1);\
	BM_DcdUcdTimeout_L3_countDcdUcdTimeOut_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DcdUcdTimeout_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DcdUcdTimeout_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Phy_L3[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _preambleSearchTime; //in [milsec]
	UINT32 _numOfPreamble;
} BMS_Phy_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _numOfPreamble;
	UINT32 _preambleSearchTime; //in [milsec]
} BMS_Phy_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'Phy_L3' Type: 'Phy_L3', Top-level, Non-instance, No bitoff root
#define BM_Phy_L3_preambleSearchTime_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Phy_L3_preambleSearchTime_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7465_tmp_bitoff;\
	BM_Phy_L3_preambleSearchTime_GET_POS( base_ptr, out_ptr, bmlocal7465_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7465_tmp_bitoff);\
}

#define BM_Phy_L3_preambleSearchTime_POS_ALIGNED 0

// Alignment of Phy_L3_preambleSearchTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Phy_L3_preambleSearchTime_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Phy_L3_preambleSearchTime_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7466_my_ptr;\
	UINT bmlocal7467_my_bitoff;\
	BM_Phy_L3_preambleSearchTime_GET_POS( base_ptr, bmlocal7466_my_ptr, bmlocal7467_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7466_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7466_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7466_my_ptr, bmlocal7467_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Phy_L3_preambleSearchTime_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7468_my_ptr;\
	UINT bmlocal7469_my_bitoff;\
	BM_Phy_L3_preambleSearchTime_GET_POS( base_ptr, bmlocal7468_my_ptr, bmlocal7469_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7468_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7468_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7468_my_ptr, bmlocal7469_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Phy_L3_preambleSearchTime: IS_DEFAULT accessor is not defined because no default value was specified.
// Phy_L3_preambleSearchTime: SET_DEFAULT accessor is not defined because no default value was specified.
// Phy_L3_preambleSearchTime: IS_RESET accessor is not defined because no reset value was specified.
// Phy_L3_preambleSearchTime: SET_RESET accessor is not defined because no reset value was specified.
// Phy_L3_preambleSearchTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Phy_L3_preambleSearchTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Phy_L3_preambleSearchTime_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7470_out_val;\
	BM_Phy_L3_preambleSearchTime_GET( base_ptr, bmlocal7470_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleSearchTime", 32, (UINT)(bmlocal7470_out_val), "%d", 1);\
}

#define BM_Phy_L3_preambleSearchTime_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Phy_L3_preambleSearchTime_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Phy_L3_preambleSearchTime_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7471_my_ptr;\
	UINT bmlocal7472_my_bitoff;\
	BM_Phy_L3_preambleSearchTime_GET_POS( base_ptr, bmlocal7471_my_ptr, bmlocal7472_my_bitoff );\
	(*((UINT32*)bmlocal7471_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7472_my_bitoff );\
}

// Phy_L3_preambleSearchTime: Validation accessors are not defined because validation condition was not specified.
#define BM_Phy_L3_preambleSearchTime_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7473_tmp_bits;\
	BM_Phy_L3_preambleSearchTime_GET_SIZE( base_ptr, out_bytes, bmlocal7473_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7473_tmp_bits );\
}

#define BM_Phy_L3_preambleSearchTime_BYTES_SIZE 4

#define BM_Phy_L3_numOfPreamble_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7476_acc_bytes;\
	UINT bmlocal7477_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7476_acc_bytes = 4;\
	bmlocal7477_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7476_acc_bytes );\
	out_bitoff += bmlocal7477_acc_bits;\
}

#define BM_Phy_L3_numOfPreamble_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7478_tmp_bitoff;\
	BM_Phy_L3_numOfPreamble_GET_POS( base_ptr, out_ptr, bmlocal7478_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7478_tmp_bitoff);\
}

#define BM_Phy_L3_numOfPreamble_POS_ALIGNED 4

// Alignment of Phy_L3_numOfPreamble: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Phy_L3_numOfPreamble_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Phy_L3_numOfPreamble_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7479_my_ptr;\
	UINT bmlocal7480_my_bitoff;\
	BM_Phy_L3_numOfPreamble_GET_POS( base_ptr, bmlocal7479_my_ptr, bmlocal7480_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7479_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7479_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7479_my_ptr, bmlocal7480_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Phy_L3_numOfPreamble_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7481_my_ptr;\
	UINT bmlocal7482_my_bitoff;\
	BM_Phy_L3_numOfPreamble_GET_POS( base_ptr, bmlocal7481_my_ptr, bmlocal7482_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7481_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7481_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7481_my_ptr, bmlocal7482_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Phy_L3_numOfPreamble: IS_DEFAULT accessor is not defined because no default value was specified.
// Phy_L3_numOfPreamble: SET_DEFAULT accessor is not defined because no default value was specified.
// Phy_L3_numOfPreamble: IS_RESET accessor is not defined because no reset value was specified.
// Phy_L3_numOfPreamble: SET_RESET accessor is not defined because no reset value was specified.
// Phy_L3_numOfPreamble: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Phy_L3_numOfPreamble: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Phy_L3_numOfPreamble_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7483_out_val;\
	BM_Phy_L3_numOfPreamble_GET( base_ptr, bmlocal7483_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfPreamble", 32, (UINT)(bmlocal7483_out_val), "%d", 1);\
}

#define BM_Phy_L3_numOfPreamble_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Phy_L3_numOfPreamble_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Phy_L3_numOfPreamble_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7484_my_ptr;\
	UINT bmlocal7485_my_bitoff;\
	BM_Phy_L3_numOfPreamble_GET_POS( base_ptr, bmlocal7484_my_ptr, bmlocal7485_my_bitoff );\
	(*((UINT32*)bmlocal7484_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7485_my_bitoff );\
}

// Phy_L3_numOfPreamble: Validation accessors are not defined because validation condition was not specified.
#define BM_Phy_L3_numOfPreamble_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7486_tmp_bits;\
	BM_Phy_L3_numOfPreamble_GET_SIZE( base_ptr, out_bytes, bmlocal7486_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7486_tmp_bits );\
}

#define BM_Phy_L3_numOfPreamble_BYTES_SIZE 4

#define BM_Phy_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Phy_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7489_tmp_bits;\
	BM_Phy_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7489_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7489_tmp_bits );\
}

#define BM_Phy_L3_BYTES_SIZE 8

#define BM_Phy_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Phy_L3", 1);\
	BM_Phy_L3_preambleSearchTime_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Phy_L3_numOfPreamble_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Phy_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Phy_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 IdleConfiguration_L3[28];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _idleModeTimeout; //Timed interval to receive notification of MS idle mode location update translate from seconds to milliseconds
	UINT16 _pagingCycleReq : 16;
	UINT16 _t45Timeout : 16; //Time the MS waits for	DREG-CMD in milliseconds
	UINT16 _PagingGroupID : 16;
	UINT16 _PagingCycle : 16;
	UINT16 _PagingOffset : 16;
	UINT8 _RetainInfo : 8;
	UINT8 _dregReqRetries : 8;
	UINT8 _PagingIntervalLength : 8;
	UINT8 _reserved_bytes [3]; //reserved bytes, to make the next field start at an aligned address
	BMS_LittleEndianness_Uint8 _PagingControllerID[6];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_IdleConfiguration_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_LittleEndianness_Uint8 _PagingControllerID[6];
	UINT8 _reserved_bytes [3]; //reserved bytes, to make the next field start at an aligned address
	UINT8 _PagingIntervalLength : 8;
	UINT8 _dregReqRetries : 8;
	UINT8 _RetainInfo : 8;
	UINT16 _PagingOffset : 16;
	UINT16 _PagingCycle : 16;
	UINT16 _PagingGroupID : 16;
	UINT16 _t45Timeout : 16; //Time the MS waits for	DREG-CMD in milliseconds
	UINT16 _pagingCycleReq : 16;
	UINT32 _idleModeTimeout; //Timed interval to receive notification of MS idle mode location update translate from seconds to milliseconds
} BMS_IdleConfiguration_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'IdleConfiguration_L3' Type: 'IdleConfiguration_L3', Top-level, Non-instance, No bitoff root
#define BM_IdleConfiguration_L3_idleModeTimeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7490_tmp_bitoff;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET_POS( base_ptr, out_ptr, bmlocal7490_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7490_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_POS_ALIGNED 0

// Alignment of IdleConfiguration_L3_idleModeTimeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_idleModeTimeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7491_my_ptr;\
	UINT bmlocal7492_my_bitoff;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET_POS( base_ptr, bmlocal7491_my_ptr, bmlocal7492_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7491_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7491_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7491_my_ptr, bmlocal7492_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7493_my_ptr;\
	UINT bmlocal7494_my_bitoff;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET_POS( base_ptr, bmlocal7493_my_ptr, bmlocal7494_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7493_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7493_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7493_my_ptr, bmlocal7494_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdleConfiguration_L3_idleModeTimeout: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_idleModeTimeout: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_idleModeTimeout: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_idleModeTimeout: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_idleModeTimeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_idleModeTimeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_idleModeTimeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7495_out_val;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET( base_ptr, bmlocal7495_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "idleModeTimeout", 32, (UINT)(bmlocal7495_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_idleModeTimeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7496_my_ptr;\
	UINT bmlocal7497_my_bitoff;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET_POS( base_ptr, bmlocal7496_my_ptr, bmlocal7497_my_bitoff );\
	(*((UINT32*)bmlocal7496_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7497_my_bitoff );\
}

// IdleConfiguration_L3_idleModeTimeout: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_idleModeTimeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7498_tmp_bits;\
	BM_IdleConfiguration_L3_idleModeTimeout_GET_SIZE( base_ptr, out_bytes, bmlocal7498_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7498_tmp_bits );\
}

#define BM_IdleConfiguration_L3_idleModeTimeout_BYTES_SIZE 4

#define BM_IdleConfiguration_L3_pagingCycleReq_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7501_acc_bytes;\
	UINT bmlocal7502_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7501_acc_bytes = 4;\
	bmlocal7502_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7501_acc_bytes );\
	out_bitoff += bmlocal7502_acc_bits;\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7503_tmp_bitoff;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET_POS( base_ptr, out_ptr, bmlocal7503_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7503_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_POS_ALIGNED 4

// Alignment of IdleConfiguration_L3_pagingCycleReq: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_pagingCycleReq_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7504_my_ptr;\
	UINT bmlocal7505_my_bitoff;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET_POS( base_ptr, bmlocal7504_my_ptr, bmlocal7505_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7504_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7504_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7504_my_ptr, bmlocal7505_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7506_my_ptr;\
	UINT bmlocal7507_my_bitoff;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET_POS( base_ptr, bmlocal7506_my_ptr, bmlocal7507_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7506_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7506_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7506_my_ptr, bmlocal7507_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// IdleConfiguration_L3_pagingCycleReq: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_pagingCycleReq: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_pagingCycleReq: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_pagingCycleReq: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_pagingCycleReq: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_pagingCycleReq: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_pagingCycleReq_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7508_out_val;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET( base_ptr, bmlocal7508_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "pagingCycleReq", 16, (UINT)(bmlocal7508_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_pagingCycleReq_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7509_my_ptr;\
	UINT bmlocal7510_my_bitoff;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET_POS( base_ptr, bmlocal7509_my_ptr, bmlocal7510_my_bitoff );\
	(*((UINT16*)bmlocal7509_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7510_my_bitoff );\
}

// IdleConfiguration_L3_pagingCycleReq: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_pagingCycleReq_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7511_tmp_bits;\
	BM_IdleConfiguration_L3_pagingCycleReq_GET_SIZE( base_ptr, out_bytes, bmlocal7511_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7511_tmp_bits );\
}

#define BM_IdleConfiguration_L3_pagingCycleReq_BYTES_SIZE 2

#define BM_IdleConfiguration_L3_t45Timeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7514_acc_bytes;\
	UINT bmlocal7515_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7514_acc_bytes = 6;\
	bmlocal7515_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7514_acc_bytes );\
	out_bitoff += bmlocal7515_acc_bits;\
}

#define BM_IdleConfiguration_L3_t45Timeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7516_tmp_bitoff;\
	BM_IdleConfiguration_L3_t45Timeout_GET_POS( base_ptr, out_ptr, bmlocal7516_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7516_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_t45Timeout_POS_ALIGNED 6

// Alignment of IdleConfiguration_L3_t45Timeout: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_t45Timeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_t45Timeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7517_my_ptr;\
	UINT bmlocal7518_my_bitoff;\
	BM_IdleConfiguration_L3_t45Timeout_GET_POS( base_ptr, bmlocal7517_my_ptr, bmlocal7518_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7517_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7517_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7517_my_ptr, bmlocal7518_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_IdleConfiguration_L3_t45Timeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7519_my_ptr;\
	UINT bmlocal7520_my_bitoff;\
	BM_IdleConfiguration_L3_t45Timeout_GET_POS( base_ptr, bmlocal7519_my_ptr, bmlocal7520_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7519_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7519_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7519_my_ptr, bmlocal7520_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// IdleConfiguration_L3_t45Timeout: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_t45Timeout: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_t45Timeout: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_t45Timeout: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_t45Timeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_t45Timeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_t45Timeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7521_out_val;\
	BM_IdleConfiguration_L3_t45Timeout_GET( base_ptr, bmlocal7521_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t45Timeout", 16, (UINT)(bmlocal7521_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_t45Timeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_t45Timeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_t45Timeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7522_my_ptr;\
	UINT bmlocal7523_my_bitoff;\
	BM_IdleConfiguration_L3_t45Timeout_GET_POS( base_ptr, bmlocal7522_my_ptr, bmlocal7523_my_bitoff );\
	(*((UINT16*)bmlocal7522_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7523_my_bitoff );\
}

// IdleConfiguration_L3_t45Timeout: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_t45Timeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7524_tmp_bits;\
	BM_IdleConfiguration_L3_t45Timeout_GET_SIZE( base_ptr, out_bytes, bmlocal7524_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7524_tmp_bits );\
}

#define BM_IdleConfiguration_L3_t45Timeout_BYTES_SIZE 2

#define BM_IdleConfiguration_L3_PagingGroupID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7527_acc_bytes;\
	UINT bmlocal7528_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7527_acc_bytes = 8;\
	bmlocal7528_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7527_acc_bytes );\
	out_bitoff += bmlocal7528_acc_bits;\
}

#define BM_IdleConfiguration_L3_PagingGroupID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7529_tmp_bitoff;\
	BM_IdleConfiguration_L3_PagingGroupID_GET_POS( base_ptr, out_ptr, bmlocal7529_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7529_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_PagingGroupID_POS_ALIGNED 8

// Alignment of IdleConfiguration_L3_PagingGroupID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_PagingGroupID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingGroupID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7530_my_ptr;\
	UINT bmlocal7531_my_bitoff;\
	BM_IdleConfiguration_L3_PagingGroupID_GET_POS( base_ptr, bmlocal7530_my_ptr, bmlocal7531_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7530_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7530_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7530_my_ptr, bmlocal7531_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_IdleConfiguration_L3_PagingGroupID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7532_my_ptr;\
	UINT bmlocal7533_my_bitoff;\
	BM_IdleConfiguration_L3_PagingGroupID_GET_POS( base_ptr, bmlocal7532_my_ptr, bmlocal7533_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7532_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7532_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7532_my_ptr, bmlocal7533_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// IdleConfiguration_L3_PagingGroupID: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingGroupID: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingGroupID: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingGroupID: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingGroupID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_PagingGroupID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_PagingGroupID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7534_out_val;\
	BM_IdleConfiguration_L3_PagingGroupID_GET( base_ptr, bmlocal7534_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PagingGroupID", 16, (UINT)(bmlocal7534_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_PagingGroupID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingGroupID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_PagingGroupID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7535_my_ptr;\
	UINT bmlocal7536_my_bitoff;\
	BM_IdleConfiguration_L3_PagingGroupID_GET_POS( base_ptr, bmlocal7535_my_ptr, bmlocal7536_my_bitoff );\
	(*((UINT16*)bmlocal7535_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7536_my_bitoff );\
}

// IdleConfiguration_L3_PagingGroupID: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_PagingGroupID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7537_tmp_bits;\
	BM_IdleConfiguration_L3_PagingGroupID_GET_SIZE( base_ptr, out_bytes, bmlocal7537_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7537_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingGroupID_BYTES_SIZE 2

#define BM_IdleConfiguration_L3_PagingCycle_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7540_acc_bytes;\
	UINT bmlocal7541_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7540_acc_bytes = 10;\
	bmlocal7541_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7540_acc_bytes );\
	out_bitoff += bmlocal7541_acc_bits;\
}

#define BM_IdleConfiguration_L3_PagingCycle_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7542_tmp_bitoff;\
	BM_IdleConfiguration_L3_PagingCycle_GET_POS( base_ptr, out_ptr, bmlocal7542_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7542_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_PagingCycle_POS_ALIGNED 10

// Alignment of IdleConfiguration_L3_PagingCycle: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_PagingCycle_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingCycle_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7543_my_ptr;\
	UINT bmlocal7544_my_bitoff;\
	BM_IdleConfiguration_L3_PagingCycle_GET_POS( base_ptr, bmlocal7543_my_ptr, bmlocal7544_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7543_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7543_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7543_my_ptr, bmlocal7544_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_IdleConfiguration_L3_PagingCycle_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7545_my_ptr;\
	UINT bmlocal7546_my_bitoff;\
	BM_IdleConfiguration_L3_PagingCycle_GET_POS( base_ptr, bmlocal7545_my_ptr, bmlocal7546_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7545_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7545_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7545_my_ptr, bmlocal7546_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// IdleConfiguration_L3_PagingCycle: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingCycle: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingCycle: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingCycle: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingCycle: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_PagingCycle: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_PagingCycle_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7547_out_val;\
	BM_IdleConfiguration_L3_PagingCycle_GET( base_ptr, bmlocal7547_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PagingCycle", 16, (UINT)(bmlocal7547_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_PagingCycle_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingCycle_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_PagingCycle_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7548_my_ptr;\
	UINT bmlocal7549_my_bitoff;\
	BM_IdleConfiguration_L3_PagingCycle_GET_POS( base_ptr, bmlocal7548_my_ptr, bmlocal7549_my_bitoff );\
	(*((UINT16*)bmlocal7548_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7549_my_bitoff );\
}

// IdleConfiguration_L3_PagingCycle: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_PagingCycle_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7550_tmp_bits;\
	BM_IdleConfiguration_L3_PagingCycle_GET_SIZE( base_ptr, out_bytes, bmlocal7550_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7550_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingCycle_BYTES_SIZE 2

#define BM_IdleConfiguration_L3_PagingOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7553_acc_bytes;\
	UINT bmlocal7554_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7553_acc_bytes = 12;\
	bmlocal7554_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7553_acc_bytes );\
	out_bitoff += bmlocal7554_acc_bits;\
}

#define BM_IdleConfiguration_L3_PagingOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7555_tmp_bitoff;\
	BM_IdleConfiguration_L3_PagingOffset_GET_POS( base_ptr, out_ptr, bmlocal7555_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7555_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_PagingOffset_POS_ALIGNED 12

// Alignment of IdleConfiguration_L3_PagingOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_PagingOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7556_my_ptr;\
	UINT bmlocal7557_my_bitoff;\
	BM_IdleConfiguration_L3_PagingOffset_GET_POS( base_ptr, bmlocal7556_my_ptr, bmlocal7557_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7556_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7556_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7556_my_ptr, bmlocal7557_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_IdleConfiguration_L3_PagingOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7558_my_ptr;\
	UINT bmlocal7559_my_bitoff;\
	BM_IdleConfiguration_L3_PagingOffset_GET_POS( base_ptr, bmlocal7558_my_ptr, bmlocal7559_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7558_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7558_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7558_my_ptr, bmlocal7559_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// IdleConfiguration_L3_PagingOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingOffset: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingOffset: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_PagingOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_PagingOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7560_out_val;\
	BM_IdleConfiguration_L3_PagingOffset_GET( base_ptr, bmlocal7560_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PagingOffset", 16, (UINT)(bmlocal7560_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_PagingOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_PagingOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7561_my_ptr;\
	UINT bmlocal7562_my_bitoff;\
	BM_IdleConfiguration_L3_PagingOffset_GET_POS( base_ptr, bmlocal7561_my_ptr, bmlocal7562_my_bitoff );\
	(*((UINT16*)bmlocal7561_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7562_my_bitoff );\
}

// IdleConfiguration_L3_PagingOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_PagingOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7563_tmp_bits;\
	BM_IdleConfiguration_L3_PagingOffset_GET_SIZE( base_ptr, out_bytes, bmlocal7563_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7563_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingOffset_BYTES_SIZE 2

#define BM_IdleConfiguration_L3_RetainInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7566_acc_bytes;\
	UINT bmlocal7567_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7566_acc_bytes = 14;\
	bmlocal7567_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7566_acc_bytes );\
	out_bitoff += bmlocal7567_acc_bits;\
}

#define BM_IdleConfiguration_L3_RetainInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7568_tmp_bitoff;\
	BM_IdleConfiguration_L3_RetainInfo_GET_POS( base_ptr, out_ptr, bmlocal7568_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7568_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_RetainInfo_POS_ALIGNED 14

// Alignment of IdleConfiguration_L3_RetainInfo: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_RetainInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_RetainInfo_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7569_my_ptr;\
	UINT bmlocal7570_my_bitoff;\
	BM_IdleConfiguration_L3_RetainInfo_GET_POS( base_ptr, bmlocal7569_my_ptr, bmlocal7570_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7569_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7569_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7569_my_ptr, bmlocal7570_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_IdleConfiguration_L3_RetainInfo_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7571_my_ptr;\
	UINT bmlocal7572_my_bitoff;\
	BM_IdleConfiguration_L3_RetainInfo_GET_POS( base_ptr, bmlocal7571_my_ptr, bmlocal7572_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7571_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7571_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7571_my_ptr, bmlocal7572_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// IdleConfiguration_L3_RetainInfo: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_RetainInfo: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_RetainInfo: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_RetainInfo: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_RetainInfo: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_RetainInfo: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_RetainInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7573_out_val;\
	BM_IdleConfiguration_L3_RetainInfo_GET( base_ptr, bmlocal7573_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RetainInfo", 8, (UINT)(bmlocal7573_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_RetainInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_RetainInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_RetainInfo_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7574_my_ptr;\
	UINT bmlocal7575_my_bitoff;\
	BM_IdleConfiguration_L3_RetainInfo_GET_POS( base_ptr, bmlocal7574_my_ptr, bmlocal7575_my_bitoff );\
	(*((UINT8*)bmlocal7574_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7575_my_bitoff );\
}

// IdleConfiguration_L3_RetainInfo: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_RetainInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7576_tmp_bits;\
	BM_IdleConfiguration_L3_RetainInfo_GET_SIZE( base_ptr, out_bytes, bmlocal7576_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7576_tmp_bits );\
}

#define BM_IdleConfiguration_L3_RetainInfo_BYTES_SIZE 1

#define BM_IdleConfiguration_L3_dregReqRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7579_acc_bytes;\
	UINT bmlocal7580_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7579_acc_bytes = 15;\
	bmlocal7580_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7579_acc_bytes );\
	out_bitoff += bmlocal7580_acc_bits;\
}

#define BM_IdleConfiguration_L3_dregReqRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7581_tmp_bitoff;\
	BM_IdleConfiguration_L3_dregReqRetries_GET_POS( base_ptr, out_ptr, bmlocal7581_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7581_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_dregReqRetries_POS_ALIGNED 15

// Alignment of IdleConfiguration_L3_dregReqRetries: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_dregReqRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_dregReqRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7582_my_ptr;\
	UINT bmlocal7583_my_bitoff;\
	BM_IdleConfiguration_L3_dregReqRetries_GET_POS( base_ptr, bmlocal7582_my_ptr, bmlocal7583_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7582_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7582_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7582_my_ptr, bmlocal7583_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_IdleConfiguration_L3_dregReqRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7584_my_ptr;\
	UINT bmlocal7585_my_bitoff;\
	BM_IdleConfiguration_L3_dregReqRetries_GET_POS( base_ptr, bmlocal7584_my_ptr, bmlocal7585_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7584_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7584_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7584_my_ptr, bmlocal7585_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// IdleConfiguration_L3_dregReqRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_dregReqRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_dregReqRetries: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_dregReqRetries: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_dregReqRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_dregReqRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_dregReqRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7586_out_val;\
	BM_IdleConfiguration_L3_dregReqRetries_GET( base_ptr, bmlocal7586_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dregReqRetries", 8, (UINT)(bmlocal7586_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_dregReqRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_dregReqRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_dregReqRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7587_my_ptr;\
	UINT bmlocal7588_my_bitoff;\
	BM_IdleConfiguration_L3_dregReqRetries_GET_POS( base_ptr, bmlocal7587_my_ptr, bmlocal7588_my_bitoff );\
	(*((UINT8*)bmlocal7587_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7588_my_bitoff );\
}

// IdleConfiguration_L3_dregReqRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_dregReqRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7589_tmp_bits;\
	BM_IdleConfiguration_L3_dregReqRetries_GET_SIZE( base_ptr, out_bytes, bmlocal7589_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7589_tmp_bits );\
}

#define BM_IdleConfiguration_L3_dregReqRetries_BYTES_SIZE 1

#define BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7592_acc_bytes;\
	UINT bmlocal7593_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7592_acc_bytes = 16;\
	bmlocal7593_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7592_acc_bytes );\
	out_bitoff += bmlocal7593_acc_bits;\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7594_tmp_bitoff;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS( base_ptr, out_ptr, bmlocal7594_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7594_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_POS_ALIGNED 16

// Alignment of IdleConfiguration_L3_PagingIntervalLength: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdleConfiguration_L3_PagingIntervalLength_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7595_my_ptr;\
	UINT bmlocal7596_my_bitoff;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS( base_ptr, bmlocal7595_my_ptr, bmlocal7596_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7595_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7595_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7595_my_ptr, bmlocal7596_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7597_my_ptr;\
	UINT bmlocal7598_my_bitoff;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS( base_ptr, bmlocal7597_my_ptr, bmlocal7598_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7597_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7597_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7597_my_ptr, bmlocal7598_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// IdleConfiguration_L3_PagingIntervalLength: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingIntervalLength: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingIntervalLength: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingIntervalLength: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingIntervalLength: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_PagingIntervalLength: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_PagingIntervalLength_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7599_out_val;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET( base_ptr, bmlocal7599_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PagingIntervalLength", 8, (UINT)(bmlocal7599_out_val), "%d", 1);\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingIntervalLength_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7600_my_ptr;\
	UINT bmlocal7601_my_bitoff;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET_POS( base_ptr, bmlocal7600_my_ptr, bmlocal7601_my_bitoff );\
	(*((UINT8*)bmlocal7600_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7601_my_bitoff );\
}

// IdleConfiguration_L3_PagingIntervalLength: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_PagingIntervalLength_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7602_tmp_bits;\
	BM_IdleConfiguration_L3_PagingIntervalLength_GET_SIZE( base_ptr, out_bytes, bmlocal7602_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7602_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingIntervalLength_BYTES_SIZE 1

#define BM_IdleConfiguration_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7605_acc_bytes;\
	UINT bmlocal7606_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7605_acc_bytes = 17;\
	bmlocal7606_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7605_acc_bytes );\
	out_bitoff += bmlocal7606_acc_bits;\
}

#define BM_IdleConfiguration_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7607_tmp_bitoff;\
	BM_IdleConfiguration_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7607_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7607_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_reserved_POS_ALIGNED 17

#define BM_IdleConfiguration_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7608_my_ptr;\
	UINT bmlocal7609_my_bitoff;\
	BM_IdleConfiguration_L3_reserved_GET_POS( base_ptr, bmlocal7608_my_ptr, bmlocal7609_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7608_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7608_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7608_my_ptr, bmlocal7609_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_IdleConfiguration_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7610_my_ptr;\
	UINT bmlocal7611_my_bitoff;\
	BM_IdleConfiguration_L3_reserved_GET_POS( base_ptr, bmlocal7610_my_ptr, bmlocal7611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7610_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7610_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7610_my_ptr, bmlocal7611_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_IdleConfiguration_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7612_out_bytes;\
	UINT bmlocal7613_out_bits;\
	BM_IdleConfiguration_L3_reserved_GET_SIZE( base_ptr, bmlocal7612_out_bytes, bmlocal7613_out_bits );\
	bmlocal7613_out_bits += bmlocal7612_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7613_out_bits), "%d", 1);\
}

#define BM_IdleConfiguration_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7614_tmp_bits;\
	BM_IdleConfiguration_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal7614_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7614_tmp_bits );\
}

#define BM_IdleConfiguration_L3_reserved_BYTES_SIZE 3

#define BM_IdleConfiguration_L3_PagingControllerID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7617_acc_bytes;\
	UINT bmlocal7618_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7617_acc_bytes = 20;\
	bmlocal7618_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7617_acc_bytes );\
	out_bitoff += bmlocal7618_acc_bits;\
}

#define BM_IdleConfiguration_L3_PagingControllerID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7619_tmp_bitoff;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_POS( base_ptr, out_ptr, bmlocal7619_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7619_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_PagingControllerID_POS_ALIGNED 20

// ARRAY: IdleConfiguration_L3_PagingControllerID
#define BM_IdleConfiguration_L3_PagingControllerID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7620_out_ptr;\
	UINT bmlocal7621_out_bitoff;\
	UINT bmlocal7622_element_size_bytes;\
	UINT bmlocal7623_element_size_bits;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_POS( base_ptr, bmlocal7620_out_ptr, bmlocal7621_out_bitoff );\
	bmlocal7622_element_size_bytes = 1;\
	bmlocal7623_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7620_out_ptr) + (idx0) * bmlocal7622_element_size_bytes );\
	out_bitoff = bmlocal7621_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7623_element_size_bits );\
}

// COMPOSITE: Full name: 'IdleConfiguration_L3_PagingControllerID' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_IdleConfiguration_L3_PagingControllerID_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7624_parent_out_ptr;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7624_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7624_parent_out_ptr;\
}

// Alignment of IdleConfiguration_L3_PagingControllerID_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_IdleConfiguration_L3_PagingControllerID_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7625_my_ptr;\
	UINT bmlocal7626_my_bitoff;\
	BM_IdleConfiguration_L3_PagingControllerID_value_GET_POS( base_ptr, idx0, bmlocal7625_my_ptr, bmlocal7626_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7625_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7625_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7625_my_ptr, bmlocal7626_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_IdleConfiguration_L3_PagingControllerID_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7627_my_ptr;\
	UINT bmlocal7628_my_bitoff;\
	BM_IdleConfiguration_L3_PagingControllerID_value_GET_POS( base_ptr, idx0, bmlocal7627_my_ptr, bmlocal7628_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7627_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7627_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7627_my_ptr, bmlocal7628_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// IdleConfiguration_L3_PagingControllerID_value: IS_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingControllerID_value: SET_DEFAULT accessor is not defined because no default value was specified.
// IdleConfiguration_L3_PagingControllerID_value: IS_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingControllerID_value: SET_RESET accessor is not defined because no reset value was specified.
// IdleConfiguration_L3_PagingControllerID_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdleConfiguration_L3_PagingControllerID_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdleConfiguration_L3_PagingControllerID_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7629_out_val;\
	BM_IdleConfiguration_L3_PagingControllerID_value_GET( base_ptr, idx0, bmlocal7629_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7629_out_val), "%u", 1);\
}

#define BM_IdleConfiguration_L3_PagingControllerID_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingControllerID_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7630_my_ptr;\
	UINT bmlocal7631_my_bitoff;\
	BM_IdleConfiguration_L3_PagingControllerID_value_GET_POS( base_ptr, idx0, bmlocal7630_my_ptr, bmlocal7631_my_bitoff );\
	(*((UINT8*)bmlocal7630_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7631_my_bitoff );\
}

// IdleConfiguration_L3_PagingControllerID_value: Validation accessors are not defined because validation condition was not specified.
#define BM_IdleConfiguration_L3_PagingControllerID_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7632_tmp_bits;\
	BM_IdleConfiguration_L3_PagingControllerID_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7632_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7632_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_value_BYTES_SIZE 1

#define BM_IdleConfiguration_L3_PagingControllerID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7635_tmp_bits;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7635_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7635_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_BYTES_CELL_SIZE 1

#define BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingControllerID_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7636_dim_size0;\
	UINT bmlocal7637_idx0;\
	bmlocal7636_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PagingControllerID", 1);\
	for( bmlocal7637_idx0=0; bmlocal7637_idx0<bmlocal7636_dim_size0; bmlocal7637_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7637_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH_IDX( base_ptr, bmlocal7637_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7638_tmp_bits;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_SIZE( base_ptr, out_bytes, bmlocal7638_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7638_tmp_bits );\
}

#define BM_IdleConfiguration_L3_PagingControllerID_BYTES_SIZE 6

#define BM_IdleConfiguration_L3_reserved1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7639_tmp_bytes = 0;\
	UINT bmlocal7640_tmp_bits = 0;\
	UINT bmlocal7641_acc_bytes;\
	UINT bmlocal7642_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7641_acc_bytes = 20;\
	bmlocal7642_acc_bits = 0;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_SIZE( base_ptr, bmlocal7639_tmp_bytes, bmlocal7640_tmp_bits );\
	bmlocal7641_acc_bytes += bmlocal7639_tmp_bytes;\
	bmlocal7642_acc_bits += bmlocal7640_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7641_acc_bytes );\
	out_bitoff += bmlocal7642_acc_bits;\
}

#define BM_IdleConfiguration_L3_reserved1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7643_tmp_bitoff;\
	BM_IdleConfiguration_L3_reserved1_GET_POS( base_ptr, out_ptr, bmlocal7643_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7643_tmp_bitoff);\
}

#define BM_IdleConfiguration_L3_reserved1_POS_ALIGNED 26

#define BM_IdleConfiguration_L3_reserved1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-reserved1>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_reserved1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_reserved1_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_IdleConfiguration_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7644_tmp_bytes = 0;\
	UINT bmlocal7645_tmp_bits = 0;\
	out_bytes = 22;\
	out_bits = 0;\
	BM_IdleConfiguration_L3_PagingControllerID_GET_SIZE( base_ptr, bmlocal7644_tmp_bytes, bmlocal7645_tmp_bits );\
	out_bytes += bmlocal7644_tmp_bytes;\
	out_bits += bmlocal7645_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_IdleConfiguration_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7646_tmp_bits;\
	BM_IdleConfiguration_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7646_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7646_tmp_bits );\
}

#define BM_IdleConfiguration_L3_BYTES_SIZE 28

#define BM_IdleConfiguration_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "IdleConfiguration_L3", 1);\
	BM_IdleConfiguration_L3_idleModeTimeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_pagingCycleReq_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_t45Timeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_PagingGroupID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_PagingCycle_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_PagingOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_RetainInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_dregReqRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_PagingIntervalLength_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_PagingControllerID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdleConfiguration_L3_reserved1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdleConfiguration_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdleConfiguration_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 IdlePerformance_L3[20];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _counterInternalTimer;
	UINT32 _counterNWInitiated;
	UINT32 _counterGroupChange;
	UINT32 _counterSecuredLu;
	UINT32 _counterUnSecuredLu;
} BMS_IdlePerformance_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _counterUnSecuredLu;
	UINT32 _counterSecuredLu;
	UINT32 _counterGroupChange;
	UINT32 _counterNWInitiated;
	UINT32 _counterInternalTimer;
} BMS_IdlePerformance_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'IdlePerformance_L3' Type: 'IdlePerformance_L3', Top-level, Non-instance, No bitoff root
#define BM_IdlePerformance_L3_counterInternalTimer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_IdlePerformance_L3_counterInternalTimer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7647_tmp_bitoff;\
	BM_IdlePerformance_L3_counterInternalTimer_GET_POS( base_ptr, out_ptr, bmlocal7647_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7647_tmp_bitoff);\
}

#define BM_IdlePerformance_L3_counterInternalTimer_POS_ALIGNED 0

// Alignment of IdlePerformance_L3_counterInternalTimer: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdlePerformance_L3_counterInternalTimer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_counterInternalTimer_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7648_my_ptr;\
	UINT bmlocal7649_my_bitoff;\
	BM_IdlePerformance_L3_counterInternalTimer_GET_POS( base_ptr, bmlocal7648_my_ptr, bmlocal7649_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7648_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7648_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7648_my_ptr, bmlocal7649_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdlePerformance_L3_counterInternalTimer_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7650_my_ptr;\
	UINT bmlocal7651_my_bitoff;\
	BM_IdlePerformance_L3_counterInternalTimer_GET_POS( base_ptr, bmlocal7650_my_ptr, bmlocal7651_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7650_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7650_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7650_my_ptr, bmlocal7651_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdlePerformance_L3_counterInternalTimer: IS_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterInternalTimer: SET_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterInternalTimer: IS_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterInternalTimer: SET_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterInternalTimer: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdlePerformance_L3_counterInternalTimer: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdlePerformance_L3_counterInternalTimer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7652_out_val;\
	BM_IdlePerformance_L3_counterInternalTimer_GET( base_ptr, bmlocal7652_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterInternalTimer", 32, (UINT)(bmlocal7652_out_val), "%d", 1);\
}

#define BM_IdlePerformance_L3_counterInternalTimer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_counterInternalTimer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdlePerformance_L3_counterInternalTimer_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7653_my_ptr;\
	UINT bmlocal7654_my_bitoff;\
	BM_IdlePerformance_L3_counterInternalTimer_GET_POS( base_ptr, bmlocal7653_my_ptr, bmlocal7654_my_bitoff );\
	(*((UINT32*)bmlocal7653_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7654_my_bitoff );\
}

// IdlePerformance_L3_counterInternalTimer: Validation accessors are not defined because validation condition was not specified.
#define BM_IdlePerformance_L3_counterInternalTimer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7655_tmp_bits;\
	BM_IdlePerformance_L3_counterInternalTimer_GET_SIZE( base_ptr, out_bytes, bmlocal7655_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7655_tmp_bits );\
}

#define BM_IdlePerformance_L3_counterInternalTimer_BYTES_SIZE 4

#define BM_IdlePerformance_L3_counterNWInitiated_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7658_acc_bytes;\
	UINT bmlocal7659_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7658_acc_bytes = 4;\
	bmlocal7659_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7658_acc_bytes );\
	out_bitoff += bmlocal7659_acc_bits;\
}

#define BM_IdlePerformance_L3_counterNWInitiated_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7660_tmp_bitoff;\
	BM_IdlePerformance_L3_counterNWInitiated_GET_POS( base_ptr, out_ptr, bmlocal7660_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7660_tmp_bitoff);\
}

#define BM_IdlePerformance_L3_counterNWInitiated_POS_ALIGNED 4

// Alignment of IdlePerformance_L3_counterNWInitiated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdlePerformance_L3_counterNWInitiated_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_counterNWInitiated_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7661_my_ptr;\
	UINT bmlocal7662_my_bitoff;\
	BM_IdlePerformance_L3_counterNWInitiated_GET_POS( base_ptr, bmlocal7661_my_ptr, bmlocal7662_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7661_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7661_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7661_my_ptr, bmlocal7662_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdlePerformance_L3_counterNWInitiated_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7663_my_ptr;\
	UINT bmlocal7664_my_bitoff;\
	BM_IdlePerformance_L3_counterNWInitiated_GET_POS( base_ptr, bmlocal7663_my_ptr, bmlocal7664_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7663_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7663_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7663_my_ptr, bmlocal7664_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdlePerformance_L3_counterNWInitiated: IS_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterNWInitiated: SET_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterNWInitiated: IS_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterNWInitiated: SET_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterNWInitiated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdlePerformance_L3_counterNWInitiated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdlePerformance_L3_counterNWInitiated_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7665_out_val;\
	BM_IdlePerformance_L3_counterNWInitiated_GET( base_ptr, bmlocal7665_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterNWInitiated", 32, (UINT)(bmlocal7665_out_val), "%d", 1);\
}

#define BM_IdlePerformance_L3_counterNWInitiated_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_counterNWInitiated_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdlePerformance_L3_counterNWInitiated_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7666_my_ptr;\
	UINT bmlocal7667_my_bitoff;\
	BM_IdlePerformance_L3_counterNWInitiated_GET_POS( base_ptr, bmlocal7666_my_ptr, bmlocal7667_my_bitoff );\
	(*((UINT32*)bmlocal7666_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7667_my_bitoff );\
}

// IdlePerformance_L3_counterNWInitiated: Validation accessors are not defined because validation condition was not specified.
#define BM_IdlePerformance_L3_counterNWInitiated_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7668_tmp_bits;\
	BM_IdlePerformance_L3_counterNWInitiated_GET_SIZE( base_ptr, out_bytes, bmlocal7668_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7668_tmp_bits );\
}

#define BM_IdlePerformance_L3_counterNWInitiated_BYTES_SIZE 4

#define BM_IdlePerformance_L3_counterGroupChange_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7671_acc_bytes;\
	UINT bmlocal7672_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7671_acc_bytes = 8;\
	bmlocal7672_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7671_acc_bytes );\
	out_bitoff += bmlocal7672_acc_bits;\
}

#define BM_IdlePerformance_L3_counterGroupChange_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7673_tmp_bitoff;\
	BM_IdlePerformance_L3_counterGroupChange_GET_POS( base_ptr, out_ptr, bmlocal7673_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7673_tmp_bitoff);\
}

#define BM_IdlePerformance_L3_counterGroupChange_POS_ALIGNED 8

// Alignment of IdlePerformance_L3_counterGroupChange: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdlePerformance_L3_counterGroupChange_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_counterGroupChange_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7674_my_ptr;\
	UINT bmlocal7675_my_bitoff;\
	BM_IdlePerformance_L3_counterGroupChange_GET_POS( base_ptr, bmlocal7674_my_ptr, bmlocal7675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7674_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7674_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7674_my_ptr, bmlocal7675_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdlePerformance_L3_counterGroupChange_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7676_my_ptr;\
	UINT bmlocal7677_my_bitoff;\
	BM_IdlePerformance_L3_counterGroupChange_GET_POS( base_ptr, bmlocal7676_my_ptr, bmlocal7677_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7676_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7676_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7676_my_ptr, bmlocal7677_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdlePerformance_L3_counterGroupChange: IS_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterGroupChange: SET_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterGroupChange: IS_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterGroupChange: SET_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterGroupChange: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdlePerformance_L3_counterGroupChange: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdlePerformance_L3_counterGroupChange_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7678_out_val;\
	BM_IdlePerformance_L3_counterGroupChange_GET( base_ptr, bmlocal7678_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterGroupChange", 32, (UINT)(bmlocal7678_out_val), "%d", 1);\
}

#define BM_IdlePerformance_L3_counterGroupChange_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_counterGroupChange_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdlePerformance_L3_counterGroupChange_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7679_my_ptr;\
	UINT bmlocal7680_my_bitoff;\
	BM_IdlePerformance_L3_counterGroupChange_GET_POS( base_ptr, bmlocal7679_my_ptr, bmlocal7680_my_bitoff );\
	(*((UINT32*)bmlocal7679_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7680_my_bitoff );\
}

// IdlePerformance_L3_counterGroupChange: Validation accessors are not defined because validation condition was not specified.
#define BM_IdlePerformance_L3_counterGroupChange_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7681_tmp_bits;\
	BM_IdlePerformance_L3_counterGroupChange_GET_SIZE( base_ptr, out_bytes, bmlocal7681_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7681_tmp_bits );\
}

#define BM_IdlePerformance_L3_counterGroupChange_BYTES_SIZE 4

#define BM_IdlePerformance_L3_counterSecuredLu_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7684_acc_bytes;\
	UINT bmlocal7685_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7684_acc_bytes = 12;\
	bmlocal7685_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7684_acc_bytes );\
	out_bitoff += bmlocal7685_acc_bits;\
}

#define BM_IdlePerformance_L3_counterSecuredLu_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7686_tmp_bitoff;\
	BM_IdlePerformance_L3_counterSecuredLu_GET_POS( base_ptr, out_ptr, bmlocal7686_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7686_tmp_bitoff);\
}

#define BM_IdlePerformance_L3_counterSecuredLu_POS_ALIGNED 12

// Alignment of IdlePerformance_L3_counterSecuredLu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdlePerformance_L3_counterSecuredLu_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_counterSecuredLu_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7687_my_ptr;\
	UINT bmlocal7688_my_bitoff;\
	BM_IdlePerformance_L3_counterSecuredLu_GET_POS( base_ptr, bmlocal7687_my_ptr, bmlocal7688_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7687_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7687_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7687_my_ptr, bmlocal7688_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdlePerformance_L3_counterSecuredLu_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7689_my_ptr;\
	UINT bmlocal7690_my_bitoff;\
	BM_IdlePerformance_L3_counterSecuredLu_GET_POS( base_ptr, bmlocal7689_my_ptr, bmlocal7690_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7689_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7689_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7689_my_ptr, bmlocal7690_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdlePerformance_L3_counterSecuredLu: IS_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterSecuredLu: SET_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterSecuredLu: IS_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterSecuredLu: SET_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterSecuredLu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdlePerformance_L3_counterSecuredLu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdlePerformance_L3_counterSecuredLu_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7691_out_val;\
	BM_IdlePerformance_L3_counterSecuredLu_GET( base_ptr, bmlocal7691_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterSecuredLu", 32, (UINT)(bmlocal7691_out_val), "%d", 1);\
}

#define BM_IdlePerformance_L3_counterSecuredLu_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_counterSecuredLu_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdlePerformance_L3_counterSecuredLu_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7692_my_ptr;\
	UINT bmlocal7693_my_bitoff;\
	BM_IdlePerformance_L3_counterSecuredLu_GET_POS( base_ptr, bmlocal7692_my_ptr, bmlocal7693_my_bitoff );\
	(*((UINT32*)bmlocal7692_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7693_my_bitoff );\
}

// IdlePerformance_L3_counterSecuredLu: Validation accessors are not defined because validation condition was not specified.
#define BM_IdlePerformance_L3_counterSecuredLu_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7694_tmp_bits;\
	BM_IdlePerformance_L3_counterSecuredLu_GET_SIZE( base_ptr, out_bytes, bmlocal7694_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7694_tmp_bits );\
}

#define BM_IdlePerformance_L3_counterSecuredLu_BYTES_SIZE 4

#define BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7697_acc_bytes;\
	UINT bmlocal7698_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7697_acc_bytes = 16;\
	bmlocal7698_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7697_acc_bytes );\
	out_bitoff += bmlocal7698_acc_bits;\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7699_tmp_bitoff;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS( base_ptr, out_ptr, bmlocal7699_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7699_tmp_bitoff);\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_POS_ALIGNED 16

// Alignment of IdlePerformance_L3_counterUnSecuredLu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_IdlePerformance_L3_counterUnSecuredLu_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7700_my_ptr;\
	UINT bmlocal7701_my_bitoff;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS( base_ptr, bmlocal7700_my_ptr, bmlocal7701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7700_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7700_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7700_my_ptr, bmlocal7701_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7702_my_ptr;\
	UINT bmlocal7703_my_bitoff;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS( base_ptr, bmlocal7702_my_ptr, bmlocal7703_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7702_my_ptr, bmlocal7703_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// IdlePerformance_L3_counterUnSecuredLu: IS_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterUnSecuredLu: SET_DEFAULT accessor is not defined because no default value was specified.
// IdlePerformance_L3_counterUnSecuredLu: IS_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterUnSecuredLu: SET_RESET accessor is not defined because no reset value was specified.
// IdlePerformance_L3_counterUnSecuredLu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// IdlePerformance_L3_counterUnSecuredLu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_IdlePerformance_L3_counterUnSecuredLu_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7704_out_val;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET( base_ptr, bmlocal7704_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "counterUnSecuredLu", 32, (UINT)(bmlocal7704_out_val), "%d", 1);\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_counterUnSecuredLu_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7705_my_ptr;\
	UINT bmlocal7706_my_bitoff;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET_POS( base_ptr, bmlocal7705_my_ptr, bmlocal7706_my_bitoff );\
	(*((UINT32*)bmlocal7705_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7706_my_bitoff );\
}

// IdlePerformance_L3_counterUnSecuredLu: Validation accessors are not defined because validation condition was not specified.
#define BM_IdlePerformance_L3_counterUnSecuredLu_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7707_tmp_bits;\
	BM_IdlePerformance_L3_counterUnSecuredLu_GET_SIZE( base_ptr, out_bytes, bmlocal7707_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7707_tmp_bits );\
}

#define BM_IdlePerformance_L3_counterUnSecuredLu_BYTES_SIZE 4

#define BM_IdlePerformance_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 20;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7710_tmp_bits;\
	BM_IdlePerformance_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7710_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7710_tmp_bits );\
}

#define BM_IdlePerformance_L3_BYTES_SIZE 20

#define BM_IdlePerformance_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "IdlePerformance_L3", 1);\
	BM_IdlePerformance_L3_counterInternalTimer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdlePerformance_L3_counterNWInitiated_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdlePerformance_L3_counterGroupChange_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdlePerformance_L3_counterSecuredLu_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_IdlePerformance_L3_counterUnSecuredLu_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_IdlePerformance_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_IdlePerformance_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ScanStatus_L3[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _scanDuration : 8; //Duration of the requested scanning periods in frames
	UINT8 _scanIteration : 8; //The number of iterating scanning interval.
	UINT8 _modeReport : 8; //0b00:No report 0b01:Periodic report 0b10:Event-triggered report 0b11:Reserved
	UINT8 _periodReport : 8; //Required to report the value periodically
	UINT8 _interleavingInterval : 8; //Duration in frames
	UINT8 _reserved_bytes [3]; //reserved bytes, to make the next field start at an aligned address
} BMS_ScanStatus_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved_bytes [3]; //reserved bytes, to make the next field start at an aligned address
	UINT8 _interleavingInterval : 8; //Duration in frames
	UINT8 _periodReport : 8; //Required to report the value periodically
	UINT8 _modeReport : 8; //0b00:No report 0b01:Periodic report 0b10:Event-triggered report 0b11:Reserved
	UINT8 _scanIteration : 8; //The number of iterating scanning interval.
	UINT8 _scanDuration : 8; //Duration of the requested scanning periods in frames
} BMS_ScanStatus_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ScanStatus_L3' Type: 'ScanStatus_L3', Top-level, Non-instance, No bitoff root
#define BM_ScanStatus_L3_scanDuration_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ScanStatus_L3_scanDuration_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7711_tmp_bitoff;\
	BM_ScanStatus_L3_scanDuration_GET_POS( base_ptr, out_ptr, bmlocal7711_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7711_tmp_bitoff);\
}

#define BM_ScanStatus_L3_scanDuration_POS_ALIGNED 0

// Alignment of ScanStatus_L3_scanDuration: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanStatus_L3_scanDuration_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_scanDuration_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7712_my_ptr;\
	UINT bmlocal7713_my_bitoff;\
	BM_ScanStatus_L3_scanDuration_GET_POS( base_ptr, bmlocal7712_my_ptr, bmlocal7713_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7712_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7712_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7712_my_ptr, bmlocal7713_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ScanStatus_L3_scanDuration_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7714_my_ptr;\
	UINT bmlocal7715_my_bitoff;\
	BM_ScanStatus_L3_scanDuration_GET_POS( base_ptr, bmlocal7714_my_ptr, bmlocal7715_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7714_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7714_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7714_my_ptr, bmlocal7715_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ScanStatus_L3_scanDuration: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_scanDuration: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_scanDuration: IS_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_scanDuration: SET_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_scanDuration: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanStatus_L3_scanDuration: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanStatus_L3_scanDuration_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7716_out_val;\
	BM_ScanStatus_L3_scanDuration_GET( base_ptr, bmlocal7716_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "scanDuration", 8, (UINT)(bmlocal7716_out_val), "%d", 1);\
}

#define BM_ScanStatus_L3_scanDuration_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_scanDuration_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_scanDuration_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7717_my_ptr;\
	UINT bmlocal7718_my_bitoff;\
	BM_ScanStatus_L3_scanDuration_GET_POS( base_ptr, bmlocal7717_my_ptr, bmlocal7718_my_bitoff );\
	(*((UINT8*)bmlocal7717_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7718_my_bitoff );\
}

// ScanStatus_L3_scanDuration: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanStatus_L3_scanDuration_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7719_tmp_bits;\
	BM_ScanStatus_L3_scanDuration_GET_SIZE( base_ptr, out_bytes, bmlocal7719_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7719_tmp_bits );\
}

#define BM_ScanStatus_L3_scanDuration_BYTES_SIZE 1

#define BM_ScanStatus_L3_scanIteration_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7722_acc_bytes;\
	UINT bmlocal7723_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7722_acc_bytes = 1;\
	bmlocal7723_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7722_acc_bytes );\
	out_bitoff += bmlocal7723_acc_bits;\
}

#define BM_ScanStatus_L3_scanIteration_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7724_tmp_bitoff;\
	BM_ScanStatus_L3_scanIteration_GET_POS( base_ptr, out_ptr, bmlocal7724_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7724_tmp_bitoff);\
}

#define BM_ScanStatus_L3_scanIteration_POS_ALIGNED 1

// Alignment of ScanStatus_L3_scanIteration: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanStatus_L3_scanIteration_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_scanIteration_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7725_my_ptr;\
	UINT bmlocal7726_my_bitoff;\
	BM_ScanStatus_L3_scanIteration_GET_POS( base_ptr, bmlocal7725_my_ptr, bmlocal7726_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7725_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7725_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7725_my_ptr, bmlocal7726_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_ScanStatus_L3_scanIteration_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7727_my_ptr;\
	UINT bmlocal7728_my_bitoff;\
	BM_ScanStatus_L3_scanIteration_GET_POS( base_ptr, bmlocal7727_my_ptr, bmlocal7728_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7727_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7727_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7727_my_ptr, bmlocal7728_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// ScanStatus_L3_scanIteration: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_scanIteration: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_scanIteration: IS_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_scanIteration: SET_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_scanIteration: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanStatus_L3_scanIteration: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanStatus_L3_scanIteration_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7729_out_val;\
	BM_ScanStatus_L3_scanIteration_GET( base_ptr, bmlocal7729_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "scanIteration", 8, (UINT)(bmlocal7729_out_val), "%d", 1);\
}

#define BM_ScanStatus_L3_scanIteration_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_scanIteration_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_scanIteration_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7730_my_ptr;\
	UINT bmlocal7731_my_bitoff;\
	BM_ScanStatus_L3_scanIteration_GET_POS( base_ptr, bmlocal7730_my_ptr, bmlocal7731_my_bitoff );\
	(*((UINT8*)bmlocal7730_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7731_my_bitoff );\
}

// ScanStatus_L3_scanIteration: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanStatus_L3_scanIteration_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7732_tmp_bits;\
	BM_ScanStatus_L3_scanIteration_GET_SIZE( base_ptr, out_bytes, bmlocal7732_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7732_tmp_bits );\
}

#define BM_ScanStatus_L3_scanIteration_BYTES_SIZE 1

#define BM_ScanStatus_L3_modeReport_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7735_acc_bytes;\
	UINT bmlocal7736_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7735_acc_bytes = 2;\
	bmlocal7736_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7735_acc_bytes );\
	out_bitoff += bmlocal7736_acc_bits;\
}

#define BM_ScanStatus_L3_modeReport_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7737_tmp_bitoff;\
	BM_ScanStatus_L3_modeReport_GET_POS( base_ptr, out_ptr, bmlocal7737_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7737_tmp_bitoff);\
}

#define BM_ScanStatus_L3_modeReport_POS_ALIGNED 2

// Alignment of ScanStatus_L3_modeReport: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanStatus_L3_modeReport_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_modeReport_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7738_my_ptr;\
	UINT bmlocal7739_my_bitoff;\
	BM_ScanStatus_L3_modeReport_GET_POS( base_ptr, bmlocal7738_my_ptr, bmlocal7739_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7738_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7738_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7738_my_ptr, bmlocal7739_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_ScanStatus_L3_modeReport_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7740_my_ptr;\
	UINT bmlocal7741_my_bitoff;\
	BM_ScanStatus_L3_modeReport_GET_POS( base_ptr, bmlocal7740_my_ptr, bmlocal7741_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7740_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7740_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7740_my_ptr, bmlocal7741_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// ScanStatus_L3_modeReport: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_modeReport: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_modeReport: IS_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_modeReport: SET_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_modeReport: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanStatus_L3_modeReport: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanStatus_L3_modeReport_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7742_out_val;\
	BM_ScanStatus_L3_modeReport_GET( base_ptr, bmlocal7742_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "modeReport", 8, (UINT)(bmlocal7742_out_val), "%d", 1);\
}

#define BM_ScanStatus_L3_modeReport_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_modeReport_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_modeReport_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7743_my_ptr;\
	UINT bmlocal7744_my_bitoff;\
	BM_ScanStatus_L3_modeReport_GET_POS( base_ptr, bmlocal7743_my_ptr, bmlocal7744_my_bitoff );\
	(*((UINT8*)bmlocal7743_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7744_my_bitoff );\
}

// ScanStatus_L3_modeReport: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanStatus_L3_modeReport_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7745_tmp_bits;\
	BM_ScanStatus_L3_modeReport_GET_SIZE( base_ptr, out_bytes, bmlocal7745_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7745_tmp_bits );\
}

#define BM_ScanStatus_L3_modeReport_BYTES_SIZE 1

#define BM_ScanStatus_L3_periodReport_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7748_acc_bytes;\
	UINT bmlocal7749_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7748_acc_bytes = 3;\
	bmlocal7749_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7748_acc_bytes );\
	out_bitoff += bmlocal7749_acc_bits;\
}

#define BM_ScanStatus_L3_periodReport_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7750_tmp_bitoff;\
	BM_ScanStatus_L3_periodReport_GET_POS( base_ptr, out_ptr, bmlocal7750_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7750_tmp_bitoff);\
}

#define BM_ScanStatus_L3_periodReport_POS_ALIGNED 3

// Alignment of ScanStatus_L3_periodReport: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanStatus_L3_periodReport_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_periodReport_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7751_my_ptr;\
	UINT bmlocal7752_my_bitoff;\
	BM_ScanStatus_L3_periodReport_GET_POS( base_ptr, bmlocal7751_my_ptr, bmlocal7752_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7751_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7751_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7751_my_ptr, bmlocal7752_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ScanStatus_L3_periodReport_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7753_my_ptr;\
	UINT bmlocal7754_my_bitoff;\
	BM_ScanStatus_L3_periodReport_GET_POS( base_ptr, bmlocal7753_my_ptr, bmlocal7754_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7753_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7753_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7753_my_ptr, bmlocal7754_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ScanStatus_L3_periodReport: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_periodReport: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_periodReport: IS_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_periodReport: SET_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_periodReport: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanStatus_L3_periodReport: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanStatus_L3_periodReport_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7755_out_val;\
	BM_ScanStatus_L3_periodReport_GET( base_ptr, bmlocal7755_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "periodReport", 8, (UINT)(bmlocal7755_out_val), "%d", 1);\
}

#define BM_ScanStatus_L3_periodReport_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_periodReport_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_periodReport_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7756_my_ptr;\
	UINT bmlocal7757_my_bitoff;\
	BM_ScanStatus_L3_periodReport_GET_POS( base_ptr, bmlocal7756_my_ptr, bmlocal7757_my_bitoff );\
	(*((UINT8*)bmlocal7756_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7757_my_bitoff );\
}

// ScanStatus_L3_periodReport: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanStatus_L3_periodReport_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7758_tmp_bits;\
	BM_ScanStatus_L3_periodReport_GET_SIZE( base_ptr, out_bytes, bmlocal7758_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7758_tmp_bits );\
}

#define BM_ScanStatus_L3_periodReport_BYTES_SIZE 1

#define BM_ScanStatus_L3_interleavingInterval_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7761_acc_bytes;\
	UINT bmlocal7762_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7761_acc_bytes = 4;\
	bmlocal7762_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7761_acc_bytes );\
	out_bitoff += bmlocal7762_acc_bits;\
}

#define BM_ScanStatus_L3_interleavingInterval_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7763_tmp_bitoff;\
	BM_ScanStatus_L3_interleavingInterval_GET_POS( base_ptr, out_ptr, bmlocal7763_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7763_tmp_bitoff);\
}

#define BM_ScanStatus_L3_interleavingInterval_POS_ALIGNED 4

// Alignment of ScanStatus_L3_interleavingInterval: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanStatus_L3_interleavingInterval_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_interleavingInterval_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7764_my_ptr;\
	UINT bmlocal7765_my_bitoff;\
	BM_ScanStatus_L3_interleavingInterval_GET_POS( base_ptr, bmlocal7764_my_ptr, bmlocal7765_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7764_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7764_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7764_my_ptr, bmlocal7765_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ScanStatus_L3_interleavingInterval_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7766_my_ptr;\
	UINT bmlocal7767_my_bitoff;\
	BM_ScanStatus_L3_interleavingInterval_GET_POS( base_ptr, bmlocal7766_my_ptr, bmlocal7767_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7766_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7766_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7766_my_ptr, bmlocal7767_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ScanStatus_L3_interleavingInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_interleavingInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanStatus_L3_interleavingInterval: IS_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_interleavingInterval: SET_RESET accessor is not defined because no reset value was specified.
// ScanStatus_L3_interleavingInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanStatus_L3_interleavingInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanStatus_L3_interleavingInterval_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7768_out_val;\
	BM_ScanStatus_L3_interleavingInterval_GET( base_ptr, bmlocal7768_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "interleavingInterval", 8, (UINT)(bmlocal7768_out_val), "%d", 1);\
}

#define BM_ScanStatus_L3_interleavingInterval_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_interleavingInterval_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_interleavingInterval_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7769_my_ptr;\
	UINT bmlocal7770_my_bitoff;\
	BM_ScanStatus_L3_interleavingInterval_GET_POS( base_ptr, bmlocal7769_my_ptr, bmlocal7770_my_bitoff );\
	(*((UINT8*)bmlocal7769_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7770_my_bitoff );\
}

// ScanStatus_L3_interleavingInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanStatus_L3_interleavingInterval_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7771_tmp_bits;\
	BM_ScanStatus_L3_interleavingInterval_GET_SIZE( base_ptr, out_bytes, bmlocal7771_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7771_tmp_bits );\
}

#define BM_ScanStatus_L3_interleavingInterval_BYTES_SIZE 1

#define BM_ScanStatus_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7774_acc_bytes;\
	UINT bmlocal7775_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7774_acc_bytes = 5;\
	bmlocal7775_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7774_acc_bytes );\
	out_bitoff += bmlocal7775_acc_bits;\
}

#define BM_ScanStatus_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7776_tmp_bitoff;\
	BM_ScanStatus_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7776_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7776_tmp_bitoff);\
}

#define BM_ScanStatus_L3_reserved_POS_ALIGNED 5

#define BM_ScanStatus_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7777_my_ptr;\
	UINT bmlocal7778_my_bitoff;\
	BM_ScanStatus_L3_reserved_GET_POS( base_ptr, bmlocal7777_my_ptr, bmlocal7778_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7777_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7777_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7777_my_ptr, bmlocal7778_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_ScanStatus_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7779_my_ptr;\
	UINT bmlocal7780_my_bitoff;\
	BM_ScanStatus_L3_reserved_GET_POS( base_ptr, bmlocal7779_my_ptr, bmlocal7780_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7779_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7779_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7779_my_ptr, bmlocal7780_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_ScanStatus_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7781_out_bytes;\
	UINT bmlocal7782_out_bits;\
	BM_ScanStatus_L3_reserved_GET_SIZE( base_ptr, bmlocal7781_out_bytes, bmlocal7782_out_bits );\
	bmlocal7782_out_bits += bmlocal7781_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7782_out_bits), "%d", 1);\
}

#define BM_ScanStatus_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanStatus_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7783_tmp_bits;\
	BM_ScanStatus_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal7783_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7783_tmp_bits );\
}

#define BM_ScanStatus_L3_reserved_BYTES_SIZE 3

#define BM_ScanStatus_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7786_tmp_bits;\
	BM_ScanStatus_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7786_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7786_tmp_bits );\
}

#define BM_ScanStatus_L3_BYTES_SIZE 8

#define BM_ScanStatus_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ScanStatus_L3", 1);\
	BM_ScanStatus_L3_scanDuration_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanStatus_L3_scanIteration_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanStatus_L3_modeReport_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanStatus_L3_periodReport_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanStatus_L3_interleavingInterval_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanStatus_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanStatus_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanStatus_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DSxTimers_L3[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _t7Timeout : 16;
	UINT16 _t8Timeout : 16;
	UINT16 _t10Timeout : 16;
	UINT8 _dsxReqRetries : 8;
	UINT8 _dsxRspRetries : 8;
} BMS_DSxTimers_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _dsxRspRetries : 8;
	UINT8 _dsxReqRetries : 8;
	UINT16 _t10Timeout : 16;
	UINT16 _t8Timeout : 16;
	UINT16 _t7Timeout : 16;
} BMS_DSxTimers_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DSxTimers_L3' Type: 'DSxTimers_L3', Top-level, Non-instance, No bitoff root
#define BM_DSxTimers_L3_t7Timeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DSxTimers_L3_t7Timeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7787_tmp_bitoff;\
	BM_DSxTimers_L3_t7Timeout_GET_POS( base_ptr, out_ptr, bmlocal7787_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7787_tmp_bitoff);\
}

#define BM_DSxTimers_L3_t7Timeout_POS_ALIGNED 0

// Alignment of DSxTimers_L3_t7Timeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DSxTimers_L3_t7Timeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_t7Timeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7788_my_ptr;\
	UINT bmlocal7789_my_bitoff;\
	BM_DSxTimers_L3_t7Timeout_GET_POS( base_ptr, bmlocal7788_my_ptr, bmlocal7789_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7788_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7788_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7788_my_ptr, bmlocal7789_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_DSxTimers_L3_t7Timeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7790_my_ptr;\
	UINT bmlocal7791_my_bitoff;\
	BM_DSxTimers_L3_t7Timeout_GET_POS( base_ptr, bmlocal7790_my_ptr, bmlocal7791_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7790_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7790_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7790_my_ptr, bmlocal7791_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// DSxTimers_L3_t7Timeout: IS_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t7Timeout: SET_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t7Timeout: IS_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t7Timeout: SET_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t7Timeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DSxTimers_L3_t7Timeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DSxTimers_L3_t7Timeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7792_out_val;\
	BM_DSxTimers_L3_t7Timeout_GET( base_ptr, bmlocal7792_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t7Timeout", 16, (UINT)(bmlocal7792_out_val), "%d", 1);\
}

#define BM_DSxTimers_L3_t7Timeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_t7Timeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DSxTimers_L3_t7Timeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7793_my_ptr;\
	UINT bmlocal7794_my_bitoff;\
	BM_DSxTimers_L3_t7Timeout_GET_POS( base_ptr, bmlocal7793_my_ptr, bmlocal7794_my_bitoff );\
	(*((UINT16*)bmlocal7793_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7794_my_bitoff );\
}

// DSxTimers_L3_t7Timeout: Validation accessors are not defined because validation condition was not specified.
#define BM_DSxTimers_L3_t7Timeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7795_tmp_bits;\
	BM_DSxTimers_L3_t7Timeout_GET_SIZE( base_ptr, out_bytes, bmlocal7795_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7795_tmp_bits );\
}

#define BM_DSxTimers_L3_t7Timeout_BYTES_SIZE 2

#define BM_DSxTimers_L3_t8Timeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7798_acc_bytes;\
	UINT bmlocal7799_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7798_acc_bytes = 2;\
	bmlocal7799_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7798_acc_bytes );\
	out_bitoff += bmlocal7799_acc_bits;\
}

#define BM_DSxTimers_L3_t8Timeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7800_tmp_bitoff;\
	BM_DSxTimers_L3_t8Timeout_GET_POS( base_ptr, out_ptr, bmlocal7800_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7800_tmp_bitoff);\
}

#define BM_DSxTimers_L3_t8Timeout_POS_ALIGNED 2

// Alignment of DSxTimers_L3_t8Timeout: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DSxTimers_L3_t8Timeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_t8Timeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7801_my_ptr;\
	UINT bmlocal7802_my_bitoff;\
	BM_DSxTimers_L3_t8Timeout_GET_POS( base_ptr, bmlocal7801_my_ptr, bmlocal7802_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7801_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7801_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7801_my_ptr, bmlocal7802_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_DSxTimers_L3_t8Timeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7803_my_ptr;\
	UINT bmlocal7804_my_bitoff;\
	BM_DSxTimers_L3_t8Timeout_GET_POS( base_ptr, bmlocal7803_my_ptr, bmlocal7804_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7803_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7803_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7803_my_ptr, bmlocal7804_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// DSxTimers_L3_t8Timeout: IS_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t8Timeout: SET_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t8Timeout: IS_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t8Timeout: SET_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t8Timeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DSxTimers_L3_t8Timeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DSxTimers_L3_t8Timeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7805_out_val;\
	BM_DSxTimers_L3_t8Timeout_GET( base_ptr, bmlocal7805_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t8Timeout", 16, (UINT)(bmlocal7805_out_val), "%d", 1);\
}

#define BM_DSxTimers_L3_t8Timeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_t8Timeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DSxTimers_L3_t8Timeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7806_my_ptr;\
	UINT bmlocal7807_my_bitoff;\
	BM_DSxTimers_L3_t8Timeout_GET_POS( base_ptr, bmlocal7806_my_ptr, bmlocal7807_my_bitoff );\
	(*((UINT16*)bmlocal7806_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7807_my_bitoff );\
}

// DSxTimers_L3_t8Timeout: Validation accessors are not defined because validation condition was not specified.
#define BM_DSxTimers_L3_t8Timeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7808_tmp_bits;\
	BM_DSxTimers_L3_t8Timeout_GET_SIZE( base_ptr, out_bytes, bmlocal7808_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7808_tmp_bits );\
}

#define BM_DSxTimers_L3_t8Timeout_BYTES_SIZE 2

#define BM_DSxTimers_L3_t10Timeout_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7811_acc_bytes;\
	UINT bmlocal7812_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7811_acc_bytes = 4;\
	bmlocal7812_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7811_acc_bytes );\
	out_bitoff += bmlocal7812_acc_bits;\
}

#define BM_DSxTimers_L3_t10Timeout_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7813_tmp_bitoff;\
	BM_DSxTimers_L3_t10Timeout_GET_POS( base_ptr, out_ptr, bmlocal7813_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7813_tmp_bitoff);\
}

#define BM_DSxTimers_L3_t10Timeout_POS_ALIGNED 4

// Alignment of DSxTimers_L3_t10Timeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DSxTimers_L3_t10Timeout_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_t10Timeout_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7814_my_ptr;\
	UINT bmlocal7815_my_bitoff;\
	BM_DSxTimers_L3_t10Timeout_GET_POS( base_ptr, bmlocal7814_my_ptr, bmlocal7815_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7814_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7814_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7814_my_ptr, bmlocal7815_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_DSxTimers_L3_t10Timeout_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7816_my_ptr;\
	UINT bmlocal7817_my_bitoff;\
	BM_DSxTimers_L3_t10Timeout_GET_POS( base_ptr, bmlocal7816_my_ptr, bmlocal7817_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7816_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7816_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7816_my_ptr, bmlocal7817_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// DSxTimers_L3_t10Timeout: IS_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t10Timeout: SET_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_t10Timeout: IS_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t10Timeout: SET_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_t10Timeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DSxTimers_L3_t10Timeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DSxTimers_L3_t10Timeout_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal7818_out_val;\
	BM_DSxTimers_L3_t10Timeout_GET( base_ptr, bmlocal7818_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t10Timeout", 16, (UINT)(bmlocal7818_out_val), "%d", 1);\
}

#define BM_DSxTimers_L3_t10Timeout_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_t10Timeout_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DSxTimers_L3_t10Timeout_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7819_my_ptr;\
	UINT bmlocal7820_my_bitoff;\
	BM_DSxTimers_L3_t10Timeout_GET_POS( base_ptr, bmlocal7819_my_ptr, bmlocal7820_my_bitoff );\
	(*((UINT16*)bmlocal7819_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7820_my_bitoff );\
}

// DSxTimers_L3_t10Timeout: Validation accessors are not defined because validation condition was not specified.
#define BM_DSxTimers_L3_t10Timeout_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7821_tmp_bits;\
	BM_DSxTimers_L3_t10Timeout_GET_SIZE( base_ptr, out_bytes, bmlocal7821_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7821_tmp_bits );\
}

#define BM_DSxTimers_L3_t10Timeout_BYTES_SIZE 2

#define BM_DSxTimers_L3_dsxReqRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7824_acc_bytes;\
	UINT bmlocal7825_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7824_acc_bytes = 6;\
	bmlocal7825_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7824_acc_bytes );\
	out_bitoff += bmlocal7825_acc_bits;\
}

#define BM_DSxTimers_L3_dsxReqRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7826_tmp_bitoff;\
	BM_DSxTimers_L3_dsxReqRetries_GET_POS( base_ptr, out_ptr, bmlocal7826_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7826_tmp_bitoff);\
}

#define BM_DSxTimers_L3_dsxReqRetries_POS_ALIGNED 6

// Alignment of DSxTimers_L3_dsxReqRetries: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DSxTimers_L3_dsxReqRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_dsxReqRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7827_my_ptr;\
	UINT bmlocal7828_my_bitoff;\
	BM_DSxTimers_L3_dsxReqRetries_GET_POS( base_ptr, bmlocal7827_my_ptr, bmlocal7828_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7827_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7827_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7827_my_ptr, bmlocal7828_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_DSxTimers_L3_dsxReqRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7829_my_ptr;\
	UINT bmlocal7830_my_bitoff;\
	BM_DSxTimers_L3_dsxReqRetries_GET_POS( base_ptr, bmlocal7829_my_ptr, bmlocal7830_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7829_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7829_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7829_my_ptr, bmlocal7830_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// DSxTimers_L3_dsxReqRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_dsxReqRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_dsxReqRetries: IS_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_dsxReqRetries: SET_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_dsxReqRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DSxTimers_L3_dsxReqRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DSxTimers_L3_dsxReqRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7831_out_val;\
	BM_DSxTimers_L3_dsxReqRetries_GET( base_ptr, bmlocal7831_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dsxReqRetries", 8, (UINT)(bmlocal7831_out_val), "%d", 1);\
}

#define BM_DSxTimers_L3_dsxReqRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_dsxReqRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DSxTimers_L3_dsxReqRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7832_my_ptr;\
	UINT bmlocal7833_my_bitoff;\
	BM_DSxTimers_L3_dsxReqRetries_GET_POS( base_ptr, bmlocal7832_my_ptr, bmlocal7833_my_bitoff );\
	(*((UINT8*)bmlocal7832_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7833_my_bitoff );\
}

// DSxTimers_L3_dsxReqRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_DSxTimers_L3_dsxReqRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7834_tmp_bits;\
	BM_DSxTimers_L3_dsxReqRetries_GET_SIZE( base_ptr, out_bytes, bmlocal7834_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7834_tmp_bits );\
}

#define BM_DSxTimers_L3_dsxReqRetries_BYTES_SIZE 1

#define BM_DSxTimers_L3_dsxRspRetries_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7837_acc_bytes;\
	UINT bmlocal7838_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7837_acc_bytes = 7;\
	bmlocal7838_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7837_acc_bytes );\
	out_bitoff += bmlocal7838_acc_bits;\
}

#define BM_DSxTimers_L3_dsxRspRetries_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7839_tmp_bitoff;\
	BM_DSxTimers_L3_dsxRspRetries_GET_POS( base_ptr, out_ptr, bmlocal7839_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7839_tmp_bitoff);\
}

#define BM_DSxTimers_L3_dsxRspRetries_POS_ALIGNED 7

// Alignment of DSxTimers_L3_dsxRspRetries: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DSxTimers_L3_dsxRspRetries_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_dsxRspRetries_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7840_my_ptr;\
	UINT bmlocal7841_my_bitoff;\
	BM_DSxTimers_L3_dsxRspRetries_GET_POS( base_ptr, bmlocal7840_my_ptr, bmlocal7841_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7840_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7840_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7840_my_ptr, bmlocal7841_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_DSxTimers_L3_dsxRspRetries_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7842_my_ptr;\
	UINT bmlocal7843_my_bitoff;\
	BM_DSxTimers_L3_dsxRspRetries_GET_POS( base_ptr, bmlocal7842_my_ptr, bmlocal7843_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7842_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7842_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7842_my_ptr, bmlocal7843_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// DSxTimers_L3_dsxRspRetries: IS_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_dsxRspRetries: SET_DEFAULT accessor is not defined because no default value was specified.
// DSxTimers_L3_dsxRspRetries: IS_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_dsxRspRetries: SET_RESET accessor is not defined because no reset value was specified.
// DSxTimers_L3_dsxRspRetries: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DSxTimers_L3_dsxRspRetries: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DSxTimers_L3_dsxRspRetries_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7844_out_val;\
	BM_DSxTimers_L3_dsxRspRetries_GET( base_ptr, bmlocal7844_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dsxRspRetries", 8, (UINT)(bmlocal7844_out_val), "%d", 1);\
}

#define BM_DSxTimers_L3_dsxRspRetries_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_dsxRspRetries_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DSxTimers_L3_dsxRspRetries_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7845_my_ptr;\
	UINT bmlocal7846_my_bitoff;\
	BM_DSxTimers_L3_dsxRspRetries_GET_POS( base_ptr, bmlocal7845_my_ptr, bmlocal7846_my_bitoff );\
	(*((UINT8*)bmlocal7845_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7846_my_bitoff );\
}

// DSxTimers_L3_dsxRspRetries: Validation accessors are not defined because validation condition was not specified.
#define BM_DSxTimers_L3_dsxRspRetries_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7847_tmp_bits;\
	BM_DSxTimers_L3_dsxRspRetries_GET_SIZE( base_ptr, out_bytes, bmlocal7847_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7847_tmp_bits );\
}

#define BM_DSxTimers_L3_dsxRspRetries_BYTES_SIZE 1

#define BM_DSxTimers_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7850_tmp_bits;\
	BM_DSxTimers_L3_GET_SIZE( base_ptr, out_bytes, bmlocal7850_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7850_tmp_bits );\
}

#define BM_DSxTimers_L3_BYTES_SIZE 8

#define BM_DSxTimers_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DSxTimers_L3", 1);\
	BM_DSxTimers_L3_t7Timeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DSxTimers_L3_t8Timeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DSxTimers_L3_t10Timeout_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DSxTimers_L3_dsxReqRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DSxTimers_L3_dsxRspRetries_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DSxTimers_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DSxTimers_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 NbrCellList_L3[4];

// COMPOSITE: Full name: 'NbrCellList_L3' Type: 'NbrCellList_L3', Top-level, Non-instance, No bitoff root
#define BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7851_tmp_bitoff;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS( base_ptr, out_ptr, bmlocal7851_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7851_tmp_bitoff);\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_POS_ALIGNED 0

// Alignment of NbrCellList_L3_numOfIntraFASNbrs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_numOfIntraFASNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7852_my_ptr;\
	UINT bmlocal7853_my_bitoff;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS( base_ptr, bmlocal7852_my_ptr, bmlocal7853_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7852_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7852_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7852_my_ptr, bmlocal7853_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7854_my_ptr;\
	UINT bmlocal7855_my_bitoff;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS( base_ptr, bmlocal7854_my_ptr, bmlocal7855_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7854_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7854_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7854_my_ptr, bmlocal7855_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// NbrCellList_L3_numOfIntraFASNbrs: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_numOfIntraFASNbrs: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_numOfIntraFASNbrs: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_numOfIntraFASNbrs: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_numOfIntraFASNbrs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_numOfIntraFASNbrs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_numOfIntraFASNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7856_out_val;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET( base_ptr, bmlocal7856_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfIntraFASNbrs", 8, (UINT)(bmlocal7856_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_numOfIntraFASNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7857_my_ptr;\
	UINT bmlocal7858_my_bitoff;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET_POS( base_ptr, bmlocal7857_my_ptr, bmlocal7858_my_bitoff );\
	(*((UINT8*)bmlocal7857_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7858_my_bitoff );\
}

// NbrCellList_L3_numOfIntraFASNbrs: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_numOfIntraFASNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7859_tmp_bits;\
	BM_NbrCellList_L3_numOfIntraFASNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal7859_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7859_tmp_bits );\
}

#define BM_NbrCellList_L3_numOfIntraFASNbrs_BYTES_SIZE 1

#define BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7862_acc_bytes;\
	UINT bmlocal7863_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7862_acc_bytes = 1;\
	bmlocal7863_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7862_acc_bytes );\
	out_bitoff += bmlocal7863_acc_bits;\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7864_tmp_bitoff;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS( base_ptr, out_ptr, bmlocal7864_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7864_tmp_bitoff);\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_POS_ALIGNED 1

// Alignment of NbrCellList_L3_numOfInterFASNbrs: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_numOfInterFASNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7865_my_ptr;\
	UINT bmlocal7866_my_bitoff;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS( base_ptr, bmlocal7865_my_ptr, bmlocal7866_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7865_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7865_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7865_my_ptr, bmlocal7866_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7867_my_ptr;\
	UINT bmlocal7868_my_bitoff;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS( base_ptr, bmlocal7867_my_ptr, bmlocal7868_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7867_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7867_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7867_my_ptr, bmlocal7868_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// NbrCellList_L3_numOfInterFASNbrs: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_numOfInterFASNbrs: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_numOfInterFASNbrs: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_numOfInterFASNbrs: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_numOfInterFASNbrs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_numOfInterFASNbrs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_numOfInterFASNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7869_out_val;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET( base_ptr, bmlocal7869_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfInterFASNbrs", 8, (UINT)(bmlocal7869_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_numOfInterFASNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7870_my_ptr;\
	UINT bmlocal7871_my_bitoff;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET_POS( base_ptr, bmlocal7870_my_ptr, bmlocal7871_my_bitoff );\
	(*((UINT8*)bmlocal7870_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7871_my_bitoff );\
}

// NbrCellList_L3_numOfInterFASNbrs: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_numOfInterFASNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7872_tmp_bits;\
	BM_NbrCellList_L3_numOfInterFASNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal7872_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7872_tmp_bits );\
}

#define BM_NbrCellList_L3_numOfInterFASNbrs_BYTES_SIZE 1

#define BM_NbrCellList_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7875_acc_bytes;\
	UINT bmlocal7876_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7875_acc_bytes = 2;\
	bmlocal7876_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7875_acc_bytes );\
	out_bitoff += bmlocal7876_acc_bits;\
}

#define BM_NbrCellList_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7877_tmp_bitoff;\
	BM_NbrCellList_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal7877_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7877_tmp_bitoff);\
}

#define BM_NbrCellList_L3_reserved_POS_ALIGNED 2

#define BM_NbrCellList_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7878_my_ptr;\
	UINT bmlocal7879_my_bitoff;\
	BM_NbrCellList_L3_reserved_GET_POS( base_ptr, bmlocal7878_my_ptr, bmlocal7879_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7878_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7878_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7878_my_ptr, bmlocal7879_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_NbrCellList_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7880_my_ptr;\
	UINT bmlocal7881_my_bitoff;\
	BM_NbrCellList_L3_reserved_GET_POS( base_ptr, bmlocal7880_my_ptr, bmlocal7881_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7880_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7880_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7880_my_ptr, bmlocal7881_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_NbrCellList_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7882_out_bytes;\
	UINT bmlocal7883_out_bits;\
	BM_NbrCellList_L3_reserved_GET_SIZE( base_ptr, bmlocal7882_out_bytes, bmlocal7883_out_bits );\
	bmlocal7883_out_bits += bmlocal7882_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal7883_out_bits), "%d", 1);\
}

#define BM_NbrCellList_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NbrCellList_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7884_tmp_bits;\
	BM_NbrCellList_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal7884_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7884_tmp_bits );\
}

#define BM_NbrCellList_L3_reserved_BYTES_SIZE 2

#define BM_NbrCellList_L3_intraFaNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7887_acc_bytes;\
	UINT bmlocal7888_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7887_acc_bytes = 4;\
	bmlocal7888_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7887_acc_bytes );\
	out_bitoff += bmlocal7888_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7889_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_GET_POS( base_ptr, out_ptr, bmlocal7889_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7889_tmp_bitoff);\
}

#define BM_NbrCellList_L3_intraFaNbrs_POS_ALIGNED 4

// ARRAY: NbrCellList_L3_intraFaNbrs
#define BM_NbrCellList_L3_intraFaNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal7890_var0;\
		BM_NbrCellList_L3_numOfIntraFASNbrs_GET( base_ptr, bmlocal7890_var0 );\
		out_bytes = (UINT)(16*(1*bmlocal7890_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_intraFaNbrs_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal7891_var0;\
			BM_NbrCellList_L3_numOfIntraFASNbrs_GET( base_ptr, bmlocal7891_var0 );\
			out_element_count = (UINT)(bmlocal7891_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7892_out_ptr;\
	UINT bmlocal7893_out_bitoff;\
	UINT bmlocal7894_element_size_bytes;\
	UINT bmlocal7895_element_size_bits;\
	BM_NbrCellList_L3_intraFaNbrs_GET_POS( base_ptr, bmlocal7892_out_ptr, bmlocal7893_out_bitoff );\
	bmlocal7894_element_size_bytes = 16;\
	bmlocal7895_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7892_out_ptr) + (idx0) * bmlocal7894_element_size_bytes );\
	out_bitoff = bmlocal7893_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7895_element_size_bits );\
}

// COMPOSITE: Full name: 'NbrCellList_L3_intraFaNbrs' Type: 'MetricsInfo', Inner, Non-instance, No bitoff root
#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7896_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7896_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7896_parent_out_ptr;\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7897_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS( base_ptr, idx0, out_ptr, bmlocal7897_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7897_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_intraFaNbrs_rssiMean: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7898_my_ptr;\
	UINT bmlocal7899_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS( base_ptr, idx0, bmlocal7898_my_ptr, bmlocal7899_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7898_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7898_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7898_my_ptr, bmlocal7899_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7900_my_ptr;\
	UINT bmlocal7901_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS( base_ptr, idx0, bmlocal7900_my_ptr, bmlocal7901_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7900_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7900_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7900_my_ptr, bmlocal7901_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// NbrCellList_L3_intraFaNbrs_rssiMean: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_rssiMean: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_rssiMean: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_rssiMean: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_rssiMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_rssiMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal7902_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET( base_ptr, idx0, bmlocal7902_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rssiMean", 16, (UINT)(bmlocal7902_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7903_my_ptr;\
	UINT bmlocal7904_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_POS( base_ptr, idx0, bmlocal7903_my_ptr, bmlocal7904_my_bitoff );\
	(*((UINT16*)bmlocal7903_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7904_my_bitoff );\
}

// NbrCellList_L3_intraFaNbrs_rssiMean: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7905_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7905_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7905_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_rssiMean_BYTES_SIZE 2

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7908_acc_bytes;\
	UINT bmlocal7909_acc_bits;\
	PVOID bmlocal7910_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7910_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7910_parent_out_ptr;\
	bmlocal7908_acc_bytes = 2;\
	bmlocal7909_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7908_acc_bytes );\
	out_bitoff += bmlocal7909_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7911_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS( base_ptr, idx0, out_ptr, bmlocal7911_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7911_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_intraFaNbrs_cinrMean: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7912_my_ptr;\
	UINT bmlocal7913_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS( base_ptr, idx0, bmlocal7912_my_ptr, bmlocal7913_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7912_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7912_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7912_my_ptr, bmlocal7913_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7914_my_ptr;\
	UINT bmlocal7915_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS( base_ptr, idx0, bmlocal7914_my_ptr, bmlocal7915_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7914_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7914_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7914_my_ptr, bmlocal7915_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// NbrCellList_L3_intraFaNbrs_cinrMean: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_cinrMean: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_cinrMean: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_cinrMean: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_cinrMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_cinrMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal7916_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET( base_ptr, idx0, bmlocal7916_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cinrMean", 16, (UINT)(bmlocal7916_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7917_my_ptr;\
	UINT bmlocal7918_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_POS( base_ptr, idx0, bmlocal7917_my_ptr, bmlocal7918_my_bitoff );\
	(*((UINT16*)bmlocal7917_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7918_my_bitoff );\
}

// NbrCellList_L3_intraFaNbrs_cinrMean: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7919_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7919_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7919_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_cinrMean_BYTES_SIZE 2

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7922_acc_bytes;\
	UINT bmlocal7923_acc_bits;\
	PVOID bmlocal7924_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7924_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7924_parent_out_ptr;\
	bmlocal7922_acc_bytes = 4;\
	bmlocal7923_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7922_acc_bytes );\
	out_bitoff += bmlocal7923_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7925_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, bmlocal7925_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7925_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_intraFaNbrs_preambleId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7926_my_ptr;\
	UINT bmlocal7927_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal7926_my_ptr, bmlocal7927_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7926_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7926_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7926_my_ptr, bmlocal7927_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7928_my_ptr;\
	UINT bmlocal7929_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal7928_my_ptr, bmlocal7929_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7928_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7928_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7928_my_ptr, bmlocal7929_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// NbrCellList_L3_intraFaNbrs_preambleId: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_preambleId: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_preambleId: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_preambleId: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_preambleId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_preambleId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7930_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET( base_ptr, idx0, bmlocal7930_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleId", 8, (UINT)(bmlocal7930_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7931_my_ptr;\
	UINT bmlocal7932_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal7931_my_ptr, bmlocal7932_my_bitoff );\
	(*((UINT8*)bmlocal7931_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7932_my_bitoff );\
}

// NbrCellList_L3_intraFaNbrs_preambleId: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7933_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7933_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7933_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_preambleId_BYTES_SIZE 1

#define BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7936_acc_bytes;\
	UINT bmlocal7937_acc_bits;\
	PVOID bmlocal7938_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7938_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7938_parent_out_ptr;\
	bmlocal7936_acc_bytes = 5;\
	bmlocal7937_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7936_acc_bytes );\
	out_bitoff += bmlocal7937_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7939_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal7939_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7939_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_intraFaNbrs_frequency: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_intraFaNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7940_my_ptr;\
	UINT bmlocal7941_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal7940_my_ptr, bmlocal7941_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7940_my_ptr)-1) ), 8, 24, 0);\
		(out_val) = (UINT32)(out_val | BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7940_my_ptr)+3) ), 0, 8, 24));\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7940_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7940_my_ptr, bmlocal7941_my_bitoff, 32, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7942_my_ptr;\
	UINT bmlocal7943_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal7942_my_ptr, bmlocal7943_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7942_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7942_my_ptr)+3 ), (in_val), 0, 24, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7942_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7942_my_ptr, bmlocal7943_my_bitoff, 32, in_val, 0x00000001 );\
	}\
}

// NbrCellList_L3_intraFaNbrs_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_frequency: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_frequency: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7944_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET( base_ptr, idx0, bmlocal7944_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal7944_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_intraFaNbrs_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#if (defined __arm || defined __arc)
#define BM_NbrCellList_L3_intraFaNbrs_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal7945_val;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET( base_ptr, idx0, bmlocal7945_val );\
	(bmlocal7945_val)++;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_SET( base_ptr, idx0, bmlocal7945_val );\
}

#else // NOT __arm || __arc
#define BM_NbrCellList_L3_intraFaNbrs_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7946_my_ptr;\
	UINT bmlocal7947_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal7946_my_ptr, bmlocal7947_my_bitoff );\
	(*((UINT32*)bmlocal7946_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7947_my_bitoff );\
}

#endif
// NbrCellList_L3_intraFaNbrs_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7948_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7948_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7948_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_frequency_BYTES_SIZE 4

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7951_acc_bytes;\
	UINT bmlocal7952_acc_bits;\
	PVOID bmlocal7953_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7953_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7953_parent_out_ptr;\
	bmlocal7951_acc_bytes = 9;\
	bmlocal7952_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7951_acc_bytes );\
	out_bitoff += bmlocal7952_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7954_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, bmlocal7954_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7954_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_intraFaNbrs_bandWidth: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7955_my_ptr;\
	UINT bmlocal7956_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal7955_my_ptr, bmlocal7956_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7955_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7955_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7955_my_ptr, bmlocal7956_my_bitoff, 8, E_BandWidth, out_val, 0x00000001 );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7957_my_ptr;\
	UINT bmlocal7958_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal7957_my_ptr, bmlocal7958_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7957_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7957_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7957_my_ptr, bmlocal7958_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// NbrCellList_L3_intraFaNbrs_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal7959_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET( base_ptr, idx0, bmlocal7959_out_val );\
	if( bmlocal7959_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal7959_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal7959_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal7959_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal7959_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7960_my_ptr;\
	UINT bmlocal7961_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal7960_my_ptr, bmlocal7961_my_bitoff );\
	(*((UINT8*)bmlocal7960_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7961_my_bitoff );\
}

// NbrCellList_L3_intraFaNbrs_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7962_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7962_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7962_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bandWidth_BYTES_SIZE 1

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7965_acc_bytes;\
	UINT bmlocal7966_acc_bits;\
	PVOID bmlocal7967_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal7967_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7967_parent_out_ptr;\
	bmlocal7965_acc_bytes = 10;\
	bmlocal7966_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7965_acc_bytes );\
	out_bitoff += bmlocal7966_acc_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal7968_tmp_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, bmlocal7968_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal7968_tmp_bitoff);\
}

// ARRAY: NbrCellList_L3_intraFaNbrs_bsId
#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7969_out_ptr;\
	UINT bmlocal7970_out_bitoff;\
	UINT bmlocal7971_element_size_bytes;\
	UINT bmlocal7972_element_size_bits;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_POS( base_ptr, idx0, bmlocal7969_out_ptr, bmlocal7970_out_bitoff );\
	bmlocal7971_element_size_bytes = 1;\
	bmlocal7972_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal7969_out_ptr) + (idx1) * bmlocal7971_element_size_bytes );\
	out_bitoff = bmlocal7970_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal7972_element_size_bits );\
}

// COMPOSITE: Full name: 'NbrCellList_L3_intraFaNbrs_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7973_parent_out_ptr;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal7973_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal7973_parent_out_ptr;\
}

// Alignment of NbrCellList_L3_intraFaNbrs_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7974_my_ptr;\
	UINT bmlocal7975_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7974_my_ptr, bmlocal7975_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7974_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7974_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal7974_my_ptr, bmlocal7975_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7976_my_ptr;\
	UINT bmlocal7977_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7976_my_ptr, bmlocal7977_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7976_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal7976_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal7976_my_ptr, bmlocal7977_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// NbrCellList_L3_intraFaNbrs_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_intraFaNbrs_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_intraFaNbrs_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_intraFaNbrs_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal7978_out_val;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET( base_ptr, idx0, idx1, bmlocal7978_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal7978_out_val), "%u", 1);\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal7979_my_ptr;\
	UINT bmlocal7980_my_bitoff;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal7979_my_ptr, bmlocal7980_my_bitoff );\
	(*((UINT8*)bmlocal7979_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal7980_my_bitoff );\
}

// NbrCellList_L3_intraFaNbrs_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7981_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7981_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7981_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_value_BYTES_SIZE 1

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7984_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal7984_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7984_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_BYTES_CELL_SIZE 1

#define BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7985_dim_size0;\
	UINT bmlocal7986_idx0;\
	bmlocal7985_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal7986_idx0=0; bmlocal7986_idx0<bmlocal7985_dim_size0; bmlocal7986_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7986_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal7986_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7987_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal7987_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7987_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_bsId_BYTES_SIZE 6

#define BM_NbrCellList_L3_intraFaNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal7988_tmp_bytes = 0;\
	UINT bmlocal7989_tmp_bits = 0;\
	out_bytes = 10;\
	out_bits = 0;\
	BM_NbrCellList_L3_intraFaNbrs_bsId_GET_SIZE( base_ptr, idx0, bmlocal7988_tmp_bytes, bmlocal7989_tmp_bits );\
	out_bytes += bmlocal7988_tmp_bytes;\
	out_bits += bmlocal7989_tmp_bits;\
}

#define BM_NbrCellList_L3_intraFaNbrs_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7990_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal7990_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7990_tmp_bits );\
}

#define BM_NbrCellList_L3_intraFaNbrs_BYTES_CELL_SIZE 16

#define BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal7991_dim_size0;\
	UINT bmlocal7992_idx0;\
	{\
		UINT8 bmlocal7993_var0;\
		BM_NbrCellList_L3_numOfIntraFASNbrs_GET( base_ptr, bmlocal7993_var0 );\
		bmlocal7991_dim_size0 = (UINT)(bmlocal7993_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "intraFaNbrs", 1);\
	for( bmlocal7992_idx0=0; bmlocal7992_idx0<bmlocal7991_dim_size0; bmlocal7992_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal7992_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH_IDX( base_ptr, bmlocal7992_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_intraFaNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NbrCellList_L3_intraFaNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal7994_tmp_bits;\
	BM_NbrCellList_L3_intraFaNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal7994_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal7994_tmp_bits );\
}


#define BM_NbrCellList_L3_interFaNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal7995_tmp_bytes = 0;\
	UINT bmlocal7996_tmp_bits = 0;\
	UINT bmlocal7997_acc_bytes;\
	UINT bmlocal7998_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal7997_acc_bytes = 4;\
	bmlocal7998_acc_bits = 0;\
	BM_NbrCellList_L3_intraFaNbrs_GET_SIZE( base_ptr, bmlocal7995_tmp_bytes, bmlocal7996_tmp_bits );\
	bmlocal7997_acc_bytes += bmlocal7995_tmp_bytes;\
	bmlocal7998_acc_bits += bmlocal7996_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal7997_acc_bytes );\
	out_bitoff += bmlocal7998_acc_bits;\
}

// ARRAY: NbrCellList_L3_interFaNbrs
#define BM_NbrCellList_L3_interFaNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal7999_var0;\
		BM_NbrCellList_L3_numOfInterFASNbrs_GET( base_ptr, bmlocal7999_var0 );\
		out_bytes = (UINT)(16*(1*bmlocal7999_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_interFaNbrs_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal8000_var0;\
			BM_NbrCellList_L3_numOfInterFASNbrs_GET( base_ptr, bmlocal8000_var0 );\
			out_element_count = (UINT)(bmlocal8000_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8001_out_ptr;\
	UINT bmlocal8002_out_bitoff;\
	UINT bmlocal8003_element_size_bytes;\
	UINT bmlocal8004_element_size_bits;\
	BM_NbrCellList_L3_interFaNbrs_GET_POS( base_ptr, bmlocal8001_out_ptr, bmlocal8002_out_bitoff );\
	bmlocal8003_element_size_bytes = 16;\
	bmlocal8004_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8001_out_ptr) + (idx0) * bmlocal8003_element_size_bytes );\
	out_bitoff = bmlocal8002_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8004_element_size_bits );\
}

// COMPOSITE: Full name: 'NbrCellList_L3_interFaNbrs' Type: 'MetricsInfo', Inner, Non-instance, No bitoff root
#define BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8005_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8005_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8005_parent_out_ptr;\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8006_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_POS( base_ptr, idx0, out_ptr, bmlocal8006_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8006_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_interFaNbrs_rssiMean: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8007_my_ptr;\
	UINT bmlocal8008_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_POS( base_ptr, idx0, bmlocal8007_my_ptr, bmlocal8008_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8007_my_ptr, bmlocal8008_my_bitoff, 16, INT16, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8009_my_ptr;\
	UINT bmlocal8010_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_POS( base_ptr, idx0, bmlocal8009_my_ptr, bmlocal8010_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8009_my_ptr, bmlocal8010_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_rssiMean: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_rssiMean: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_rssiMean: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_rssiMean: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_rssiMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_rssiMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal8011_out_val;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET( base_ptr, idx0, bmlocal8011_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rssiMean", 16, (UINT)(bmlocal8011_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	INT16 bmlocal8012_val;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET( base_ptr, idx0, bmlocal8012_val );\
	(bmlocal8012_val)++;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_SET( base_ptr, idx0, bmlocal8012_val );\
}

// NbrCellList_L3_interFaNbrs_rssiMean: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8013_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8013_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8013_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_rssiMean_BYTES_SIZE 2

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8016_acc_bytes;\
	UINT bmlocal8017_acc_bits;\
	PVOID bmlocal8018_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8018_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8018_parent_out_ptr;\
	bmlocal8016_acc_bytes = 2;\
	bmlocal8017_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8016_acc_bytes );\
	out_bitoff += bmlocal8017_acc_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8019_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_POS( base_ptr, idx0, out_ptr, bmlocal8019_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8019_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_interFaNbrs_cinrMean: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8020_my_ptr;\
	UINT bmlocal8021_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_POS( base_ptr, idx0, bmlocal8020_my_ptr, bmlocal8021_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8020_my_ptr, bmlocal8021_my_bitoff, 16, INT16, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8022_my_ptr;\
	UINT bmlocal8023_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_POS( base_ptr, idx0, bmlocal8022_my_ptr, bmlocal8023_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8022_my_ptr, bmlocal8023_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_cinrMean: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_cinrMean: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_cinrMean: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_cinrMean: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_cinrMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_cinrMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal8024_out_val;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET( base_ptr, idx0, bmlocal8024_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cinrMean", 16, (UINT)(bmlocal8024_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	INT16 bmlocal8025_val;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET( base_ptr, idx0, bmlocal8025_val );\
	(bmlocal8025_val)++;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_SET( base_ptr, idx0, bmlocal8025_val );\
}

// NbrCellList_L3_interFaNbrs_cinrMean: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8026_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8026_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8026_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_cinrMean_BYTES_SIZE 2

#define BM_NbrCellList_L3_interFaNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8029_acc_bytes;\
	UINT bmlocal8030_acc_bits;\
	PVOID bmlocal8031_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8031_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8031_parent_out_ptr;\
	bmlocal8029_acc_bytes = 4;\
	bmlocal8030_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8029_acc_bytes );\
	out_bitoff += bmlocal8030_acc_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8032_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8032_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8032_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_interFaNbrs_preambleId: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8033_my_ptr;\
	UINT bmlocal8034_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal8033_my_ptr, bmlocal8034_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8033_my_ptr, bmlocal8034_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8035_my_ptr;\
	UINT bmlocal8036_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal8035_my_ptr, bmlocal8036_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8035_my_ptr, bmlocal8036_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_preambleId: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_preambleId: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_preambleId: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_preambleId: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_preambleId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_preambleId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8037_out_val;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET( base_ptr, idx0, bmlocal8037_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleId", 8, (UINT)(bmlocal8037_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8038_val;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET( base_ptr, idx0, bmlocal8038_val );\
	(bmlocal8038_val)++;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_SET( base_ptr, idx0, bmlocal8038_val );\
}

// NbrCellList_L3_interFaNbrs_preambleId: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_preambleId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8039_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8039_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8039_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_preambleId_BYTES_SIZE 1

#define BM_NbrCellList_L3_interFaNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8042_acc_bytes;\
	UINT bmlocal8043_acc_bits;\
	PVOID bmlocal8044_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8044_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8044_parent_out_ptr;\
	bmlocal8042_acc_bytes = 5;\
	bmlocal8043_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8042_acc_bytes );\
	out_bitoff += bmlocal8043_acc_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8045_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal8045_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8045_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_interFaNbrs_frequency: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8046_my_ptr;\
	UINT bmlocal8047_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal8046_my_ptr, bmlocal8047_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8046_my_ptr, bmlocal8047_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8048_my_ptr;\
	UINT bmlocal8049_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal8048_my_ptr, bmlocal8049_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8048_my_ptr, bmlocal8049_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_frequency: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_frequency: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8050_out_val;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET( base_ptr, idx0, bmlocal8050_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal8050_out_val), "%d", 1);\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8051_val;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET( base_ptr, idx0, bmlocal8051_val );\
	(bmlocal8051_val)++;\
	BM_NbrCellList_L3_interFaNbrs_frequency_SET( base_ptr, idx0, bmlocal8051_val );\
}

// NbrCellList_L3_interFaNbrs_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8052_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8052_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8052_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_frequency_BYTES_SIZE 4

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8055_acc_bytes;\
	UINT bmlocal8056_acc_bits;\
	PVOID bmlocal8057_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8057_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8057_parent_out_ptr;\
	bmlocal8055_acc_bytes = 9;\
	bmlocal8056_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8055_acc_bytes );\
	out_bitoff += bmlocal8056_acc_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8058_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, bmlocal8058_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8058_tmp_bitoff);\
}

// Alignment of NbrCellList_L3_interFaNbrs_bandWidth: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8059_my_ptr;\
	UINT bmlocal8060_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal8059_my_ptr, bmlocal8060_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8059_my_ptr, bmlocal8060_my_bitoff, 8, E_BandWidth, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8061_my_ptr;\
	UINT bmlocal8062_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal8061_my_ptr, bmlocal8062_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8061_my_ptr, bmlocal8062_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal8063_out_val;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET( base_ptr, idx0, bmlocal8063_out_val );\
	if( bmlocal8063_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal8063_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal8063_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal8063_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal8063_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal8064_val;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET( base_ptr, idx0, bmlocal8064_val );\
	(bmlocal8064_val)++;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_SET( base_ptr, idx0, bmlocal8064_val );\
}

// NbrCellList_L3_interFaNbrs_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8065_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8065_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8065_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_bandWidth_BYTES_SIZE 1

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8068_acc_bytes;\
	UINT bmlocal8069_acc_bits;\
	PVOID bmlocal8070_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8070_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8070_parent_out_ptr;\
	bmlocal8068_acc_bytes = 10;\
	bmlocal8069_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8068_acc_bytes );\
	out_bitoff += bmlocal8069_acc_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8071_tmp_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8071_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8071_tmp_bitoff);\
}

// ARRAY: NbrCellList_L3_interFaNbrs_bsId
#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8072_out_ptr;\
	UINT bmlocal8073_out_bitoff;\
	UINT bmlocal8074_element_size_bytes;\
	UINT bmlocal8075_element_size_bits;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_POS( base_ptr, idx0, bmlocal8072_out_ptr, bmlocal8073_out_bitoff );\
	bmlocal8074_element_size_bytes = 1;\
	bmlocal8075_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8072_out_ptr) + (idx1) * bmlocal8074_element_size_bytes );\
	out_bitoff = bmlocal8073_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8075_element_size_bits );\
}

// COMPOSITE: Full name: 'NbrCellList_L3_interFaNbrs_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8076_parent_out_ptr;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal8076_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8076_parent_out_ptr;\
}

// Alignment of NbrCellList_L3_interFaNbrs_bsId_value: accumulated=(Variable), parent.base=(Variable)
#define BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8077_my_ptr;\
	UINT bmlocal8078_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal8077_my_ptr, bmlocal8078_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8077_my_ptr, bmlocal8078_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8079_my_ptr;\
	UINT bmlocal8080_my_bitoff;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal8079_my_ptr, bmlocal8080_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8079_my_ptr, bmlocal8080_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// NbrCellList_L3_interFaNbrs_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// NbrCellList_L3_interFaNbrs_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// NbrCellList_L3_interFaNbrs_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// NbrCellList_L3_interFaNbrs_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_NbrCellList_L3_interFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8081_out_val;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_GET( base_ptr, idx0, idx1, bmlocal8081_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal8081_out_val), "%u", 1);\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8082_val;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_GET( base_ptr, idx0, idx1, bmlocal8082_val );\
	(bmlocal8082_val)++;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_SET( base_ptr, idx0, idx1, bmlocal8082_val );\
}

// NbrCellList_L3_interFaNbrs_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8083_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal8083_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8083_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_value_BYTES_SIZE 1

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8086_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal8086_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8086_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_BYTES_CELL_SIZE 1

#define BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8087_dim_size0;\
	UINT bmlocal8088_idx0;\
	bmlocal8087_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal8088_idx0=0; bmlocal8088_idx0<bmlocal8087_dim_size0; bmlocal8088_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8088_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal8088_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8089_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8089_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8089_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_bsId_BYTES_SIZE 6

#define BM_NbrCellList_L3_interFaNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8090_tmp_bytes = 0;\
	UINT bmlocal8091_tmp_bits = 0;\
	out_bytes = 10;\
	out_bits = 0;\
	BM_NbrCellList_L3_interFaNbrs_bsId_GET_SIZE( base_ptr, idx0, bmlocal8090_tmp_bytes, bmlocal8091_tmp_bits );\
	out_bytes += bmlocal8090_tmp_bytes;\
	out_bits += bmlocal8091_tmp_bits;\
}

#define BM_NbrCellList_L3_interFaNbrs_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8092_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8092_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8092_tmp_bits );\
}

#define BM_NbrCellList_L3_interFaNbrs_BYTES_CELL_SIZE 16

#define BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_rssiMean_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_cinrMean_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8093_dim_size0;\
	UINT bmlocal8094_idx0;\
	{\
		UINT8 bmlocal8095_var0;\
		BM_NbrCellList_L3_numOfInterFASNbrs_GET( base_ptr, bmlocal8095_var0 );\
		bmlocal8093_dim_size0 = (UINT)(bmlocal8095_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "interFaNbrs", 1);\
	for( bmlocal8094_idx0=0; bmlocal8094_idx0<bmlocal8093_dim_size0; bmlocal8094_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8094_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH_IDX( base_ptr, bmlocal8094_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_interFaNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_NbrCellList_L3_interFaNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8096_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal8096_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8096_tmp_bits );\
}


#define BM_NbrCellList_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8097_tmp_bytes = 0;\
	UINT bmlocal8098_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_NbrCellList_L3_intraFaNbrs_GET_SIZE( base_ptr, bmlocal8097_tmp_bytes, bmlocal8098_tmp_bits );\
	out_bytes += bmlocal8097_tmp_bytes;\
	out_bits += bmlocal8098_tmp_bits;\
	BM_NbrCellList_L3_interFaNbrs_GET_SIZE( base_ptr, bmlocal8097_tmp_bytes, bmlocal8098_tmp_bits );\
	out_bytes += bmlocal8097_tmp_bytes;\
	out_bits += bmlocal8098_tmp_bits;\
}

#define BM_NbrCellList_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8099_tmp_bits;\
	BM_NbrCellList_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8099_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8099_tmp_bits );\
}

#define BM_NbrCellList_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NbrCellList_L3", 1);\
	BM_NbrCellList_L3_numOfIntraFASNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NbrCellList_L3_numOfInterFASNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NbrCellList_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NbrCellList_L3_intraFaNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_NbrCellList_L3_interFaNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_NbrCellList_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_NbrCellList_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ScanResult_L3[4];

// COMPOSITE: Full name: 'ScanResult_L3' Type: 'ScanResult_L3', Top-level, Non-instance, No bitoff root
#define BM_ScanResult_L3_numOfNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_ScanResult_L3_numOfNbrs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8100_tmp_bitoff;\
	BM_ScanResult_L3_numOfNbrs_GET_POS( base_ptr, out_ptr, bmlocal8100_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8100_tmp_bitoff);\
}

#define BM_ScanResult_L3_numOfNbrs_POS_ALIGNED 0

// Alignment of ScanResult_L3_numOfNbrs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_numOfNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_numOfNbrs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8101_my_ptr;\
	UINT bmlocal8102_my_bitoff;\
	BM_ScanResult_L3_numOfNbrs_GET_POS( base_ptr, bmlocal8101_my_ptr, bmlocal8102_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8101_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8101_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8101_my_ptr, bmlocal8102_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_ScanResult_L3_numOfNbrs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8103_my_ptr;\
	UINT bmlocal8104_my_bitoff;\
	BM_ScanResult_L3_numOfNbrs_GET_POS( base_ptr, bmlocal8103_my_ptr, bmlocal8104_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8103_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8103_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8103_my_ptr, bmlocal8104_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ScanResult_L3_numOfNbrs: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_numOfNbrs: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_numOfNbrs: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_numOfNbrs: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_numOfNbrs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_numOfNbrs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_numOfNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8105_out_val;\
	BM_ScanResult_L3_numOfNbrs_GET( base_ptr, bmlocal8105_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfNbrs", 8, (UINT)(bmlocal8105_out_val), "%d", 1);\
}

#define BM_ScanResult_L3_numOfNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_numOfNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanResult_L3_numOfNbrs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8106_my_ptr;\
	UINT bmlocal8107_my_bitoff;\
	BM_ScanResult_L3_numOfNbrs_GET_POS( base_ptr, bmlocal8106_my_ptr, bmlocal8107_my_bitoff );\
	(*((UINT8*)bmlocal8106_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8107_my_bitoff );\
}

// ScanResult_L3_numOfNbrs: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_numOfNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8108_tmp_bits;\
	BM_ScanResult_L3_numOfNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal8108_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8108_tmp_bits );\
}

#define BM_ScanResult_L3_numOfNbrs_BYTES_SIZE 1

#define BM_ScanResult_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8111_acc_bytes;\
	UINT bmlocal8112_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8111_acc_bytes = 1;\
	bmlocal8112_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8111_acc_bytes );\
	out_bitoff += bmlocal8112_acc_bits;\
}

#define BM_ScanResult_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8113_tmp_bitoff;\
	BM_ScanResult_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8113_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8113_tmp_bitoff);\
}

#define BM_ScanResult_L3_reserved_POS_ALIGNED 1

#define BM_ScanResult_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8114_my_ptr;\
	UINT bmlocal8115_my_bitoff;\
	BM_ScanResult_L3_reserved_GET_POS( base_ptr, bmlocal8114_my_ptr, bmlocal8115_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8114_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8114_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8114_my_ptr, bmlocal8115_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_ScanResult_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8116_my_ptr;\
	UINT bmlocal8117_my_bitoff;\
	BM_ScanResult_L3_reserved_GET_POS( base_ptr, bmlocal8116_my_ptr, bmlocal8117_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8116_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8116_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8116_my_ptr, bmlocal8117_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_ScanResult_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8118_out_bytes;\
	UINT bmlocal8119_out_bits;\
	BM_ScanResult_L3_reserved_GET_SIZE( base_ptr, bmlocal8118_out_bytes, bmlocal8119_out_bits );\
	bmlocal8119_out_bits += bmlocal8118_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8119_out_bits), "%d", 1);\
}

#define BM_ScanResult_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanResult_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8120_tmp_bits;\
	BM_ScanResult_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal8120_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8120_tmp_bits );\
}

#define BM_ScanResult_L3_reserved_BYTES_SIZE 3

#define BM_ScanResult_L3_resultNbrs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8123_acc_bytes;\
	UINT bmlocal8124_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8123_acc_bytes = 4;\
	bmlocal8124_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8123_acc_bytes );\
	out_bitoff += bmlocal8124_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8125_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_GET_POS( base_ptr, out_ptr, bmlocal8125_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8125_tmp_bitoff);\
}

#define BM_ScanResult_L3_resultNbrs_POS_ALIGNED 4

// ARRAY: ScanResult_L3_resultNbrs
#define BM_ScanResult_L3_resultNbrs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal8126_var0;\
		BM_ScanResult_L3_numOfNbrs_GET( base_ptr, bmlocal8126_var0 );\
		out_bytes = (UINT)(20*(1*bmlocal8126_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_resultNbrs_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal8127_var0;\
			BM_ScanResult_L3_numOfNbrs_GET( base_ptr, bmlocal8127_var0 );\
			out_element_count = (UINT)(bmlocal8127_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8128_out_ptr;\
	UINT bmlocal8129_out_bitoff;\
	UINT bmlocal8130_element_size_bytes;\
	UINT bmlocal8131_element_size_bits;\
	BM_ScanResult_L3_resultNbrs_GET_POS( base_ptr, bmlocal8128_out_ptr, bmlocal8129_out_bitoff );\
	bmlocal8130_element_size_bytes = 20;\
	bmlocal8131_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8128_out_ptr) + (idx0) * bmlocal8130_element_size_bytes );\
	out_bitoff = bmlocal8129_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8131_element_size_bits );\
}

// COMPOSITE: Full name: 'ScanResult_L3_resultNbrs' Type: 'MetricsScanInfo', Inner, Non-instance, No bitoff root
#define BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8132_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8132_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8132_parent_out_ptr;\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8133_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8133_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8133_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_phyLinkId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_phyLinkId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8134_my_ptr;\
	UINT bmlocal8135_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS( base_ptr, idx0, bmlocal8134_my_ptr, bmlocal8135_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8134_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8134_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8134_my_ptr, bmlocal8135_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8136_my_ptr;\
	UINT bmlocal8137_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS( base_ptr, idx0, bmlocal8136_my_ptr, bmlocal8137_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8136_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8136_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8136_my_ptr, bmlocal8137_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ScanResult_L3_resultNbrs_phyLinkId: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_phyLinkId: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_phyLinkId: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_phyLinkId: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_phyLinkId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_phyLinkId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_phyLinkId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8138_out_val;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET( base_ptr, idx0, bmlocal8138_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "phyLinkId", 32, (UINT)(bmlocal8138_out_val), "%d", 1);\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_phyLinkId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8139_my_ptr;\
	UINT bmlocal8140_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET_POS( base_ptr, idx0, bmlocal8139_my_ptr, bmlocal8140_my_bitoff );\
	(*((UINT32*)bmlocal8139_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8140_my_bitoff );\
}

// ScanResult_L3_resultNbrs_phyLinkId: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_phyLinkId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8141_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_phyLinkId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8141_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8141_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_phyLinkId_BYTES_SIZE 4

#define BM_ScanResult_L3_resultNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8144_acc_bytes;\
	UINT bmlocal8145_acc_bits;\
	PVOID bmlocal8146_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8146_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8146_parent_out_ptr;\
	bmlocal8144_acc_bytes = 4;\
	bmlocal8145_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8144_acc_bytes );\
	out_bitoff += bmlocal8145_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_frequency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8147_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_frequency_GET_POS( base_ptr, idx0, out_ptr, bmlocal8147_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8147_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_frequency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8148_my_ptr;\
	UINT bmlocal8149_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal8148_my_ptr, bmlocal8149_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8148_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8148_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8148_my_ptr, bmlocal8149_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_frequency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8150_my_ptr;\
	UINT bmlocal8151_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal8150_my_ptr, bmlocal8151_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8150_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8150_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8150_my_ptr, bmlocal8151_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// ScanResult_L3_resultNbrs_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_frequency: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_frequency: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8152_out_val;\
	BM_ScanResult_L3_resultNbrs_frequency_GET( base_ptr, idx0, bmlocal8152_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal8152_out_val), "%d", 1);\
}

#define BM_ScanResult_L3_resultNbrs_frequency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_frequency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8153_my_ptr;\
	UINT bmlocal8154_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_frequency_GET_POS( base_ptr, idx0, bmlocal8153_my_ptr, bmlocal8154_my_bitoff );\
	(*((UINT32*)bmlocal8153_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8154_my_bitoff );\
}

// ScanResult_L3_resultNbrs_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_frequency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8155_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_frequency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8155_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8155_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_frequency_BYTES_SIZE 4

#define BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8158_acc_bytes;\
	UINT bmlocal8159_acc_bits;\
	PVOID bmlocal8160_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8160_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8160_parent_out_ptr;\
	bmlocal8158_acc_bytes = 8;\
	bmlocal8159_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8158_acc_bytes );\
	out_bitoff += bmlocal8159_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8161_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS( base_ptr, idx0, out_ptr, bmlocal8161_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8161_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_phyGrade: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_phyGrade_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8162_my_ptr;\
	UINT bmlocal8163_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS( base_ptr, idx0, bmlocal8162_my_ptr, bmlocal8163_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8162_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8162_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8162_my_ptr, bmlocal8163_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8164_my_ptr;\
	UINT bmlocal8165_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS( base_ptr, idx0, bmlocal8164_my_ptr, bmlocal8165_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8164_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8164_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8164_my_ptr, bmlocal8165_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// ScanResult_L3_resultNbrs_phyGrade: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_phyGrade: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_phyGrade: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_phyGrade: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_phyGrade: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_phyGrade: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_phyGrade_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal8166_out_val;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET( base_ptr, idx0, bmlocal8166_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "phyGrade", 16, (UINT)(bmlocal8166_out_val), "%d", 1);\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_phyGrade_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8167_my_ptr;\
	UINT bmlocal8168_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET_POS( base_ptr, idx0, bmlocal8167_my_ptr, bmlocal8168_my_bitoff );\
	(*((UINT16*)bmlocal8167_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8168_my_bitoff );\
}

// ScanResult_L3_resultNbrs_phyGrade: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_phyGrade_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8169_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_phyGrade_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8169_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8169_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_phyGrade_BYTES_SIZE 2

#define BM_ScanResult_L3_resultNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8172_acc_bytes;\
	UINT bmlocal8173_acc_bits;\
	PVOID bmlocal8174_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8174_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8174_parent_out_ptr;\
	bmlocal8172_acc_bytes = 10;\
	bmlocal8173_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8172_acc_bytes );\
	out_bitoff += bmlocal8173_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8175_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8175_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8175_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_preambleId: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8176_my_ptr;\
	UINT bmlocal8177_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal8176_my_ptr, bmlocal8177_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8176_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8176_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8176_my_ptr, bmlocal8177_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8178_my_ptr;\
	UINT bmlocal8179_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal8178_my_ptr, bmlocal8179_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8178_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8178_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8178_my_ptr, bmlocal8179_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// ScanResult_L3_resultNbrs_preambleId: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_preambleId: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_preambleId: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_preambleId: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_preambleId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_preambleId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8180_out_val;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET( base_ptr, idx0, bmlocal8180_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleId", 8, (UINT)(bmlocal8180_out_val), "%d", 1);\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8181_my_ptr;\
	UINT bmlocal8182_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET_POS( base_ptr, idx0, bmlocal8181_my_ptr, bmlocal8182_my_bitoff );\
	(*((UINT8*)bmlocal8181_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8182_my_bitoff );\
}

// ScanResult_L3_resultNbrs_preambleId: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_preambleId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8183_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_preambleId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8183_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8183_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_preambleId_BYTES_SIZE 1

#define BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8186_acc_bytes;\
	UINT bmlocal8187_acc_bits;\
	PVOID bmlocal8188_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8188_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8188_parent_out_ptr;\
	bmlocal8186_acc_bytes = 11;\
	bmlocal8187_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8186_acc_bytes );\
	out_bitoff += bmlocal8187_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8189_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS( base_ptr, idx0, out_ptr, bmlocal8189_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8189_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_bandWidth: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8190_my_ptr;\
	UINT bmlocal8191_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal8190_my_ptr, bmlocal8191_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8190_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8190_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8190_my_ptr, bmlocal8191_my_bitoff, 8, E_BandWidth, out_val, 0x00000003 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8192_my_ptr;\
	UINT bmlocal8193_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal8192_my_ptr, bmlocal8193_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8192_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8192_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8192_my_ptr, bmlocal8193_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// ScanResult_L3_resultNbrs_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal8194_out_val;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET( base_ptr, idx0, bmlocal8194_out_val );\
	if( bmlocal8194_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal8194_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal8194_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal8194_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal8194_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8195_my_ptr;\
	UINT bmlocal8196_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET_POS( base_ptr, idx0, bmlocal8195_my_ptr, bmlocal8196_my_bitoff );\
	(*((UINT8*)bmlocal8195_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8196_my_bitoff );\
}

// ScanResult_L3_resultNbrs_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_bandWidth_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8197_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_bandWidth_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8197_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8197_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_bandWidth_BYTES_SIZE 1

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8200_acc_bytes;\
	UINT bmlocal8201_acc_bits;\
	PVOID bmlocal8202_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8202_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8202_parent_out_ptr;\
	bmlocal8200_acc_bytes = 12;\
	bmlocal8201_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8200_acc_bytes );\
	out_bitoff += bmlocal8201_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8203_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS( base_ptr, idx0, out_ptr, bmlocal8203_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8203_tmp_bitoff);\
}

// Alignment of ScanResult_L3_resultNbrs_bSValidityIndicator: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8204_my_ptr;\
	UINT bmlocal8205_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS( base_ptr, idx0, bmlocal8204_my_ptr, bmlocal8205_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ECellStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8204_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (ECellStatus)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8204_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8204_my_ptr, bmlocal8205_my_bitoff, 8, ECellStatus, out_val, 0x00000000 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8206_my_ptr;\
	UINT bmlocal8207_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS( base_ptr, idx0, bmlocal8206_my_ptr, bmlocal8207_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8206_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8206_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8206_my_ptr, bmlocal8207_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// ScanResult_L3_resultNbrs_bSValidityIndicator: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bSValidityIndicator: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bSValidityIndicator: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bSValidityIndicator: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bSValidityIndicator: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_bSValidityIndicator: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	ECellStatus bmlocal8208_out_val;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET( base_ptr, idx0, bmlocal8208_out_val );\
	if( bmlocal8208_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_SUCCESS", 1);\
	}\
	if( bmlocal8208_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_REGISTRATION_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_SBC_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_AUTHENTICATION_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_DEREGISTRATION", 1);\
	}\
	if( bmlocal8208_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_MAC_RANGING_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_PHY_RANGING_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_HO_FAILURE", 1);\
	}\
	if( bmlocal8208_out_val == 8 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bSValidityIndicator", "eNETWORK_CELL_STATUS_UNKNOWN", 1);\
	}\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8209_my_ptr;\
	UINT bmlocal8210_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_POS( base_ptr, idx0, bmlocal8209_my_ptr, bmlocal8210_my_bitoff );\
	(*((UINT8*)bmlocal8209_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8210_my_bitoff );\
}

// ScanResult_L3_resultNbrs_bSValidityIndicator: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8211_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8211_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8211_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_bSValidityIndicator_BYTES_SIZE 1

#define BM_ScanResult_L3_resultNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8214_acc_bytes;\
	UINT bmlocal8215_acc_bits;\
	PVOID bmlocal8216_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8216_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8216_parent_out_ptr;\
	bmlocal8214_acc_bytes = 13;\
	bmlocal8215_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8214_acc_bytes );\
	out_bitoff += bmlocal8215_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_bsId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8217_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8217_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8217_tmp_bitoff);\
}

// ARRAY: ScanResult_L3_resultNbrs_bsId
#define BM_ScanResult_L3_resultNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, idx0, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8218_out_ptr;\
	UINT bmlocal8219_out_bitoff;\
	UINT bmlocal8220_element_size_bytes;\
	UINT bmlocal8221_element_size_bits;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_POS( base_ptr, idx0, bmlocal8218_out_ptr, bmlocal8219_out_bitoff );\
	bmlocal8220_element_size_bytes = 1;\
	bmlocal8221_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8218_out_ptr) + (idx1) * bmlocal8220_element_size_bytes );\
	out_bitoff = bmlocal8219_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8221_element_size_bits );\
}

// COMPOSITE: Full name: 'ScanResult_L3_resultNbrs_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_ScanResult_L3_resultNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8222_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_ELEMENT_POS( base_ptr, idx0, idx1, bmlocal8222_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8222_parent_out_ptr;\
}

// Alignment of ScanResult_L3_resultNbrs_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_ScanResult_L3_resultNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_value_GET( base_ptr, idx0, idx1, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8223_my_ptr;\
	UINT bmlocal8224_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal8223_my_ptr, bmlocal8224_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8223_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8223_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8223_my_ptr, bmlocal8224_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_bsId_value_SET( base_ptr, idx0, idx1, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8225_my_ptr;\
	UINT bmlocal8226_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal8225_my_ptr, bmlocal8226_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8225_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8225_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8225_my_ptr, bmlocal8226_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// ScanResult_L3_resultNbrs_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// ScanResult_L3_resultNbrs_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// ScanResult_L3_resultNbrs_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ScanResult_L3_resultNbrs_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ScanResult_L3_resultNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8227_out_val;\
	BM_ScanResult_L3_resultNbrs_bsId_value_GET( base_ptr, idx0, idx1, bmlocal8227_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal8227_out_val), "%u", 1);\
}

#define BM_ScanResult_L3_resultNbrs_bsId_value_DUMP( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_value_INCREMENT( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8228_my_ptr;\
	UINT bmlocal8229_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_bsId_value_GET_POS( base_ptr, idx0, idx1, bmlocal8228_my_ptr, bmlocal8229_my_bitoff );\
	(*((UINT8*)bmlocal8228_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8229_my_bitoff );\
}

// ScanResult_L3_resultNbrs_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_ScanResult_L3_resultNbrs_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8230_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_bsId_value_GET_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal8230_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8230_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_value_BYTES_SIZE 1

#define BM_ScanResult_L3_resultNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, idx1, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8233_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_CELL_SIZE( base_ptr, idx0, idx1, out_bytes, bmlocal8233_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8233_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_BYTES_CELL_SIZE 1

#define BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, depth )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bsId_value_DUMP_DEPTH( base_ptr, idx0, idx1, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
	BMI_UNUSED_VAR( idx1 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_DUMP_IDX( base_ptr, idx0, idx1 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, idx1, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8234_dim_size0;\
	UINT bmlocal8235_idx0;\
	bmlocal8234_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal8235_idx0=0; bmlocal8235_idx0<bmlocal8234_dim_size0; bmlocal8235_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8235_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, bmlocal8235_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8236_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8236_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8236_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_bsId_BYTES_SIZE 6

#define BM_ScanResult_L3_resultNbrs_reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8237_tmp_bytes = 0;\
	UINT bmlocal8238_tmp_bits = 0;\
	UINT bmlocal8239_acc_bytes;\
	UINT bmlocal8240_acc_bits;\
	PVOID bmlocal8241_parent_out_ptr;\
	BM_ScanResult_L3_resultNbrs_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8241_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8241_parent_out_ptr;\
	bmlocal8239_acc_bytes = 13;\
	bmlocal8240_acc_bits = 0;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_SIZE( base_ptr, idx0, bmlocal8237_tmp_bytes, bmlocal8238_tmp_bits );\
	bmlocal8239_acc_bytes += bmlocal8237_tmp_bytes;\
	bmlocal8240_acc_bits += bmlocal8238_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8239_acc_bytes );\
	out_bitoff += bmlocal8240_acc_bits;\
}

#define BM_ScanResult_L3_resultNbrs_reserved_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8242_tmp_bitoff;\
	BM_ScanResult_L3_resultNbrs_reserved_GET_POS( base_ptr, idx0, out_ptr, bmlocal8242_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8242_tmp_bitoff);\
}

#define BM_ScanResult_L3_resultNbrs_reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8243_my_ptr;\
	UINT bmlocal8244_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_reserved_GET_POS( base_ptr, idx0, bmlocal8243_my_ptr, bmlocal8244_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8243_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8243_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8243_my_ptr, bmlocal8244_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8245_my_ptr;\
	UINT bmlocal8246_my_bitoff;\
	BM_ScanResult_L3_resultNbrs_reserved_GET_POS( base_ptr, idx0, bmlocal8245_my_ptr, bmlocal8246_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8245_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8245_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8245_my_ptr, bmlocal8246_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

#define BM_ScanResult_L3_resultNbrs_reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8247_out_bytes;\
	UINT bmlocal8248_out_bits;\
	BM_ScanResult_L3_resultNbrs_reserved_GET_SIZE( base_ptr, idx0, bmlocal8247_out_bytes, bmlocal8248_out_bits );\
	bmlocal8248_out_bits += bmlocal8247_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8248_out_bits), "%d", 1);\
}

#define BM_ScanResult_L3_resultNbrs_reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8249_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8249_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8249_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_reserved_BYTES_SIZE 1

#define BM_ScanResult_L3_resultNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8250_tmp_bytes = 0;\
	UINT bmlocal8251_tmp_bits = 0;\
	out_bytes = 14;\
	out_bits = 0;\
	BM_ScanResult_L3_resultNbrs_bsId_GET_SIZE( base_ptr, idx0, bmlocal8250_tmp_bytes, bmlocal8251_tmp_bits );\
	out_bytes += bmlocal8250_tmp_bytes;\
	out_bits += bmlocal8251_tmp_bits;\
}

#define BM_ScanResult_L3_resultNbrs_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8252_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8252_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8252_tmp_bits );\
}

#define BM_ScanResult_L3_resultNbrs_BYTES_CELL_SIZE 20

#define BM_ScanResult_L3_resultNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_phyLinkId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_frequency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_phyGrade_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_preambleId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_bandWidth_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_bSValidityIndicator_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_bsId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ScanResult_L3_resultNbrs_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8253_dim_size0;\
	UINT bmlocal8254_idx0;\
	{\
		UINT8 bmlocal8255_var0;\
		BM_ScanResult_L3_numOfNbrs_GET( base_ptr, bmlocal8255_var0 );\
		bmlocal8253_dim_size0 = (UINT)(bmlocal8255_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "resultNbrs", 1);\
	for( bmlocal8254_idx0=0; bmlocal8254_idx0<bmlocal8253_dim_size0; bmlocal8254_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8254_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ScanResult_L3_resultNbrs_DUMP_DEPTH_IDX( base_ptr, bmlocal8254_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_resultNbrs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_resultNbrs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_ScanResult_L3_resultNbrs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8256_tmp_bits;\
	BM_ScanResult_L3_resultNbrs_GET_SIZE( base_ptr, out_bytes, bmlocal8256_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8256_tmp_bits );\
}


#define BM_ScanResult_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8257_tmp_bytes = 0;\
	UINT bmlocal8258_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_ScanResult_L3_resultNbrs_GET_SIZE( base_ptr, bmlocal8257_tmp_bytes, bmlocal8258_tmp_bits );\
	out_bytes += bmlocal8257_tmp_bytes;\
	out_bits += bmlocal8258_tmp_bits;\
}

#define BM_ScanResult_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8259_tmp_bits;\
	BM_ScanResult_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8259_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8259_tmp_bits );\
}

#define BM_ScanResult_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ScanResult_L3", 1);\
	BM_ScanResult_L3_numOfNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanResult_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_ScanResult_L3_resultNbrs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_ScanResult_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_ScanResult_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SF_QoS_MonitorInfo_L3[16];

// COMPOSITE: Full name: 'SF_QoS_MonitorInfo_L3' Type: 'SF_QoS_MonitorInfo_L3', Top-level, Non-instance, No bitoff root
#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8260_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, bmlocal8260_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8260_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_POS_ALIGNED 0

// Alignment of SF_QoS_MonitorInfo_L3_numOfCidInfos: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8261_my_ptr;\
	UINT bmlocal8262_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8261_my_ptr, bmlocal8262_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8261_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8261_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8261_my_ptr, bmlocal8262_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8263_my_ptr;\
	UINT bmlocal8264_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8263_my_ptr, bmlocal8264_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8263_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8263_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8263_my_ptr, bmlocal8264_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_numOfCidInfos: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfCidInfos: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfCidInfos: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfCidInfos: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfCidInfos: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_numOfCidInfos: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8265_out_val;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8265_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidInfos", 8, (UINT)(bmlocal8265_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8266_my_ptr;\
	UINT bmlocal8267_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8266_my_ptr, bmlocal8267_my_bitoff );\
	(*((UINT8*)bmlocal8266_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8267_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_numOfCidInfos: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8268_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, bmlocal8268_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8268_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_BYTES_SIZE 1

#define BM_SF_QoS_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8271_acc_bytes;\
	UINT bmlocal8272_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8271_acc_bytes = 1;\
	bmlocal8272_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8271_acc_bytes );\
	out_bitoff += bmlocal8272_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8273_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8273_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8273_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_POS_ALIGNED 1

#define BM_SF_QoS_MonitorInfo_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8274_my_ptr;\
	UINT bmlocal8275_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8274_my_ptr, bmlocal8275_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8274_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8274_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8274_my_ptr, bmlocal8275_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8276_my_ptr;\
	UINT bmlocal8277_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8276_my_ptr, bmlocal8277_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8276_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8276_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8276_my_ptr, bmlocal8277_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8278_out_bytes;\
	UINT bmlocal8279_out_bits;\
	BM_SF_QoS_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, bmlocal8278_out_bytes, bmlocal8279_out_bits );\
	bmlocal8279_out_bits += bmlocal8278_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8279_out_bits), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8280_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal8280_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8280_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_reserved_BYTES_SIZE 3

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8283_acc_bytes;\
	UINT bmlocal8284_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8283_acc_bytes = 4;\
	bmlocal8284_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8283_acc_bytes );\
	out_bitoff += bmlocal8284_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8285_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS( base_ptr, out_ptr, bmlocal8285_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8285_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_POS_ALIGNED 4

// Alignment of SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8286_my_ptr;\
	UINT bmlocal8287_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS( base_ptr, bmlocal8286_my_ptr, bmlocal8287_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8286_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8286_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8286_my_ptr, bmlocal8287_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8288_my_ptr;\
	UINT bmlocal8289_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS( base_ptr, bmlocal8288_my_ptr, bmlocal8289_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8288_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8288_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8288_my_ptr, bmlocal8289_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8290_out_val;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET( base_ptr, bmlocal8290_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfSfCreationSucess", 32, (UINT)(bmlocal8290_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8291_my_ptr;\
	UINT bmlocal8292_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_POS( base_ptr, bmlocal8291_my_ptr, bmlocal8292_my_bitoff );\
	(*((UINT32*)bmlocal8291_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8292_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_numOfSfCreationSucess: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8293_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_GET_SIZE( base_ptr, out_bytes, bmlocal8293_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8293_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8296_acc_bytes;\
	UINT bmlocal8297_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8296_acc_bytes = 8;\
	bmlocal8297_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8296_acc_bytes );\
	out_bitoff += bmlocal8297_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8298_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS( base_ptr, out_ptr, bmlocal8298_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8298_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_POS_ALIGNED 8

// Alignment of SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8299_my_ptr;\
	UINT bmlocal8300_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS( base_ptr, bmlocal8299_my_ptr, bmlocal8300_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8299_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8299_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8299_my_ptr, bmlocal8300_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8301_my_ptr;\
	UINT bmlocal8302_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS( base_ptr, bmlocal8301_my_ptr, bmlocal8302_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8301_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8301_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8301_my_ptr, bmlocal8302_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8303_out_val;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET( base_ptr, bmlocal8303_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfSfCreationFailure", 32, (UINT)(bmlocal8303_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8304_my_ptr;\
	UINT bmlocal8305_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_POS( base_ptr, bmlocal8304_my_ptr, bmlocal8305_my_bitoff );\
	(*((UINT32*)bmlocal8304_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8305_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_numOfSfCreationFailure: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8306_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_GET_SIZE( base_ptr, out_bytes, bmlocal8306_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8306_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8309_acc_bytes;\
	UINT bmlocal8310_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8309_acc_bytes = 12;\
	bmlocal8310_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8309_acc_bytes );\
	out_bitoff += bmlocal8310_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8311_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS( base_ptr, out_ptr, bmlocal8311_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8311_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_POS_ALIGNED 12

// Alignment of SF_QoS_MonitorInfo_L3_numOfSfDeleted: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8312_my_ptr;\
	UINT bmlocal8313_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS( base_ptr, bmlocal8312_my_ptr, bmlocal8313_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8312_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8312_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8312_my_ptr, bmlocal8313_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8314_my_ptr;\
	UINT bmlocal8315_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS( base_ptr, bmlocal8314_my_ptr, bmlocal8315_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8314_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8314_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8314_my_ptr, bmlocal8315_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_numOfSfDeleted: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfDeleted: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfDeleted: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfDeleted: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_numOfSfDeleted: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_numOfSfDeleted: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8316_out_val;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET( base_ptr, bmlocal8316_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfSfDeleted", 32, (UINT)(bmlocal8316_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8317_my_ptr;\
	UINT bmlocal8318_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_POS( base_ptr, bmlocal8317_my_ptr, bmlocal8318_my_bitoff );\
	(*((UINT32*)bmlocal8317_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8318_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_numOfSfDeleted: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8319_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_GET_SIZE( base_ptr, out_bytes, bmlocal8319_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8319_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8322_acc_bytes;\
	UINT bmlocal8323_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8322_acc_bytes = 16;\
	bmlocal8323_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8322_acc_bytes );\
	out_bitoff += bmlocal8323_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8324_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_POS( base_ptr, out_ptr, bmlocal8324_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8324_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_POS_ALIGNED 16

// ARRAY: SF_QoS_MonitorInfo_L3_channels
#define BM_SF_QoS_MonitorInfo_L3_channels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal8325_var0;\
		BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8325_var0 );\
		out_bytes = (UINT)(36*(1*bmlocal8325_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal8326_var0;\
			BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8326_var0 );\
			out_element_count = (UINT)(bmlocal8326_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8327_out_ptr;\
	UINT bmlocal8328_out_bitoff;\
	UINT bmlocal8329_element_size_bytes;\
	UINT bmlocal8330_element_size_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_POS( base_ptr, bmlocal8327_out_ptr, bmlocal8328_out_bitoff );\
	bmlocal8329_element_size_bytes = 36;\
	bmlocal8330_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8327_out_ptr) + (idx0) * bmlocal8329_element_size_bytes );\
	out_bitoff = bmlocal8328_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8330_element_size_bits );\
}

// COMPOSITE: Full name: 'SF_QoS_MonitorInfo_L3_channels' Type: 'CidInformation', Inner, Non-instance, No bitoff root
#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8331_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8331_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8331_parent_out_ptr;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8332_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8332_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8332_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8333_my_ptr;\
	UINT bmlocal8334_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS( base_ptr, idx0, bmlocal8333_my_ptr, bmlocal8334_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8333_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8333_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8333_my_ptr, bmlocal8334_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8335_my_ptr;\
	UINT bmlocal8336_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS( base_ptr, idx0, bmlocal8335_my_ptr, bmlocal8336_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8335_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8335_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8335_my_ptr, bmlocal8336_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfId: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfId: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8337_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET( base_ptr, idx0, bmlocal8337_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal8337_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8338_my_ptr;\
	UINT bmlocal8339_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_POS( base_ptr, idx0, bmlocal8338_my_ptr, bmlocal8339_my_bitoff );\
	(*((UINT32*)bmlocal8338_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8339_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8340_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8340_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8340_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfId_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8343_acc_bytes;\
	UINT bmlocal8344_acc_bits;\
	PVOID bmlocal8345_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8345_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8345_parent_out_ptr;\
	bmlocal8343_acc_bytes = 4;\
	bmlocal8344_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8343_acc_bytes );\
	out_bitoff += bmlocal8344_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8346_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS( base_ptr, idx0, out_ptr, bmlocal8346_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8346_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8347_my_ptr;\
	UINT bmlocal8348_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8347_my_ptr, bmlocal8348_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8347_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8347_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8347_my_ptr, bmlocal8348_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8349_my_ptr;\
	UINT bmlocal8350_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8349_my_ptr, bmlocal8350_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8349_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8349_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8349_my_ptr, bmlocal8350_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8351_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET( base_ptr, idx0, bmlocal8351_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maxSustainedTrafficRate", 32, (UINT)(bmlocal8351_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8352_my_ptr;\
	UINT bmlocal8353_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8352_my_ptr, bmlocal8353_my_bitoff );\
	(*((UINT32*)bmlocal8352_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8353_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8354_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8354_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8354_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8357_acc_bytes;\
	UINT bmlocal8358_acc_bits;\
	PVOID bmlocal8359_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8359_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8359_parent_out_ptr;\
	bmlocal8357_acc_bytes = 8;\
	bmlocal8358_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8357_acc_bytes );\
	out_bitoff += bmlocal8358_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8360_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS( base_ptr, idx0, out_ptr, bmlocal8360_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8360_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8361_my_ptr;\
	UINT bmlocal8362_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS( base_ptr, idx0, bmlocal8361_my_ptr, bmlocal8362_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8361_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8361_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8361_my_ptr, bmlocal8362_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8363_my_ptr;\
	UINT bmlocal8364_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS( base_ptr, idx0, bmlocal8363_my_ptr, bmlocal8364_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8363_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8363_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8363_my_ptr, bmlocal8364_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8365_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET( base_ptr, idx0, bmlocal8365_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maxTrafficBurst", 32, (UINT)(bmlocal8365_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8366_my_ptr;\
	UINT bmlocal8367_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_POS( base_ptr, idx0, bmlocal8366_my_ptr, bmlocal8367_my_bitoff );\
	(*((UINT32*)bmlocal8366_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8367_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8368_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8368_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8368_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8371_acc_bytes;\
	UINT bmlocal8372_acc_bits;\
	PVOID bmlocal8373_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8373_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8373_parent_out_ptr;\
	bmlocal8371_acc_bytes = 12;\
	bmlocal8372_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8371_acc_bytes );\
	out_bitoff += bmlocal8372_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8374_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS( base_ptr, idx0, out_ptr, bmlocal8374_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8374_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_toleratedJitter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8375_my_ptr;\
	UINT bmlocal8376_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS( base_ptr, idx0, bmlocal8375_my_ptr, bmlocal8376_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8375_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8375_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8375_my_ptr, bmlocal8376_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8377_my_ptr;\
	UINT bmlocal8378_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS( base_ptr, idx0, bmlocal8377_my_ptr, bmlocal8378_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8377_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8377_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8377_my_ptr, bmlocal8378_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8379_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET( base_ptr, idx0, bmlocal8379_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "toleratedJitter", 32, (UINT)(bmlocal8379_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8380_my_ptr;\
	UINT bmlocal8381_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_POS( base_ptr, idx0, bmlocal8380_my_ptr, bmlocal8381_my_bitoff );\
	(*((UINT32*)bmlocal8380_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8381_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_toleratedJitter: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8382_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8382_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8382_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8385_acc_bytes;\
	UINT bmlocal8386_acc_bits;\
	PVOID bmlocal8387_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8387_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8387_parent_out_ptr;\
	bmlocal8385_acc_bytes = 16;\
	bmlocal8386_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8385_acc_bytes );\
	out_bitoff += bmlocal8386_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8388_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS( base_ptr, idx0, out_ptr, bmlocal8388_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8388_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_maximumLatency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8389_my_ptr;\
	UINT bmlocal8390_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS( base_ptr, idx0, bmlocal8389_my_ptr, bmlocal8390_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8389_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8389_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8389_my_ptr, bmlocal8390_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8391_my_ptr;\
	UINT bmlocal8392_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS( base_ptr, idx0, bmlocal8391_my_ptr, bmlocal8392_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8391_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8391_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8391_my_ptr, bmlocal8392_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_maximumLatency: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maximumLatency: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_maximumLatency: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maximumLatency: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_maximumLatency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_maximumLatency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8393_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET( base_ptr, idx0, bmlocal8393_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "maximumLatency", 32, (UINT)(bmlocal8393_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8394_my_ptr;\
	UINT bmlocal8395_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_POS( base_ptr, idx0, bmlocal8394_my_ptr, bmlocal8395_my_bitoff );\
	(*((UINT32*)bmlocal8394_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8395_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_maximumLatency: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8396_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8396_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8396_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8399_acc_bytes;\
	UINT bmlocal8400_acc_bits;\
	PVOID bmlocal8401_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8401_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8401_parent_out_ptr;\
	bmlocal8399_acc_bytes = 20;\
	bmlocal8400_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8399_acc_bytes );\
	out_bitoff += bmlocal8400_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8402_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS( base_ptr, idx0, out_ptr, bmlocal8402_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8402_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8403_my_ptr;\
	UINT bmlocal8404_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS( base_ptr, idx0, bmlocal8403_my_ptr, bmlocal8404_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8403_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8403_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8403_my_ptr, bmlocal8404_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8405_my_ptr;\
	UINT bmlocal8406_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS( base_ptr, idx0, bmlocal8405_my_ptr, bmlocal8406_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8405_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8405_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8405_my_ptr, bmlocal8406_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8407_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET( base_ptr, idx0, bmlocal8407_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "unsolicitedGrantInterval", 32, (UINT)(bmlocal8407_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8408_my_ptr;\
	UINT bmlocal8409_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_POS( base_ptr, idx0, bmlocal8408_my_ptr, bmlocal8409_my_bitoff );\
	(*((UINT32*)bmlocal8408_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8409_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8410_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8410_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8410_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8413_acc_bytes;\
	UINT bmlocal8414_acc_bits;\
	PVOID bmlocal8415_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8415_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8415_parent_out_ptr;\
	bmlocal8413_acc_bytes = 24;\
	bmlocal8414_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8413_acc_bytes );\
	out_bitoff += bmlocal8414_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8416_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS( base_ptr, idx0, out_ptr, bmlocal8416_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8416_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8417_my_ptr;\
	UINT bmlocal8418_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8417_my_ptr, bmlocal8418_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8417_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8417_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8417_my_ptr, bmlocal8418_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8419_my_ptr;\
	UINT bmlocal8420_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8419_my_ptr, bmlocal8420_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8419_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8419_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8419_my_ptr, bmlocal8420_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8421_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET( base_ptr, idx0, bmlocal8421_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "minReservedTrafficRate", 32, (UINT)(bmlocal8421_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8422_my_ptr;\
	UINT bmlocal8423_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_POS( base_ptr, idx0, bmlocal8422_my_ptr, bmlocal8423_my_bitoff );\
	(*((UINT32*)bmlocal8422_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8423_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8424_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8424_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8424_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_BYTES_SIZE 4

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8427_acc_bytes;\
	UINT bmlocal8428_acc_bits;\
	PVOID bmlocal8429_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8429_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8429_parent_out_ptr;\
	bmlocal8427_acc_bytes = 28;\
	bmlocal8428_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8427_acc_bytes );\
	out_bitoff += bmlocal8428_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8430_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS( base_ptr, idx0, out_ptr, bmlocal8430_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8430_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_cid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8431_my_ptr;\
	UINT bmlocal8432_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS( base_ptr, idx0, bmlocal8431_my_ptr, bmlocal8432_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8431_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8431_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8431_my_ptr, bmlocal8432_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8433_my_ptr;\
	UINT bmlocal8434_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS( base_ptr, idx0, bmlocal8433_my_ptr, bmlocal8434_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8433_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8433_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8433_my_ptr, bmlocal8434_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_cid: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_cid: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_cid: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_cid: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_cid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_cid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_cid_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal8435_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET( base_ptr, idx0, bmlocal8435_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cid", 16, (UINT)(bmlocal8435_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8436_my_ptr;\
	UINT bmlocal8437_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_POS( base_ptr, idx0, bmlocal8436_my_ptr, bmlocal8437_my_bitoff );\
	(*((UINT16*)bmlocal8436_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8437_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_cid: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8438_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8438_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8438_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_cid_BYTES_SIZE 2

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8441_acc_bytes;\
	UINT bmlocal8442_acc_bits;\
	PVOID bmlocal8443_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8443_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8443_parent_out_ptr;\
	bmlocal8441_acc_bytes = 30;\
	bmlocal8442_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8441_acc_bytes );\
	out_bitoff += bmlocal8442_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8444_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS( base_ptr, idx0, out_ptr, bmlocal8444_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8444_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8445_my_ptr;\
	UINT bmlocal8446_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS( base_ptr, idx0, bmlocal8445_my_ptr, bmlocal8446_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (SFSchedulingType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8445_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (SFSchedulingType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8445_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8445_my_ptr, bmlocal8446_my_bitoff, 8, SFSchedulingType, out_val, 0x00000002 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8447_my_ptr;\
	UINT bmlocal8448_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS( base_ptr, idx0, bmlocal8447_my_ptr, bmlocal8448_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8447_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8447_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8447_my_ptr, bmlocal8448_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	SFSchedulingType bmlocal8449_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET( base_ptr, idx0, bmlocal8449_out_val );\
	if( bmlocal8449_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "Invalid_Type", 1);\
	}\
	if( bmlocal8449_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "BE_Type", 1);\
	}\
	if( bmlocal8449_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "nrtPS_Type", 1);\
	}\
	if( bmlocal8449_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "rtPS_Type", 1);\
	}\
	if( bmlocal8449_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "ertPS_Type", 1);\
	}\
	if( bmlocal8449_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSchedulingType", "UGS_Type", 1);\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8450_my_ptr;\
	UINT bmlocal8451_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_POS( base_ptr, idx0, bmlocal8450_my_ptr, bmlocal8451_my_bitoff );\
	(*((UINT8*)bmlocal8450_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8451_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_sfSchedulingType: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8452_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8452_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8452_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_BYTES_SIZE 1

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8455_acc_bytes;\
	UINT bmlocal8456_acc_bits;\
	PVOID bmlocal8457_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8457_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8457_parent_out_ptr;\
	bmlocal8455_acc_bytes = 31;\
	bmlocal8456_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8455_acc_bytes );\
	out_bitoff += bmlocal8456_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8458_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS( base_ptr, idx0, out_ptr, bmlocal8458_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8458_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8459_my_ptr;\
	UINT bmlocal8460_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS( base_ptr, idx0, bmlocal8459_my_ptr, bmlocal8460_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_QoSParamsSetType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8459_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_QoSParamsSetType)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8459_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8459_my_ptr, bmlocal8460_my_bitoff, 8, E_QoSParamsSetType, out_val, 0x00000003 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8461_my_ptr;\
	UINT bmlocal8462_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS( base_ptr, idx0, bmlocal8461_my_ptr, bmlocal8462_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8461_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8461_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8461_my_ptr, bmlocal8462_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	E_QoSParamsSetType bmlocal8463_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET( base_ptr, idx0, bmlocal8463_out_val );\
	if( bmlocal8463_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Provisioned_SetType", 1);\
	}\
	if( bmlocal8463_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Admitted_SetType", 1);\
	}\
	if( bmlocal8463_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Active_SetType", 1);\
	}\
	if( bmlocal8463_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "qosParamsSetType", "Any_SetType", 1);\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8464_my_ptr;\
	UINT bmlocal8465_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_POS( base_ptr, idx0, bmlocal8464_my_ptr, bmlocal8465_my_bitoff );\
	(*((UINT8*)bmlocal8464_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8465_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_qosParamsSetType: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8466_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8466_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8466_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_BYTES_SIZE 1

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8469_acc_bytes;\
	UINT bmlocal8470_acc_bits;\
	PVOID bmlocal8471_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8471_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8471_parent_out_ptr;\
	bmlocal8469_acc_bytes = 32;\
	bmlocal8470_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8469_acc_bytes );\
	out_bitoff += bmlocal8470_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8472_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS( base_ptr, idx0, out_ptr, bmlocal8472_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8472_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_trafficPrio: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8473_my_ptr;\
	UINT bmlocal8474_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS( base_ptr, idx0, bmlocal8473_my_ptr, bmlocal8474_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8473_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8473_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8473_my_ptr, bmlocal8474_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8475_my_ptr;\
	UINT bmlocal8476_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS( base_ptr, idx0, bmlocal8475_my_ptr, bmlocal8476_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8475_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8475_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8475_my_ptr, bmlocal8476_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_trafficPrio: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_trafficPrio: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_trafficPrio: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_trafficPrio: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_trafficPrio: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_trafficPrio: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8477_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET( base_ptr, idx0, bmlocal8477_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "trafficPrio", 8, (UINT)(bmlocal8477_out_val), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8478_my_ptr;\
	UINT bmlocal8479_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_POS( base_ptr, idx0, bmlocal8478_my_ptr, bmlocal8479_my_bitoff );\
	(*((UINT8*)bmlocal8478_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8479_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_trafficPrio: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8480_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8480_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8480_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_BYTES_SIZE 1

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8483_acc_bytes;\
	UINT bmlocal8484_acc_bits;\
	PVOID bmlocal8485_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8485_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8485_parent_out_ptr;\
	bmlocal8483_acc_bytes = 33;\
	bmlocal8484_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8483_acc_bytes );\
	out_bitoff += bmlocal8484_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8486_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS( base_ptr, idx0, out_ptr, bmlocal8486_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8486_tmp_bitoff);\
}

// Alignment of SF_QoS_MonitorInfo_L3_channels_sfSide: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8487_my_ptr;\
	UINT bmlocal8488_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS( base_ptr, idx0, bmlocal8487_my_ptr, bmlocal8488_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_SfSide)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8487_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_SfSide)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8487_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8487_my_ptr, bmlocal8488_my_bitoff, 8, E_SfSide, out_val, 0x00000001 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8489_my_ptr;\
	UINT bmlocal8490_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS( base_ptr, idx0, bmlocal8489_my_ptr, bmlocal8490_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8489_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8489_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8489_my_ptr, bmlocal8490_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// SF_QoS_MonitorInfo_L3_channels_sfSide: IS_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSide: SET_DEFAULT accessor is not defined because no default value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSide: IS_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSide: SET_RESET accessor is not defined because no reset value was specified.
// SF_QoS_MonitorInfo_L3_channels_sfSide: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SF_QoS_MonitorInfo_L3_channels_sfSide: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	E_SfSide bmlocal8491_out_val;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET( base_ptr, idx0, bmlocal8491_out_val );\
	if( bmlocal8491_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideUndefined", 1);\
	}\
	if( bmlocal8491_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideTx", 1);\
	}\
	if( bmlocal8491_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideRx", 1);\
	}\
	if( bmlocal8491_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "sfSide", "SideManagementBiDirectional", 1);\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8492_my_ptr;\
	UINT bmlocal8493_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_POS( base_ptr, idx0, bmlocal8492_my_ptr, bmlocal8493_my_bitoff );\
	(*((UINT8*)bmlocal8492_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8493_my_bitoff );\
}

// SF_QoS_MonitorInfo_L3_channels_sfSide: Validation accessors are not defined because validation condition was not specified.
#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8494_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8494_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8494_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_sfSide_BYTES_SIZE 1

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8497_acc_bytes;\
	UINT bmlocal8498_acc_bits;\
	PVOID bmlocal8499_parent_out_ptr;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8499_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8499_parent_out_ptr;\
	bmlocal8497_acc_bytes = 34;\
	bmlocal8498_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8497_acc_bytes );\
	out_bitoff += bmlocal8498_acc_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8500_tmp_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_POS( base_ptr, idx0, out_ptr, bmlocal8500_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8500_tmp_bitoff);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8501_my_ptr;\
	UINT bmlocal8502_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_POS( base_ptr, idx0, bmlocal8501_my_ptr, bmlocal8502_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8501_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8501_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8501_my_ptr, bmlocal8502_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8503_my_ptr;\
	UINT bmlocal8504_my_bitoff;\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_POS( base_ptr, idx0, bmlocal8503_my_ptr, bmlocal8504_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8503_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8503_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8503_my_ptr, bmlocal8504_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8505_out_bytes;\
	UINT bmlocal8506_out_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_SIZE( base_ptr, idx0, bmlocal8505_out_bytes, bmlocal8506_out_bits );\
	bmlocal8506_out_bits += bmlocal8505_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8506_out_bits), "%d", 1);\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8507_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8507_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8507_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_reserved_BYTES_SIZE 2

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 36;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8510_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8510_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8510_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_BYTES_CELL_SIZE 36

#define BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_sfId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_maxSustainedTrafficRate_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_maxTrafficBurst_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_toleratedJitter_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_maximumLatency_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_unsolicitedGrantInterval_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_minReservedTrafficRate_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_cid_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSchedulingType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_qosParamsSetType_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_trafficPrio_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_sfSide_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8511_dim_size0;\
	UINT bmlocal8512_idx0;\
	{\
		UINT8 bmlocal8513_var0;\
		BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8513_var0 );\
		bmlocal8511_dim_size0 = (UINT)(bmlocal8513_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "channels", 1);\
	for( bmlocal8512_idx0=0; bmlocal8512_idx0<bmlocal8511_dim_size0; bmlocal8512_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8512_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH_IDX( base_ptr, bmlocal8512_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SF_QoS_MonitorInfo_L3_channels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8514_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_SIZE( base_ptr, out_bytes, bmlocal8514_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8514_tmp_bits );\
}


#define BM_SF_QoS_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8515_tmp_bytes = 0;\
	UINT bmlocal8516_tmp_bits = 0;\
	out_bytes = 16;\
	out_bits = 0;\
	BM_SF_QoS_MonitorInfo_L3_channels_GET_SIZE( base_ptr, bmlocal8515_tmp_bytes, bmlocal8516_tmp_bits );\
	out_bytes += bmlocal8515_tmp_bytes;\
	out_bits += bmlocal8516_tmp_bits;\
}

#define BM_SF_QoS_MonitorInfo_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8517_tmp_bits;\
	BM_SF_QoS_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8517_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8517_tmp_bits );\
}

#define BM_SF_QoS_MonitorInfo_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SF_QoS_MonitorInfo_L3", 1);\
	BM_SF_QoS_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationSucess_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_numOfSfCreationFailure_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_numOfSfDeleted_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SF_QoS_MonitorInfo_L3_channels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SF_QoS_MonitorInfo_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SF_QoS_MonitorInfo_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Arq_MonitorInfo_L3[4];

// COMPOSITE: Full name: 'Arq_MonitorInfo_L3' Type: 'Arq_MonitorInfo_L3', Top-level, Non-instance, No bitoff root
#define BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8518_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, bmlocal8518_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8518_tmp_bitoff);\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_POS_ALIGNED 0

// Alignment of Arq_MonitorInfo_L3_numOfCidInfos: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8519_my_ptr;\
	UINT bmlocal8520_my_bitoff;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8519_my_ptr, bmlocal8520_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8519_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8519_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8519_my_ptr, bmlocal8520_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8521_my_ptr;\
	UINT bmlocal8522_my_bitoff;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8521_my_ptr, bmlocal8522_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8521_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8521_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8521_my_ptr, bmlocal8522_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_numOfCidInfos: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_numOfCidInfos: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_numOfCidInfos: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_numOfCidInfos: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_numOfCidInfos: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_numOfCidInfos: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8523_out_val;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8523_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidInfos", 8, (UINT)(bmlocal8523_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8524_my_ptr;\
	UINT bmlocal8525_my_bitoff;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8524_my_ptr, bmlocal8525_my_bitoff );\
	(*((UINT8*)bmlocal8524_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8525_my_bitoff );\
}

// Arq_MonitorInfo_L3_numOfCidInfos: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8526_tmp_bits;\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, bmlocal8526_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8526_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_numOfCidInfos_BYTES_SIZE 1

#define BM_Arq_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8529_acc_bytes;\
	UINT bmlocal8530_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8529_acc_bytes = 1;\
	bmlocal8530_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8529_acc_bytes );\
	out_bitoff += bmlocal8530_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8531_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8531_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8531_tmp_bitoff);\
}

#define BM_Arq_MonitorInfo_L3_reserved_POS_ALIGNED 1

#define BM_Arq_MonitorInfo_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8532_my_ptr;\
	UINT bmlocal8533_my_bitoff;\
	BM_Arq_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8532_my_ptr, bmlocal8533_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8532_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8532_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8532_my_ptr, bmlocal8533_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8534_my_ptr;\
	UINT bmlocal8535_my_bitoff;\
	BM_Arq_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8534_my_ptr, bmlocal8535_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8534_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8534_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8534_my_ptr, bmlocal8535_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8536_out_bytes;\
	UINT bmlocal8537_out_bits;\
	BM_Arq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, bmlocal8536_out_bytes, bmlocal8537_out_bits );\
	bmlocal8537_out_bits += bmlocal8536_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8537_out_bits), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorInfo_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8538_tmp_bits;\
	BM_Arq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal8538_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8538_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_reserved_BYTES_SIZE 3

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8541_acc_bytes;\
	UINT bmlocal8542_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8541_acc_bytes = 4;\
	bmlocal8542_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8541_acc_bytes );\
	out_bitoff += bmlocal8542_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8543_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_POS( base_ptr, out_ptr, bmlocal8543_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8543_tmp_bitoff);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_POS_ALIGNED 4

// ARRAY: Arq_MonitorInfo_L3_arqInfo
#define BM_Arq_MonitorInfo_L3_arqInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal8544_var0;\
		BM_Arq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8544_var0 );\
		out_bytes = (UINT)(40*(1*bmlocal8544_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal8545_var0;\
			BM_Arq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8545_var0 );\
			out_element_count = (UINT)(bmlocal8545_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8546_out_ptr;\
	UINT bmlocal8547_out_bitoff;\
	UINT bmlocal8548_element_size_bytes;\
	UINT bmlocal8549_element_size_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_POS( base_ptr, bmlocal8546_out_ptr, bmlocal8547_out_bitoff );\
	bmlocal8548_element_size_bytes = 40;\
	bmlocal8549_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8546_out_ptr) + (idx0) * bmlocal8548_element_size_bytes );\
	out_bitoff = bmlocal8547_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8549_element_size_bits );\
}

// COMPOSITE: Full name: 'Arq_MonitorInfo_L3_arqInfo' Type: 'ArqInfo', Inner, Non-instance, No bitoff root
#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8550_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8550_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8550_parent_out_ptr;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8551_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8551_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8551_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8552_my_ptr;\
	UINT bmlocal8553_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8552_my_ptr, bmlocal8553_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8552_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8552_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8552_my_ptr, bmlocal8553_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8554_my_ptr;\
	UINT bmlocal8555_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8554_my_ptr, bmlocal8555_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8554_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8554_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8554_my_ptr, bmlocal8555_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_sfId: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_sfId: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8556_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET( base_ptr, idx0, bmlocal8556_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal8556_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8557_my_ptr;\
	UINT bmlocal8558_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8557_my_ptr, bmlocal8558_my_bitoff );\
	(*((UINT32*)bmlocal8557_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8558_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8559_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8559_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8559_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_sfId_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8562_acc_bytes;\
	UINT bmlocal8563_acc_bits;\
	PVOID bmlocal8564_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8564_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8564_parent_out_ptr;\
	bmlocal8562_acc_bytes = 4;\
	bmlocal8563_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8562_acc_bytes );\
	out_bitoff += bmlocal8563_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8565_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS( base_ptr, idx0, out_ptr, bmlocal8565_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8565_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqWindowSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8566_my_ptr;\
	UINT bmlocal8567_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS( base_ptr, idx0, bmlocal8566_my_ptr, bmlocal8567_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8566_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8566_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8566_my_ptr, bmlocal8567_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8568_my_ptr;\
	UINT bmlocal8569_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS( base_ptr, idx0, bmlocal8568_my_ptr, bmlocal8569_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8568_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8568_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8568_my_ptr, bmlocal8569_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8570_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET( base_ptr, idx0, bmlocal8570_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqWindowSize", 32, (UINT)(bmlocal8570_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8571_my_ptr;\
	UINT bmlocal8572_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_POS( base_ptr, idx0, bmlocal8571_my_ptr, bmlocal8572_my_bitoff );\
	(*((UINT32*)bmlocal8571_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8572_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqWindowSize: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8573_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8573_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8573_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8576_acc_bytes;\
	UINT bmlocal8577_acc_bits;\
	PVOID bmlocal8578_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8578_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8578_parent_out_ptr;\
	bmlocal8576_acc_bytes = 8;\
	bmlocal8577_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8576_acc_bytes );\
	out_bitoff += bmlocal8577_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8579_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS( base_ptr, idx0, out_ptr, bmlocal8579_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8579_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8580_my_ptr;\
	UINT bmlocal8581_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS( base_ptr, idx0, bmlocal8580_my_ptr, bmlocal8581_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8580_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8580_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8580_my_ptr, bmlocal8581_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8582_my_ptr;\
	UINT bmlocal8583_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS( base_ptr, idx0, bmlocal8582_my_ptr, bmlocal8583_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8582_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8582_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8582_my_ptr, bmlocal8583_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8584_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET( base_ptr, idx0, bmlocal8584_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqTransmitterDelay", 32, (UINT)(bmlocal8584_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8585_my_ptr;\
	UINT bmlocal8586_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_POS( base_ptr, idx0, bmlocal8585_my_ptr, bmlocal8586_my_bitoff );\
	(*((UINT32*)bmlocal8585_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8586_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8587_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8587_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8587_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8590_acc_bytes;\
	UINT bmlocal8591_acc_bits;\
	PVOID bmlocal8592_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8592_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8592_parent_out_ptr;\
	bmlocal8590_acc_bytes = 12;\
	bmlocal8591_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8590_acc_bytes );\
	out_bitoff += bmlocal8591_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8593_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS( base_ptr, idx0, out_ptr, bmlocal8593_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8593_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8594_my_ptr;\
	UINT bmlocal8595_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS( base_ptr, idx0, bmlocal8594_my_ptr, bmlocal8595_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8594_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8594_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8594_my_ptr, bmlocal8595_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8596_my_ptr;\
	UINT bmlocal8597_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS( base_ptr, idx0, bmlocal8596_my_ptr, bmlocal8597_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8596_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8596_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8596_my_ptr, bmlocal8597_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8598_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET( base_ptr, idx0, bmlocal8598_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqReceiverDelay", 32, (UINT)(bmlocal8598_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8599_my_ptr;\
	UINT bmlocal8600_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_POS( base_ptr, idx0, bmlocal8599_my_ptr, bmlocal8600_my_bitoff );\
	(*((UINT32*)bmlocal8599_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8600_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8601_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8601_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8601_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8604_acc_bytes;\
	UINT bmlocal8605_acc_bits;\
	PVOID bmlocal8606_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8606_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8606_parent_out_ptr;\
	bmlocal8604_acc_bytes = 16;\
	bmlocal8605_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8604_acc_bytes );\
	out_bitoff += bmlocal8605_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8607_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS( base_ptr, idx0, out_ptr, bmlocal8607_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8607_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8608_my_ptr;\
	UINT bmlocal8609_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS( base_ptr, idx0, bmlocal8608_my_ptr, bmlocal8609_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8608_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8608_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8608_my_ptr, bmlocal8609_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8610_my_ptr;\
	UINT bmlocal8611_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS( base_ptr, idx0, bmlocal8610_my_ptr, bmlocal8611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8610_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8610_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8610_my_ptr, bmlocal8611_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8612_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET( base_ptr, idx0, bmlocal8612_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqBlockLifeTime", 32, (UINT)(bmlocal8612_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8613_my_ptr;\
	UINT bmlocal8614_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_POS( base_ptr, idx0, bmlocal8613_my_ptr, bmlocal8614_my_bitoff );\
	(*((UINT32*)bmlocal8613_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8614_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8615_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8615_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8615_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8618_acc_bytes;\
	UINT bmlocal8619_acc_bits;\
	PVOID bmlocal8620_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8620_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8620_parent_out_ptr;\
	bmlocal8618_acc_bytes = 20;\
	bmlocal8619_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8618_acc_bytes );\
	out_bitoff += bmlocal8619_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8621_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS( base_ptr, idx0, out_ptr, bmlocal8621_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8621_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8622_my_ptr;\
	UINT bmlocal8623_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS( base_ptr, idx0, bmlocal8622_my_ptr, bmlocal8623_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8622_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8622_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8622_my_ptr, bmlocal8623_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8624_my_ptr;\
	UINT bmlocal8625_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS( base_ptr, idx0, bmlocal8624_my_ptr, bmlocal8625_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8624_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8624_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8624_my_ptr, bmlocal8625_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8626_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET( base_ptr, idx0, bmlocal8626_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqSyncLossTimeout", 32, (UINT)(bmlocal8626_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8627_my_ptr;\
	UINT bmlocal8628_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_POS( base_ptr, idx0, bmlocal8627_my_ptr, bmlocal8628_my_bitoff );\
	(*((UINT32*)bmlocal8627_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8628_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8629_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8629_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8629_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8632_acc_bytes;\
	UINT bmlocal8633_acc_bits;\
	PVOID bmlocal8634_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8634_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8634_parent_out_ptr;\
	bmlocal8632_acc_bytes = 24;\
	bmlocal8633_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8632_acc_bytes );\
	out_bitoff += bmlocal8633_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8635_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, idx0, out_ptr, bmlocal8635_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8635_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8636_my_ptr;\
	UINT bmlocal8637_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, idx0, bmlocal8636_my_ptr, bmlocal8637_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8636_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8636_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8636_my_ptr, bmlocal8637_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8638_my_ptr;\
	UINT bmlocal8639_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, idx0, bmlocal8638_my_ptr, bmlocal8639_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8638_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8638_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8638_my_ptr, bmlocal8639_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8640_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET( base_ptr, idx0, bmlocal8640_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqRxPurgeTimeout", 32, (UINT)(bmlocal8640_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8641_my_ptr;\
	UINT bmlocal8642_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_POS( base_ptr, idx0, bmlocal8641_my_ptr, bmlocal8642_my_bitoff );\
	(*((UINT32*)bmlocal8641_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8642_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8643_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8643_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8643_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8646_acc_bytes;\
	UINT bmlocal8647_acc_bits;\
	PVOID bmlocal8648_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8648_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8648_parent_out_ptr;\
	bmlocal8646_acc_bytes = 28;\
	bmlocal8647_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8646_acc_bytes );\
	out_bitoff += bmlocal8647_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8649_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS( base_ptr, idx0, out_ptr, bmlocal8649_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8649_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqBlockSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8650_my_ptr;\
	UINT bmlocal8651_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS( base_ptr, idx0, bmlocal8650_my_ptr, bmlocal8651_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8650_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8650_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8650_my_ptr, bmlocal8651_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8652_my_ptr;\
	UINT bmlocal8653_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS( base_ptr, idx0, bmlocal8652_my_ptr, bmlocal8653_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8652_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8652_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8652_my_ptr, bmlocal8653_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8654_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET( base_ptr, idx0, bmlocal8654_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqBlockSize", 32, (UINT)(bmlocal8654_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8655_my_ptr;\
	UINT bmlocal8656_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_POS( base_ptr, idx0, bmlocal8655_my_ptr, bmlocal8656_my_bitoff );\
	(*((UINT32*)bmlocal8655_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8656_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqBlockSize: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8657_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8657_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8657_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8660_acc_bytes;\
	UINT bmlocal8661_acc_bits;\
	PVOID bmlocal8662_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8662_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8662_parent_out_ptr;\
	bmlocal8660_acc_bytes = 32;\
	bmlocal8661_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8660_acc_bytes );\
	out_bitoff += bmlocal8661_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8663_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS( base_ptr, idx0, out_ptr, bmlocal8663_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8663_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_t22: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8664_my_ptr;\
	UINT bmlocal8665_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS( base_ptr, idx0, bmlocal8664_my_ptr, bmlocal8665_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8664_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8664_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8664_my_ptr, bmlocal8665_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8666_my_ptr;\
	UINT bmlocal8667_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS( base_ptr, idx0, bmlocal8666_my_ptr, bmlocal8667_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8666_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8666_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8666_my_ptr, bmlocal8667_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_t22: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_t22: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_t22: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_t22: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_t22: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_t22: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_t22_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8668_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET( base_ptr, idx0, bmlocal8668_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "t22", 32, (UINT)(bmlocal8668_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8669_my_ptr;\
	UINT bmlocal8670_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_POS( base_ptr, idx0, bmlocal8669_my_ptr, bmlocal8670_my_bitoff );\
	(*((UINT32*)bmlocal8669_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8670_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_t22: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8671_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8671_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8671_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_t22_BYTES_SIZE 4

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8674_acc_bytes;\
	UINT bmlocal8675_acc_bits;\
	PVOID bmlocal8676_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8676_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8676_parent_out_ptr;\
	bmlocal8674_acc_bytes = 36;\
	bmlocal8675_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8674_acc_bytes );\
	out_bitoff += bmlocal8675_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8677_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS( base_ptr, idx0, out_ptr, bmlocal8677_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8677_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqEnable: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8678_my_ptr;\
	UINT bmlocal8679_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS( base_ptr, idx0, bmlocal8678_my_ptr, bmlocal8679_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8678_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8678_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8678_my_ptr, bmlocal8679_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8680_my_ptr;\
	UINT bmlocal8681_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS( base_ptr, idx0, bmlocal8680_my_ptr, bmlocal8681_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8680_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8680_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8680_my_ptr, bmlocal8681_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqEnable: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqEnable: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqEnable: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqEnable: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqEnable: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqEnable: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8682_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET( base_ptr, idx0, bmlocal8682_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqEnable", 8, (UINT)(bmlocal8682_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8683_my_ptr;\
	UINT bmlocal8684_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_POS( base_ptr, idx0, bmlocal8683_my_ptr, bmlocal8684_my_bitoff );\
	(*((UINT8*)bmlocal8683_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8684_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqEnable: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8685_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8685_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8685_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_BYTES_SIZE 1

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8688_acc_bytes;\
	UINT bmlocal8689_acc_bits;\
	PVOID bmlocal8690_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8690_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8690_parent_out_ptr;\
	bmlocal8688_acc_bytes = 37;\
	bmlocal8689_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8688_acc_bytes );\
	out_bitoff += bmlocal8689_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8691_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS( base_ptr, idx0, out_ptr, bmlocal8691_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8691_tmp_bitoff);\
}

// Alignment of Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8692_my_ptr;\
	UINT bmlocal8693_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS( base_ptr, idx0, bmlocal8692_my_ptr, bmlocal8693_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8692_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8692_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8692_my_ptr, bmlocal8693_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8694_my_ptr;\
	UINT bmlocal8695_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS( base_ptr, idx0, bmlocal8694_my_ptr, bmlocal8695_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8694_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8694_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8694_my_ptr, bmlocal8695_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8696_out_val;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET( base_ptr, idx0, bmlocal8696_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqDeliverInOrder", 8, (UINT)(bmlocal8696_out_val), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8697_my_ptr;\
	UINT bmlocal8698_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_POS( base_ptr, idx0, bmlocal8697_my_ptr, bmlocal8698_my_bitoff );\
	(*((UINT8*)bmlocal8697_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8698_my_bitoff );\
}

// Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8699_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8699_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8699_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_BYTES_SIZE 1

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8702_acc_bytes;\
	UINT bmlocal8703_acc_bits;\
	PVOID bmlocal8704_parent_out_ptr;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8704_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8704_parent_out_ptr;\
	bmlocal8702_acc_bytes = 38;\
	bmlocal8703_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8702_acc_bytes );\
	out_bitoff += bmlocal8703_acc_bits;\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8705_tmp_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_POS( base_ptr, idx0, out_ptr, bmlocal8705_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8705_tmp_bitoff);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8706_my_ptr;\
	UINT bmlocal8707_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_POS( base_ptr, idx0, bmlocal8706_my_ptr, bmlocal8707_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8706_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8706_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8706_my_ptr, bmlocal8707_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8708_my_ptr;\
	UINT bmlocal8709_my_bitoff;\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_POS( base_ptr, idx0, bmlocal8708_my_ptr, bmlocal8709_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8708_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8708_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8708_my_ptr, bmlocal8709_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8710_out_bytes;\
	UINT bmlocal8711_out_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_SIZE( base_ptr, idx0, bmlocal8710_out_bytes, bmlocal8711_out_bits );\
	bmlocal8711_out_bits += bmlocal8710_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8711_out_bits), "%d", 1);\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8712_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8712_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8712_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_reserved_BYTES_SIZE 2

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 40;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8715_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8715_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8715_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_BYTES_CELL_SIZE 40

#define BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqWindowSize_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqTransmitterDelay_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqReceiverDelay_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockLifeTime_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqSyncLossTimeout_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqRxPurgeTimeout_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqBlockSize_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_t22_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqEnable_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_arqDeliverInOrder_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_reserved_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8716_dim_size0;\
	UINT bmlocal8717_idx0;\
	{\
		UINT8 bmlocal8718_var0;\
		BM_Arq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8718_var0 );\
		bmlocal8716_dim_size0 = (UINT)(bmlocal8718_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "arqInfo", 1);\
	for( bmlocal8717_idx0=0; bmlocal8717_idx0<bmlocal8716_dim_size0; bmlocal8717_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8717_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal8717_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorInfo_L3_arqInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8719_tmp_bits;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_SIZE( base_ptr, out_bytes, bmlocal8719_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8719_tmp_bits );\
}


#define BM_Arq_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8720_tmp_bytes = 0;\
	UINT bmlocal8721_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_Arq_MonitorInfo_L3_arqInfo_GET_SIZE( base_ptr, bmlocal8720_tmp_bytes, bmlocal8721_tmp_bits );\
	out_bytes += bmlocal8720_tmp_bytes;\
	out_bits += bmlocal8721_tmp_bits;\
}

#define BM_Arq_MonitorInfo_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8722_tmp_bits;\
	BM_Arq_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8722_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8722_tmp_bits );\
}

#define BM_Arq_MonitorInfo_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Arq_MonitorInfo_L3", 1);\
	BM_Arq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Arq_MonitorInfo_L3_arqInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorInfo_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorInfo_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Harq_MonitorInfo_L3[4];

// COMPOSITE: Full name: 'Harq_MonitorInfo_L3' Type: 'Harq_MonitorInfo_L3', Top-level, Non-instance, No bitoff root
#define BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8723_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, bmlocal8723_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8723_tmp_bitoff);\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_POS_ALIGNED 0

// Alignment of Harq_MonitorInfo_L3_numOfCidInfos: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8724_my_ptr;\
	UINT bmlocal8725_my_bitoff;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8724_my_ptr, bmlocal8725_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8724_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8724_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8724_my_ptr, bmlocal8725_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8726_my_ptr;\
	UINT bmlocal8727_my_bitoff;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8726_my_ptr, bmlocal8727_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8726_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8726_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8726_my_ptr, bmlocal8727_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// Harq_MonitorInfo_L3_numOfCidInfos: IS_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_numOfCidInfos: SET_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_numOfCidInfos: IS_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_numOfCidInfos: SET_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_numOfCidInfos: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Harq_MonitorInfo_L3_numOfCidInfos: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Harq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8728_out_val;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8728_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidInfos", 8, (UINT)(bmlocal8728_out_val), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8729_my_ptr;\
	UINT bmlocal8730_my_bitoff;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal8729_my_ptr, bmlocal8730_my_bitoff );\
	(*((UINT8*)bmlocal8729_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8730_my_bitoff );\
}

// Harq_MonitorInfo_L3_numOfCidInfos: Validation accessors are not defined because validation condition was not specified.
#define BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8731_tmp_bits;\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, bmlocal8731_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8731_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_numOfCidInfos_BYTES_SIZE 1

#define BM_Harq_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8734_acc_bytes;\
	UINT bmlocal8735_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8734_acc_bytes = 1;\
	bmlocal8735_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8734_acc_bytes );\
	out_bitoff += bmlocal8735_acc_bits;\
}

#define BM_Harq_MonitorInfo_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8736_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8736_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8736_tmp_bitoff);\
}

#define BM_Harq_MonitorInfo_L3_reserved_POS_ALIGNED 1

#define BM_Harq_MonitorInfo_L3_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8737_my_ptr;\
	UINT bmlocal8738_my_bitoff;\
	BM_Harq_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8737_my_ptr, bmlocal8738_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8737_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8737_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8737_my_ptr, bmlocal8738_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8739_my_ptr;\
	UINT bmlocal8740_my_bitoff;\
	BM_Harq_MonitorInfo_L3_reserved_GET_POS( base_ptr, bmlocal8739_my_ptr, bmlocal8740_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8739_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8739_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8739_my_ptr, bmlocal8740_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8741_out_bytes;\
	UINT bmlocal8742_out_bits;\
	BM_Harq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, bmlocal8741_out_bytes, bmlocal8742_out_bits );\
	bmlocal8742_out_bits += bmlocal8741_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal8742_out_bits), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Harq_MonitorInfo_L3_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8743_tmp_bits;\
	BM_Harq_MonitorInfo_L3_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal8743_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8743_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_reserved_BYTES_SIZE 3

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8746_acc_bytes;\
	UINT bmlocal8747_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8746_acc_bytes = 4;\
	bmlocal8747_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8746_acc_bytes );\
	out_bitoff += bmlocal8747_acc_bits;\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8748_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_POS( base_ptr, out_ptr, bmlocal8748_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8748_tmp_bitoff);\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_POS_ALIGNED 4

// ARRAY: Harq_MonitorInfo_L3_harqInfo
#define BM_Harq_MonitorInfo_L3_harqInfo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal8749_var0;\
		BM_Harq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8749_var0 );\
		out_bytes = (UINT)(8*(1*bmlocal8749_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal8750_var0;\
			BM_Harq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8750_var0 );\
			out_element_count = (UINT)(bmlocal8750_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8751_out_ptr;\
	UINT bmlocal8752_out_bitoff;\
	UINT bmlocal8753_element_size_bytes;\
	UINT bmlocal8754_element_size_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_POS( base_ptr, bmlocal8751_out_ptr, bmlocal8752_out_bitoff );\
	bmlocal8753_element_size_bytes = 8;\
	bmlocal8754_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8751_out_ptr) + (idx0) * bmlocal8753_element_size_bytes );\
	out_bitoff = bmlocal8752_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8754_element_size_bits );\
}

// COMPOSITE: Full name: 'Harq_MonitorInfo_L3_harqInfo' Type: 'HarqInfo', Inner, Non-instance, No bitoff root
#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8755_parent_out_ptr;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8755_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8755_parent_out_ptr;\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8756_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS( base_ptr, idx0, out_ptr, bmlocal8756_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8756_tmp_bitoff);\
}

// Alignment of Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8757_my_ptr;\
	UINT bmlocal8758_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS( base_ptr, idx0, bmlocal8757_my_ptr, bmlocal8758_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8757_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8757_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8757_my_ptr, bmlocal8758_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8759_my_ptr;\
	UINT bmlocal8760_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS( base_ptr, idx0, bmlocal8759_my_ptr, bmlocal8760_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8759_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8759_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8759_my_ptr, bmlocal8760_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: IS_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: SET_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: IS_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: SET_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal8761_out_val;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET( base_ptr, idx0, bmlocal8761_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqChannelMapping", 16, (UINT)(bmlocal8761_out_val), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8762_my_ptr;\
	UINT bmlocal8763_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_POS( base_ptr, idx0, bmlocal8762_my_ptr, bmlocal8763_my_bitoff );\
	(*((UINT16*)bmlocal8762_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8763_my_bitoff );\
}

// Harq_MonitorInfo_L3_harqInfo_harqChannelMapping: Validation accessors are not defined because validation condition was not specified.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8764_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8764_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8764_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_BYTES_SIZE 2

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8767_acc_bytes;\
	UINT bmlocal8768_acc_bits;\
	PVOID bmlocal8769_parent_out_ptr;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8769_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8769_parent_out_ptr;\
	bmlocal8767_acc_bytes = 2;\
	bmlocal8768_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8767_acc_bytes );\
	out_bitoff += bmlocal8768_acc_bits;\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8770_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS( base_ptr, idx0, out_ptr, bmlocal8770_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8770_tmp_bitoff);\
}

// Alignment of Harq_MonitorInfo_L3_harqInfo_harqEnable: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8771_my_ptr;\
	UINT bmlocal8772_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS( base_ptr, idx0, bmlocal8771_my_ptr, bmlocal8772_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8771_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8771_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8771_my_ptr, bmlocal8772_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8773_my_ptr;\
	UINT bmlocal8774_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS( base_ptr, idx0, bmlocal8773_my_ptr, bmlocal8774_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8773_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8773_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8773_my_ptr, bmlocal8774_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// Harq_MonitorInfo_L3_harqInfo_harqEnable: IS_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqEnable: SET_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqEnable: IS_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqEnable: SET_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqEnable: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Harq_MonitorInfo_L3_harqInfo_harqEnable: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8775_out_val;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET( base_ptr, idx0, bmlocal8775_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqEnable", 8, (UINT)(bmlocal8775_out_val), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8776_my_ptr;\
	UINT bmlocal8777_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_POS( base_ptr, idx0, bmlocal8776_my_ptr, bmlocal8777_my_bitoff );\
	(*((UINT8*)bmlocal8776_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8777_my_bitoff );\
}

// Harq_MonitorInfo_L3_harqInfo_harqEnable: Validation accessors are not defined because validation condition was not specified.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8778_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8778_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8778_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_BYTES_SIZE 1

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8781_acc_bytes;\
	UINT bmlocal8782_acc_bits;\
	PVOID bmlocal8783_parent_out_ptr;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8783_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8783_parent_out_ptr;\
	bmlocal8781_acc_bytes = 3;\
	bmlocal8782_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8781_acc_bytes );\
	out_bitoff += bmlocal8782_acc_bits;\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8784_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS( base_ptr, idx0, out_ptr, bmlocal8784_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8784_tmp_bitoff);\
}

// Alignment of Harq_MonitorInfo_L3_harqInfo_harqisForReorder: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8785_my_ptr;\
	UINT bmlocal8786_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS( base_ptr, idx0, bmlocal8785_my_ptr, bmlocal8786_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8785_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8785_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8785_my_ptr, bmlocal8786_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8787_my_ptr;\
	UINT bmlocal8788_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS( base_ptr, idx0, bmlocal8787_my_ptr, bmlocal8788_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8787_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8787_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8787_my_ptr, bmlocal8788_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: IS_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: SET_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: IS_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: SET_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8789_out_val;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET( base_ptr, idx0, bmlocal8789_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "harqisForReorder", 8, (UINT)(bmlocal8789_out_val), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8790_my_ptr;\
	UINT bmlocal8791_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_POS( base_ptr, idx0, bmlocal8790_my_ptr, bmlocal8791_my_bitoff );\
	(*((UINT8*)bmlocal8790_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8791_my_bitoff );\
}

// Harq_MonitorInfo_L3_harqInfo_harqisForReorder: Validation accessors are not defined because validation condition was not specified.
#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8792_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8792_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8792_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_BYTES_SIZE 1

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8795_acc_bytes;\
	UINT bmlocal8796_acc_bits;\
	PVOID bmlocal8797_parent_out_ptr;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8797_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8797_parent_out_ptr;\
	bmlocal8795_acc_bytes = 4;\
	bmlocal8796_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8795_acc_bytes );\
	out_bitoff += bmlocal8796_acc_bits;\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8798_tmp_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS( base_ptr, idx0, out_ptr, bmlocal8798_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8798_tmp_bitoff);\
}

// Alignment of Harq_MonitorInfo_L3_harqInfo_sfId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8799_my_ptr;\
	UINT bmlocal8800_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8799_my_ptr, bmlocal8800_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8799_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8799_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8799_my_ptr, bmlocal8800_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8801_my_ptr;\
	UINT bmlocal8802_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8801_my_ptr, bmlocal8802_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8801_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8801_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8801_my_ptr, bmlocal8802_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Harq_MonitorInfo_L3_harqInfo_sfId: IS_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_sfId: SET_DEFAULT accessor is not defined because no default value was specified.
// Harq_MonitorInfo_L3_harqInfo_sfId: IS_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_sfId: SET_RESET accessor is not defined because no reset value was specified.
// Harq_MonitorInfo_L3_harqInfo_sfId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Harq_MonitorInfo_L3_harqInfo_sfId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8803_out_val;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET( base_ptr, idx0, bmlocal8803_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "sfId", 32, (UINT)(bmlocal8803_out_val), "%d", 1);\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8804_my_ptr;\
	UINT bmlocal8805_my_bitoff;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_POS( base_ptr, idx0, bmlocal8804_my_ptr, bmlocal8805_my_bitoff );\
	(*((UINT32*)bmlocal8804_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8805_my_bitoff );\
}

// Harq_MonitorInfo_L3_harqInfo_sfId: Validation accessors are not defined because validation condition was not specified.
#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8806_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8806_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8806_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_sfId_BYTES_SIZE 4

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8809_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8809_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8809_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_BYTES_CELL_SIZE 8

#define BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_harqChannelMapping_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Harq_MonitorInfo_L3_harqInfo_harqEnable_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Harq_MonitorInfo_L3_harqInfo_harqisForReorder_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Harq_MonitorInfo_L3_harqInfo_sfId_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8810_dim_size0;\
	UINT bmlocal8811_idx0;\
	{\
		UINT8 bmlocal8812_var0;\
		BM_Harq_MonitorInfo_L3_numOfCidInfos_GET( base_ptr, bmlocal8812_var0 );\
		bmlocal8810_dim_size0 = (UINT)(bmlocal8812_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "harqInfo", 1);\
	for( bmlocal8811_idx0=0; bmlocal8811_idx0<bmlocal8810_dim_size0; bmlocal8811_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8811_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH_IDX( base_ptr, bmlocal8811_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Harq_MonitorInfo_L3_harqInfo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8813_tmp_bits;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_SIZE( base_ptr, out_bytes, bmlocal8813_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8813_tmp_bits );\
}


#define BM_Harq_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8814_tmp_bytes = 0;\
	UINT bmlocal8815_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_Harq_MonitorInfo_L3_harqInfo_GET_SIZE( base_ptr, bmlocal8814_tmp_bytes, bmlocal8815_tmp_bits );\
	out_bytes += bmlocal8814_tmp_bytes;\
	out_bits += bmlocal8815_tmp_bits;\
}

#define BM_Harq_MonitorInfo_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8816_tmp_bits;\
	BM_Harq_MonitorInfo_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8816_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8816_tmp_bits );\
}

#define BM_Harq_MonitorInfo_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Harq_MonitorInfo_L3", 1);\
	BM_Harq_MonitorInfo_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Harq_MonitorInfo_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Harq_MonitorInfo_L3_harqInfo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Harq_MonitorInfo_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Harq_MonitorInfo_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 MacState_L3[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	E_MacState _state : 8;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_MacState_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	E_MacState _state : 8;
} BMS_MacState_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MacState_L3' Type: 'MacState_L3', Top-level, Non-instance, No bitoff root
#define BM_MacState_L3_state_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MacState_L3_state_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8817_tmp_bitoff;\
	BM_MacState_L3_state_GET_POS( base_ptr, out_ptr, bmlocal8817_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8817_tmp_bitoff);\
}

#define BM_MacState_L3_state_POS_ALIGNED 0

// Alignment of MacState_L3_state: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MacState_L3_state_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MacState_L3_state_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8818_my_ptr;\
	UINT bmlocal8819_my_bitoff;\
	BM_MacState_L3_state_GET_POS( base_ptr, bmlocal8818_my_ptr, bmlocal8819_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_MacState)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8818_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_MacState)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8818_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8818_my_ptr, bmlocal8819_my_bitoff, 8, E_MacState, out_val, 0x00000000 );\
	}\
}

#define BM_MacState_L3_state_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8820_my_ptr;\
	UINT bmlocal8821_my_bitoff;\
	BM_MacState_L3_state_GET_POS( base_ptr, bmlocal8820_my_ptr, bmlocal8821_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8820_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8820_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8820_my_ptr, bmlocal8821_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// MacState_L3_state: IS_DEFAULT accessor is not defined because no default value was specified.
// MacState_L3_state: SET_DEFAULT accessor is not defined because no default value was specified.
// MacState_L3_state: IS_RESET accessor is not defined because no reset value was specified.
// MacState_L3_state: SET_RESET accessor is not defined because no reset value was specified.
// MacState_L3_state: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MacState_L3_state: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MacState_L3_state_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_MacState bmlocal8822_out_val;\
	BM_MacState_L3_state_GET( base_ptr, bmlocal8822_out_val );\
	if( bmlocal8822_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_UNINITIALIZED", 1);\
	}\
	if( bmlocal8822_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_INIT", 1);\
	}\
	if( bmlocal8822_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_READY", 1);\
	}\
	if( bmlocal8822_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_SCAN", 1);\
	}\
	if( bmlocal8822_out_val == 5 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_STANDBY", 1);\
	}\
	if( bmlocal8822_out_val == 6 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_CONNECTING", 1);\
	}\
	if( bmlocal8822_out_val == 7 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_WIMAX_CONNECTED", 1);\
	}\
	if( bmlocal8822_out_val == 8 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_DATA_PATH_CONNECTED", 1);\
	}\
	if( bmlocal8822_out_val == 9 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_IDLE", 1);\
	}\
	if( bmlocal8822_out_val == 10 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_DISCONNECTING", 1);\
	}\
	if( bmlocal8822_out_val == 11 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_OOZ", 1);\
	}\
	if( bmlocal8822_out_val == 12 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_SLEEP_ACTIVE", 1);\
	}\
	if( bmlocal8822_out_val == 13 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_PRODUCTION", 1);\
	}\
	if( bmlocal8822_out_val == 14 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_CONFIG", 1);\
	}\
	if( bmlocal8822_out_val == 15 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_RF_OFF", 1);\
	}\
	if( bmlocal8822_out_val == 16 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "state", "E_MAC_STATE_RF_SHUTDOWN", 1);\
	}\
}

#define BM_MacState_L3_state_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MacState_L3_state_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MacState_L3_state_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8823_my_ptr;\
	UINT bmlocal8824_my_bitoff;\
	BM_MacState_L3_state_GET_POS( base_ptr, bmlocal8823_my_ptr, bmlocal8824_my_bitoff );\
	(*((UINT8*)bmlocal8823_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8824_my_bitoff );\
}

// MacState_L3_state: Validation accessors are not defined because validation condition was not specified.
#define BM_MacState_L3_state_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8825_tmp_bits;\
	BM_MacState_L3_state_GET_SIZE( base_ptr, out_bytes, bmlocal8825_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8825_tmp_bits );\
}

#define BM_MacState_L3_state_BYTES_SIZE 1

#define BM_MacState_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8828_acc_bytes;\
	UINT bmlocal8829_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8828_acc_bytes = 1;\
	bmlocal8829_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8828_acc_bytes );\
	out_bitoff += bmlocal8829_acc_bits;\
}

#define BM_MacState_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8830_tmp_bitoff;\
	BM_MacState_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8830_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8830_tmp_bitoff);\
}

#define BM_MacState_L3_reserved_POS_ALIGNED 1

#define BM_MacState_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MacState_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MacState_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_MacState_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MacState_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8833_tmp_bits;\
	BM_MacState_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8833_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8833_tmp_bits );\
}

#define BM_MacState_L3_BYTES_SIZE 4

#define BM_MacState_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MacState_L3", 1);\
	BM_MacState_L3_state_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MacState_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MacState_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MacState_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BasicStatus_L3[28];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _frequency;
	UINT32 _ulCidNum;
	UINT32 _dlCidNum;
	UINT8 _preambleIndex : 8;
	E_BandWidth _bandWidth : 8;
	BMS_LittleEndianness_Uint8 _bsId[6];
	BMS_LittleEndianness_Uint8 _macAddress[6];
	UINT32 : 0; //Align the structure to 32 bits
} BMS_BasicStatus_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	BMS_LittleEndianness_Uint8 _macAddress[6];
	BMS_LittleEndianness_Uint8 _bsId[6];
	E_BandWidth _bandWidth : 8;
	UINT8 _preambleIndex : 8;
	UINT32 _dlCidNum;
	UINT32 _ulCidNum;
	UINT32 _frequency;
} BMS_BasicStatus_L3;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BasicStatus_L3' Type: 'BasicStatus_L3', Top-level, Non-instance, No bitoff root
#define BM_BasicStatus_L3_frequency_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BasicStatus_L3_frequency_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8834_tmp_bitoff;\
	BM_BasicStatus_L3_frequency_GET_POS( base_ptr, out_ptr, bmlocal8834_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8834_tmp_bitoff);\
}

#define BM_BasicStatus_L3_frequency_POS_ALIGNED 0

// Alignment of BasicStatus_L3_frequency: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BasicStatus_L3_frequency_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_frequency_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8835_my_ptr;\
	UINT bmlocal8836_my_bitoff;\
	BM_BasicStatus_L3_frequency_GET_POS( base_ptr, bmlocal8835_my_ptr, bmlocal8836_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8835_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8835_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8835_my_ptr, bmlocal8836_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BasicStatus_L3_frequency_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8837_my_ptr;\
	UINT bmlocal8838_my_bitoff;\
	BM_BasicStatus_L3_frequency_GET_POS( base_ptr, bmlocal8837_my_ptr, bmlocal8838_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8837_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8837_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8837_my_ptr, bmlocal8838_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BasicStatus_L3_frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_frequency: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_frequency: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_frequency_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8839_out_val;\
	BM_BasicStatus_L3_frequency_GET( base_ptr, bmlocal8839_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "frequency", 32, (UINT)(bmlocal8839_out_val), "%d", 1);\
}

#define BM_BasicStatus_L3_frequency_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_frequency_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_frequency_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8840_my_ptr;\
	UINT bmlocal8841_my_bitoff;\
	BM_BasicStatus_L3_frequency_GET_POS( base_ptr, bmlocal8840_my_ptr, bmlocal8841_my_bitoff );\
	(*((UINT32*)bmlocal8840_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8841_my_bitoff );\
}

// BasicStatus_L3_frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_frequency_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8842_tmp_bits;\
	BM_BasicStatus_L3_frequency_GET_SIZE( base_ptr, out_bytes, bmlocal8842_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8842_tmp_bits );\
}

#define BM_BasicStatus_L3_frequency_BYTES_SIZE 4

#define BM_BasicStatus_L3_ulCidNum_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8845_acc_bytes;\
	UINT bmlocal8846_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8845_acc_bytes = 4;\
	bmlocal8846_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8845_acc_bytes );\
	out_bitoff += bmlocal8846_acc_bits;\
}

#define BM_BasicStatus_L3_ulCidNum_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8847_tmp_bitoff;\
	BM_BasicStatus_L3_ulCidNum_GET_POS( base_ptr, out_ptr, bmlocal8847_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8847_tmp_bitoff);\
}

#define BM_BasicStatus_L3_ulCidNum_POS_ALIGNED 4

// Alignment of BasicStatus_L3_ulCidNum: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BasicStatus_L3_ulCidNum_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_ulCidNum_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8848_my_ptr;\
	UINT bmlocal8849_my_bitoff;\
	BM_BasicStatus_L3_ulCidNum_GET_POS( base_ptr, bmlocal8848_my_ptr, bmlocal8849_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8848_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8848_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8848_my_ptr, bmlocal8849_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BasicStatus_L3_ulCidNum_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8850_my_ptr;\
	UINT bmlocal8851_my_bitoff;\
	BM_BasicStatus_L3_ulCidNum_GET_POS( base_ptr, bmlocal8850_my_ptr, bmlocal8851_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8850_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8850_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8850_my_ptr, bmlocal8851_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BasicStatus_L3_ulCidNum: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_ulCidNum: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_ulCidNum: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_ulCidNum: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_ulCidNum: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_ulCidNum: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_ulCidNum_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8852_out_val;\
	BM_BasicStatus_L3_ulCidNum_GET( base_ptr, bmlocal8852_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ulCidNum", 32, (UINT)(bmlocal8852_out_val), "%d", 1);\
}

#define BM_BasicStatus_L3_ulCidNum_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_ulCidNum_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_ulCidNum_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8853_my_ptr;\
	UINT bmlocal8854_my_bitoff;\
	BM_BasicStatus_L3_ulCidNum_GET_POS( base_ptr, bmlocal8853_my_ptr, bmlocal8854_my_bitoff );\
	(*((UINT32*)bmlocal8853_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8854_my_bitoff );\
}

// BasicStatus_L3_ulCidNum: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_ulCidNum_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8855_tmp_bits;\
	BM_BasicStatus_L3_ulCidNum_GET_SIZE( base_ptr, out_bytes, bmlocal8855_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8855_tmp_bits );\
}

#define BM_BasicStatus_L3_ulCidNum_BYTES_SIZE 4

#define BM_BasicStatus_L3_dlCidNum_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8858_acc_bytes;\
	UINT bmlocal8859_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8858_acc_bytes = 8;\
	bmlocal8859_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8858_acc_bytes );\
	out_bitoff += bmlocal8859_acc_bits;\
}

#define BM_BasicStatus_L3_dlCidNum_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8860_tmp_bitoff;\
	BM_BasicStatus_L3_dlCidNum_GET_POS( base_ptr, out_ptr, bmlocal8860_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8860_tmp_bitoff);\
}

#define BM_BasicStatus_L3_dlCidNum_POS_ALIGNED 8

// Alignment of BasicStatus_L3_dlCidNum: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BasicStatus_L3_dlCidNum_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_dlCidNum_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8861_my_ptr;\
	UINT bmlocal8862_my_bitoff;\
	BM_BasicStatus_L3_dlCidNum_GET_POS( base_ptr, bmlocal8861_my_ptr, bmlocal8862_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8861_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8861_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8861_my_ptr, bmlocal8862_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BasicStatus_L3_dlCidNum_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8863_my_ptr;\
	UINT bmlocal8864_my_bitoff;\
	BM_BasicStatus_L3_dlCidNum_GET_POS( base_ptr, bmlocal8863_my_ptr, bmlocal8864_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8863_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8863_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8863_my_ptr, bmlocal8864_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BasicStatus_L3_dlCidNum: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_dlCidNum: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_dlCidNum: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_dlCidNum: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_dlCidNum: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_dlCidNum: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_dlCidNum_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8865_out_val;\
	BM_BasicStatus_L3_dlCidNum_GET( base_ptr, bmlocal8865_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dlCidNum", 32, (UINT)(bmlocal8865_out_val), "%d", 1);\
}

#define BM_BasicStatus_L3_dlCidNum_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_dlCidNum_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_dlCidNum_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8866_my_ptr;\
	UINT bmlocal8867_my_bitoff;\
	BM_BasicStatus_L3_dlCidNum_GET_POS( base_ptr, bmlocal8866_my_ptr, bmlocal8867_my_bitoff );\
	(*((UINT32*)bmlocal8866_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8867_my_bitoff );\
}

// BasicStatus_L3_dlCidNum: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_dlCidNum_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8868_tmp_bits;\
	BM_BasicStatus_L3_dlCidNum_GET_SIZE( base_ptr, out_bytes, bmlocal8868_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8868_tmp_bits );\
}

#define BM_BasicStatus_L3_dlCidNum_BYTES_SIZE 4

#define BM_BasicStatus_L3_preambleIndex_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8871_acc_bytes;\
	UINT bmlocal8872_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8871_acc_bytes = 12;\
	bmlocal8872_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8871_acc_bytes );\
	out_bitoff += bmlocal8872_acc_bits;\
}

#define BM_BasicStatus_L3_preambleIndex_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8873_tmp_bitoff;\
	BM_BasicStatus_L3_preambleIndex_GET_POS( base_ptr, out_ptr, bmlocal8873_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8873_tmp_bitoff);\
}

#define BM_BasicStatus_L3_preambleIndex_POS_ALIGNED 12

// Alignment of BasicStatus_L3_preambleIndex: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BasicStatus_L3_preambleIndex_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_preambleIndex_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8874_my_ptr;\
	UINT bmlocal8875_my_bitoff;\
	BM_BasicStatus_L3_preambleIndex_GET_POS( base_ptr, bmlocal8874_my_ptr, bmlocal8875_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8874_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8874_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8874_my_ptr, bmlocal8875_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_BasicStatus_L3_preambleIndex_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8876_my_ptr;\
	UINT bmlocal8877_my_bitoff;\
	BM_BasicStatus_L3_preambleIndex_GET_POS( base_ptr, bmlocal8876_my_ptr, bmlocal8877_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8876_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8876_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8876_my_ptr, bmlocal8877_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// BasicStatus_L3_preambleIndex: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_preambleIndex: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_preambleIndex: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_preambleIndex: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_preambleIndex: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_preambleIndex: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_preambleIndex_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8878_out_val;\
	BM_BasicStatus_L3_preambleIndex_GET( base_ptr, bmlocal8878_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "preambleIndex", 8, (UINT)(bmlocal8878_out_val), "%d", 1);\
}

#define BM_BasicStatus_L3_preambleIndex_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_preambleIndex_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_preambleIndex_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8879_my_ptr;\
	UINT bmlocal8880_my_bitoff;\
	BM_BasicStatus_L3_preambleIndex_GET_POS( base_ptr, bmlocal8879_my_ptr, bmlocal8880_my_bitoff );\
	(*((UINT8*)bmlocal8879_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8880_my_bitoff );\
}

// BasicStatus_L3_preambleIndex: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_preambleIndex_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8881_tmp_bits;\
	BM_BasicStatus_L3_preambleIndex_GET_SIZE( base_ptr, out_bytes, bmlocal8881_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8881_tmp_bits );\
}

#define BM_BasicStatus_L3_preambleIndex_BYTES_SIZE 1

#define BM_BasicStatus_L3_bandWidth_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8884_acc_bytes;\
	UINT bmlocal8885_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8884_acc_bytes = 13;\
	bmlocal8885_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8884_acc_bytes );\
	out_bitoff += bmlocal8885_acc_bits;\
}

#define BM_BasicStatus_L3_bandWidth_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8886_tmp_bitoff;\
	BM_BasicStatus_L3_bandWidth_GET_POS( base_ptr, out_ptr, bmlocal8886_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8886_tmp_bitoff);\
}

#define BM_BasicStatus_L3_bandWidth_POS_ALIGNED 13

// Alignment of BasicStatus_L3_bandWidth: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BasicStatus_L3_bandWidth_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_bandWidth_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8887_my_ptr;\
	UINT bmlocal8888_my_bitoff;\
	BM_BasicStatus_L3_bandWidth_GET_POS( base_ptr, bmlocal8887_my_ptr, bmlocal8888_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8887_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (E_BandWidth)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8887_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8887_my_ptr, bmlocal8888_my_bitoff, 8, E_BandWidth, out_val, 0x00000001 );\
	}\
}

#define BM_BasicStatus_L3_bandWidth_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8889_my_ptr;\
	UINT bmlocal8890_my_bitoff;\
	BM_BasicStatus_L3_bandWidth_GET_POS( base_ptr, bmlocal8889_my_ptr, bmlocal8890_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8889_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8889_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8889_my_ptr, bmlocal8890_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// BasicStatus_L3_bandWidth: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_bandWidth: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_bandWidth: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_bandWidth: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_bandWidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_bandWidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_bandWidth_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	E_BandWidth bmlocal8891_out_val;\
	BM_BasicStatus_L3_bandWidth_GET( base_ptr, bmlocal8891_out_val );\
	if( bmlocal8891_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_Invalid", 1);\
	}\
	if( bmlocal8891_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_5", 1);\
	}\
	if( bmlocal8891_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_8_75", 1);\
	}\
	if( bmlocal8891_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_10", 1);\
	}\
	if( bmlocal8891_out_val == 4 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "bandWidth", "e_BW_7", 1);\
	}\
}

#define BM_BasicStatus_L3_bandWidth_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_bandWidth_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_bandWidth_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8892_my_ptr;\
	UINT bmlocal8893_my_bitoff;\
	BM_BasicStatus_L3_bandWidth_GET_POS( base_ptr, bmlocal8892_my_ptr, bmlocal8893_my_bitoff );\
	(*((UINT8*)bmlocal8892_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8893_my_bitoff );\
}

// BasicStatus_L3_bandWidth: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_bandWidth_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8894_tmp_bits;\
	BM_BasicStatus_L3_bandWidth_GET_SIZE( base_ptr, out_bytes, bmlocal8894_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8894_tmp_bits );\
}

#define BM_BasicStatus_L3_bandWidth_BYTES_SIZE 1

#define BM_BasicStatus_L3_bsId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8897_acc_bytes;\
	UINT bmlocal8898_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8897_acc_bytes = 14;\
	bmlocal8898_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8897_acc_bytes );\
	out_bitoff += bmlocal8898_acc_bits;\
}

#define BM_BasicStatus_L3_bsId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8899_tmp_bitoff;\
	BM_BasicStatus_L3_bsId_GET_POS( base_ptr, out_ptr, bmlocal8899_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8899_tmp_bitoff);\
}

#define BM_BasicStatus_L3_bsId_POS_ALIGNED 14

// ARRAY: BasicStatus_L3_bsId
#define BM_BasicStatus_L3_bsId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_bsId_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8900_out_ptr;\
	UINT bmlocal8901_out_bitoff;\
	UINT bmlocal8902_element_size_bytes;\
	UINT bmlocal8903_element_size_bits;\
	BM_BasicStatus_L3_bsId_GET_POS( base_ptr, bmlocal8900_out_ptr, bmlocal8901_out_bitoff );\
	bmlocal8902_element_size_bytes = 1;\
	bmlocal8903_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8900_out_ptr) + (idx0) * bmlocal8902_element_size_bytes );\
	out_bitoff = bmlocal8901_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8903_element_size_bits );\
}

// COMPOSITE: Full name: 'BasicStatus_L3_bsId' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_BasicStatus_L3_bsId_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8904_parent_out_ptr;\
	BM_BasicStatus_L3_bsId_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8904_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8904_parent_out_ptr;\
}

// Alignment of BasicStatus_L3_bsId_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BasicStatus_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_bsId_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8905_my_ptr;\
	UINT bmlocal8906_my_bitoff;\
	BM_BasicStatus_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal8905_my_ptr, bmlocal8906_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8905_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8905_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8905_my_ptr, bmlocal8906_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_BasicStatus_L3_bsId_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8907_my_ptr;\
	UINT bmlocal8908_my_bitoff;\
	BM_BasicStatus_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal8907_my_ptr, bmlocal8908_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8907_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8907_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8907_my_ptr, bmlocal8908_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// BasicStatus_L3_bsId_value: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_bsId_value: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_bsId_value: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_bsId_value: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_bsId_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_bsId_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8909_out_val;\
	BM_BasicStatus_L3_bsId_value_GET( base_ptr, idx0, bmlocal8909_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal8909_out_val), "%u", 1);\
}

#define BM_BasicStatus_L3_bsId_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BasicStatus_L3_bsId_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8910_my_ptr;\
	UINT bmlocal8911_my_bitoff;\
	BM_BasicStatus_L3_bsId_value_GET_POS( base_ptr, idx0, bmlocal8910_my_ptr, bmlocal8911_my_bitoff );\
	(*((UINT8*)bmlocal8910_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8911_my_bitoff );\
}

// BasicStatus_L3_bsId_value: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_bsId_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8912_tmp_bits;\
	BM_BasicStatus_L3_bsId_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8912_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8912_tmp_bits );\
}

#define BM_BasicStatus_L3_bsId_value_BYTES_SIZE 1

#define BM_BasicStatus_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_bsId_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8915_tmp_bits;\
	BM_BasicStatus_L3_bsId_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8915_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8915_tmp_bits );\
}

#define BM_BasicStatus_L3_bsId_BYTES_CELL_SIZE 1

#define BM_BasicStatus_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_bsId_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_bsId_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_bsId_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BasicStatus_L3_bsId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8916_dim_size0;\
	UINT bmlocal8917_idx0;\
	bmlocal8916_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "bsId", 1);\
	for( bmlocal8917_idx0=0; bmlocal8917_idx0<bmlocal8916_dim_size0; bmlocal8917_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8917_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BasicStatus_L3_bsId_DUMP_DEPTH_IDX( base_ptr, bmlocal8917_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_bsId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_bsId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_bsId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8918_tmp_bits;\
	BM_BasicStatus_L3_bsId_GET_SIZE( base_ptr, out_bytes, bmlocal8918_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8918_tmp_bits );\
}

#define BM_BasicStatus_L3_bsId_BYTES_SIZE 6

#define BM_BasicStatus_L3_macAddress_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8919_tmp_bytes = 0;\
	UINT bmlocal8920_tmp_bits = 0;\
	UINT bmlocal8921_acc_bytes;\
	UINT bmlocal8922_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8921_acc_bytes = 14;\
	bmlocal8922_acc_bits = 0;\
	BM_BasicStatus_L3_bsId_GET_SIZE( base_ptr, bmlocal8919_tmp_bytes, bmlocal8920_tmp_bits );\
	bmlocal8921_acc_bytes += bmlocal8919_tmp_bytes;\
	bmlocal8922_acc_bits += bmlocal8920_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8921_acc_bytes );\
	out_bitoff += bmlocal8922_acc_bits;\
}

#define BM_BasicStatus_L3_macAddress_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8923_tmp_bitoff;\
	BM_BasicStatus_L3_macAddress_GET_POS( base_ptr, out_ptr, bmlocal8923_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8923_tmp_bitoff);\
}

#define BM_BasicStatus_L3_macAddress_POS_ALIGNED 20

// ARRAY: BasicStatus_L3_macAddress
#define BM_BasicStatus_L3_macAddress_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 6;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_macAddress_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 6;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_macAddress_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8924_out_ptr;\
	UINT bmlocal8925_out_bitoff;\
	UINT bmlocal8926_element_size_bytes;\
	UINT bmlocal8927_element_size_bits;\
	BM_BasicStatus_L3_macAddress_GET_POS( base_ptr, bmlocal8924_out_ptr, bmlocal8925_out_bitoff );\
	bmlocal8926_element_size_bytes = 1;\
	bmlocal8927_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal8924_out_ptr) + (idx0) * bmlocal8926_element_size_bytes );\
	out_bitoff = bmlocal8925_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal8927_element_size_bits );\
}

// COMPOSITE: Full name: 'BasicStatus_L3_macAddress' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_BasicStatus_L3_macAddress_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8928_parent_out_ptr;\
	BM_BasicStatus_L3_macAddress_GET_ELEMENT_POS( base_ptr, idx0, bmlocal8928_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal8928_parent_out_ptr;\
}

// Alignment of BasicStatus_L3_macAddress_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_BasicStatus_L3_macAddress_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_macAddress_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8929_my_ptr;\
	UINT bmlocal8930_my_bitoff;\
	BM_BasicStatus_L3_macAddress_value_GET_POS( base_ptr, idx0, bmlocal8929_my_ptr, bmlocal8930_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8929_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8929_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8929_my_ptr, bmlocal8930_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_BasicStatus_L3_macAddress_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8931_my_ptr;\
	UINT bmlocal8932_my_bitoff;\
	BM_BasicStatus_L3_macAddress_value_GET_POS( base_ptr, idx0, bmlocal8931_my_ptr, bmlocal8932_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8931_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8931_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8931_my_ptr, bmlocal8932_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// BasicStatus_L3_macAddress_value: IS_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_macAddress_value: SET_DEFAULT accessor is not defined because no default value was specified.
// BasicStatus_L3_macAddress_value: IS_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_macAddress_value: SET_RESET accessor is not defined because no reset value was specified.
// BasicStatus_L3_macAddress_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BasicStatus_L3_macAddress_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BasicStatus_L3_macAddress_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal8933_out_val;\
	BM_BasicStatus_L3_macAddress_value_GET( base_ptr, idx0, bmlocal8933_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal8933_out_val), "%u", 1);\
}

#define BM_BasicStatus_L3_macAddress_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_macAddress_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BasicStatus_L3_macAddress_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8934_my_ptr;\
	UINT bmlocal8935_my_bitoff;\
	BM_BasicStatus_L3_macAddress_value_GET_POS( base_ptr, idx0, bmlocal8934_my_ptr, bmlocal8935_my_bitoff );\
	(*((UINT8*)bmlocal8934_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8935_my_bitoff );\
}

// BasicStatus_L3_macAddress_value: Validation accessors are not defined because validation condition was not specified.
#define BM_BasicStatus_L3_macAddress_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8936_tmp_bits;\
	BM_BasicStatus_L3_macAddress_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal8936_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8936_tmp_bits );\
}

#define BM_BasicStatus_L3_macAddress_value_BYTES_SIZE 1

#define BM_BasicStatus_L3_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_macAddress_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8939_tmp_bits;\
	BM_BasicStatus_L3_macAddress_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal8939_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8939_tmp_bits );\
}

#define BM_BasicStatus_L3_macAddress_BYTES_CELL_SIZE 1

#define BM_BasicStatus_L3_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_macAddress_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BasicStatus_L3_macAddress_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_macAddress_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BasicStatus_L3_macAddress_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal8940_dim_size0;\
	UINT bmlocal8941_idx0;\
	bmlocal8940_dim_size0 = 6;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "macAddress", 1);\
	for( bmlocal8941_idx0=0; bmlocal8941_idx0<bmlocal8940_dim_size0; bmlocal8941_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal8941_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BasicStatus_L3_macAddress_DUMP_DEPTH_IDX( base_ptr, bmlocal8941_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_macAddress_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_macAddress_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BasicStatus_L3_macAddress_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8942_tmp_bits;\
	BM_BasicStatus_L3_macAddress_GET_SIZE( base_ptr, out_bytes, bmlocal8942_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8942_tmp_bits );\
}

#define BM_BasicStatus_L3_macAddress_BYTES_SIZE 6

#define BM_BasicStatus_L3_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8943_tmp_bytes = 0;\
	UINT bmlocal8944_tmp_bits = 0;\
	UINT bmlocal8945_acc_bytes;\
	UINT bmlocal8946_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8945_acc_bytes = 14;\
	bmlocal8946_acc_bits = 0;\
	BM_BasicStatus_L3_bsId_GET_SIZE( base_ptr, bmlocal8943_tmp_bytes, bmlocal8944_tmp_bits );\
	bmlocal8945_acc_bytes += bmlocal8943_tmp_bytes;\
	bmlocal8946_acc_bits += bmlocal8944_tmp_bits;\
	BM_BasicStatus_L3_macAddress_GET_SIZE( base_ptr, bmlocal8943_tmp_bytes, bmlocal8944_tmp_bits );\
	bmlocal8945_acc_bytes += bmlocal8943_tmp_bytes;\
	bmlocal8946_acc_bits += bmlocal8944_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8945_acc_bytes );\
	out_bitoff += bmlocal8946_acc_bits;\
}

#define BM_BasicStatus_L3_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8947_tmp_bitoff;\
	BM_BasicStatus_L3_reserved_GET_POS( base_ptr, out_ptr, bmlocal8947_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8947_tmp_bitoff);\
}

#define BM_BasicStatus_L3_reserved_POS_ALIGNED 26

#define BM_BasicStatus_L3_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-reserved>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_reserved_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_BasicStatus_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal8948_tmp_bytes = 0;\
	UINT bmlocal8949_tmp_bits = 0;\
	out_bytes = 16;\
	out_bits = 0;\
	BM_BasicStatus_L3_bsId_GET_SIZE( base_ptr, bmlocal8948_tmp_bytes, bmlocal8949_tmp_bits );\
	out_bytes += bmlocal8948_tmp_bytes;\
	out_bits += bmlocal8949_tmp_bits;\
	BM_BasicStatus_L3_macAddress_GET_SIZE( base_ptr, bmlocal8948_tmp_bytes, bmlocal8949_tmp_bits );\
	out_bytes += bmlocal8948_tmp_bytes;\
	out_bits += bmlocal8949_tmp_bits;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
}

#define BM_BasicStatus_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8950_tmp_bits;\
	BM_BasicStatus_L3_GET_SIZE( base_ptr, out_bytes, bmlocal8950_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8950_tmp_bits );\
}

#define BM_BasicStatus_L3_BYTES_SIZE 28

#define BM_BasicStatus_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BasicStatus_L3", 1);\
	BM_BasicStatus_L3_frequency_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_ulCidNum_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_dlCidNum_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_preambleIndex_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_bandWidth_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_bsId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_macAddress_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BasicStatus_L3_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BasicStatus_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BasicStatus_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BurstStatus_L3[32];

// COMPOSITE: Full name: 'BurstStatus_L3' Type: 'BurstStatus_L3', Top-level, Non-instance, No bitoff root
#define BM_BurstStatus_L3_lastDlPduSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BurstStatus_L3_lastDlPduSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8951_tmp_bitoff;\
	BM_BurstStatus_L3_lastDlPduSize_GET_POS( base_ptr, out_ptr, bmlocal8951_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8951_tmp_bitoff);\
}

#define BM_BurstStatus_L3_lastDlPduSize_POS_ALIGNED 0

// Alignment of BurstStatus_L3_lastDlPduSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_lastDlPduSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_lastDlPduSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8952_my_ptr;\
	UINT bmlocal8953_my_bitoff;\
	BM_BurstStatus_L3_lastDlPduSize_GET_POS( base_ptr, bmlocal8952_my_ptr, bmlocal8953_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8952_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8952_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8952_my_ptr, bmlocal8953_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_lastDlPduSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8954_my_ptr;\
	UINT bmlocal8955_my_bitoff;\
	BM_BurstStatus_L3_lastDlPduSize_GET_POS( base_ptr, bmlocal8954_my_ptr, bmlocal8955_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8954_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8954_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8954_my_ptr, bmlocal8955_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_lastDlPduSize: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_lastDlPduSize: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_lastDlPduSize: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_lastDlPduSize: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_lastDlPduSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_lastDlPduSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_lastDlPduSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8956_out_val;\
	BM_BurstStatus_L3_lastDlPduSize_GET( base_ptr, bmlocal8956_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lastDlPduSize", 32, (UINT)(bmlocal8956_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_lastDlPduSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_lastDlPduSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_lastDlPduSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8957_my_ptr;\
	UINT bmlocal8958_my_bitoff;\
	BM_BurstStatus_L3_lastDlPduSize_GET_POS( base_ptr, bmlocal8957_my_ptr, bmlocal8958_my_bitoff );\
	(*((UINT32*)bmlocal8957_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8958_my_bitoff );\
}

// BurstStatus_L3_lastDlPduSize: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_lastDlPduSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8959_tmp_bits;\
	BM_BurstStatus_L3_lastDlPduSize_GET_SIZE( base_ptr, out_bytes, bmlocal8959_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8959_tmp_bits );\
}

#define BM_BurstStatus_L3_lastDlPduSize_BYTES_SIZE 4

#define BM_BurstStatus_L3_totalDlPdusSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8962_acc_bytes;\
	UINT bmlocal8963_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8962_acc_bytes = 4;\
	bmlocal8963_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8962_acc_bytes );\
	out_bitoff += bmlocal8963_acc_bits;\
}

#define BM_BurstStatus_L3_totalDlPdusSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8964_tmp_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSize_GET_POS( base_ptr, out_ptr, bmlocal8964_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8964_tmp_bitoff);\
}

#define BM_BurstStatus_L3_totalDlPdusSize_POS_ALIGNED 4

// Alignment of BurstStatus_L3_totalDlPdusSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_totalDlPdusSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_totalDlPdusSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8965_my_ptr;\
	UINT bmlocal8966_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSize_GET_POS( base_ptr, bmlocal8965_my_ptr, bmlocal8966_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8965_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8965_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8965_my_ptr, bmlocal8966_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_totalDlPdusSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8967_my_ptr;\
	UINT bmlocal8968_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSize_GET_POS( base_ptr, bmlocal8967_my_ptr, bmlocal8968_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8967_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8967_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8967_my_ptr, bmlocal8968_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_totalDlPdusSize: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlPdusSize: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlPdusSize: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlPdusSize: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlPdusSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_totalDlPdusSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_totalDlPdusSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8969_out_val;\
	BM_BurstStatus_L3_totalDlPdusSize_GET( base_ptr, bmlocal8969_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalDlPdusSize", 32, (UINT)(bmlocal8969_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_totalDlPdusSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_totalDlPdusSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_totalDlPdusSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8970_my_ptr;\
	UINT bmlocal8971_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSize_GET_POS( base_ptr, bmlocal8970_my_ptr, bmlocal8971_my_bitoff );\
	(*((UINT32*)bmlocal8970_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8971_my_bitoff );\
}

// BurstStatus_L3_totalDlPdusSize: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_totalDlPdusSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8972_tmp_bits;\
	BM_BurstStatus_L3_totalDlPdusSize_GET_SIZE( base_ptr, out_bytes, bmlocal8972_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8972_tmp_bits );\
}

#define BM_BurstStatus_L3_totalDlPdusSize_BYTES_SIZE 4

#define BM_BurstStatus_L3_dlPduCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8975_acc_bytes;\
	UINT bmlocal8976_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8975_acc_bytes = 8;\
	bmlocal8976_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8975_acc_bytes );\
	out_bitoff += bmlocal8976_acc_bits;\
}

#define BM_BurstStatus_L3_dlPduCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8977_tmp_bitoff;\
	BM_BurstStatus_L3_dlPduCount_GET_POS( base_ptr, out_ptr, bmlocal8977_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8977_tmp_bitoff);\
}

#define BM_BurstStatus_L3_dlPduCount_POS_ALIGNED 8

// Alignment of BurstStatus_L3_dlPduCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_dlPduCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_dlPduCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8978_my_ptr;\
	UINT bmlocal8979_my_bitoff;\
	BM_BurstStatus_L3_dlPduCount_GET_POS( base_ptr, bmlocal8978_my_ptr, bmlocal8979_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8978_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8978_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8978_my_ptr, bmlocal8979_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_dlPduCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8980_my_ptr;\
	UINT bmlocal8981_my_bitoff;\
	BM_BurstStatus_L3_dlPduCount_GET_POS( base_ptr, bmlocal8980_my_ptr, bmlocal8981_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8980_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8980_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8980_my_ptr, bmlocal8981_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_dlPduCount: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_dlPduCount: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_dlPduCount: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_dlPduCount: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_dlPduCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_dlPduCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_dlPduCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8982_out_val;\
	BM_BurstStatus_L3_dlPduCount_GET( base_ptr, bmlocal8982_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dlPduCount", 32, (UINT)(bmlocal8982_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_dlPduCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_dlPduCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_dlPduCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8983_my_ptr;\
	UINT bmlocal8984_my_bitoff;\
	BM_BurstStatus_L3_dlPduCount_GET_POS( base_ptr, bmlocal8983_my_ptr, bmlocal8984_my_bitoff );\
	(*((UINT32*)bmlocal8983_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8984_my_bitoff );\
}

// BurstStatus_L3_dlPduCount: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_dlPduCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8985_tmp_bits;\
	BM_BurstStatus_L3_dlPduCount_GET_SIZE( base_ptr, out_bytes, bmlocal8985_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8985_tmp_bits );\
}

#define BM_BurstStatus_L3_dlPduCount_BYTES_SIZE 4

#define BM_BurstStatus_L3_lastDlSduSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal8988_acc_bytes;\
	UINT bmlocal8989_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal8988_acc_bytes = 12;\
	bmlocal8989_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal8988_acc_bytes );\
	out_bitoff += bmlocal8989_acc_bits;\
}

#define BM_BurstStatus_L3_lastDlSduSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal8990_tmp_bitoff;\
	BM_BurstStatus_L3_lastDlSduSize_GET_POS( base_ptr, out_ptr, bmlocal8990_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal8990_tmp_bitoff);\
}

#define BM_BurstStatus_L3_lastDlSduSize_POS_ALIGNED 12

// Alignment of BurstStatus_L3_lastDlSduSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_lastDlSduSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_lastDlSduSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8991_my_ptr;\
	UINT bmlocal8992_my_bitoff;\
	BM_BurstStatus_L3_lastDlSduSize_GET_POS( base_ptr, bmlocal8991_my_ptr, bmlocal8992_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8991_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8991_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal8991_my_ptr, bmlocal8992_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_lastDlSduSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8993_my_ptr;\
	UINT bmlocal8994_my_bitoff;\
	BM_BurstStatus_L3_lastDlSduSize_GET_POS( base_ptr, bmlocal8993_my_ptr, bmlocal8994_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8993_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal8993_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal8993_my_ptr, bmlocal8994_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_lastDlSduSize: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_lastDlSduSize: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_lastDlSduSize: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_lastDlSduSize: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_lastDlSduSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_lastDlSduSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_lastDlSduSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal8995_out_val;\
	BM_BurstStatus_L3_lastDlSduSize_GET( base_ptr, bmlocal8995_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "lastDlSduSize", 32, (UINT)(bmlocal8995_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_lastDlSduSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_lastDlSduSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_lastDlSduSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal8996_my_ptr;\
	UINT bmlocal8997_my_bitoff;\
	BM_BurstStatus_L3_lastDlSduSize_GET_POS( base_ptr, bmlocal8996_my_ptr, bmlocal8997_my_bitoff );\
	(*((UINT32*)bmlocal8996_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal8997_my_bitoff );\
}

// BurstStatus_L3_lastDlSduSize: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_lastDlSduSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal8998_tmp_bits;\
	BM_BurstStatus_L3_lastDlSduSize_GET_SIZE( base_ptr, out_bytes, bmlocal8998_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal8998_tmp_bits );\
}

#define BM_BurstStatus_L3_lastDlSduSize_BYTES_SIZE 4

#define BM_BurstStatus_L3_totalDlSdusSize_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9001_acc_bytes;\
	UINT bmlocal9002_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9001_acc_bytes = 16;\
	bmlocal9002_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9001_acc_bytes );\
	out_bitoff += bmlocal9002_acc_bits;\
}

#define BM_BurstStatus_L3_totalDlSdusSize_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9003_tmp_bitoff;\
	BM_BurstStatus_L3_totalDlSdusSize_GET_POS( base_ptr, out_ptr, bmlocal9003_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9003_tmp_bitoff);\
}

#define BM_BurstStatus_L3_totalDlSdusSize_POS_ALIGNED 16

// Alignment of BurstStatus_L3_totalDlSdusSize: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_totalDlSdusSize_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_totalDlSdusSize_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9004_my_ptr;\
	UINT bmlocal9005_my_bitoff;\
	BM_BurstStatus_L3_totalDlSdusSize_GET_POS( base_ptr, bmlocal9004_my_ptr, bmlocal9005_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9004_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9004_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9004_my_ptr, bmlocal9005_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_totalDlSdusSize_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9006_my_ptr;\
	UINT bmlocal9007_my_bitoff;\
	BM_BurstStatus_L3_totalDlSdusSize_GET_POS( base_ptr, bmlocal9006_my_ptr, bmlocal9007_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9006_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9006_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9006_my_ptr, bmlocal9007_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_totalDlSdusSize: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlSdusSize: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlSdusSize: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlSdusSize: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlSdusSize: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_totalDlSdusSize: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_totalDlSdusSize_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9008_out_val;\
	BM_BurstStatus_L3_totalDlSdusSize_GET( base_ptr, bmlocal9008_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalDlSdusSize", 32, (UINT)(bmlocal9008_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_totalDlSdusSize_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_totalDlSdusSize_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_totalDlSdusSize_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9009_my_ptr;\
	UINT bmlocal9010_my_bitoff;\
	BM_BurstStatus_L3_totalDlSdusSize_GET_POS( base_ptr, bmlocal9009_my_ptr, bmlocal9010_my_bitoff );\
	(*((UINT32*)bmlocal9009_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9010_my_bitoff );\
}

// BurstStatus_L3_totalDlSdusSize: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_totalDlSdusSize_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9011_tmp_bits;\
	BM_BurstStatus_L3_totalDlSdusSize_GET_SIZE( base_ptr, out_bytes, bmlocal9011_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9011_tmp_bits );\
}

#define BM_BurstStatus_L3_totalDlSdusSize_BYTES_SIZE 4

#define BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9014_acc_bytes;\
	UINT bmlocal9015_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9014_acc_bytes = 20;\
	bmlocal9015_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9014_acc_bytes );\
	out_bitoff += bmlocal9015_acc_bits;\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9016_tmp_bitoff;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS( base_ptr, out_ptr, bmlocal9016_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9016_tmp_bitoff);\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_POS_ALIGNED 20

// Alignment of BurstStatus_L3_totalUlSduDropCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_totalUlSduDropCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9017_my_ptr;\
	UINT bmlocal9018_my_bitoff;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS( base_ptr, bmlocal9017_my_ptr, bmlocal9018_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9017_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9017_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9017_my_ptr, bmlocal9018_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9019_my_ptr;\
	UINT bmlocal9020_my_bitoff;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS( base_ptr, bmlocal9019_my_ptr, bmlocal9020_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9019_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9019_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9019_my_ptr, bmlocal9020_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_totalUlSduDropCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalUlSduDropCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalUlSduDropCounter: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalUlSduDropCounter: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalUlSduDropCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_totalUlSduDropCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_totalUlSduDropCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9021_out_val;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET( base_ptr, bmlocal9021_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalUlSduDropCounter", 32, (UINT)(bmlocal9021_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_totalUlSduDropCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9022_my_ptr;\
	UINT bmlocal9023_my_bitoff;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET_POS( base_ptr, bmlocal9022_my_ptr, bmlocal9023_my_bitoff );\
	(*((UINT32*)bmlocal9022_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9023_my_bitoff );\
}

// BurstStatus_L3_totalUlSduDropCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_totalUlSduDropCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9024_tmp_bits;\
	BM_BurstStatus_L3_totalUlSduDropCounter_GET_SIZE( base_ptr, out_bytes, bmlocal9024_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9024_tmp_bits );\
}

#define BM_BurstStatus_L3_totalUlSduDropCounter_BYTES_SIZE 4

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9027_acc_bytes;\
	UINT bmlocal9028_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9027_acc_bytes = 24;\
	bmlocal9028_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9027_acc_bytes );\
	out_bitoff += bmlocal9028_acc_bits;\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9029_tmp_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS( base_ptr, out_ptr, bmlocal9029_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9029_tmp_bitoff);\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_POS_ALIGNED 24

// Alignment of BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9030_my_ptr;\
	UINT bmlocal9031_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS( base_ptr, bmlocal9030_my_ptr, bmlocal9031_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9030_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9030_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9030_my_ptr, bmlocal9031_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9032_my_ptr;\
	UINT bmlocal9033_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS( base_ptr, bmlocal9032_my_ptr, bmlocal9033_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9032_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9032_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9032_my_ptr, bmlocal9033_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9034_out_val;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET( base_ptr, bmlocal9034_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalDlPdusSizeInLastDlSubFrame", 32, (UINT)(bmlocal9034_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9035_my_ptr;\
	UINT bmlocal9036_my_bitoff;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_POS( base_ptr, bmlocal9035_my_ptr, bmlocal9036_my_bitoff );\
	(*((UINT32*)bmlocal9035_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9036_my_bitoff );\
}

// BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9037_tmp_bits;\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_GET_SIZE( base_ptr, out_bytes, bmlocal9037_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9037_tmp_bits );\
}

#define BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_BYTES_SIZE 4

#define BM_BurstStatus_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9040_acc_bytes;\
	UINT bmlocal9041_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9040_acc_bytes = 28;\
	bmlocal9041_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9040_acc_bytes );\
	out_bitoff += bmlocal9041_acc_bits;\
}

#define BM_BurstStatus_L3_numOfCidInfos_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9042_tmp_bitoff;\
	BM_BurstStatus_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, bmlocal9042_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9042_tmp_bitoff);\
}

#define BM_BurstStatus_L3_numOfCidInfos_POS_ALIGNED 28

// Alignment of BurstStatus_L3_numOfCidInfos: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_numOfCidInfos_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9043_my_ptr;\
	UINT bmlocal9044_my_bitoff;\
	BM_BurstStatus_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9043_my_ptr, bmlocal9044_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9043_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9043_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9043_my_ptr, bmlocal9044_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_numOfCidInfos_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9045_my_ptr;\
	UINT bmlocal9046_my_bitoff;\
	BM_BurstStatus_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9045_my_ptr, bmlocal9046_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9045_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9045_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9045_my_ptr, bmlocal9046_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_numOfCidInfos: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_numOfCidInfos: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_numOfCidInfos: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_numOfCidInfos: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_numOfCidInfos: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_numOfCidInfos: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9047_out_val;\
	BM_BurstStatus_L3_numOfCidInfos_GET( base_ptr, bmlocal9047_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidInfos", 32, (UINT)(bmlocal9047_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_numOfCidInfos_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_numOfCidInfos_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9048_my_ptr;\
	UINT bmlocal9049_my_bitoff;\
	BM_BurstStatus_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9048_my_ptr, bmlocal9049_my_bitoff );\
	(*((UINT32*)bmlocal9048_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9049_my_bitoff );\
}

// BurstStatus_L3_numOfCidInfos: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_numOfCidInfos_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9050_tmp_bits;\
	BM_BurstStatus_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, bmlocal9050_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9050_tmp_bits );\
}

#define BM_BurstStatus_L3_numOfCidInfos_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9053_acc_bytes;\
	UINT bmlocal9054_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9053_acc_bytes = 32;\
	bmlocal9054_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9053_acc_bytes );\
	out_bitoff += bmlocal9054_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9055_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_POS( base_ptr, out_ptr, bmlocal9055_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9055_tmp_bitoff);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_POS_ALIGNED 32

// ARRAY: BurstStatus_L3_burstStatusPerConnection
#define BM_BurstStatus_L3_burstStatusPerConnection_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal9056_var0;\
		BM_BurstStatus_L3_numOfCidInfos_GET( base_ptr, bmlocal9056_var0 );\
		out_bytes = (UINT)(32*(1*bmlocal9056_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal9057_var0;\
			BM_BurstStatus_L3_numOfCidInfos_GET( base_ptr, bmlocal9057_var0 );\
			out_element_count = (UINT)(bmlocal9057_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9058_out_ptr;\
	UINT bmlocal9059_out_bitoff;\
	UINT bmlocal9060_element_size_bytes;\
	UINT bmlocal9061_element_size_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_POS( base_ptr, bmlocal9058_out_ptr, bmlocal9059_out_bitoff );\
	bmlocal9060_element_size_bytes = 32;\
	bmlocal9061_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9058_out_ptr) + (idx0) * bmlocal9060_element_size_bytes );\
	out_bitoff = bmlocal9059_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9061_element_size_bits );\
}

// COMPOSITE: Full name: 'BurstStatus_L3_burstStatusPerConnection' Type: 'BurstStatusPerConnection', Inner, Non-instance, No bitoff root
#define BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9062_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9062_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9062_parent_out_ptr;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9063_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS( base_ptr, idx0, out_ptr, bmlocal9063_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9063_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9064_my_ptr;\
	UINT bmlocal9065_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9064_my_ptr, bmlocal9065_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9064_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9064_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9064_my_ptr, bmlocal9065_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9066_my_ptr;\
	UINT bmlocal9067_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9066_my_ptr, bmlocal9067_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9066_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9066_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9066_my_ptr, bmlocal9067_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_CID: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_CID: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9068_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET( base_ptr, idx0, bmlocal9068_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal9068_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9069_my_ptr;\
	UINT bmlocal9070_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9069_my_ptr, bmlocal9070_my_bitoff );\
	(*((UINT32*)bmlocal9069_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9070_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9071_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9071_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9071_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CID_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9074_acc_bytes;\
	UINT bmlocal9075_acc_bits;\
	PVOID bmlocal9076_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9076_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9076_parent_out_ptr;\
	bmlocal9074_acc_bytes = 4;\
	bmlocal9075_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9074_acc_bytes );\
	out_bitoff += bmlocal9075_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9077_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS( base_ptr, idx0, out_ptr, bmlocal9077_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9077_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9078_my_ptr;\
	UINT bmlocal9079_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9078_my_ptr, bmlocal9079_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9078_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9078_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9078_my_ptr, bmlocal9079_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9080_my_ptr;\
	UINT bmlocal9081_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9080_my_ptr, bmlocal9081_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9080_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9080_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9080_my_ptr, bmlocal9081_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_CIN: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_CIN: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9082_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET( base_ptr, idx0, bmlocal9082_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal9082_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9083_my_ptr;\
	UINT bmlocal9084_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9083_my_ptr, bmlocal9084_my_bitoff );\
	(*((UINT32*)bmlocal9083_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9084_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9085_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9085_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9085_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_CIN_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9088_acc_bytes;\
	UINT bmlocal9089_acc_bits;\
	PVOID bmlocal9090_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9090_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9090_parent_out_ptr;\
	bmlocal9088_acc_bytes = 8;\
	bmlocal9089_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9088_acc_bytes );\
	out_bitoff += bmlocal9089_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9091_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, idx0, out_ptr, bmlocal9091_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9091_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9092_my_ptr;\
	UINT bmlocal9093_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, idx0, bmlocal9092_my_ptr, bmlocal9093_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9092_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9092_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9092_my_ptr, bmlocal9093_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9094_my_ptr;\
	UINT bmlocal9095_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, idx0, bmlocal9094_my_ptr, bmlocal9095_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9094_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9094_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9094_my_ptr, bmlocal9095_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9096_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET( base_ptr, idx0, bmlocal9096_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalUlSduRateLimitDropCount", 32, (UINT)(bmlocal9096_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9097_my_ptr;\
	UINT bmlocal9098_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_POS( base_ptr, idx0, bmlocal9097_my_ptr, bmlocal9098_my_bitoff );\
	(*((UINT32*)bmlocal9097_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9098_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9099_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9099_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9099_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9102_acc_bytes;\
	UINT bmlocal9103_acc_bits;\
	PVOID bmlocal9104_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9104_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9104_parent_out_ptr;\
	bmlocal9102_acc_bytes = 12;\
	bmlocal9103_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9102_acc_bytes );\
	out_bitoff += bmlocal9103_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9105_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, idx0, out_ptr, bmlocal9105_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9105_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9106_my_ptr;\
	UINT bmlocal9107_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, idx0, bmlocal9106_my_ptr, bmlocal9107_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9106_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9106_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9106_my_ptr, bmlocal9107_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9108_my_ptr;\
	UINT bmlocal9109_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, idx0, bmlocal9108_my_ptr, bmlocal9109_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9108_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9108_my_ptr, bmlocal9109_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9110_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET( base_ptr, idx0, bmlocal9110_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rateUlDropPackets", 32, (UINT)(bmlocal9110_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9111_my_ptr;\
	UINT bmlocal9112_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_POS( base_ptr, idx0, bmlocal9111_my_ptr, bmlocal9112_my_bitoff );\
	(*((UINT32*)bmlocal9111_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9112_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9113_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9113_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9113_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9116_acc_bytes;\
	UINT bmlocal9117_acc_bits;\
	PVOID bmlocal9118_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9118_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9118_parent_out_ptr;\
	bmlocal9116_acc_bytes = 16;\
	bmlocal9117_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9116_acc_bytes );\
	out_bitoff += bmlocal9117_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9119_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, idx0, out_ptr, bmlocal9119_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9119_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9120_my_ptr;\
	UINT bmlocal9121_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, idx0, bmlocal9120_my_ptr, bmlocal9121_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9120_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9120_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9120_my_ptr, bmlocal9121_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9122_my_ptr;\
	UINT bmlocal9123_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, idx0, bmlocal9122_my_ptr, bmlocal9123_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9122_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9122_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9122_my_ptr, bmlocal9123_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9124_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET( base_ptr, idx0, bmlocal9124_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalDlReceivedPdu", 32, (UINT)(bmlocal9124_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9125_my_ptr;\
	UINT bmlocal9126_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_POS( base_ptr, idx0, bmlocal9125_my_ptr, bmlocal9126_my_bitoff );\
	(*((UINT32*)bmlocal9125_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9126_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9127_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9127_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9127_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9130_acc_bytes;\
	UINT bmlocal9131_acc_bits;\
	PVOID bmlocal9132_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9132_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9132_parent_out_ptr;\
	bmlocal9130_acc_bytes = 20;\
	bmlocal9131_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9130_acc_bytes );\
	out_bitoff += bmlocal9131_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9133_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, idx0, out_ptr, bmlocal9133_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9133_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9134_my_ptr;\
	UINT bmlocal9135_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, idx0, bmlocal9134_my_ptr, bmlocal9135_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9134_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9134_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9134_my_ptr, bmlocal9135_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9136_my_ptr;\
	UINT bmlocal9137_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, idx0, bmlocal9136_my_ptr, bmlocal9137_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9136_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9136_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9136_my_ptr, bmlocal9137_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9138_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET( base_ptr, idx0, bmlocal9138_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalUlTransmittedSdu", 32, (UINT)(bmlocal9138_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9139_my_ptr;\
	UINT bmlocal9140_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_POS( base_ptr, idx0, bmlocal9139_my_ptr, bmlocal9140_my_bitoff );\
	(*((UINT32*)bmlocal9139_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9140_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9141_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9141_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9141_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9144_acc_bytes;\
	UINT bmlocal9145_acc_bits;\
	PVOID bmlocal9146_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9146_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9146_parent_out_ptr;\
	bmlocal9144_acc_bytes = 24;\
	bmlocal9145_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9144_acc_bytes );\
	out_bitoff += bmlocal9145_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9147_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal9147_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9147_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9148_my_ptr;\
	UINT bmlocal9149_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, idx0, bmlocal9148_my_ptr, bmlocal9149_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9148_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9148_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9148_my_ptr, bmlocal9149_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9150_my_ptr;\
	UINT bmlocal9151_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, idx0, bmlocal9150_my_ptr, bmlocal9151_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9150_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9150_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9150_my_ptr, bmlocal9151_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9152_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET( base_ptr, idx0, bmlocal9152_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalOfPduDlBytes", 32, (UINT)(bmlocal9152_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9153_my_ptr;\
	UINT bmlocal9154_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_POS( base_ptr, idx0, bmlocal9153_my_ptr, bmlocal9154_my_bitoff );\
	(*((UINT32*)bmlocal9153_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9154_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9155_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9155_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9155_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9158_acc_bytes;\
	UINT bmlocal9159_acc_bits;\
	PVOID bmlocal9160_parent_out_ptr;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9160_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9160_parent_out_ptr;\
	bmlocal9158_acc_bytes = 28;\
	bmlocal9159_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9158_acc_bytes );\
	out_bitoff += bmlocal9159_acc_bits;\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9161_tmp_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, idx0, out_ptr, bmlocal9161_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9161_tmp_bitoff);\
}

// Alignment of BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9162_my_ptr;\
	UINT bmlocal9163_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, idx0, bmlocal9162_my_ptr, bmlocal9163_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9162_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9162_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9162_my_ptr, bmlocal9163_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9164_my_ptr;\
	UINT bmlocal9165_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, idx0, bmlocal9164_my_ptr, bmlocal9165_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9164_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9164_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9164_my_ptr, bmlocal9165_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9166_out_val;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET( base_ptr, idx0, bmlocal9166_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalOfSduDlBytes", 32, (UINT)(bmlocal9166_out_val), "%d", 1);\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9167_my_ptr;\
	UINT bmlocal9168_my_bitoff;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_POS( base_ptr, idx0, bmlocal9167_my_ptr, bmlocal9168_my_bitoff );\
	(*((UINT32*)bmlocal9167_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9168_my_bitoff );\
}

// BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9169_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9169_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9169_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_BYTES_SIZE 4

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9172_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9172_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9172_tmp_bits );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_BYTES_CELL_SIZE 32

#define BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_CID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlSduRateLimitDropCount_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_rateUlDropPackets_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_totalDlReceivedPdu_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_totalUlTransmittedSdu_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfPduDlBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_totalOfSduDlBytes_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9173_dim_size0;\
	UINT bmlocal9174_idx0;\
	{\
		UINT32 bmlocal9175_var0;\
		BM_BurstStatus_L3_numOfCidInfos_GET( base_ptr, bmlocal9175_var0 );\
		bmlocal9173_dim_size0 = (UINT)(bmlocal9175_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "burstStatusPerConnection", 1);\
	for( bmlocal9174_idx0=0; bmlocal9174_idx0<bmlocal9173_dim_size0; bmlocal9174_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9174_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH_IDX( base_ptr, bmlocal9174_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatus_L3_burstStatusPerConnection_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9176_tmp_bits;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_SIZE( base_ptr, out_bytes, bmlocal9176_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9176_tmp_bits );\
}


#define BM_BurstStatus_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9177_tmp_bytes = 0;\
	UINT bmlocal9178_tmp_bits = 0;\
	out_bytes = 32;\
	out_bits = 0;\
	BM_BurstStatus_L3_burstStatusPerConnection_GET_SIZE( base_ptr, bmlocal9177_tmp_bytes, bmlocal9178_tmp_bits );\
	out_bytes += bmlocal9177_tmp_bytes;\
	out_bits += bmlocal9178_tmp_bits;\
}

#define BM_BurstStatus_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9179_tmp_bits;\
	BM_BurstStatus_L3_GET_SIZE( base_ptr, out_bytes, bmlocal9179_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9179_tmp_bits );\
}

#define BM_BurstStatus_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BurstStatus_L3", 1);\
	BM_BurstStatus_L3_lastDlPduSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_totalDlPdusSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_dlPduCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_lastDlSduSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_totalDlSdusSize_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_totalUlSduDropCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_totalDlPdusSizeInLastDlSubFrame_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatus_L3_burstStatusPerConnection_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatus_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatus_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 SfPerformance_L3[4];

// COMPOSITE: Full name: 'SfPerformance_L3' Type: 'SfPerformance_L3', Top-level, Non-instance, No bitoff root
#define BM_SfPerformance_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_SfPerformance_L3_numOfCidInfos_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9180_tmp_bitoff;\
	BM_SfPerformance_L3_numOfCidInfos_GET_POS( base_ptr, out_ptr, bmlocal9180_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9180_tmp_bitoff);\
}

#define BM_SfPerformance_L3_numOfCidInfos_POS_ALIGNED 0

// Alignment of SfPerformance_L3_numOfCidInfos: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPerformance_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPerformance_L3_numOfCidInfos_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9181_my_ptr;\
	UINT bmlocal9182_my_bitoff;\
	BM_SfPerformance_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9181_my_ptr, bmlocal9182_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9181_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9181_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9181_my_ptr, bmlocal9182_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPerformance_L3_numOfCidInfos_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9183_my_ptr;\
	UINT bmlocal9184_my_bitoff;\
	BM_SfPerformance_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9183_my_ptr, bmlocal9184_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9183_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9183_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9183_my_ptr, bmlocal9184_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPerformance_L3_numOfCidInfos: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_numOfCidInfos: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_numOfCidInfos: IS_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_numOfCidInfos: SET_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_numOfCidInfos: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPerformance_L3_numOfCidInfos: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPerformance_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9185_out_val;\
	BM_SfPerformance_L3_numOfCidInfos_GET( base_ptr, bmlocal9185_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidInfos", 32, (UINT)(bmlocal9185_out_val), "%d", 1);\
}

#define BM_SfPerformance_L3_numOfCidInfos_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPerformance_L3_numOfCidInfos_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9186_my_ptr;\
	UINT bmlocal9187_my_bitoff;\
	BM_SfPerformance_L3_numOfCidInfos_GET_POS( base_ptr, bmlocal9186_my_ptr, bmlocal9187_my_bitoff );\
	(*((UINT32*)bmlocal9186_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9187_my_bitoff );\
}

// SfPerformance_L3_numOfCidInfos: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPerformance_L3_numOfCidInfos_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9188_tmp_bits;\
	BM_SfPerformance_L3_numOfCidInfos_GET_SIZE( base_ptr, out_bytes, bmlocal9188_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9188_tmp_bits );\
}

#define BM_SfPerformance_L3_numOfCidInfos_BYTES_SIZE 4

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9191_acc_bytes;\
	UINT bmlocal9192_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9191_acc_bytes = 4;\
	bmlocal9192_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9191_acc_bytes );\
	out_bitoff += bmlocal9192_acc_bits;\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9193_tmp_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_POS( base_ptr, out_ptr, bmlocal9193_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9193_tmp_bitoff);\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_POS_ALIGNED 4

// ARRAY: SfPerformance_L3_SfPeformancePerConnection
#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal9194_var0;\
		BM_SfPerformance_L3_numOfCidInfos_GET( base_ptr, bmlocal9194_var0 );\
		out_bytes = (UINT)(16*(1*bmlocal9194_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal9195_var0;\
			BM_SfPerformance_L3_numOfCidInfos_GET( base_ptr, bmlocal9195_var0 );\
			out_element_count = (UINT)(bmlocal9195_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9196_out_ptr;\
	UINT bmlocal9197_out_bitoff;\
	UINT bmlocal9198_element_size_bytes;\
	UINT bmlocal9199_element_size_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_POS( base_ptr, bmlocal9196_out_ptr, bmlocal9197_out_bitoff );\
	bmlocal9198_element_size_bytes = 16;\
	bmlocal9199_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9196_out_ptr) + (idx0) * bmlocal9198_element_size_bytes );\
	out_bitoff = bmlocal9197_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9199_element_size_bits );\
}

// COMPOSITE: Full name: 'SfPerformance_L3_SfPeformancePerConnection' Type: 'SfPeformancePerConnection', Inner, Non-instance, No bitoff root
#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9200_parent_out_ptr;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9200_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9200_parent_out_ptr;\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9201_tmp_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS( base_ptr, idx0, out_ptr, bmlocal9201_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9201_tmp_bitoff);\
}

// Alignment of SfPerformance_L3_SfPeformancePerConnection_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9202_my_ptr;\
	UINT bmlocal9203_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9202_my_ptr, bmlocal9203_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9202_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9202_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9202_my_ptr, bmlocal9203_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9204_my_ptr;\
	UINT bmlocal9205_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9204_my_ptr, bmlocal9205_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9204_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9204_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9204_my_ptr, bmlocal9205_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPerformance_L3_SfPeformancePerConnection_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CID: IS_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CID: SET_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPerformance_L3_SfPeformancePerConnection_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9206_out_val;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET( base_ptr, idx0, bmlocal9206_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal9206_out_val), "%d", 1);\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9207_my_ptr;\
	UINT bmlocal9208_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_POS( base_ptr, idx0, bmlocal9207_my_ptr, bmlocal9208_my_bitoff );\
	(*((UINT32*)bmlocal9207_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9208_my_bitoff );\
}

// SfPerformance_L3_SfPeformancePerConnection_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9209_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9209_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9209_tmp_bits );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CID_BYTES_SIZE 4

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9212_acc_bytes;\
	UINT bmlocal9213_acc_bits;\
	PVOID bmlocal9214_parent_out_ptr;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9214_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9214_parent_out_ptr;\
	bmlocal9212_acc_bytes = 4;\
	bmlocal9213_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9212_acc_bytes );\
	out_bitoff += bmlocal9213_acc_bits;\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9215_tmp_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS( base_ptr, idx0, out_ptr, bmlocal9215_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9215_tmp_bitoff);\
}

// Alignment of SfPerformance_L3_SfPeformancePerConnection_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9216_my_ptr;\
	UINT bmlocal9217_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9216_my_ptr, bmlocal9217_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9216_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9216_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9216_my_ptr, bmlocal9217_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9218_my_ptr;\
	UINT bmlocal9219_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9218_my_ptr, bmlocal9219_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9218_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9218_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9218_my_ptr, bmlocal9219_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPerformance_L3_SfPeformancePerConnection_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CIN: IS_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CIN: SET_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPerformance_L3_SfPeformancePerConnection_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9220_out_val;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET( base_ptr, idx0, bmlocal9220_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal9220_out_val), "%d", 1);\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9221_my_ptr;\
	UINT bmlocal9222_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_POS( base_ptr, idx0, bmlocal9221_my_ptr, bmlocal9222_my_bitoff );\
	(*((UINT32*)bmlocal9221_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9222_my_bitoff );\
}

// SfPerformance_L3_SfPeformancePerConnection_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9223_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9223_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9223_tmp_bits );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_CIN_BYTES_SIZE 4

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9226_acc_bytes;\
	UINT bmlocal9227_acc_bits;\
	PVOID bmlocal9228_parent_out_ptr;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9228_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9228_parent_out_ptr;\
	bmlocal9226_acc_bytes = 8;\
	bmlocal9227_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9226_acc_bytes );\
	out_bitoff += bmlocal9227_acc_bits;\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9229_tmp_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, idx0, out_ptr, bmlocal9229_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9229_tmp_bitoff);\
}

// Alignment of SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9230_my_ptr;\
	UINT bmlocal9231_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, idx0, bmlocal9230_my_ptr, bmlocal9231_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9230_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9230_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9230_my_ptr, bmlocal9231_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9232_my_ptr;\
	UINT bmlocal9233_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, idx0, bmlocal9232_my_ptr, bmlocal9233_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9232_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9232_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9232_my_ptr, bmlocal9233_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: IS_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: SET_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9234_out_val;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET( base_ptr, idx0, bmlocal9234_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ulIpThroughput", 32, (UINT)(bmlocal9234_out_val), "%d", 1);\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9235_my_ptr;\
	UINT bmlocal9236_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_POS( base_ptr, idx0, bmlocal9235_my_ptr, bmlocal9236_my_bitoff );\
	(*((UINT32*)bmlocal9235_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9236_my_bitoff );\
}

// SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9237_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9237_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9237_tmp_bits );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_BYTES_SIZE 4

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9240_acc_bytes;\
	UINT bmlocal9241_acc_bits;\
	PVOID bmlocal9242_parent_out_ptr;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9242_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9242_parent_out_ptr;\
	bmlocal9240_acc_bytes = 12;\
	bmlocal9241_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9240_acc_bytes );\
	out_bitoff += bmlocal9241_acc_bits;\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9243_tmp_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, idx0, out_ptr, bmlocal9243_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9243_tmp_bitoff);\
}

// Alignment of SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9244_my_ptr;\
	UINT bmlocal9245_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, idx0, bmlocal9244_my_ptr, bmlocal9245_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9244_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9244_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9244_my_ptr, bmlocal9245_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9246_my_ptr;\
	UINT bmlocal9247_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, idx0, bmlocal9246_my_ptr, bmlocal9247_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9246_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9246_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9246_my_ptr, bmlocal9247_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: IS_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: SET_RESET accessor is not defined because no reset value was specified.
// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9248_out_val;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET( base_ptr, idx0, bmlocal9248_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "dlIpThroughput", 32, (UINT)(bmlocal9248_out_val), "%d", 1);\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9249_my_ptr;\
	UINT bmlocal9250_my_bitoff;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_POS( base_ptr, idx0, bmlocal9249_my_ptr, bmlocal9250_my_bitoff );\
	(*((UINT32*)bmlocal9249_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9250_my_bitoff );\
}

// SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9251_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9251_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9251_tmp_bits );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_BYTES_SIZE 4

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9254_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9254_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9254_tmp_bits );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_BYTES_CELL_SIZE 16

#define BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_CID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SfPerformance_L3_SfPeformancePerConnection_CIN_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SfPerformance_L3_SfPeformancePerConnection_ulIpThroughput_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_SfPerformance_L3_SfPeformancePerConnection_dlIpThroughput_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9255_dim_size0;\
	UINT bmlocal9256_idx0;\
	{\
		UINT32 bmlocal9257_var0;\
		BM_SfPerformance_L3_numOfCidInfos_GET( base_ptr, bmlocal9257_var0 );\
		bmlocal9255_dim_size0 = (UINT)(bmlocal9257_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SfPeformancePerConnection", 1);\
	for( bmlocal9256_idx0=0; bmlocal9256_idx0<bmlocal9255_dim_size0; bmlocal9256_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9256_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH_IDX( base_ptr, bmlocal9256_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_SfPerformance_L3_SfPeformancePerConnection_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9258_tmp_bits;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_SIZE( base_ptr, out_bytes, bmlocal9258_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9258_tmp_bits );\
}


#define BM_SfPerformance_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9259_tmp_bytes = 0;\
	UINT bmlocal9260_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_SfPerformance_L3_SfPeformancePerConnection_GET_SIZE( base_ptr, bmlocal9259_tmp_bytes, bmlocal9260_tmp_bits );\
	out_bytes += bmlocal9259_tmp_bytes;\
	out_bits += bmlocal9260_tmp_bits;\
}

#define BM_SfPerformance_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9261_tmp_bits;\
	BM_SfPerformance_L3_GET_SIZE( base_ptr, out_bytes, bmlocal9261_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9261_tmp_bits );\
}

#define BM_SfPerformance_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "SfPerformance_L3", 1);\
	BM_SfPerformance_L3_numOfCidInfos_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_SfPerformance_L3_SfPeformancePerConnection_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_SfPerformance_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_SfPerformance_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Arq_MonitorRxPerformance_L3[8];

// COMPOSITE: Full name: 'Arq_MonitorRxPerformance_L3' Type: 'Arq_MonitorRxPerformance_L3', Top-level, Non-instance, No bitoff root
#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9262_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS( base_ptr, out_ptr, bmlocal9262_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9262_tmp_bitoff);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_POS_ALIGNED 0

// Alignment of Arq_MonitorRxPerformance_L3_arqResetPerformed: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9263_my_ptr;\
	UINT bmlocal9264_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS( base_ptr, bmlocal9263_my_ptr, bmlocal9264_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9263_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9263_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9263_my_ptr, bmlocal9264_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9265_my_ptr;\
	UINT bmlocal9266_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS( base_ptr, bmlocal9265_my_ptr, bmlocal9266_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9265_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9265_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9265_my_ptr, bmlocal9266_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqResetPerformed: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqResetPerformed: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqResetPerformed: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqResetPerformed: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqResetPerformed: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqResetPerformed: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9267_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET( base_ptr, bmlocal9267_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "arqResetPerformed", 32, (UINT)(bmlocal9267_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9268_my_ptr;\
	UINT bmlocal9269_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_POS( base_ptr, bmlocal9268_my_ptr, bmlocal9269_my_bitoff );\
	(*((UINT32*)bmlocal9268_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9269_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqResetPerformed: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9270_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_GET_SIZE( base_ptr, out_bytes, bmlocal9270_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9270_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9273_acc_bytes;\
	UINT bmlocal9274_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9273_acc_bytes = 4;\
	bmlocal9274_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9273_acc_bytes );\
	out_bitoff += bmlocal9274_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9275_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, out_ptr, bmlocal9275_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9275_tmp_bitoff);\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_POS_ALIGNED 4

// Alignment of Arq_MonitorRxPerformance_L3_numOfCidPerformance: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9276_my_ptr;\
	UINT bmlocal9277_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9276_my_ptr, bmlocal9277_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9276_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9276_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9276_my_ptr, bmlocal9277_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9278_my_ptr;\
	UINT bmlocal9279_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9278_my_ptr, bmlocal9279_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9278_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9278_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9278_my_ptr, bmlocal9279_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_numOfCidPerformance: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_numOfCidPerformance: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_numOfCidPerformance: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_numOfCidPerformance: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_numOfCidPerformance: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_numOfCidPerformance: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9280_out_val;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9280_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidPerformance", 32, (UINT)(bmlocal9280_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9281_my_ptr;\
	UINT bmlocal9282_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9281_my_ptr, bmlocal9282_my_bitoff );\
	(*((UINT32*)bmlocal9281_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9282_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_numOfCidPerformance: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9283_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal9283_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9283_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9286_acc_bytes;\
	UINT bmlocal9287_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9286_acc_bytes = 8;\
	bmlocal9287_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9286_acc_bytes );\
	out_bitoff += bmlocal9287_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9288_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_POS( base_ptr, out_ptr, bmlocal9288_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9288_tmp_bitoff);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_POS_ALIGNED 8

// ARRAY: Arq_MonitorRxPerformance_L3_arqRxPerformance
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal9289_var0;\
		BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9289_var0 );\
		out_bytes = (UINT)(44*(1*bmlocal9289_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal9290_var0;\
			BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9290_var0 );\
			out_element_count = (UINT)(bmlocal9290_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9291_out_ptr;\
	UINT bmlocal9292_out_bitoff;\
	UINT bmlocal9293_element_size_bytes;\
	UINT bmlocal9294_element_size_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_POS( base_ptr, bmlocal9291_out_ptr, bmlocal9292_out_bitoff );\
	bmlocal9293_element_size_bytes = 44;\
	bmlocal9294_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9291_out_ptr) + (idx0) * bmlocal9293_element_size_bytes );\
	out_bitoff = bmlocal9292_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9294_element_size_bits );\
}

// COMPOSITE: Full name: 'Arq_MonitorRxPerformance_L3_arqRxPerformance' Type: 'ArqRxPerformance', Inner, Non-instance, No bitoff root
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9295_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9295_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9295_parent_out_ptr;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9296_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS( base_ptr, idx0, out_ptr, bmlocal9296_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9296_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9297_my_ptr;\
	UINT bmlocal9298_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9297_my_ptr, bmlocal9298_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9297_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9297_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9297_my_ptr, bmlocal9298_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9299_my_ptr;\
	UINT bmlocal9300_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9299_my_ptr, bmlocal9300_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9299_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9299_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9299_my_ptr, bmlocal9300_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9301_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET( base_ptr, idx0, bmlocal9301_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal9301_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9302_my_ptr;\
	UINT bmlocal9303_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9302_my_ptr, bmlocal9303_my_bitoff );\
	(*((UINT32*)bmlocal9302_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9303_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9304_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9304_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9304_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9307_acc_bytes;\
	UINT bmlocal9308_acc_bits;\
	PVOID bmlocal9309_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9309_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9309_parent_out_ptr;\
	bmlocal9307_acc_bytes = 4;\
	bmlocal9308_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9307_acc_bytes );\
	out_bitoff += bmlocal9308_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9310_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS( base_ptr, idx0, out_ptr, bmlocal9310_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9310_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9311_my_ptr;\
	UINT bmlocal9312_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9311_my_ptr, bmlocal9312_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9311_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9311_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9311_my_ptr, bmlocal9312_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9313_my_ptr;\
	UINT bmlocal9314_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9313_my_ptr, bmlocal9314_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9313_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9313_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9313_my_ptr, bmlocal9314_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9315_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET( base_ptr, idx0, bmlocal9315_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal9315_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9316_my_ptr;\
	UINT bmlocal9317_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9316_my_ptr, bmlocal9317_my_bitoff );\
	(*((UINT32*)bmlocal9316_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9317_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9318_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9318_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9318_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9321_acc_bytes;\
	UINT bmlocal9322_acc_bits;\
	PVOID bmlocal9323_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9323_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9323_parent_out_ptr;\
	bmlocal9321_acc_bytes = 8;\
	bmlocal9322_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9321_acc_bytes );\
	out_bitoff += bmlocal9322_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9324_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, idx0, out_ptr, bmlocal9324_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9324_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9325_my_ptr;\
	UINT bmlocal9326_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, idx0, bmlocal9325_my_ptr, bmlocal9326_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9325_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9325_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9325_my_ptr, bmlocal9326_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9327_my_ptr;\
	UINT bmlocal9328_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, idx0, bmlocal9327_my_ptr, bmlocal9328_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9327_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9327_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9327_my_ptr, bmlocal9328_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9329_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET( base_ptr, idx0, bmlocal9329_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfDuplicateReceivedBlocks", 32, (UINT)(bmlocal9329_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9330_my_ptr;\
	UINT bmlocal9331_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_POS( base_ptr, idx0, bmlocal9330_my_ptr, bmlocal9331_my_bitoff );\
	(*((UINT32*)bmlocal9330_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9331_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9332_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9332_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9332_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9335_acc_bytes;\
	UINT bmlocal9336_acc_bits;\
	PVOID bmlocal9337_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9337_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9337_parent_out_ptr;\
	bmlocal9335_acc_bytes = 12;\
	bmlocal9336_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9335_acc_bytes );\
	out_bitoff += bmlocal9336_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9338_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, idx0, out_ptr, bmlocal9338_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9338_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9339_my_ptr;\
	UINT bmlocal9340_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, idx0, bmlocal9339_my_ptr, bmlocal9340_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9339_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9339_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9339_my_ptr, bmlocal9340_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9341_my_ptr;\
	UINT bmlocal9342_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, idx0, bmlocal9341_my_ptr, bmlocal9342_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9341_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9341_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9341_my_ptr, bmlocal9342_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9343_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET( base_ptr, idx0, bmlocal9343_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfPurgeTimeouts", 32, (UINT)(bmlocal9343_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9344_my_ptr;\
	UINT bmlocal9345_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_POS( base_ptr, idx0, bmlocal9344_my_ptr, bmlocal9345_my_bitoff );\
	(*((UINT32*)bmlocal9344_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9345_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9346_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9346_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9346_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9349_acc_bytes;\
	UINT bmlocal9350_acc_bits;\
	PVOID bmlocal9351_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9351_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9351_parent_out_ptr;\
	bmlocal9349_acc_bytes = 16;\
	bmlocal9350_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9349_acc_bytes );\
	out_bitoff += bmlocal9350_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9352_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, idx0, out_ptr, bmlocal9352_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9352_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9353_my_ptr;\
	UINT bmlocal9354_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, idx0, bmlocal9353_my_ptr, bmlocal9354_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9353_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9353_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9353_my_ptr, bmlocal9354_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9355_my_ptr;\
	UINT bmlocal9356_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, idx0, bmlocal9355_my_ptr, bmlocal9356_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9355_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9355_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9355_my_ptr, bmlocal9356_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9357_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET( base_ptr, idx0, bmlocal9357_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBlocksLostDueToRxPurgeTimout", 32, (UINT)(bmlocal9357_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9358_my_ptr;\
	UINT bmlocal9359_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_POS( base_ptr, idx0, bmlocal9358_my_ptr, bmlocal9359_my_bitoff );\
	(*((UINT32*)bmlocal9358_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9359_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9360_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9360_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9360_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9363_acc_bytes;\
	UINT bmlocal9364_acc_bits;\
	PVOID bmlocal9365_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9365_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9365_parent_out_ptr;\
	bmlocal9363_acc_bytes = 20;\
	bmlocal9364_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9363_acc_bytes );\
	out_bitoff += bmlocal9364_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9366_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, idx0, out_ptr, bmlocal9366_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9366_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9367_my_ptr;\
	UINT bmlocal9368_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, idx0, bmlocal9367_my_ptr, bmlocal9368_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9367_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9367_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9367_my_ptr, bmlocal9368_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9369_my_ptr;\
	UINT bmlocal9370_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, idx0, bmlocal9369_my_ptr, bmlocal9370_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9369_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9369_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9369_my_ptr, bmlocal9370_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9371_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET( base_ptr, idx0, bmlocal9371_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalNumOfAcksTxd", 32, (UINT)(bmlocal9371_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9372_my_ptr;\
	UINT bmlocal9373_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_POS( base_ptr, idx0, bmlocal9372_my_ptr, bmlocal9373_my_bitoff );\
	(*((UINT32*)bmlocal9372_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9373_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9374_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9374_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9374_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9377_acc_bytes;\
	UINT bmlocal9378_acc_bits;\
	PVOID bmlocal9379_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9379_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9379_parent_out_ptr;\
	bmlocal9377_acc_bytes = 24;\
	bmlocal9378_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9377_acc_bytes );\
	out_bitoff += bmlocal9378_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9380_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, idx0, out_ptr, bmlocal9380_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9380_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9381_my_ptr;\
	UINT bmlocal9382_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9381_my_ptr, bmlocal9382_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9381_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9381_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9381_my_ptr, bmlocal9382_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9383_my_ptr;\
	UINT bmlocal9384_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9383_my_ptr, bmlocal9384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9383_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9383_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9383_my_ptr, bmlocal9384_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9385_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET( base_ptr, idx0, bmlocal9385_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRxArqResetsReceived", 32, (UINT)(bmlocal9385_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9386_my_ptr;\
	UINT bmlocal9387_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9386_my_ptr, bmlocal9387_my_bitoff );\
	(*((UINT32*)bmlocal9386_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9387_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9388_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9388_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9388_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9391_acc_bytes;\
	UINT bmlocal9392_acc_bits;\
	PVOID bmlocal9393_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9393_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9393_parent_out_ptr;\
	bmlocal9391_acc_bytes = 28;\
	bmlocal9392_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9391_acc_bytes );\
	out_bitoff += bmlocal9392_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9394_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, idx0, out_ptr, bmlocal9394_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9394_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9395_my_ptr;\
	UINT bmlocal9396_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9395_my_ptr, bmlocal9396_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9395_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9395_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9395_my_ptr, bmlocal9396_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9397_my_ptr;\
	UINT bmlocal9398_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9397_my_ptr, bmlocal9398_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9397_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9397_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9397_my_ptr, bmlocal9398_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9399_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET( base_ptr, idx0, bmlocal9399_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRxArqResetsInitiated", 32, (UINT)(bmlocal9399_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9400_my_ptr;\
	UINT bmlocal9401_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9400_my_ptr, bmlocal9401_my_bitoff );\
	(*((UINT32*)bmlocal9400_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9401_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9402_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9402_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9402_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9405_acc_bytes;\
	UINT bmlocal9406_acc_bits;\
	PVOID bmlocal9407_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9407_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9407_parent_out_ptr;\
	bmlocal9405_acc_bytes = 32;\
	bmlocal9406_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9405_acc_bytes );\
	out_bitoff += bmlocal9406_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9408_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, idx0, out_ptr, bmlocal9408_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9408_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9409_my_ptr;\
	UINT bmlocal9410_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, idx0, bmlocal9409_my_ptr, bmlocal9410_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9409_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9409_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9409_my_ptr, bmlocal9410_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9411_my_ptr;\
	UINT bmlocal9412_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, idx0, bmlocal9411_my_ptr, bmlocal9412_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9411_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9411_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9411_my_ptr, bmlocal9412_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9413_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET( base_ptr, idx0, bmlocal9413_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfArqDiscardsReceived", 32, (UINT)(bmlocal9413_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9414_my_ptr;\
	UINT bmlocal9415_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_POS( base_ptr, idx0, bmlocal9414_my_ptr, bmlocal9415_my_bitoff );\
	(*((UINT32*)bmlocal9414_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9415_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9416_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9416_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9416_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9419_acc_bytes;\
	UINT bmlocal9420_acc_bits;\
	PVOID bmlocal9421_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9421_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9421_parent_out_ptr;\
	bmlocal9419_acc_bytes = 36;\
	bmlocal9420_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9419_acc_bytes );\
	out_bitoff += bmlocal9420_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9422_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS( base_ptr, idx0, out_ptr, bmlocal9422_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9422_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9423_my_ptr;\
	UINT bmlocal9424_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS( base_ptr, idx0, bmlocal9423_my_ptr, bmlocal9424_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9423_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9423_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9423_my_ptr, bmlocal9424_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9425_my_ptr;\
	UINT bmlocal9426_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS( base_ptr, idx0, bmlocal9425_my_ptr, bmlocal9426_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9425_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9425_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9425_my_ptr, bmlocal9426_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9427_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET( base_ptr, idx0, bmlocal9427_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "rxThroughput", 32, (UINT)(bmlocal9427_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9428_my_ptr;\
	UINT bmlocal9429_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_POS( base_ptr, idx0, bmlocal9428_my_ptr, bmlocal9429_my_bitoff );\
	(*((UINT32*)bmlocal9428_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9429_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9430_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9430_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9430_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9433_acc_bytes;\
	UINT bmlocal9434_acc_bits;\
	PVOID bmlocal9435_parent_out_ptr;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9435_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9435_parent_out_ptr;\
	bmlocal9433_acc_bytes = 40;\
	bmlocal9434_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9433_acc_bytes );\
	out_bitoff += bmlocal9434_acc_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9436_tmp_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, idx0, out_ptr, bmlocal9436_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9436_tmp_bitoff);\
}

// Alignment of Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9437_my_ptr;\
	UINT bmlocal9438_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, idx0, bmlocal9437_my_ptr, bmlocal9438_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9437_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9437_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9437_my_ptr, bmlocal9438_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9439_my_ptr;\
	UINT bmlocal9440_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, idx0, bmlocal9439_my_ptr, bmlocal9440_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9439_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9439_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9439_my_ptr, bmlocal9440_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9441_out_val;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET( base_ptr, idx0, bmlocal9441_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfPduLostDueToNoFreeSpaceInReceiver", 32, (UINT)(bmlocal9441_out_val), "%d", 1);\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9442_my_ptr;\
	UINT bmlocal9443_my_bitoff;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_POS( base_ptr, idx0, bmlocal9442_my_ptr, bmlocal9443_my_bitoff );\
	(*((UINT32*)bmlocal9442_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9443_my_bitoff );\
}

// Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9444_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9444_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9444_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_BYTES_SIZE 4

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 44;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9447_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9447_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9447_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_BYTES_CELL_SIZE 44

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfDuplicateReceivedBlocks_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPurgeTimeouts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfBlocksLostDueToRxPurgeTimout_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_totalNumOfAcksTxd_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfRxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfArqDiscardsReceived_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_rxThroughput_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_numOfPduLostDueToNoFreeSpaceInReceiver_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9448_dim_size0;\
	UINT bmlocal9449_idx0;\
	{\
		UINT32 bmlocal9450_var0;\
		BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9450_var0 );\
		bmlocal9448_dim_size0 = (UINT)(bmlocal9450_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "arqRxPerformance", 1);\
	for( bmlocal9449_idx0=0; bmlocal9449_idx0<bmlocal9448_dim_size0; bmlocal9449_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9449_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH_IDX( base_ptr, bmlocal9449_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9451_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal9451_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9451_tmp_bits );\
}


#define BM_Arq_MonitorRxPerformance_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9452_tmp_bytes = 0;\
	UINT bmlocal9453_tmp_bits = 0;\
	out_bytes = 8;\
	out_bits = 0;\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_GET_SIZE( base_ptr, bmlocal9452_tmp_bytes, bmlocal9453_tmp_bits );\
	out_bytes += bmlocal9452_tmp_bytes;\
	out_bits += bmlocal9453_tmp_bits;\
}

#define BM_Arq_MonitorRxPerformance_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9454_tmp_bits;\
	BM_Arq_MonitorRxPerformance_L3_GET_SIZE( base_ptr, out_bytes, bmlocal9454_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9454_tmp_bits );\
}

#define BM_Arq_MonitorRxPerformance_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Arq_MonitorRxPerformance_L3", 1);\
	BM_Arq_MonitorRxPerformance_L3_arqResetPerformed_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Arq_MonitorRxPerformance_L3_arqRxPerformance_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorRxPerformance_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorRxPerformance_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 Arq_MonitorTxPerformance_L3[4];

// COMPOSITE: Full name: 'Arq_MonitorTxPerformance_L3' Type: 'Arq_MonitorTxPerformance_L3', Top-level, Non-instance, No bitoff root
#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9455_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, out_ptr, bmlocal9455_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9455_tmp_bitoff);\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_POS_ALIGNED 0

// Alignment of Arq_MonitorTxPerformance_L3_numOfCidPerformance: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9456_my_ptr;\
	UINT bmlocal9457_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9456_my_ptr, bmlocal9457_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9456_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9456_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9456_my_ptr, bmlocal9457_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9458_my_ptr;\
	UINT bmlocal9459_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9458_my_ptr, bmlocal9459_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9458_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9458_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9458_my_ptr, bmlocal9459_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_numOfCidPerformance: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_numOfCidPerformance: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_numOfCidPerformance: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_numOfCidPerformance: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_numOfCidPerformance: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_numOfCidPerformance: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9460_out_val;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9460_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfCidPerformance", 32, (UINT)(bmlocal9460_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9461_my_ptr;\
	UINT bmlocal9462_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_POS( base_ptr, bmlocal9461_my_ptr, bmlocal9462_my_bitoff );\
	(*((UINT32*)bmlocal9461_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9462_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_numOfCidPerformance: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9463_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal9463_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9463_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9466_acc_bytes;\
	UINT bmlocal9467_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal9466_acc_bytes = 4;\
	bmlocal9467_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9466_acc_bytes );\
	out_bitoff += bmlocal9467_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9468_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_POS( base_ptr, out_ptr, bmlocal9468_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9468_tmp_bitoff);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_POS_ALIGNED 4

// ARRAY: Arq_MonitorTxPerformance_L3_arqTxPerformance
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal9469_var0;\
		BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9469_var0 );\
		out_bytes = (UINT)(48*(1*bmlocal9469_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal9470_var0;\
			BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9470_var0 );\
			out_element_count = (UINT)(bmlocal9470_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9471_out_ptr;\
	UINT bmlocal9472_out_bitoff;\
	UINT bmlocal9473_element_size_bytes;\
	UINT bmlocal9474_element_size_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_POS( base_ptr, bmlocal9471_out_ptr, bmlocal9472_out_bitoff );\
	bmlocal9473_element_size_bytes = 48;\
	bmlocal9474_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal9471_out_ptr) + (idx0) * bmlocal9473_element_size_bytes );\
	out_bitoff = bmlocal9472_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal9474_element_size_bits );\
}

// COMPOSITE: Full name: 'Arq_MonitorTxPerformance_L3_arqTxPerformance' Type: 'ArqTxPerformance', Inner, Non-instance, No bitoff root
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9475_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9475_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9475_parent_out_ptr;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9476_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS( base_ptr, idx0, out_ptr, bmlocal9476_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9476_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9477_my_ptr;\
	UINT bmlocal9478_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9477_my_ptr, bmlocal9478_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9477_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9477_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9477_my_ptr, bmlocal9478_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9479_my_ptr;\
	UINT bmlocal9480_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9479_my_ptr, bmlocal9480_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9479_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9479_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9479_my_ptr, bmlocal9480_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9481_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET( base_ptr, idx0, bmlocal9481_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CID", 32, (UINT)(bmlocal9481_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9482_my_ptr;\
	UINT bmlocal9483_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_POS( base_ptr, idx0, bmlocal9482_my_ptr, bmlocal9483_my_bitoff );\
	(*((UINT32*)bmlocal9482_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9483_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_CID: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9484_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9484_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9484_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9487_acc_bytes;\
	UINT bmlocal9488_acc_bits;\
	PVOID bmlocal9489_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9489_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9489_parent_out_ptr;\
	bmlocal9487_acc_bytes = 4;\
	bmlocal9488_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9487_acc_bytes );\
	out_bitoff += bmlocal9488_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9490_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS( base_ptr, idx0, out_ptr, bmlocal9490_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9490_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9491_my_ptr;\
	UINT bmlocal9492_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9491_my_ptr, bmlocal9492_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9491_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9491_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9491_my_ptr, bmlocal9492_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9493_my_ptr;\
	UINT bmlocal9494_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9493_my_ptr, bmlocal9494_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9493_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9493_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9493_my_ptr, bmlocal9494_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9495_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET( base_ptr, idx0, bmlocal9495_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CIN", 32, (UINT)(bmlocal9495_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9496_my_ptr;\
	UINT bmlocal9497_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_POS( base_ptr, idx0, bmlocal9496_my_ptr, bmlocal9497_my_bitoff );\
	(*((UINT32*)bmlocal9496_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9497_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9498_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9498_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9498_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9501_acc_bytes;\
	UINT bmlocal9502_acc_bits;\
	PVOID bmlocal9503_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9503_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9503_parent_out_ptr;\
	bmlocal9501_acc_bytes = 8;\
	bmlocal9502_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9501_acc_bytes );\
	out_bitoff += bmlocal9502_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9504_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, idx0, out_ptr, bmlocal9504_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9504_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9505_my_ptr;\
	UINT bmlocal9506_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, idx0, bmlocal9505_my_ptr, bmlocal9506_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9505_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9505_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9505_my_ptr, bmlocal9506_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9507_my_ptr;\
	UINT bmlocal9508_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, idx0, bmlocal9507_my_ptr, bmlocal9508_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9507_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9507_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9507_my_ptr, bmlocal9508_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9509_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET( base_ptr, idx0, bmlocal9509_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRetransmittedArqBlocksTotalUL", 32, (UINT)(bmlocal9509_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9510_my_ptr;\
	UINT bmlocal9511_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_POS( base_ptr, idx0, bmlocal9510_my_ptr, bmlocal9511_my_bitoff );\
	(*((UINT32*)bmlocal9510_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9511_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9512_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9512_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9512_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9515_acc_bytes;\
	UINT bmlocal9516_acc_bits;\
	PVOID bmlocal9517_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9517_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9517_parent_out_ptr;\
	bmlocal9515_acc_bytes = 12;\
	bmlocal9516_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9515_acc_bytes );\
	out_bitoff += bmlocal9516_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9518_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, idx0, out_ptr, bmlocal9518_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9518_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9519_my_ptr;\
	UINT bmlocal9520_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, idx0, bmlocal9519_my_ptr, bmlocal9520_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9519_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9519_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9519_my_ptr, bmlocal9520_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9521_my_ptr;\
	UINT bmlocal9522_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, idx0, bmlocal9521_my_ptr, bmlocal9522_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9521_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9521_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9521_my_ptr, bmlocal9522_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9523_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET( base_ptr, idx0, bmlocal9523_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfRetransmittedBlocksUL", 32, (UINT)(bmlocal9523_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9524_my_ptr;\
	UINT bmlocal9525_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_POS( base_ptr, idx0, bmlocal9524_my_ptr, bmlocal9525_my_bitoff );\
	(*((UINT32*)bmlocal9524_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9525_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9526_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9526_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9526_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9529_acc_bytes;\
	UINT bmlocal9530_acc_bits;\
	PVOID bmlocal9531_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9531_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9531_parent_out_ptr;\
	bmlocal9529_acc_bytes = 16;\
	bmlocal9530_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9529_acc_bytes );\
	out_bitoff += bmlocal9530_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9532_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS( base_ptr, idx0, out_ptr, bmlocal9532_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9532_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9533_my_ptr;\
	UINT bmlocal9534_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS( base_ptr, idx0, bmlocal9533_my_ptr, bmlocal9534_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9533_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9533_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9533_my_ptr, bmlocal9534_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9535_my_ptr;\
	UINT bmlocal9536_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS( base_ptr, idx0, bmlocal9535_my_ptr, bmlocal9536_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9535_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9535_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9535_my_ptr, bmlocal9536_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9537_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET( base_ptr, idx0, bmlocal9537_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBLTs", 32, (UINT)(bmlocal9537_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9538_my_ptr;\
	UINT bmlocal9539_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_POS( base_ptr, idx0, bmlocal9538_my_ptr, bmlocal9539_my_bitoff );\
	(*((UINT32*)bmlocal9538_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9539_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9540_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9540_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9540_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9543_acc_bytes;\
	UINT bmlocal9544_acc_bits;\
	PVOID bmlocal9545_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9545_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9545_parent_out_ptr;\
	bmlocal9543_acc_bytes = 20;\
	bmlocal9544_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9543_acc_bytes );\
	out_bitoff += bmlocal9544_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9546_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, idx0, out_ptr, bmlocal9546_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9546_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9547_my_ptr;\
	UINT bmlocal9548_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, idx0, bmlocal9547_my_ptr, bmlocal9548_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9547_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9547_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9547_my_ptr, bmlocal9548_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9549_my_ptr;\
	UINT bmlocal9550_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, idx0, bmlocal9549_my_ptr, bmlocal9550_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9549_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9549_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9549_my_ptr, bmlocal9550_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9551_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET( base_ptr, idx0, bmlocal9551_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfBlocksLostDueToArqBLT", 32, (UINT)(bmlocal9551_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9552_my_ptr;\
	UINT bmlocal9553_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_POS( base_ptr, idx0, bmlocal9552_my_ptr, bmlocal9553_my_bitoff );\
	(*((UINT32*)bmlocal9552_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9553_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9554_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9554_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9554_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9557_acc_bytes;\
	UINT bmlocal9558_acc_bits;\
	PVOID bmlocal9559_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9559_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9559_parent_out_ptr;\
	bmlocal9557_acc_bytes = 24;\
	bmlocal9558_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9557_acc_bytes );\
	out_bitoff += bmlocal9558_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9560_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, idx0, out_ptr, bmlocal9560_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9560_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9561_my_ptr;\
	UINT bmlocal9562_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, idx0, bmlocal9561_my_ptr, bmlocal9562_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9561_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9561_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9561_my_ptr, bmlocal9562_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9563_my_ptr;\
	UINT bmlocal9564_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, idx0, bmlocal9563_my_ptr, bmlocal9564_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9563_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9563_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9563_my_ptr, bmlocal9564_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9565_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET( base_ptr, idx0, bmlocal9565_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "totalNumOfAcksReceived", 32, (UINT)(bmlocal9565_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9566_my_ptr;\
	UINT bmlocal9567_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_POS( base_ptr, idx0, bmlocal9566_my_ptr, bmlocal9567_my_bitoff );\
	(*((UINT32*)bmlocal9566_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9567_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9568_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9568_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9568_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9571_acc_bytes;\
	UINT bmlocal9572_acc_bits;\
	PVOID bmlocal9573_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9573_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9573_parent_out_ptr;\
	bmlocal9571_acc_bytes = 28;\
	bmlocal9572_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9571_acc_bytes );\
	out_bitoff += bmlocal9572_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9574_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, idx0, out_ptr, bmlocal9574_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9574_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9575_my_ptr;\
	UINT bmlocal9576_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9575_my_ptr, bmlocal9576_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9575_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9575_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9575_my_ptr, bmlocal9576_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9577_my_ptr;\
	UINT bmlocal9578_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9577_my_ptr, bmlocal9578_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9577_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9577_my_ptr, bmlocal9578_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9579_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET( base_ptr, idx0, bmlocal9579_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfTxArqResetsReceived", 32, (UINT)(bmlocal9579_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9580_my_ptr;\
	UINT bmlocal9581_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_POS( base_ptr, idx0, bmlocal9580_my_ptr, bmlocal9581_my_bitoff );\
	(*((UINT32*)bmlocal9580_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9581_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9582_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9582_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9585_acc_bytes;\
	UINT bmlocal9586_acc_bits;\
	PVOID bmlocal9587_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9587_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9587_parent_out_ptr;\
	bmlocal9585_acc_bytes = 32;\
	bmlocal9586_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9585_acc_bytes );\
	out_bitoff += bmlocal9586_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9588_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, idx0, out_ptr, bmlocal9588_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9588_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9589_my_ptr;\
	UINT bmlocal9590_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9589_my_ptr, bmlocal9590_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9589_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9589_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9589_my_ptr, bmlocal9590_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9591_my_ptr;\
	UINT bmlocal9592_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9591_my_ptr, bmlocal9592_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9591_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9591_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9591_my_ptr, bmlocal9592_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9593_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET( base_ptr, idx0, bmlocal9593_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfTxArqResetsInitiated", 32, (UINT)(bmlocal9593_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9594_my_ptr;\
	UINT bmlocal9595_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_POS( base_ptr, idx0, bmlocal9594_my_ptr, bmlocal9595_my_bitoff );\
	(*((UINT32*)bmlocal9594_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9595_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9596_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9596_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9596_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9599_acc_bytes;\
	UINT bmlocal9600_acc_bits;\
	PVOID bmlocal9601_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9601_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9601_parent_out_ptr;\
	bmlocal9599_acc_bytes = 36;\
	bmlocal9600_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9599_acc_bytes );\
	out_bitoff += bmlocal9600_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9602_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, idx0, out_ptr, bmlocal9602_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9602_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9603_my_ptr;\
	UINT bmlocal9604_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, idx0, bmlocal9603_my_ptr, bmlocal9604_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9603_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9603_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9603_my_ptr, bmlocal9604_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9605_my_ptr;\
	UINT bmlocal9606_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, idx0, bmlocal9605_my_ptr, bmlocal9606_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9605_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9605_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9605_my_ptr, bmlocal9606_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9607_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET( base_ptr, idx0, bmlocal9607_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfArqDiscardsTxd", 32, (UINT)(bmlocal9607_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9608_my_ptr;\
	UINT bmlocal9609_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_POS( base_ptr, idx0, bmlocal9608_my_ptr, bmlocal9609_my_bitoff );\
	(*((UINT32*)bmlocal9608_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9609_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9610_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9610_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9610_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9613_acc_bytes;\
	UINT bmlocal9614_acc_bits;\
	PVOID bmlocal9615_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9615_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9615_parent_out_ptr;\
	bmlocal9613_acc_bytes = 40;\
	bmlocal9614_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9613_acc_bytes );\
	out_bitoff += bmlocal9614_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9616_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS( base_ptr, idx0, out_ptr, bmlocal9616_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9616_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9617_my_ptr;\
	UINT bmlocal9618_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS( base_ptr, idx0, bmlocal9617_my_ptr, bmlocal9618_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9617_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9617_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9617_my_ptr, bmlocal9618_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9619_my_ptr;\
	UINT bmlocal9620_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS( base_ptr, idx0, bmlocal9619_my_ptr, bmlocal9620_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9619_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9619_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9619_my_ptr, bmlocal9620_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9621_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET( base_ptr, idx0, bmlocal9621_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "txThroughput", 32, (UINT)(bmlocal9621_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9622_my_ptr;\
	UINT bmlocal9623_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_POS( base_ptr, idx0, bmlocal9622_my_ptr, bmlocal9623_my_bitoff );\
	(*((UINT32*)bmlocal9622_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9623_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9624_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9624_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9624_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal9627_acc_bytes;\
	UINT bmlocal9628_acc_bits;\
	PVOID bmlocal9629_parent_out_ptr;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_ELEMENT_POS( base_ptr, idx0, bmlocal9629_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal9629_parent_out_ptr;\
	bmlocal9627_acc_bytes = 44;\
	bmlocal9628_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal9627_acc_bytes );\
	out_bitoff += bmlocal9628_acc_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal9630_tmp_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, idx0, out_ptr, bmlocal9630_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal9630_tmp_bitoff);\
}

// Alignment of Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9631_my_ptr;\
	UINT bmlocal9632_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, idx0, bmlocal9631_my_ptr, bmlocal9632_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9631_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9631_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal9631_my_ptr, bmlocal9632_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9633_my_ptr;\
	UINT bmlocal9634_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, idx0, bmlocal9633_my_ptr, bmlocal9634_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9633_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal9633_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal9633_my_ptr, bmlocal9634_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: IS_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET_DEFAULT accessor is not defined because no default value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: IS_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET_RESET accessor is not defined because no reset value was specified.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal9635_out_val;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET( base_ptr, idx0, bmlocal9635_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfSduLostDueToNoFreeSpaceInTransmitter", 32, (UINT)(bmlocal9635_out_val), "%d", 1);\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal9636_my_ptr;\
	UINT bmlocal9637_my_bitoff;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_POS( base_ptr, idx0, bmlocal9636_my_ptr, bmlocal9637_my_bitoff );\
	(*((UINT32*)bmlocal9636_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal9637_my_bitoff );\
}

// Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter: Validation accessors are not defined because validation condition was not specified.
#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9638_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal9638_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9638_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_BYTES_SIZE 4

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 48;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9641_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal9641_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9641_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_BYTES_CELL_SIZE 48

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_CIN_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedArqBlocksTotalUL_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfRetransmittedBlocksUL_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBLTs_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfBlocksLostDueToArqBLT_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_totalNumOfAcksReceived_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsReceived_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfTxArqResetsInitiated_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfArqDiscardsTxd_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_txThroughput_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_numOfSduLostDueToNoFreeSpaceInTransmitter_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal9642_dim_size0;\
	UINT bmlocal9643_idx0;\
	{\
		UINT32 bmlocal9644_var0;\
		BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_GET( base_ptr, bmlocal9644_var0 );\
		bmlocal9642_dim_size0 = (UINT)(bmlocal9644_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "arqTxPerformance", 1);\
	for( bmlocal9643_idx0=0; bmlocal9643_idx0<bmlocal9642_dim_size0; bmlocal9643_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal9643_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH_IDX( base_ptr, bmlocal9643_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9645_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal9645_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9645_tmp_bits );\
}


#define BM_Arq_MonitorTxPerformance_L3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal9646_tmp_bytes = 0;\
	UINT bmlocal9647_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_GET_SIZE( base_ptr, bmlocal9646_tmp_bytes, bmlocal9647_tmp_bits );\
	out_bytes += bmlocal9646_tmp_bytes;\
	out_bits += bmlocal9647_tmp_bits;\
}

#define BM_Arq_MonitorTxPerformance_L3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal9648_tmp_bits;\
	BM_Arq_MonitorTxPerformance_L3_GET_SIZE( base_ptr, out_bytes, bmlocal9648_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal9648_tmp_bits );\
}

#define BM_Arq_MonitorTxPerformance_L3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Arq_MonitorTxPerformance_L3", 1);\
	BM_Arq_MonitorTxPerformance_L3_numOfCidPerformance_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_Arq_MonitorTxPerformance_L3_arqTxPerformance_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_Arq_MonitorTxPerformance_L3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_Arq_MonitorTxPerformance_L3_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DSPS_Management_MSG[1];

// Not generating code for top-level composite 'DSPS_Management_MSG'

/*lint --flb */

#endif /* _BITMAN_L3DMMONITORGROUPS_H_ */

