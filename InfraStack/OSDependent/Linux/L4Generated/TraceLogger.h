/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:07 AM
 *
 * Project : Ofer
 * Module  : TraceLogger
 * Author  : Igor Brainman
 * Date    : 13/11/2006
 * Purpose : Trace Logger Format
 *****************************************************************************/

#if !defined(_BITMAN_TRACELOGGER_H_)
#define _BITMAN_TRACELOGGER_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

// Value of start barker
#define NDIS_LOGGER_START_BARKER (0xDEADBEAF)

// Value of end barker
#define NDIS_LOGGER_END_BARKER (0xCCCCCCCC)

typedef UINT8 TraceBufferStart[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _barker; //start Barker - constant value (NDIS_LOGGER_START_BARKER)
	UINT32 _seqCounter; //counter; it is incremented with each message
	UINT32 _subSystemID; //may be 0..7
	UINT32 _length; //actual buffer length (w/o padding)
} BMS_TraceBufferStart;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _length; //actual buffer length (w/o padding)
	UINT32 _subSystemID; //may be 0..7
	UINT32 _seqCounter; //counter; it is incremented with each message
	UINT32 _barker; //start Barker - constant value (NDIS_LOGGER_START_BARKER)
} BMS_TraceBufferStart;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceBufferStart' Type: 'TraceBufferStart', Top-level, Non-instance, No bitoff root
#define BM_TraceBufferStart_barker_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceBufferStart_barker_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal79_tmp_bitoff;\
	BM_TraceBufferStart_barker_GET_POS( base_ptr, out_ptr, bmlocal79_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal79_tmp_bitoff);\
}

#define BM_TraceBufferStart_barker_POS_ALIGNED 0

// Alignment of TraceBufferStart_barker: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferStart_barker_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_barker_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal80_my_ptr;\
	UINT bmlocal81_my_bitoff;\
	BM_TraceBufferStart_barker_GET_POS( base_ptr, bmlocal80_my_ptr, bmlocal81_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal80_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal80_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal80_my_ptr, bmlocal81_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferStart_barker_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal82_tmp_var;
	BM_TraceBufferStart_barker_GET( base_ptr, bmlocal82_tmp_var );
	return bmlocal82_tmp_var;
}

#define BM_TraceBufferStart_barker_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal83_my_ptr;\
	UINT bmlocal84_my_bitoff;\
	BM_TraceBufferStart_barker_GET_POS( base_ptr, bmlocal83_my_ptr, bmlocal84_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal83_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal83_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal83_my_ptr, bmlocal84_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferStart_barker: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_barker: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_barker: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_barker: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_barker: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferStart_barker: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferStart_barker_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal85_out_val;\
	BM_TraceBufferStart_barker_GET( base_ptr, bmlocal85_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "barker", 32, (UINT)(bmlocal85_out_val), "%d", 1);\
}

#define BM_TraceBufferStart_barker_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferStart_barker_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferStart_barker_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal86_my_ptr;\
	UINT bmlocal87_my_bitoff;\
	BM_TraceBufferStart_barker_GET_POS( base_ptr, bmlocal86_my_ptr, bmlocal87_my_bitoff );\
	(*((UINT32*)bmlocal86_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal87_my_bitoff );\
}

// TraceBufferStart_barker: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferStart_barker_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal88_tmp_bits;\
	BM_TraceBufferStart_barker_GET_SIZE( base_ptr, out_bytes, bmlocal88_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal88_tmp_bits );\
}

#define BM_TraceBufferStart_barker_BYTES_SIZE 4

#define BM_TraceBufferStart_seqCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal91_acc_bytes;\
	UINT bmlocal92_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal91_acc_bytes = 4;\
	bmlocal92_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal91_acc_bytes );\
	out_bitoff += bmlocal92_acc_bits;\
}

#define BM_TraceBufferStart_seqCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal93_tmp_bitoff;\
	BM_TraceBufferStart_seqCounter_GET_POS( base_ptr, out_ptr, bmlocal93_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal93_tmp_bitoff);\
}

#define BM_TraceBufferStart_seqCounter_POS_ALIGNED 4

// Alignment of TraceBufferStart_seqCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferStart_seqCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_seqCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal94_my_ptr;\
	UINT bmlocal95_my_bitoff;\
	BM_TraceBufferStart_seqCounter_GET_POS( base_ptr, bmlocal94_my_ptr, bmlocal95_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal94_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal94_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal94_my_ptr, bmlocal95_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferStart_seqCounter_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal96_tmp_var;
	BM_TraceBufferStart_seqCounter_GET( base_ptr, bmlocal96_tmp_var );
	return bmlocal96_tmp_var;
}

#define BM_TraceBufferStart_seqCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal97_my_ptr;\
	UINT bmlocal98_my_bitoff;\
	BM_TraceBufferStart_seqCounter_GET_POS( base_ptr, bmlocal97_my_ptr, bmlocal98_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal97_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal97_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal97_my_ptr, bmlocal98_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferStart_seqCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_seqCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_seqCounter: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_seqCounter: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_seqCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferStart_seqCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferStart_seqCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal99_out_val;\
	BM_TraceBufferStart_seqCounter_GET( base_ptr, bmlocal99_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "seqCounter", 32, (UINT)(bmlocal99_out_val), "%d", 1);\
}

#define BM_TraceBufferStart_seqCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferStart_seqCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferStart_seqCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal100_my_ptr;\
	UINT bmlocal101_my_bitoff;\
	BM_TraceBufferStart_seqCounter_GET_POS( base_ptr, bmlocal100_my_ptr, bmlocal101_my_bitoff );\
	(*((UINT32*)bmlocal100_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal101_my_bitoff );\
}

// TraceBufferStart_seqCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferStart_seqCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal102_tmp_bits;\
	BM_TraceBufferStart_seqCounter_GET_SIZE( base_ptr, out_bytes, bmlocal102_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal102_tmp_bits );\
}

#define BM_TraceBufferStart_seqCounter_BYTES_SIZE 4

#define BM_TraceBufferStart_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal105_acc_bytes;\
	UINT bmlocal106_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal105_acc_bytes = 8;\
	bmlocal106_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal105_acc_bytes );\
	out_bitoff += bmlocal106_acc_bits;\
}

#define BM_TraceBufferStart_subSystemID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal107_tmp_bitoff;\
	BM_TraceBufferStart_subSystemID_GET_POS( base_ptr, out_ptr, bmlocal107_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal107_tmp_bitoff);\
}

#define BM_TraceBufferStart_subSystemID_POS_ALIGNED 8

// Alignment of TraceBufferStart_subSystemID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferStart_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal108_my_ptr;\
	UINT bmlocal109_my_bitoff;\
	BM_TraceBufferStart_subSystemID_GET_POS( base_ptr, bmlocal108_my_ptr, bmlocal109_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal108_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal108_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal108_my_ptr, bmlocal109_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferStart_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal110_tmp_var;
	BM_TraceBufferStart_subSystemID_GET( base_ptr, bmlocal110_tmp_var );
	return bmlocal110_tmp_var;
}

#define BM_TraceBufferStart_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal111_my_ptr;\
	UINT bmlocal112_my_bitoff;\
	BM_TraceBufferStart_subSystemID_GET_POS( base_ptr, bmlocal111_my_ptr, bmlocal112_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal111_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal111_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal111_my_ptr, bmlocal112_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferStart_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferStart_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferStart_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal113_out_val;\
	BM_TraceBufferStart_subSystemID_GET( base_ptr, bmlocal113_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 32, (UINT)(bmlocal113_out_val), "%d", 1);\
}

#define BM_TraceBufferStart_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferStart_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferStart_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal114_my_ptr;\
	UINT bmlocal115_my_bitoff;\
	BM_TraceBufferStart_subSystemID_GET_POS( base_ptr, bmlocal114_my_ptr, bmlocal115_my_bitoff );\
	(*((UINT32*)bmlocal114_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal115_my_bitoff );\
}

// TraceBufferStart_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferStart_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal116_tmp_bits;\
	BM_TraceBufferStart_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal116_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal116_tmp_bits );\
}

#define BM_TraceBufferStart_subSystemID_BYTES_SIZE 4

#define BM_TraceBufferStart_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal119_acc_bytes;\
	UINT bmlocal120_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal119_acc_bytes = 12;\
	bmlocal120_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal119_acc_bytes );\
	out_bitoff += bmlocal120_acc_bits;\
}

#define BM_TraceBufferStart_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal121_tmp_bitoff;\
	BM_TraceBufferStart_length_GET_POS( base_ptr, out_ptr, bmlocal121_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal121_tmp_bitoff);\
}

#define BM_TraceBufferStart_length_POS_ALIGNED 12

// Alignment of TraceBufferStart_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferStart_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal122_my_ptr;\
	UINT bmlocal123_my_bitoff;\
	BM_TraceBufferStart_length_GET_POS( base_ptr, bmlocal122_my_ptr, bmlocal123_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal122_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal122_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal122_my_ptr, bmlocal123_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferStart_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal124_tmp_var;
	BM_TraceBufferStart_length_GET( base_ptr, bmlocal124_tmp_var );
	return bmlocal124_tmp_var;
}

#define BM_TraceBufferStart_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal125_my_ptr;\
	UINT bmlocal126_my_bitoff;\
	BM_TraceBufferStart_length_GET_POS( base_ptr, bmlocal125_my_ptr, bmlocal126_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal125_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal125_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal125_my_ptr, bmlocal126_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferStart_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferStart_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferStart_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferStart_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferStart_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal127_out_val;\
	BM_TraceBufferStart_length_GET( base_ptr, bmlocal127_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal127_out_val), "%d", 1);\
}

#define BM_TraceBufferStart_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferStart_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferStart_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal128_my_ptr;\
	UINT bmlocal129_my_bitoff;\
	BM_TraceBufferStart_length_GET_POS( base_ptr, bmlocal128_my_ptr, bmlocal129_my_bitoff );\
	(*((UINT32*)bmlocal128_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal129_my_bitoff );\
}

// TraceBufferStart_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferStart_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal130_tmp_bits;\
	BM_TraceBufferStart_length_GET_SIZE( base_ptr, out_bytes, bmlocal130_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal130_tmp_bits );\
}

#define BM_TraceBufferStart_length_BYTES_SIZE 4

#define BM_TraceBufferStart_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal133_tmp_bits;\
	BM_TraceBufferStart_GET_SIZE( base_ptr, out_bytes, bmlocal133_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal133_tmp_bits );\
}

#define BM_TraceBufferStart_BYTES_SIZE 16

#define BM_TraceBufferStart_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceBufferStart", 1);\
	BM_TraceBufferStart_barker_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceBufferStart_seqCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceBufferStart_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceBufferStart_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferStart_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferStart_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceBufferEnd[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _barker; //end Barker - constant value (NDIS_LOGGER_END_BARKER)
	UINT32 _seqCounter; //counter; the same as start.seqCounter
} BMS_TraceBufferEnd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _seqCounter; //counter; the same as start.seqCounter
	UINT32 _barker; //end Barker - constant value (NDIS_LOGGER_END_BARKER)
} BMS_TraceBufferEnd;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceBufferEnd' Type: 'TraceBufferEnd', Top-level, Non-instance, No bitoff root
#define BM_TraceBufferEnd_barker_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceBufferEnd_barker_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal134_tmp_bitoff;\
	BM_TraceBufferEnd_barker_GET_POS( base_ptr, out_ptr, bmlocal134_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal134_tmp_bitoff);\
}

#define BM_TraceBufferEnd_barker_POS_ALIGNED 0

// Alignment of TraceBufferEnd_barker: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferEnd_barker_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferEnd_barker_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal135_my_ptr;\
	UINT bmlocal136_my_bitoff;\
	BM_TraceBufferEnd_barker_GET_POS( base_ptr, bmlocal135_my_ptr, bmlocal136_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal135_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal135_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal135_my_ptr, bmlocal136_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferEnd_barker_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal137_tmp_var;
	BM_TraceBufferEnd_barker_GET( base_ptr, bmlocal137_tmp_var );
	return bmlocal137_tmp_var;
}

#define BM_TraceBufferEnd_barker_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal138_my_ptr;\
	UINT bmlocal139_my_bitoff;\
	BM_TraceBufferEnd_barker_GET_POS( base_ptr, bmlocal138_my_ptr, bmlocal139_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal138_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal138_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal138_my_ptr, bmlocal139_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferEnd_barker: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferEnd_barker: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferEnd_barker: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferEnd_barker: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferEnd_barker: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferEnd_barker: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferEnd_barker_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal140_out_val;\
	BM_TraceBufferEnd_barker_GET( base_ptr, bmlocal140_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "barker", 32, (UINT)(bmlocal140_out_val), "%d", 1);\
}

#define BM_TraceBufferEnd_barker_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferEnd_barker_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferEnd_barker_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal141_my_ptr;\
	UINT bmlocal142_my_bitoff;\
	BM_TraceBufferEnd_barker_GET_POS( base_ptr, bmlocal141_my_ptr, bmlocal142_my_bitoff );\
	(*((UINT32*)bmlocal141_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal142_my_bitoff );\
}

// TraceBufferEnd_barker: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferEnd_barker_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal143_tmp_bits;\
	BM_TraceBufferEnd_barker_GET_SIZE( base_ptr, out_bytes, bmlocal143_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal143_tmp_bits );\
}

#define BM_TraceBufferEnd_barker_BYTES_SIZE 4

#define BM_TraceBufferEnd_seqCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal146_acc_bytes;\
	UINT bmlocal147_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal146_acc_bytes = 4;\
	bmlocal147_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal146_acc_bytes );\
	out_bitoff += bmlocal147_acc_bits;\
}

#define BM_TraceBufferEnd_seqCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal148_tmp_bitoff;\
	BM_TraceBufferEnd_seqCounter_GET_POS( base_ptr, out_ptr, bmlocal148_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal148_tmp_bitoff);\
}

#define BM_TraceBufferEnd_seqCounter_POS_ALIGNED 4

// Alignment of TraceBufferEnd_seqCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceBufferEnd_seqCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferEnd_seqCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal149_my_ptr;\
	UINT bmlocal150_my_bitoff;\
	BM_TraceBufferEnd_seqCounter_GET_POS( base_ptr, bmlocal149_my_ptr, bmlocal150_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal149_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal149_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal149_my_ptr, bmlocal150_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceBufferEnd_seqCounter_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal151_tmp_var;
	BM_TraceBufferEnd_seqCounter_GET( base_ptr, bmlocal151_tmp_var );
	return bmlocal151_tmp_var;
}

#define BM_TraceBufferEnd_seqCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal152_my_ptr;\
	UINT bmlocal153_my_bitoff;\
	BM_TraceBufferEnd_seqCounter_GET_POS( base_ptr, bmlocal152_my_ptr, bmlocal153_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal152_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal152_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal152_my_ptr, bmlocal153_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceBufferEnd_seqCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferEnd_seqCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceBufferEnd_seqCounter: IS_RESET accessor is not defined because no reset value was specified.
// TraceBufferEnd_seqCounter: SET_RESET accessor is not defined because no reset value was specified.
// TraceBufferEnd_seqCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceBufferEnd_seqCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceBufferEnd_seqCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal154_out_val;\
	BM_TraceBufferEnd_seqCounter_GET( base_ptr, bmlocal154_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "seqCounter", 32, (UINT)(bmlocal154_out_val), "%d", 1);\
}

#define BM_TraceBufferEnd_seqCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferEnd_seqCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceBufferEnd_seqCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal155_my_ptr;\
	UINT bmlocal156_my_bitoff;\
	BM_TraceBufferEnd_seqCounter_GET_POS( base_ptr, bmlocal155_my_ptr, bmlocal156_my_bitoff );\
	(*((UINT32*)bmlocal155_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal156_my_bitoff );\
}

// TraceBufferEnd_seqCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceBufferEnd_seqCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal157_tmp_bits;\
	BM_TraceBufferEnd_seqCounter_GET_SIZE( base_ptr, out_bytes, bmlocal157_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal157_tmp_bits );\
}

#define BM_TraceBufferEnd_seqCounter_BYTES_SIZE 4

#define BM_TraceBufferEnd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferEnd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal160_tmp_bits;\
	BM_TraceBufferEnd_GET_SIZE( base_ptr, out_bytes, bmlocal160_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal160_tmp_bits );\
}

#define BM_TraceBufferEnd_BYTES_SIZE 8

#define BM_TraceBufferEnd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceBufferEnd", 1);\
	BM_TraceBufferEnd_barker_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceBufferEnd_seqCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceBufferEnd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceBufferEnd_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceLoggerMsgData[24];

// COMPOSITE: Full name: 'TraceLoggerMsgData' Type: 'TraceLoggerMsgData', Top-level, Non-instance, No bitoff root
#define BM_TraceLoggerMsgData_start_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceLoggerMsgData_start_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal161_tmp_bitoff;\
	BM_TraceLoggerMsgData_start_GET_POS( base_ptr, out_ptr, bmlocal161_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal161_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_start_POS_ALIGNED 0

// COMPOSITE: Full name: 'TraceLoggerMsgData_start' Type: 'TraceBufferStart', Inner, Non-instance, No bitoff root
#define BM_TraceLoggerMsgData_start_barker_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal162_parent_out_ptr;\
	BM_TraceLoggerMsgData_start_GET_POS( base_ptr, bmlocal162_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal162_parent_out_ptr;\
}

#define BM_TraceLoggerMsgData_start_barker_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal163_tmp_bitoff;\
	BM_TraceLoggerMsgData_start_barker_GET_POS( base_ptr, out_ptr, bmlocal163_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal163_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_start_barker_POS_ALIGNED 0

// Alignment of TraceLoggerMsgData_start_barker: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceLoggerMsgData_start_barker_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_barker_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal164_my_ptr;\
	UINT bmlocal165_my_bitoff;\
	BM_TraceLoggerMsgData_start_barker_GET_POS( base_ptr, bmlocal164_my_ptr, bmlocal165_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal164_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal164_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal164_my_ptr, bmlocal165_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_start_barker_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal166_tmp_var;
	BM_TraceLoggerMsgData_start_barker_GET( base_ptr, bmlocal166_tmp_var );
	return bmlocal166_tmp_var;
}

#define BM_TraceLoggerMsgData_start_barker_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal167_my_ptr;\
	UINT bmlocal168_my_bitoff;\
	BM_TraceLoggerMsgData_start_barker_GET_POS( base_ptr, bmlocal167_my_ptr, bmlocal168_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal167_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal167_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal167_my_ptr, bmlocal168_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceLoggerMsgData_start_barker: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_barker: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_barker: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_barker: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_barker: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_start_barker: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_start_barker_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal169_out_val;\
	BM_TraceLoggerMsgData_start_barker_GET( base_ptr, bmlocal169_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "barker", 32, (UINT)(bmlocal169_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_start_barker_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_start_barker_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_start_barker_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal170_my_ptr;\
	UINT bmlocal171_my_bitoff;\
	BM_TraceLoggerMsgData_start_barker_GET_POS( base_ptr, bmlocal170_my_ptr, bmlocal171_my_bitoff );\
	(*((UINT32*)bmlocal170_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal171_my_bitoff );\
}

// TraceLoggerMsgData_start_barker: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_start_barker_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal172_tmp_bits;\
	BM_TraceLoggerMsgData_start_barker_GET_SIZE( base_ptr, out_bytes, bmlocal172_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal172_tmp_bits );\
}

#define BM_TraceLoggerMsgData_start_barker_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_start_seqCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal175_acc_bytes;\
	UINT bmlocal176_acc_bits;\
	PVOID bmlocal177_parent_out_ptr;\
	BM_TraceLoggerMsgData_start_GET_POS( base_ptr, bmlocal177_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal177_parent_out_ptr;\
	bmlocal175_acc_bytes = 4;\
	bmlocal176_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal175_acc_bytes );\
	out_bitoff += bmlocal176_acc_bits;\
}

#define BM_TraceLoggerMsgData_start_seqCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal178_tmp_bitoff;\
	BM_TraceLoggerMsgData_start_seqCounter_GET_POS( base_ptr, out_ptr, bmlocal178_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal178_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_start_seqCounter_POS_ALIGNED 4

// Alignment of TraceLoggerMsgData_start_seqCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceLoggerMsgData_start_seqCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_seqCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal179_my_ptr;\
	UINT bmlocal180_my_bitoff;\
	BM_TraceLoggerMsgData_start_seqCounter_GET_POS( base_ptr, bmlocal179_my_ptr, bmlocal180_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal179_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal179_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal179_my_ptr, bmlocal180_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_start_seqCounter_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal181_tmp_var;
	BM_TraceLoggerMsgData_start_seqCounter_GET( base_ptr, bmlocal181_tmp_var );
	return bmlocal181_tmp_var;
}

#define BM_TraceLoggerMsgData_start_seqCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal182_my_ptr;\
	UINT bmlocal183_my_bitoff;\
	BM_TraceLoggerMsgData_start_seqCounter_GET_POS( base_ptr, bmlocal182_my_ptr, bmlocal183_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal182_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal182_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal182_my_ptr, bmlocal183_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceLoggerMsgData_start_seqCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_seqCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_seqCounter: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_seqCounter: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_seqCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_start_seqCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_start_seqCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal184_out_val;\
	BM_TraceLoggerMsgData_start_seqCounter_GET( base_ptr, bmlocal184_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "seqCounter", 32, (UINT)(bmlocal184_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_start_seqCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_start_seqCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_start_seqCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal185_my_ptr;\
	UINT bmlocal186_my_bitoff;\
	BM_TraceLoggerMsgData_start_seqCounter_GET_POS( base_ptr, bmlocal185_my_ptr, bmlocal186_my_bitoff );\
	(*((UINT32*)bmlocal185_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal186_my_bitoff );\
}

// TraceLoggerMsgData_start_seqCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_start_seqCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal187_tmp_bits;\
	BM_TraceLoggerMsgData_start_seqCounter_GET_SIZE( base_ptr, out_bytes, bmlocal187_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal187_tmp_bits );\
}

#define BM_TraceLoggerMsgData_start_seqCounter_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_start_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal190_acc_bytes;\
	UINT bmlocal191_acc_bits;\
	PVOID bmlocal192_parent_out_ptr;\
	BM_TraceLoggerMsgData_start_GET_POS( base_ptr, bmlocal192_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal192_parent_out_ptr;\
	bmlocal190_acc_bytes = 8;\
	bmlocal191_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal190_acc_bytes );\
	out_bitoff += bmlocal191_acc_bits;\
}

#define BM_TraceLoggerMsgData_start_subSystemID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal193_tmp_bitoff;\
	BM_TraceLoggerMsgData_start_subSystemID_GET_POS( base_ptr, out_ptr, bmlocal193_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal193_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_start_subSystemID_POS_ALIGNED 8

// Alignment of TraceLoggerMsgData_start_subSystemID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceLoggerMsgData_start_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal194_my_ptr;\
	UINT bmlocal195_my_bitoff;\
	BM_TraceLoggerMsgData_start_subSystemID_GET_POS( base_ptr, bmlocal194_my_ptr, bmlocal195_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal194_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal194_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal194_my_ptr, bmlocal195_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_start_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal196_tmp_var;
	BM_TraceLoggerMsgData_start_subSystemID_GET( base_ptr, bmlocal196_tmp_var );
	return bmlocal196_tmp_var;
}

#define BM_TraceLoggerMsgData_start_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal197_my_ptr;\
	UINT bmlocal198_my_bitoff;\
	BM_TraceLoggerMsgData_start_subSystemID_GET_POS( base_ptr, bmlocal197_my_ptr, bmlocal198_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal197_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal197_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal197_my_ptr, bmlocal198_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceLoggerMsgData_start_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_start_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_start_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal199_out_val;\
	BM_TraceLoggerMsgData_start_subSystemID_GET( base_ptr, bmlocal199_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 32, (UINT)(bmlocal199_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_start_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_start_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_start_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal200_my_ptr;\
	UINT bmlocal201_my_bitoff;\
	BM_TraceLoggerMsgData_start_subSystemID_GET_POS( base_ptr, bmlocal200_my_ptr, bmlocal201_my_bitoff );\
	(*((UINT32*)bmlocal200_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal201_my_bitoff );\
}

// TraceLoggerMsgData_start_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_start_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal202_tmp_bits;\
	BM_TraceLoggerMsgData_start_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal202_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal202_tmp_bits );\
}

#define BM_TraceLoggerMsgData_start_subSystemID_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_start_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal205_acc_bytes;\
	UINT bmlocal206_acc_bits;\
	PVOID bmlocal207_parent_out_ptr;\
	BM_TraceLoggerMsgData_start_GET_POS( base_ptr, bmlocal207_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal207_parent_out_ptr;\
	bmlocal205_acc_bytes = 12;\
	bmlocal206_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal205_acc_bytes );\
	out_bitoff += bmlocal206_acc_bits;\
}

#define BM_TraceLoggerMsgData_start_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal208_tmp_bitoff;\
	BM_TraceLoggerMsgData_start_length_GET_POS( base_ptr, out_ptr, bmlocal208_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal208_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_start_length_POS_ALIGNED 12

// Alignment of TraceLoggerMsgData_start_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceLoggerMsgData_start_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal209_my_ptr;\
	UINT bmlocal210_my_bitoff;\
	BM_TraceLoggerMsgData_start_length_GET_POS( base_ptr, bmlocal209_my_ptr, bmlocal210_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal209_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal209_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal209_my_ptr, bmlocal210_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_start_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal211_tmp_var;
	BM_TraceLoggerMsgData_start_length_GET( base_ptr, bmlocal211_tmp_var );
	return bmlocal211_tmp_var;
}

#define BM_TraceLoggerMsgData_start_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal212_my_ptr;\
	UINT bmlocal213_my_bitoff;\
	BM_TraceLoggerMsgData_start_length_GET_POS( base_ptr, bmlocal212_my_ptr, bmlocal213_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal212_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal212_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal212_my_ptr, bmlocal213_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceLoggerMsgData_start_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_start_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_start_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_start_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_start_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal214_out_val;\
	BM_TraceLoggerMsgData_start_length_GET( base_ptr, bmlocal214_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal214_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_start_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_start_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_start_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal215_my_ptr;\
	UINT bmlocal216_my_bitoff;\
	BM_TraceLoggerMsgData_start_length_GET_POS( base_ptr, bmlocal215_my_ptr, bmlocal216_my_bitoff );\
	(*((UINT32*)bmlocal215_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal216_my_bitoff );\
}

// TraceLoggerMsgData_start_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_start_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal217_tmp_bits;\
	BM_TraceLoggerMsgData_start_length_GET_SIZE( base_ptr, out_bytes, bmlocal217_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal217_tmp_bits );\
}

#define BM_TraceLoggerMsgData_start_length_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_start_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal220_tmp_bits;\
	BM_TraceLoggerMsgData_start_GET_SIZE( base_ptr, out_bytes, bmlocal220_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal220_tmp_bits );\
}

#define BM_TraceLoggerMsgData_start_BYTES_SIZE 16

#define BM_TraceLoggerMsgData_start_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "start", 1);\
	BM_TraceLoggerMsgData_start_barker_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_start_seqCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_start_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_start_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_start_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_start_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceLoggerMsgData_buffer_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal223_acc_bytes;\
	UINT bmlocal224_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal223_acc_bytes = 16;\
	bmlocal224_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal223_acc_bytes );\
	out_bitoff += bmlocal224_acc_bits;\
}

#define BM_TraceLoggerMsgData_buffer_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal225_tmp_bitoff;\
	BM_TraceLoggerMsgData_buffer_GET_POS( base_ptr, out_ptr, bmlocal225_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal225_tmp_bitoff);\
}

#define BM_TraceLoggerMsgData_buffer_POS_ALIGNED 16

// ARRAY: TraceLoggerMsgData_buffer
#define BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal226_var0;\
		BM_TraceLoggerMsgData_start_length_GET( base_ptr, bmlocal226_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal226_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceLoggerMsgData_buffer_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal227_my_bytes;
	UINT bmlocal228_my_bits;
	BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, bmlocal227_my_bytes, bmlocal228_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal227_my_bytes, bmlocal228_my_bits);
	BMI_UNUSED_VAR( bmlocal228_my_bits );
	return bmlocal227_my_bytes;
}

#define BM_TraceLoggerMsgData_buffer_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal229_var0;\
			BM_TraceLoggerMsgData_start_length_GET( base_ptr, bmlocal229_var0 );\
			out_element_count = (UINT)(bmlocal229_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_buffer_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal230_out_ptr;\
	UINT bmlocal231_out_bitoff;\
	UINT bmlocal232_element_size_bytes;\
	UINT bmlocal233_element_size_bits;\
	BM_TraceLoggerMsgData_buffer_GET_POS( base_ptr, bmlocal230_out_ptr, bmlocal231_out_bitoff );\
	bmlocal232_element_size_bytes = 1;\
	bmlocal233_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal230_out_ptr) + (idx0) * bmlocal232_element_size_bytes );\
	out_bitoff = bmlocal231_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal233_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceLoggerMsgData_buffer' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_TraceLoggerMsgData_buffer_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal234_parent_out_ptr;\
	BM_TraceLoggerMsgData_buffer_GET_ELEMENT_POS( base_ptr, idx0, bmlocal234_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal234_parent_out_ptr;\
}

// Alignment of TraceLoggerMsgData_buffer_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TraceLoggerMsgData_buffer_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceLoggerMsgData_buffer_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal235_my_ptr;\
	UINT bmlocal236_my_bitoff;\
	BM_TraceLoggerMsgData_buffer_value_GET_POS( base_ptr, idx0, bmlocal235_my_ptr, bmlocal236_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal235_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal235_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal235_my_ptr, bmlocal236_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_TraceLoggerMsgData_buffer_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal237_tmp_var;
	BM_TraceLoggerMsgData_buffer_value_GET( base_ptr, idx0, bmlocal237_tmp_var );
	return bmlocal237_tmp_var;
}

#define BM_TraceLoggerMsgData_buffer_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal238_my_ptr;\
	UINT bmlocal239_my_bitoff;\
	BM_TraceLoggerMsgData_buffer_value_GET_POS( base_ptr, idx0, bmlocal238_my_ptr, bmlocal239_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal238_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal238_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal238_my_ptr, bmlocal239_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TraceLoggerMsgData_buffer_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_buffer_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_buffer_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_buffer_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_buffer_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_buffer_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_buffer_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal240_out_val;\
	BM_TraceLoggerMsgData_buffer_value_GET( base_ptr, idx0, bmlocal240_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal240_out_val), "%u", 1);\
}

#define BM_TraceLoggerMsgData_buffer_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_buffer_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceLoggerMsgData_buffer_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal241_my_ptr;\
	UINT bmlocal242_my_bitoff;\
	BM_TraceLoggerMsgData_buffer_value_GET_POS( base_ptr, idx0, bmlocal241_my_ptr, bmlocal242_my_bitoff );\
	(*((UINT8*)bmlocal241_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal242_my_bitoff );\
}

// TraceLoggerMsgData_buffer_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_buffer_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal243_tmp_bits;\
	BM_TraceLoggerMsgData_buffer_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal243_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal243_tmp_bits );\
}

#define BM_TraceLoggerMsgData_buffer_value_BYTES_SIZE 1

#define BM_TraceLoggerMsgData_buffer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceLoggerMsgData_buffer_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal246_tmp_bits;\
	BM_TraceLoggerMsgData_buffer_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal246_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal246_tmp_bits );\
}

#define BM_TraceLoggerMsgData_buffer_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceLoggerMsgData_buffer_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceLoggerMsgData_buffer_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_buffer_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceLoggerMsgData_buffer_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_buffer_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceLoggerMsgData_buffer_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal247_dim_size0;\
	UINT bmlocal248_idx0;\
	{\
		UINT32 bmlocal249_var0;\
		BM_TraceLoggerMsgData_start_length_GET( base_ptr, bmlocal249_var0 );\
		bmlocal247_dim_size0 = (UINT)(bmlocal249_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "buffer", 1);\
	for( bmlocal248_idx0=0; bmlocal248_idx0<bmlocal247_dim_size0; bmlocal248_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal248_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceLoggerMsgData_buffer_DUMP_DEPTH_IDX( base_ptr, bmlocal248_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_buffer_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_buffer_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_buffer_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal250_tmp_bits;\
	BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, out_bytes, bmlocal250_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal250_tmp_bits );\
}


#define BM_TraceLoggerMsgData_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal251_tmp_bytes = 0;\
	UINT bmlocal252_tmp_bits = 0;\
	UINT bmlocal253_acc_bytes;\
	UINT bmlocal254_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal253_acc_bytes = 16;\
	bmlocal254_acc_bits = 0;\
	BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, bmlocal251_tmp_bytes, bmlocal252_tmp_bits );\
	bmlocal253_acc_bytes += bmlocal251_tmp_bytes;\
	bmlocal254_acc_bits += bmlocal252_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal253_acc_bytes );\
	out_bitoff += bmlocal254_acc_bits;\
}

#define BM_TraceLoggerMsgData_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceLoggerMsgData_end_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal255_tmp_bytes = 0;\
	UINT bmlocal256_tmp_bits = 0;\
	UINT bmlocal257_acc_bytes;\
	UINT bmlocal258_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal257_acc_bytes = 16;\
	bmlocal258_acc_bits = 0;\
	BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, bmlocal255_tmp_bytes, bmlocal256_tmp_bits );\
	bmlocal257_acc_bytes += bmlocal255_tmp_bytes;\
	bmlocal258_acc_bits += bmlocal256_tmp_bits;\
	BMI_ROUND_UP_4BYTES( bmlocal257_acc_bytes, bmlocal258_acc_bits );\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal257_acc_bytes );\
	out_bitoff += bmlocal258_acc_bits;\
}

// COMPOSITE: Full name: 'TraceLoggerMsgData_end' Type: 'TraceBufferEnd', Inner, Non-instance, No bitoff root
#define BM_TraceLoggerMsgData_end_barker_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal259_parent_out_ptr;\
	BM_TraceLoggerMsgData_end_GET_POS( base_ptr, bmlocal259_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal259_parent_out_ptr;\
}

#define BM_TraceLoggerMsgData_end_barker_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal260_tmp_bitoff;\
	BM_TraceLoggerMsgData_end_barker_GET_POS( base_ptr, out_ptr, bmlocal260_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal260_tmp_bitoff);\
}

// Alignment of TraceLoggerMsgData_end_barker: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceLoggerMsgData_end_barker_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_end_barker_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal261_my_ptr;\
	UINT bmlocal262_my_bitoff;\
	BM_TraceLoggerMsgData_end_barker_GET_POS( base_ptr, bmlocal261_my_ptr, bmlocal262_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal261_my_ptr, bmlocal262_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_end_barker_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal263_tmp_var;
	BM_TraceLoggerMsgData_end_barker_GET( base_ptr, bmlocal263_tmp_var );
	return bmlocal263_tmp_var;
}

#define BM_TraceLoggerMsgData_end_barker_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal264_my_ptr;\
	UINT bmlocal265_my_bitoff;\
	BM_TraceLoggerMsgData_end_barker_GET_POS( base_ptr, bmlocal264_my_ptr, bmlocal265_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal264_my_ptr, bmlocal265_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceLoggerMsgData_end_barker: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_end_barker: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_end_barker: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_end_barker: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_end_barker: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_end_barker: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_end_barker_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal266_out_val;\
	BM_TraceLoggerMsgData_end_barker_GET( base_ptr, bmlocal266_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "barker", 32, (UINT)(bmlocal266_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_end_barker_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_end_barker_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_end_barker_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal267_val;\
	BM_TraceLoggerMsgData_end_barker_GET( base_ptr, bmlocal267_val );\
	(bmlocal267_val)++;\
	BM_TraceLoggerMsgData_end_barker_SET( base_ptr, bmlocal267_val );\
}

// TraceLoggerMsgData_end_barker: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_end_barker_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal268_tmp_bits;\
	BM_TraceLoggerMsgData_end_barker_GET_SIZE( base_ptr, out_bytes, bmlocal268_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal268_tmp_bits );\
}

#define BM_TraceLoggerMsgData_end_barker_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_end_seqCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal271_acc_bytes;\
	UINT bmlocal272_acc_bits;\
	PVOID bmlocal273_parent_out_ptr;\
	BM_TraceLoggerMsgData_end_GET_POS( base_ptr, bmlocal273_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal273_parent_out_ptr;\
	bmlocal271_acc_bytes = 4;\
	bmlocal272_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal271_acc_bytes );\
	out_bitoff += bmlocal272_acc_bits;\
}

#define BM_TraceLoggerMsgData_end_seqCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal274_tmp_bitoff;\
	BM_TraceLoggerMsgData_end_seqCounter_GET_POS( base_ptr, out_ptr, bmlocal274_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal274_tmp_bitoff);\
}

// Alignment of TraceLoggerMsgData_end_seqCounter: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceLoggerMsgData_end_seqCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_end_seqCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal275_my_ptr;\
	UINT bmlocal276_my_bitoff;\
	BM_TraceLoggerMsgData_end_seqCounter_GET_POS( base_ptr, bmlocal275_my_ptr, bmlocal276_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal275_my_ptr, bmlocal276_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceLoggerMsgData_end_seqCounter_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal277_tmp_var;
	BM_TraceLoggerMsgData_end_seqCounter_GET( base_ptr, bmlocal277_tmp_var );
	return bmlocal277_tmp_var;
}

#define BM_TraceLoggerMsgData_end_seqCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal278_my_ptr;\
	UINT bmlocal279_my_bitoff;\
	BM_TraceLoggerMsgData_end_seqCounter_GET_POS( base_ptr, bmlocal278_my_ptr, bmlocal279_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal278_my_ptr, bmlocal279_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceLoggerMsgData_end_seqCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_end_seqCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceLoggerMsgData_end_seqCounter: IS_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_end_seqCounter: SET_RESET accessor is not defined because no reset value was specified.
// TraceLoggerMsgData_end_seqCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceLoggerMsgData_end_seqCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceLoggerMsgData_end_seqCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal280_out_val;\
	BM_TraceLoggerMsgData_end_seqCounter_GET( base_ptr, bmlocal280_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "seqCounter", 32, (UINT)(bmlocal280_out_val), "%d", 1);\
}

#define BM_TraceLoggerMsgData_end_seqCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_end_seqCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceLoggerMsgData_end_seqCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal281_val;\
	BM_TraceLoggerMsgData_end_seqCounter_GET( base_ptr, bmlocal281_val );\
	(bmlocal281_val)++;\
	BM_TraceLoggerMsgData_end_seqCounter_SET( base_ptr, bmlocal281_val );\
}

// TraceLoggerMsgData_end_seqCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceLoggerMsgData_end_seqCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal282_tmp_bits;\
	BM_TraceLoggerMsgData_end_seqCounter_GET_SIZE( base_ptr, out_bytes, bmlocal282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal282_tmp_bits );\
}

#define BM_TraceLoggerMsgData_end_seqCounter_BYTES_SIZE 4

#define BM_TraceLoggerMsgData_end_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_end_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal285_tmp_bits;\
	BM_TraceLoggerMsgData_end_GET_SIZE( base_ptr, out_bytes, bmlocal285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal285_tmp_bits );\
}

#define BM_TraceLoggerMsgData_end_BYTES_SIZE 8

#define BM_TraceLoggerMsgData_end_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "end", 1);\
	BM_TraceLoggerMsgData_end_barker_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_end_seqCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_end_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_end_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceLoggerMsgData_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal286_tmp_bytes = 0;\
	UINT bmlocal287_tmp_bits = 0;\
	out_bytes = 24;\
	out_bits = 0;\
	BM_TraceLoggerMsgData_buffer_GET_SIZE( base_ptr, bmlocal286_tmp_bytes, bmlocal287_tmp_bits );\
	out_bytes += bmlocal286_tmp_bytes;\
	out_bits += bmlocal287_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceLoggerMsgData_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal288_tmp_bits;\
	BM_TraceLoggerMsgData_GET_SIZE( base_ptr, out_bytes, bmlocal288_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal288_tmp_bits );\
}

#define BM_TraceLoggerMsgData_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceLoggerMsgData", 1);\
	BM_TraceLoggerMsgData_start_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_buffer_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceLoggerMsgData_end_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceLoggerMsgData_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceLoggerMsgData_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_TRACELOGGER_H_ */

