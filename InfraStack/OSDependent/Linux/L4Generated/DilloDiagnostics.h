/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Besor
 * Module  : DilloDiagnostics
 * Author  : Idan Galon
 * Purpose : Diagnostics to be uploaded to L2/L3 through the Monitor
 *****************************************************************************/

#if !defined(_BITMAN_DILLODIAGNOSTICS_H_)
#define _BITMAN_DILLODIAGNOSTICS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define HARQ_DL_UL_CHANNNELS (16)

// (was 10)
#define UIUC_INDEX (10)

// The last is reserved (was 14)
#define DIUC_INDEX (14)

typedef UINT8 RetransComp[2];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Retrans : 16;
} BMS_RetransComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Retrans : 16;
} BMS_RetransComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'RetransComp' Type: 'RetransComp', Top-level, Non-instance, No bitoff root
#define BM_RetransComp_Retrans_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_RetransComp_Retrans_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal634_tmp_bitoff;\
	BM_RetransComp_Retrans_GET_POS( base_ptr, out_ptr, bmlocal634_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal634_tmp_bitoff);\
}

#define BM_RetransComp_Retrans_POS_ALIGNED 0

// Alignment of RetransComp_Retrans: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_RetransComp_Retrans_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RetransComp_Retrans_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal635_my_ptr;\
	UINT bmlocal636_my_bitoff;\
	BM_RetransComp_Retrans_GET_POS( base_ptr, bmlocal635_my_ptr, bmlocal636_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal635_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal635_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal635_my_ptr, bmlocal636_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_RetransComp_Retrans_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal637_my_ptr;\
	UINT bmlocal638_my_bitoff;\
	BM_RetransComp_Retrans_GET_POS( base_ptr, bmlocal637_my_ptr, bmlocal638_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal637_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal637_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal637_my_ptr, bmlocal638_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// RetransComp_Retrans: IS_DEFAULT accessor is not defined because no default value was specified.
// RetransComp_Retrans: SET_DEFAULT accessor is not defined because no default value was specified.
// RetransComp_Retrans: IS_RESET accessor is not defined because no reset value was specified.
// RetransComp_Retrans: SET_RESET accessor is not defined because no reset value was specified.
// RetransComp_Retrans: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// RetransComp_Retrans: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_RetransComp_Retrans_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal639_out_val;\
	BM_RetransComp_Retrans_GET( base_ptr, bmlocal639_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Retrans", 16, (UINT)(bmlocal639_out_val), "%d", 1);\
}

#define BM_RetransComp_Retrans_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RetransComp_Retrans_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_RetransComp_Retrans_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal640_my_ptr;\
	UINT bmlocal641_my_bitoff;\
	BM_RetransComp_Retrans_GET_POS( base_ptr, bmlocal640_my_ptr, bmlocal641_my_bitoff );\
	(*((UINT16*)bmlocal640_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal641_my_bitoff );\
}

// RetransComp_Retrans: Validation accessors are not defined because validation condition was not specified.
#define BM_RetransComp_Retrans_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal642_tmp_bits;\
	BM_RetransComp_Retrans_GET_SIZE( base_ptr, out_bytes, bmlocal642_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal642_tmp_bits );\
}

#define BM_RetransComp_Retrans_BYTES_SIZE 2

#define BM_RetransComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RetransComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal645_tmp_bits;\
	BM_RetransComp_GET_SIZE( base_ptr, out_bytes, bmlocal645_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal645_tmp_bits );\
}

#define BM_RetransComp_BYTES_SIZE 2

#define BM_RetransComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RetransComp", 1);\
	BM_RetransComp_Retrans_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_RetransComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_RetransComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BurstsComp[2];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Bursts : 16; //Rx/Tx Bursts per MCS
} BMS_BurstsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Bursts : 16; //Rx/Tx Bursts per MCS
} BMS_BurstsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BurstsComp' Type: 'BurstsComp', Top-level, Non-instance, No bitoff root
#define BM_BurstsComp_Bursts_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BurstsComp_Bursts_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal646_tmp_bitoff;\
	BM_BurstsComp_Bursts_GET_POS( base_ptr, out_ptr, bmlocal646_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal646_tmp_bitoff);\
}

#define BM_BurstsComp_Bursts_POS_ALIGNED 0

// Alignment of BurstsComp_Bursts: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstsComp_Bursts_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstsComp_Bursts_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal647_my_ptr;\
	UINT bmlocal648_my_bitoff;\
	BM_BurstsComp_Bursts_GET_POS( base_ptr, bmlocal647_my_ptr, bmlocal648_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal647_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal647_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal647_my_ptr, bmlocal648_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstsComp_Bursts_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal649_my_ptr;\
	UINT bmlocal650_my_bitoff;\
	BM_BurstsComp_Bursts_GET_POS( base_ptr, bmlocal649_my_ptr, bmlocal650_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal649_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal649_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal649_my_ptr, bmlocal650_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstsComp_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstsComp_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstsComp_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// BurstsComp_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// BurstsComp_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstsComp_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstsComp_Bursts_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal651_out_val;\
	BM_BurstsComp_Bursts_GET( base_ptr, bmlocal651_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal651_out_val), "%d", 1);\
}

#define BM_BurstsComp_Bursts_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstsComp_Bursts_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstsComp_Bursts_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal652_my_ptr;\
	UINT bmlocal653_my_bitoff;\
	BM_BurstsComp_Bursts_GET_POS( base_ptr, bmlocal652_my_ptr, bmlocal653_my_bitoff );\
	(*((UINT16*)bmlocal652_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal653_my_bitoff );\
}

// BurstsComp_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstsComp_Bursts_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal654_tmp_bits;\
	BM_BurstsComp_Bursts_GET_SIZE( base_ptr, out_bytes, bmlocal654_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal654_tmp_bits );\
}

#define BM_BurstsComp_Bursts_BYTES_SIZE 2

#define BM_BurstsComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstsComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal657_tmp_bits;\
	BM_BurstsComp_GET_SIZE( base_ptr, out_bytes, bmlocal657_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal657_tmp_bits );\
}

#define BM_BurstsComp_BYTES_SIZE 2

#define BM_BurstsComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BurstsComp", 1);\
	BM_BurstsComp_Bursts_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstsComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstsComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 HarqPerfComp[142];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _NacksSent : 16; //Number of NACKS sent per frame
	UINT16 _AcksSent : 16; //Number of ACKS sent per frame
	UINT16 _DuplicatesRx : 16; //Number of duplicates received per frame
	UINT16 _BurstsTx : 16; //Number of Harq bursts transmitted per frame
	UINT16 _BurstsRx : 16; //Number of Harq bursts received per frame
	UINT16 _Reserved : 16; //reserved
	BMS_RetransComp _RetransUL_Array[16]; //Number of retransmissions in UL per ACID
	BMS_RetransComp _RetransDL_Array[16]; //Number of retransmissions in DL per ACID
	UINT16 _DropHarqBurstCount : 16; //Number of RX dropped Harq bursts
	BMS_RetransComp _AgingArrayUL[16]; //Number of UL Harq retries which exceeded retry limit per ACID per frame
	BMS_RetransComp _AgingArrayDL[16]; //Number of DL Harq retries which exceeded retry limit per ACID per frame
} BMS_HarqPerfComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_RetransComp _AgingArrayDL[16]; //Number of DL Harq retries which exceeded retry limit per ACID per frame
	BMS_RetransComp _AgingArrayUL[16]; //Number of UL Harq retries which exceeded retry limit per ACID per frame
	UINT16 _DropHarqBurstCount : 16; //Number of RX dropped Harq bursts
	BMS_RetransComp _RetransDL_Array[16]; //Number of retransmissions in DL per ACID
	BMS_RetransComp _RetransUL_Array[16]; //Number of retransmissions in UL per ACID
	UINT16 _Reserved : 16; //reserved
	UINT16 _BurstsRx : 16; //Number of Harq bursts received per frame
	UINT16 _BurstsTx : 16; //Number of Harq bursts transmitted per frame
	UINT16 _DuplicatesRx : 16; //Number of duplicates received per frame
	UINT16 _AcksSent : 16; //Number of ACKS sent per frame
	UINT16 _NacksSent : 16; //Number of NACKS sent per frame
} BMS_HarqPerfComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'HarqPerfComp' Type: 'HarqPerfComp', Top-level, Non-instance, No bitoff root
#define BM_HarqPerfComp_NacksSent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_HarqPerfComp_NacksSent_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal658_tmp_bitoff;\
	BM_HarqPerfComp_NacksSent_GET_POS( base_ptr, out_ptr, bmlocal658_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal658_tmp_bitoff);\
}

#define BM_HarqPerfComp_NacksSent_POS_ALIGNED 0

// Alignment of HarqPerfComp_NacksSent: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_NacksSent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_NacksSent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal659_my_ptr;\
	UINT bmlocal660_my_bitoff;\
	BM_HarqPerfComp_NacksSent_GET_POS( base_ptr, bmlocal659_my_ptr, bmlocal660_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal659_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal659_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal659_my_ptr, bmlocal660_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_HarqPerfComp_NacksSent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal661_my_ptr;\
	UINT bmlocal662_my_bitoff;\
	BM_HarqPerfComp_NacksSent_GET_POS( base_ptr, bmlocal661_my_ptr, bmlocal662_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal661_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal661_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal661_my_ptr, bmlocal662_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// HarqPerfComp_NacksSent: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_NacksSent: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_NacksSent: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_NacksSent: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_NacksSent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_NacksSent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_NacksSent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal663_out_val;\
	BM_HarqPerfComp_NacksSent_GET( base_ptr, bmlocal663_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NacksSent", 16, (UINT)(bmlocal663_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_NacksSent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_NacksSent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_NacksSent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal664_my_ptr;\
	UINT bmlocal665_my_bitoff;\
	BM_HarqPerfComp_NacksSent_GET_POS( base_ptr, bmlocal664_my_ptr, bmlocal665_my_bitoff );\
	(*((UINT16*)bmlocal664_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal665_my_bitoff );\
}

// HarqPerfComp_NacksSent: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_NacksSent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal666_tmp_bits;\
	BM_HarqPerfComp_NacksSent_GET_SIZE( base_ptr, out_bytes, bmlocal666_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal666_tmp_bits );\
}

#define BM_HarqPerfComp_NacksSent_BYTES_SIZE 2

#define BM_HarqPerfComp_AcksSent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal669_acc_bytes;\
	UINT bmlocal670_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal669_acc_bytes = 2;\
	bmlocal670_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal669_acc_bytes );\
	out_bitoff += bmlocal670_acc_bits;\
}

#define BM_HarqPerfComp_AcksSent_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal671_tmp_bitoff;\
	BM_HarqPerfComp_AcksSent_GET_POS( base_ptr, out_ptr, bmlocal671_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal671_tmp_bitoff);\
}

#define BM_HarqPerfComp_AcksSent_POS_ALIGNED 2

// Alignment of HarqPerfComp_AcksSent: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_AcksSent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AcksSent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal672_my_ptr;\
	UINT bmlocal673_my_bitoff;\
	BM_HarqPerfComp_AcksSent_GET_POS( base_ptr, bmlocal672_my_ptr, bmlocal673_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal672_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal672_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal672_my_ptr, bmlocal673_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_HarqPerfComp_AcksSent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal674_my_ptr;\
	UINT bmlocal675_my_bitoff;\
	BM_HarqPerfComp_AcksSent_GET_POS( base_ptr, bmlocal674_my_ptr, bmlocal675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal674_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal674_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal674_my_ptr, bmlocal675_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// HarqPerfComp_AcksSent: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AcksSent: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AcksSent: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AcksSent: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AcksSent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_AcksSent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_AcksSent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal676_out_val;\
	BM_HarqPerfComp_AcksSent_GET( base_ptr, bmlocal676_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AcksSent", 16, (UINT)(bmlocal676_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_AcksSent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AcksSent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_AcksSent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal677_my_ptr;\
	UINT bmlocal678_my_bitoff;\
	BM_HarqPerfComp_AcksSent_GET_POS( base_ptr, bmlocal677_my_ptr, bmlocal678_my_bitoff );\
	(*((UINT16*)bmlocal677_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal678_my_bitoff );\
}

// HarqPerfComp_AcksSent: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_AcksSent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal679_tmp_bits;\
	BM_HarqPerfComp_AcksSent_GET_SIZE( base_ptr, out_bytes, bmlocal679_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal679_tmp_bits );\
}

#define BM_HarqPerfComp_AcksSent_BYTES_SIZE 2

#define BM_HarqPerfComp_DuplicatesRx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal682_acc_bytes;\
	UINT bmlocal683_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal682_acc_bytes = 4;\
	bmlocal683_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal682_acc_bytes );\
	out_bitoff += bmlocal683_acc_bits;\
}

#define BM_HarqPerfComp_DuplicatesRx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal684_tmp_bitoff;\
	BM_HarqPerfComp_DuplicatesRx_GET_POS( base_ptr, out_ptr, bmlocal684_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal684_tmp_bitoff);\
}

#define BM_HarqPerfComp_DuplicatesRx_POS_ALIGNED 4

// Alignment of HarqPerfComp_DuplicatesRx: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_DuplicatesRx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_DuplicatesRx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal685_my_ptr;\
	UINT bmlocal686_my_bitoff;\
	BM_HarqPerfComp_DuplicatesRx_GET_POS( base_ptr, bmlocal685_my_ptr, bmlocal686_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal685_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal685_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal685_my_ptr, bmlocal686_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_HarqPerfComp_DuplicatesRx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal687_my_ptr;\
	UINT bmlocal688_my_bitoff;\
	BM_HarqPerfComp_DuplicatesRx_GET_POS( base_ptr, bmlocal687_my_ptr, bmlocal688_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal687_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal687_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal687_my_ptr, bmlocal688_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// HarqPerfComp_DuplicatesRx: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_DuplicatesRx: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_DuplicatesRx: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_DuplicatesRx: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_DuplicatesRx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_DuplicatesRx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_DuplicatesRx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal689_out_val;\
	BM_HarqPerfComp_DuplicatesRx_GET( base_ptr, bmlocal689_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DuplicatesRx", 16, (UINT)(bmlocal689_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_DuplicatesRx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_DuplicatesRx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_DuplicatesRx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal690_my_ptr;\
	UINT bmlocal691_my_bitoff;\
	BM_HarqPerfComp_DuplicatesRx_GET_POS( base_ptr, bmlocal690_my_ptr, bmlocal691_my_bitoff );\
	(*((UINT16*)bmlocal690_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal691_my_bitoff );\
}

// HarqPerfComp_DuplicatesRx: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_DuplicatesRx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal692_tmp_bits;\
	BM_HarqPerfComp_DuplicatesRx_GET_SIZE( base_ptr, out_bytes, bmlocal692_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal692_tmp_bits );\
}

#define BM_HarqPerfComp_DuplicatesRx_BYTES_SIZE 2

#define BM_HarqPerfComp_BurstsTx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal695_acc_bytes;\
	UINT bmlocal696_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal695_acc_bytes = 6;\
	bmlocal696_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal695_acc_bytes );\
	out_bitoff += bmlocal696_acc_bits;\
}

#define BM_HarqPerfComp_BurstsTx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal697_tmp_bitoff;\
	BM_HarqPerfComp_BurstsTx_GET_POS( base_ptr, out_ptr, bmlocal697_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal697_tmp_bitoff);\
}

#define BM_HarqPerfComp_BurstsTx_POS_ALIGNED 6

// Alignment of HarqPerfComp_BurstsTx: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_BurstsTx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_BurstsTx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal698_my_ptr;\
	UINT bmlocal699_my_bitoff;\
	BM_HarqPerfComp_BurstsTx_GET_POS( base_ptr, bmlocal698_my_ptr, bmlocal699_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal698_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal698_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal698_my_ptr, bmlocal699_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_HarqPerfComp_BurstsTx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal700_my_ptr;\
	UINT bmlocal701_my_bitoff;\
	BM_HarqPerfComp_BurstsTx_GET_POS( base_ptr, bmlocal700_my_ptr, bmlocal701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal700_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal700_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal700_my_ptr, bmlocal701_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// HarqPerfComp_BurstsTx: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_BurstsTx: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_BurstsTx: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_BurstsTx: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_BurstsTx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_BurstsTx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_BurstsTx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal702_out_val;\
	BM_HarqPerfComp_BurstsTx_GET( base_ptr, bmlocal702_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BurstsTx", 16, (UINT)(bmlocal702_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_BurstsTx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_BurstsTx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_BurstsTx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal703_my_ptr;\
	UINT bmlocal704_my_bitoff;\
	BM_HarqPerfComp_BurstsTx_GET_POS( base_ptr, bmlocal703_my_ptr, bmlocal704_my_bitoff );\
	(*((UINT16*)bmlocal703_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal704_my_bitoff );\
}

// HarqPerfComp_BurstsTx: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_BurstsTx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal705_tmp_bits;\
	BM_HarqPerfComp_BurstsTx_GET_SIZE( base_ptr, out_bytes, bmlocal705_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal705_tmp_bits );\
}

#define BM_HarqPerfComp_BurstsTx_BYTES_SIZE 2

#define BM_HarqPerfComp_BurstsRx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal708_acc_bytes;\
	UINT bmlocal709_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal708_acc_bytes = 8;\
	bmlocal709_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal708_acc_bytes );\
	out_bitoff += bmlocal709_acc_bits;\
}

#define BM_HarqPerfComp_BurstsRx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal710_tmp_bitoff;\
	BM_HarqPerfComp_BurstsRx_GET_POS( base_ptr, out_ptr, bmlocal710_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal710_tmp_bitoff);\
}

#define BM_HarqPerfComp_BurstsRx_POS_ALIGNED 8

// Alignment of HarqPerfComp_BurstsRx: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_BurstsRx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_BurstsRx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal711_my_ptr;\
	UINT bmlocal712_my_bitoff;\
	BM_HarqPerfComp_BurstsRx_GET_POS( base_ptr, bmlocal711_my_ptr, bmlocal712_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal711_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal711_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal711_my_ptr, bmlocal712_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_HarqPerfComp_BurstsRx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal713_my_ptr;\
	UINT bmlocal714_my_bitoff;\
	BM_HarqPerfComp_BurstsRx_GET_POS( base_ptr, bmlocal713_my_ptr, bmlocal714_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal713_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal713_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal713_my_ptr, bmlocal714_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// HarqPerfComp_BurstsRx: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_BurstsRx: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_BurstsRx: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_BurstsRx: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_BurstsRx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_BurstsRx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_BurstsRx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal715_out_val;\
	BM_HarqPerfComp_BurstsRx_GET( base_ptr, bmlocal715_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "BurstsRx", 16, (UINT)(bmlocal715_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_BurstsRx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_BurstsRx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_BurstsRx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal716_my_ptr;\
	UINT bmlocal717_my_bitoff;\
	BM_HarqPerfComp_BurstsRx_GET_POS( base_ptr, bmlocal716_my_ptr, bmlocal717_my_bitoff );\
	(*((UINT16*)bmlocal716_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal717_my_bitoff );\
}

// HarqPerfComp_BurstsRx: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_BurstsRx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal718_tmp_bits;\
	BM_HarqPerfComp_BurstsRx_GET_SIZE( base_ptr, out_bytes, bmlocal718_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal718_tmp_bits );\
}

#define BM_HarqPerfComp_BurstsRx_BYTES_SIZE 2

#define BM_HarqPerfComp_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal721_acc_bytes;\
	UINT bmlocal722_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal721_acc_bytes = 10;\
	bmlocal722_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal721_acc_bytes );\
	out_bitoff += bmlocal722_acc_bits;\
}

#define BM_HarqPerfComp_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal723_tmp_bitoff;\
	BM_HarqPerfComp_Reserved_GET_POS( base_ptr, out_ptr, bmlocal723_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal723_tmp_bitoff);\
}

#define BM_HarqPerfComp_Reserved_POS_ALIGNED 10

// Alignment of HarqPerfComp_Reserved: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_Reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_Reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal724_my_ptr;\
	UINT bmlocal725_my_bitoff;\
	BM_HarqPerfComp_Reserved_GET_POS( base_ptr, bmlocal724_my_ptr, bmlocal725_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal724_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal724_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal724_my_ptr, bmlocal725_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_HarqPerfComp_Reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal726_my_ptr;\
	UINT bmlocal727_my_bitoff;\
	BM_HarqPerfComp_Reserved_GET_POS( base_ptr, bmlocal726_my_ptr, bmlocal727_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal726_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal726_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal726_my_ptr, bmlocal727_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// HarqPerfComp_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal728_out_val;\
	BM_HarqPerfComp_Reserved_GET( base_ptr, bmlocal728_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 16, (UINT)(bmlocal728_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_Reserved_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal729_my_ptr;\
	UINT bmlocal730_my_bitoff;\
	BM_HarqPerfComp_Reserved_GET_POS( base_ptr, bmlocal729_my_ptr, bmlocal730_my_bitoff );\
	(*((UINT16*)bmlocal729_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal730_my_bitoff );\
}

// HarqPerfComp_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_Reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal731_tmp_bits;\
	BM_HarqPerfComp_Reserved_GET_SIZE( base_ptr, out_bytes, bmlocal731_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal731_tmp_bits );\
}

#define BM_HarqPerfComp_Reserved_BYTES_SIZE 2

#define BM_HarqPerfComp_RetransUL_Array_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal734_acc_bytes;\
	UINT bmlocal735_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal734_acc_bytes = 12;\
	bmlocal735_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal734_acc_bytes );\
	out_bitoff += bmlocal735_acc_bits;\
}

#define BM_HarqPerfComp_RetransUL_Array_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal736_tmp_bitoff;\
	BM_HarqPerfComp_RetransUL_Array_GET_POS( base_ptr, out_ptr, bmlocal736_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal736_tmp_bitoff);\
}

#define BM_HarqPerfComp_RetransUL_Array_POS_ALIGNED 12

// ARRAY: HarqPerfComp_RetransUL_Array
#define BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransUL_Array_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransUL_Array_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal737_out_ptr;\
	UINT bmlocal738_out_bitoff;\
	UINT bmlocal739_element_size_bytes;\
	UINT bmlocal740_element_size_bits;\
	BM_HarqPerfComp_RetransUL_Array_GET_POS( base_ptr, bmlocal737_out_ptr, bmlocal738_out_bitoff );\
	bmlocal739_element_size_bytes = 2;\
	bmlocal740_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal737_out_ptr) + (idx0) * bmlocal739_element_size_bytes );\
	out_bitoff = bmlocal738_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal740_element_size_bits );\
}

// COMPOSITE: Full name: 'HarqPerfComp_RetransUL_Array' Type: 'RetransComp', Inner, Non-instance, No bitoff root
#define BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal741_parent_out_ptr;\
	BM_HarqPerfComp_RetransUL_Array_GET_ELEMENT_POS( base_ptr, idx0, bmlocal741_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal741_parent_out_ptr;\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal742_tmp_bitoff;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS( base_ptr, idx0, out_ptr, bmlocal742_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal742_tmp_bitoff);\
}

// Alignment of HarqPerfComp_RetransUL_Array_Retrans: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_HarqPerfComp_RetransUL_Array_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal743_my_ptr;\
	UINT bmlocal744_my_bitoff;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal743_my_ptr, bmlocal744_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal743_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal743_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal743_my_ptr, bmlocal744_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal745_my_ptr;\
	UINT bmlocal746_my_bitoff;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal745_my_ptr, bmlocal746_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal745_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal745_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal745_my_ptr, bmlocal746_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// HarqPerfComp_RetransUL_Array_Retrans: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_RetransUL_Array_Retrans: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_RetransUL_Array_Retrans: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_RetransUL_Array_Retrans: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_RetransUL_Array_Retrans: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_RetransUL_Array_Retrans: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_RetransUL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal747_out_val;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET( base_ptr, idx0, bmlocal747_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Retrans", 16, (UINT)(bmlocal747_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransUL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal748_my_ptr;\
	UINT bmlocal749_my_bitoff;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal748_my_ptr, bmlocal749_my_bitoff );\
	(*((UINT16*)bmlocal748_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal749_my_bitoff );\
}

// HarqPerfComp_RetransUL_Array_Retrans: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_RetransUL_Array_Retrans_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal750_tmp_bits;\
	BM_HarqPerfComp_RetransUL_Array_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal750_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal750_tmp_bits );\
}

#define BM_HarqPerfComp_RetransUL_Array_Retrans_BYTES_SIZE 2

#define BM_HarqPerfComp_RetransUL_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal753_tmp_bits;\
	BM_HarqPerfComp_RetransUL_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal753_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal753_tmp_bits );\
}

#define BM_HarqPerfComp_RetransUL_Array_BYTES_CELL_SIZE 2

#define BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransUL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal754_dim_size0;\
	UINT bmlocal755_idx0;\
	bmlocal754_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RetransUL_Array", 1);\
	for( bmlocal755_idx0=0; bmlocal755_idx0<bmlocal754_dim_size0; bmlocal755_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal755_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH_IDX( base_ptr, bmlocal755_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransUL_Array_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_RetransUL_Array_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal756_tmp_bits;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, out_bytes, bmlocal756_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal756_tmp_bits );\
}

#define BM_HarqPerfComp_RetransUL_Array_BYTES_SIZE 32

#define BM_HarqPerfComp_RetransDL_Array_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal757_tmp_bytes = 0;\
	UINT bmlocal758_tmp_bits = 0;\
	UINT bmlocal759_acc_bytes;\
	UINT bmlocal760_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal759_acc_bytes = 12;\
	bmlocal760_acc_bits = 0;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, bmlocal757_tmp_bytes, bmlocal758_tmp_bits );\
	bmlocal759_acc_bytes += bmlocal757_tmp_bytes;\
	bmlocal760_acc_bits += bmlocal758_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal759_acc_bytes );\
	out_bitoff += bmlocal760_acc_bits;\
}

#define BM_HarqPerfComp_RetransDL_Array_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal761_tmp_bitoff;\
	BM_HarqPerfComp_RetransDL_Array_GET_POS( base_ptr, out_ptr, bmlocal761_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal761_tmp_bitoff);\
}

#define BM_HarqPerfComp_RetransDL_Array_POS_ALIGNED 44

// ARRAY: HarqPerfComp_RetransDL_Array
#define BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransDL_Array_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransDL_Array_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal762_out_ptr;\
	UINT bmlocal763_out_bitoff;\
	UINT bmlocal764_element_size_bytes;\
	UINT bmlocal765_element_size_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_POS( base_ptr, bmlocal762_out_ptr, bmlocal763_out_bitoff );\
	bmlocal764_element_size_bytes = 2;\
	bmlocal765_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal762_out_ptr) + (idx0) * bmlocal764_element_size_bytes );\
	out_bitoff = bmlocal763_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal765_element_size_bits );\
}

// COMPOSITE: Full name: 'HarqPerfComp_RetransDL_Array' Type: 'RetransComp', Inner, Non-instance, No bitoff root
#define BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal766_parent_out_ptr;\
	BM_HarqPerfComp_RetransDL_Array_GET_ELEMENT_POS( base_ptr, idx0, bmlocal766_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal766_parent_out_ptr;\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal767_tmp_bitoff;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS( base_ptr, idx0, out_ptr, bmlocal767_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal767_tmp_bitoff);\
}

// Alignment of HarqPerfComp_RetransDL_Array_Retrans: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_HarqPerfComp_RetransDL_Array_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal768_my_ptr;\
	UINT bmlocal769_my_bitoff;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal768_my_ptr, bmlocal769_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal768_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal768_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal768_my_ptr, bmlocal769_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal770_my_ptr;\
	UINT bmlocal771_my_bitoff;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal770_my_ptr, bmlocal771_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal770_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal770_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal770_my_ptr, bmlocal771_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// HarqPerfComp_RetransDL_Array_Retrans: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_RetransDL_Array_Retrans: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_RetransDL_Array_Retrans: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_RetransDL_Array_Retrans: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_RetransDL_Array_Retrans: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_RetransDL_Array_Retrans: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_RetransDL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal772_out_val;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET( base_ptr, idx0, bmlocal772_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Retrans", 16, (UINT)(bmlocal772_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransDL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal773_my_ptr;\
	UINT bmlocal774_my_bitoff;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET_POS( base_ptr, idx0, bmlocal773_my_ptr, bmlocal774_my_bitoff );\
	(*((UINT16*)bmlocal773_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal774_my_bitoff );\
}

// HarqPerfComp_RetransDL_Array_Retrans: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_RetransDL_Array_Retrans_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal775_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal775_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal775_tmp_bits );\
}

#define BM_HarqPerfComp_RetransDL_Array_Retrans_BYTES_SIZE 2

#define BM_HarqPerfComp_RetransDL_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal778_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal778_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal778_tmp_bits );\
}

#define BM_HarqPerfComp_RetransDL_Array_BYTES_CELL_SIZE 2

#define BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransDL_Array_Retrans_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal779_dim_size0;\
	UINT bmlocal780_idx0;\
	bmlocal779_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RetransDL_Array", 1);\
	for( bmlocal780_idx0=0; bmlocal780_idx0<bmlocal779_dim_size0; bmlocal780_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal780_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH_IDX( base_ptr, bmlocal780_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_RetransDL_Array_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_RetransDL_Array_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal781_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, out_bytes, bmlocal781_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal781_tmp_bits );\
}

#define BM_HarqPerfComp_RetransDL_Array_BYTES_SIZE 32

#define BM_HarqPerfComp_DropHarqBurstCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal782_tmp_bytes = 0;\
	UINT bmlocal783_tmp_bits = 0;\
	UINT bmlocal784_acc_bytes;\
	UINT bmlocal785_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal784_acc_bytes = 12;\
	bmlocal785_acc_bits = 0;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, bmlocal782_tmp_bytes, bmlocal783_tmp_bits );\
	bmlocal784_acc_bytes += bmlocal782_tmp_bytes;\
	bmlocal785_acc_bits += bmlocal783_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, bmlocal782_tmp_bytes, bmlocal783_tmp_bits );\
	bmlocal784_acc_bytes += bmlocal782_tmp_bytes;\
	bmlocal785_acc_bits += bmlocal783_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal784_acc_bytes );\
	out_bitoff += bmlocal785_acc_bits;\
}

#define BM_HarqPerfComp_DropHarqBurstCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal786_tmp_bitoff;\
	BM_HarqPerfComp_DropHarqBurstCount_GET_POS( base_ptr, out_ptr, bmlocal786_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal786_tmp_bitoff);\
}

#define BM_HarqPerfComp_DropHarqBurstCount_POS_ALIGNED 76

// Alignment of HarqPerfComp_DropHarqBurstCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_HarqPerfComp_DropHarqBurstCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_DropHarqBurstCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal787_my_ptr;\
	UINT bmlocal788_my_bitoff;\
	BM_HarqPerfComp_DropHarqBurstCount_GET_POS( base_ptr, bmlocal787_my_ptr, bmlocal788_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal787_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal787_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal787_my_ptr, bmlocal788_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_HarqPerfComp_DropHarqBurstCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal789_my_ptr;\
	UINT bmlocal790_my_bitoff;\
	BM_HarqPerfComp_DropHarqBurstCount_GET_POS( base_ptr, bmlocal789_my_ptr, bmlocal790_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal789_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal789_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal789_my_ptr, bmlocal790_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// HarqPerfComp_DropHarqBurstCount: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_DropHarqBurstCount: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_DropHarqBurstCount: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_DropHarqBurstCount: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_DropHarqBurstCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_DropHarqBurstCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_DropHarqBurstCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal791_out_val;\
	BM_HarqPerfComp_DropHarqBurstCount_GET( base_ptr, bmlocal791_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DropHarqBurstCount", 16, (UINT)(bmlocal791_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_DropHarqBurstCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_DropHarqBurstCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_DropHarqBurstCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal792_my_ptr;\
	UINT bmlocal793_my_bitoff;\
	BM_HarqPerfComp_DropHarqBurstCount_GET_POS( base_ptr, bmlocal792_my_ptr, bmlocal793_my_bitoff );\
	(*((UINT16*)bmlocal792_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal793_my_bitoff );\
}

// HarqPerfComp_DropHarqBurstCount: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_DropHarqBurstCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal794_tmp_bits;\
	BM_HarqPerfComp_DropHarqBurstCount_GET_SIZE( base_ptr, out_bytes, bmlocal794_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal794_tmp_bits );\
}

#define BM_HarqPerfComp_DropHarqBurstCount_BYTES_SIZE 2

#define BM_HarqPerfComp_AgingArrayUL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal795_tmp_bytes = 0;\
	UINT bmlocal796_tmp_bits = 0;\
	UINT bmlocal797_acc_bytes;\
	UINT bmlocal798_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal797_acc_bytes = 14;\
	bmlocal798_acc_bits = 0;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, bmlocal795_tmp_bytes, bmlocal796_tmp_bits );\
	bmlocal797_acc_bytes += bmlocal795_tmp_bytes;\
	bmlocal798_acc_bits += bmlocal796_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, bmlocal795_tmp_bytes, bmlocal796_tmp_bits );\
	bmlocal797_acc_bytes += bmlocal795_tmp_bytes;\
	bmlocal798_acc_bits += bmlocal796_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal797_acc_bytes );\
	out_bitoff += bmlocal798_acc_bits;\
}

#define BM_HarqPerfComp_AgingArrayUL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal799_tmp_bitoff;\
	BM_HarqPerfComp_AgingArrayUL_GET_POS( base_ptr, out_ptr, bmlocal799_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal799_tmp_bitoff);\
}

#define BM_HarqPerfComp_AgingArrayUL_POS_ALIGNED 78

// ARRAY: HarqPerfComp_AgingArrayUL
#define BM_HarqPerfComp_AgingArrayUL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayUL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayUL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal800_out_ptr;\
	UINT bmlocal801_out_bitoff;\
	UINT bmlocal802_element_size_bytes;\
	UINT bmlocal803_element_size_bits;\
	BM_HarqPerfComp_AgingArrayUL_GET_POS( base_ptr, bmlocal800_out_ptr, bmlocal801_out_bitoff );\
	bmlocal802_element_size_bytes = 2;\
	bmlocal803_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal800_out_ptr) + (idx0) * bmlocal802_element_size_bytes );\
	out_bitoff = bmlocal801_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal803_element_size_bits );\
}

// COMPOSITE: Full name: 'HarqPerfComp_AgingArrayUL' Type: 'RetransComp', Inner, Non-instance, No bitoff root
#define BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal804_parent_out_ptr;\
	BM_HarqPerfComp_AgingArrayUL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal804_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal804_parent_out_ptr;\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal805_tmp_bitoff;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS( base_ptr, idx0, out_ptr, bmlocal805_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal805_tmp_bitoff);\
}

// Alignment of HarqPerfComp_AgingArrayUL_Retrans: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_HarqPerfComp_AgingArrayUL_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal806_my_ptr;\
	UINT bmlocal807_my_bitoff;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS( base_ptr, idx0, bmlocal806_my_ptr, bmlocal807_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal806_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal806_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal806_my_ptr, bmlocal807_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal808_my_ptr;\
	UINT bmlocal809_my_bitoff;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS( base_ptr, idx0, bmlocal808_my_ptr, bmlocal809_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal808_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal808_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal808_my_ptr, bmlocal809_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// HarqPerfComp_AgingArrayUL_Retrans: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AgingArrayUL_Retrans: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AgingArrayUL_Retrans: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AgingArrayUL_Retrans: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AgingArrayUL_Retrans: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_AgingArrayUL_Retrans: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_AgingArrayUL_Retrans_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal810_out_val;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET( base_ptr, idx0, bmlocal810_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Retrans", 16, (UINT)(bmlocal810_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayUL_Retrans_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal811_my_ptr;\
	UINT bmlocal812_my_bitoff;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET_POS( base_ptr, idx0, bmlocal811_my_ptr, bmlocal812_my_bitoff );\
	(*((UINT16*)bmlocal811_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal812_my_bitoff );\
}

// HarqPerfComp_AgingArrayUL_Retrans: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_AgingArrayUL_Retrans_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal813_tmp_bits;\
	BM_HarqPerfComp_AgingArrayUL_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal813_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal813_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayUL_Retrans_BYTES_SIZE 2

#define BM_HarqPerfComp_AgingArrayUL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal816_tmp_bits;\
	BM_HarqPerfComp_AgingArrayUL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal816_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal816_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayUL_BYTES_CELL_SIZE 2

#define BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayUL_Retrans_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal817_dim_size0;\
	UINT bmlocal818_idx0;\
	bmlocal817_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AgingArrayUL", 1);\
	for( bmlocal818_idx0=0; bmlocal818_idx0<bmlocal817_dim_size0; bmlocal818_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal818_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH_IDX( base_ptr, bmlocal818_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayUL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_AgingArrayUL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal819_tmp_bits;\
	BM_HarqPerfComp_AgingArrayUL_GET_SIZE( base_ptr, out_bytes, bmlocal819_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal819_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayUL_BYTES_SIZE 32

#define BM_HarqPerfComp_AgingArrayDL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal820_tmp_bytes = 0;\
	UINT bmlocal821_tmp_bits = 0;\
	UINT bmlocal822_acc_bytes;\
	UINT bmlocal823_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal822_acc_bytes = 14;\
	bmlocal823_acc_bits = 0;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, bmlocal820_tmp_bytes, bmlocal821_tmp_bits );\
	bmlocal822_acc_bytes += bmlocal820_tmp_bytes;\
	bmlocal823_acc_bits += bmlocal821_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, bmlocal820_tmp_bytes, bmlocal821_tmp_bits );\
	bmlocal822_acc_bytes += bmlocal820_tmp_bytes;\
	bmlocal823_acc_bits += bmlocal821_tmp_bits;\
	BM_HarqPerfComp_AgingArrayUL_GET_SIZE( base_ptr, bmlocal820_tmp_bytes, bmlocal821_tmp_bits );\
	bmlocal822_acc_bytes += bmlocal820_tmp_bytes;\
	bmlocal823_acc_bits += bmlocal821_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal822_acc_bytes );\
	out_bitoff += bmlocal823_acc_bits;\
}

#define BM_HarqPerfComp_AgingArrayDL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal824_tmp_bitoff;\
	BM_HarqPerfComp_AgingArrayDL_GET_POS( base_ptr, out_ptr, bmlocal824_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal824_tmp_bitoff);\
}

#define BM_HarqPerfComp_AgingArrayDL_POS_ALIGNED 110

// ARRAY: HarqPerfComp_AgingArrayDL
#define BM_HarqPerfComp_AgingArrayDL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayDL_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 16;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayDL_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal825_out_ptr;\
	UINT bmlocal826_out_bitoff;\
	UINT bmlocal827_element_size_bytes;\
	UINT bmlocal828_element_size_bits;\
	BM_HarqPerfComp_AgingArrayDL_GET_POS( base_ptr, bmlocal825_out_ptr, bmlocal826_out_bitoff );\
	bmlocal827_element_size_bytes = 2;\
	bmlocal828_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal825_out_ptr) + (idx0) * bmlocal827_element_size_bytes );\
	out_bitoff = bmlocal826_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal828_element_size_bits );\
}

// COMPOSITE: Full name: 'HarqPerfComp_AgingArrayDL' Type: 'RetransComp', Inner, Non-instance, No bitoff root
#define BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal829_parent_out_ptr;\
	BM_HarqPerfComp_AgingArrayDL_GET_ELEMENT_POS( base_ptr, idx0, bmlocal829_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal829_parent_out_ptr;\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal830_tmp_bitoff;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS( base_ptr, idx0, out_ptr, bmlocal830_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal830_tmp_bitoff);\
}

// Alignment of HarqPerfComp_AgingArrayDL_Retrans: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_HarqPerfComp_AgingArrayDL_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal831_my_ptr;\
	UINT bmlocal832_my_bitoff;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS( base_ptr, idx0, bmlocal831_my_ptr, bmlocal832_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal831_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal831_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal831_my_ptr, bmlocal832_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal833_my_ptr;\
	UINT bmlocal834_my_bitoff;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS( base_ptr, idx0, bmlocal833_my_ptr, bmlocal834_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal833_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal833_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal833_my_ptr, bmlocal834_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// HarqPerfComp_AgingArrayDL_Retrans: IS_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AgingArrayDL_Retrans: SET_DEFAULT accessor is not defined because no default value was specified.
// HarqPerfComp_AgingArrayDL_Retrans: IS_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AgingArrayDL_Retrans: SET_RESET accessor is not defined because no reset value was specified.
// HarqPerfComp_AgingArrayDL_Retrans: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HarqPerfComp_AgingArrayDL_Retrans: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HarqPerfComp_AgingArrayDL_Retrans_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal835_out_val;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET( base_ptr, idx0, bmlocal835_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Retrans", 16, (UINT)(bmlocal835_out_val), "%d", 1);\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayDL_Retrans_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal836_my_ptr;\
	UINT bmlocal837_my_bitoff;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET_POS( base_ptr, idx0, bmlocal836_my_ptr, bmlocal837_my_bitoff );\
	(*((UINT16*)bmlocal836_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal837_my_bitoff );\
}

// HarqPerfComp_AgingArrayDL_Retrans: Validation accessors are not defined because validation condition was not specified.
#define BM_HarqPerfComp_AgingArrayDL_Retrans_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal838_tmp_bits;\
	BM_HarqPerfComp_AgingArrayDL_Retrans_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal838_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal838_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayDL_Retrans_BYTES_SIZE 2

#define BM_HarqPerfComp_AgingArrayDL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal841_tmp_bits;\
	BM_HarqPerfComp_AgingArrayDL_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal841_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal841_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayDL_BYTES_CELL_SIZE 2

#define BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayDL_Retrans_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal842_dim_size0;\
	UINT bmlocal843_idx0;\
	bmlocal842_dim_size0 = 16;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "AgingArrayDL", 1);\
	for( bmlocal843_idx0=0; bmlocal843_idx0<bmlocal842_dim_size0; bmlocal843_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal843_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH_IDX( base_ptr, bmlocal843_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_AgingArrayDL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_HarqPerfComp_AgingArrayDL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal844_tmp_bits;\
	BM_HarqPerfComp_AgingArrayDL_GET_SIZE( base_ptr, out_bytes, bmlocal844_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal844_tmp_bits );\
}

#define BM_HarqPerfComp_AgingArrayDL_BYTES_SIZE 32

#define BM_HarqPerfComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal845_tmp_bytes = 0;\
	UINT bmlocal846_tmp_bits = 0;\
	out_bytes = 14;\
	out_bits = 0;\
	BM_HarqPerfComp_RetransUL_Array_GET_SIZE( base_ptr, bmlocal845_tmp_bytes, bmlocal846_tmp_bits );\
	out_bytes += bmlocal845_tmp_bytes;\
	out_bits += bmlocal846_tmp_bits;\
	BM_HarqPerfComp_RetransDL_Array_GET_SIZE( base_ptr, bmlocal845_tmp_bytes, bmlocal846_tmp_bits );\
	out_bytes += bmlocal845_tmp_bytes;\
	out_bits += bmlocal846_tmp_bits;\
	BM_HarqPerfComp_AgingArrayUL_GET_SIZE( base_ptr, bmlocal845_tmp_bytes, bmlocal846_tmp_bits );\
	out_bytes += bmlocal845_tmp_bytes;\
	out_bits += bmlocal846_tmp_bits;\
	BM_HarqPerfComp_AgingArrayDL_GET_SIZE( base_ptr, bmlocal845_tmp_bytes, bmlocal846_tmp_bits );\
	out_bytes += bmlocal845_tmp_bytes;\
	out_bits += bmlocal846_tmp_bits;\
}

#define BM_HarqPerfComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal847_tmp_bits;\
	BM_HarqPerfComp_GET_SIZE( base_ptr, out_bytes, bmlocal847_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal847_tmp_bits );\
}

#define BM_HarqPerfComp_BYTES_SIZE 142

#define BM_HarqPerfComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HarqPerfComp", 1);\
	BM_HarqPerfComp_NacksSent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_AcksSent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_DuplicatesRx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_BurstsTx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_BurstsRx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_RetransUL_Array_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_RetransDL_Array_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_DropHarqBurstCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_AgingArrayUL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_HarqPerfComp_AgingArrayDL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_HarqPerfComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_HarqPerfComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 BurstStatComp[74];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BurstsComp _RxBurstsPerMcs_Array[14]; //DL: bursts per MCS (of DIUC)
	BMS_BurstsComp _TxBurstsPerMcs_Array[10]; //UL: bursts per MCS (of UIUC)
	UINT16 _UL_BurstDataZone : 16; //Assigned burst zone in the current time zone of UL (Last Burst)
	UINT16 _DL_BurstDataFecScheme : 16; //FEC (Forward Error Correction) information of Last burst data which is being used by DL
	UINT16 _UL_BurstDataFecScheme : 16; //FEC (Forward Error Correction) information of Last burst data which is being used by UL
	UINT16 _DL_BurstDataCid : 16; //Number of CIDs in user’s Last DL burst
	UINT16 _DL_BurstDataDiuc : 16; //Last burst's DIUC
	UINT16 _UL_BurstDataUiuc : 16; //Last burst's UIUC
	UINT16 _DL_BurstDataRepetition : 16; //Last DL burst's info - 0:No repetition; 1:Reprtition 2; 2:Repetition 4; 3:Repetition 6
	UINT16 _UL_BurstDataRepetition : 16; //Last UL burst's info - 0:No repetition; 1:Reprtition 2; 2:Repetition 4; 3:Repetition 6
	UINT16 _UL_TotalFec : 16; //UL: Total number of FEC Block.
	UINT16 _DL_TotalFec : 16; //DL: Total number of FEC Block.
	UINT16 _FecMode : 16; //Bit7: 0=DL 1=UL Bit0-1:Repetition code 0=No Repetition 1=Repetition 2 2=Repetition 4 3=Repetition 6
	UINT16 _FecTypeID : 16; //Ref. FEC Scheme Table
	UINT16 _FecNumberOfError : 16; //The number of erroneous FEC Blocks after FEC decoding This Field is valid when Mode #7=0(DL)
} BMS_BurstStatComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _FecNumberOfError : 16; //The number of erroneous FEC Blocks after FEC decoding This Field is valid when Mode #7=0(DL)
	UINT16 _FecTypeID : 16; //Ref. FEC Scheme Table
	UINT16 _FecMode : 16; //Bit7: 0=DL 1=UL Bit0-1:Repetition code 0=No Repetition 1=Repetition 2 2=Repetition 4 3=Repetition 6
	UINT16 _DL_TotalFec : 16; //DL: Total number of FEC Block.
	UINT16 _UL_TotalFec : 16; //UL: Total number of FEC Block.
	UINT16 _UL_BurstDataRepetition : 16; //Last UL burst's info - 0:No repetition; 1:Reprtition 2; 2:Repetition 4; 3:Repetition 6
	UINT16 _DL_BurstDataRepetition : 16; //Last DL burst's info - 0:No repetition; 1:Reprtition 2; 2:Repetition 4; 3:Repetition 6
	UINT16 _UL_BurstDataUiuc : 16; //Last burst's UIUC
	UINT16 _DL_BurstDataDiuc : 16; //Last burst's DIUC
	UINT16 _DL_BurstDataCid : 16; //Number of CIDs in user’s Last DL burst
	UINT16 _UL_BurstDataFecScheme : 16; //FEC (Forward Error Correction) information of Last burst data which is being used by UL
	UINT16 _DL_BurstDataFecScheme : 16; //FEC (Forward Error Correction) information of Last burst data which is being used by DL
	UINT16 _UL_BurstDataZone : 16; //Assigned burst zone in the current time zone of UL (Last Burst)
	BMS_BurstsComp _TxBurstsPerMcs_Array[10]; //UL: bursts per MCS (of UIUC)
	BMS_BurstsComp _RxBurstsPerMcs_Array[14]; //DL: bursts per MCS (of DIUC)
} BMS_BurstStatComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'BurstStatComp' Type: 'BurstStatComp', Top-level, Non-instance, No bitoff root
#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal848_tmp_bitoff;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_POS( base_ptr, out_ptr, bmlocal848_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal848_tmp_bitoff);\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_POS_ALIGNED 0

// ARRAY: BurstStatComp_RxBurstsPerMcs_Array
#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 14;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal849_out_ptr;\
	UINT bmlocal850_out_bitoff;\
	UINT bmlocal851_element_size_bytes;\
	UINT bmlocal852_element_size_bits;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_POS( base_ptr, bmlocal849_out_ptr, bmlocal850_out_bitoff );\
	bmlocal851_element_size_bytes = 2;\
	bmlocal852_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal849_out_ptr) + (idx0) * bmlocal851_element_size_bytes );\
	out_bitoff = bmlocal850_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal852_element_size_bits );\
}

// COMPOSITE: Full name: 'BurstStatComp_RxBurstsPerMcs_Array' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal853_parent_out_ptr;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_ELEMENT_POS( base_ptr, idx0, bmlocal853_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal853_parent_out_ptr;\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal854_tmp_bitoff;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal854_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal854_tmp_bitoff);\
}

// Alignment of BurstStatComp_RxBurstsPerMcs_Array_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal855_my_ptr;\
	UINT bmlocal856_my_bitoff;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal855_my_ptr, bmlocal856_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal855_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal855_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal855_my_ptr, bmlocal856_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal857_my_ptr;\
	UINT bmlocal858_my_bitoff;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal857_my_ptr, bmlocal858_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal857_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal857_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal857_my_ptr, bmlocal858_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// BurstStatComp_RxBurstsPerMcs_Array_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_RxBurstsPerMcs_Array_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_RxBurstsPerMcs_Array_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_RxBurstsPerMcs_Array_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_RxBurstsPerMcs_Array_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_RxBurstsPerMcs_Array_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal859_out_val;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET( base_ptr, idx0, bmlocal859_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal859_out_val), "%d", 1);\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal860_my_ptr;\
	UINT bmlocal861_my_bitoff;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal860_my_ptr, bmlocal861_my_bitoff );\
	(*((UINT16*)bmlocal860_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal861_my_bitoff );\
}

// BurstStatComp_RxBurstsPerMcs_Array_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal862_tmp_bits;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal862_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal862_tmp_bits );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_BYTES_SIZE 2

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal865_tmp_bits;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal865_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal865_tmp_bits );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_BYTES_CELL_SIZE 2

#define BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_RxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal866_dim_size0;\
	UINT bmlocal867_idx0;\
	bmlocal866_dim_size0 = 14;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "RxBurstsPerMcs_Array", 1);\
	for( bmlocal867_idx0=0; bmlocal867_idx0<bmlocal866_dim_size0; bmlocal867_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal867_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, bmlocal867_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal868_tmp_bits;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, out_bytes, bmlocal868_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal868_tmp_bits );\
}

#define BM_BurstStatComp_RxBurstsPerMcs_Array_BYTES_SIZE 28

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal869_tmp_bytes = 0;\
	UINT bmlocal870_tmp_bits = 0;\
	UINT bmlocal871_acc_bytes;\
	UINT bmlocal872_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal871_acc_bytes = 0;\
	bmlocal872_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal869_tmp_bytes, bmlocal870_tmp_bits );\
	bmlocal871_acc_bytes += bmlocal869_tmp_bytes;\
	bmlocal872_acc_bits += bmlocal870_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal871_acc_bytes );\
	out_bitoff += bmlocal872_acc_bits;\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal873_tmp_bitoff;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_POS( base_ptr, out_ptr, bmlocal873_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal873_tmp_bitoff);\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_POS_ALIGNED 28

// ARRAY: BurstStatComp_TxBurstsPerMcs_Array
#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 20;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 10;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal874_out_ptr;\
	UINT bmlocal875_out_bitoff;\
	UINT bmlocal876_element_size_bytes;\
	UINT bmlocal877_element_size_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_POS( base_ptr, bmlocal874_out_ptr, bmlocal875_out_bitoff );\
	bmlocal876_element_size_bytes = 2;\
	bmlocal877_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal874_out_ptr) + (idx0) * bmlocal876_element_size_bytes );\
	out_bitoff = bmlocal875_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal877_element_size_bits );\
}

// COMPOSITE: Full name: 'BurstStatComp_TxBurstsPerMcs_Array' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal878_parent_out_ptr;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_ELEMENT_POS( base_ptr, idx0, bmlocal878_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal878_parent_out_ptr;\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal879_tmp_bitoff;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal879_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal879_tmp_bitoff);\
}

// Alignment of BurstStatComp_TxBurstsPerMcs_Array_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal880_my_ptr;\
	UINT bmlocal881_my_bitoff;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal880_my_ptr, bmlocal881_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal880_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal880_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal880_my_ptr, bmlocal881_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal882_my_ptr;\
	UINT bmlocal883_my_bitoff;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal882_my_ptr, bmlocal883_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal882_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal882_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal882_my_ptr, bmlocal883_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// BurstStatComp_TxBurstsPerMcs_Array_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_TxBurstsPerMcs_Array_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_TxBurstsPerMcs_Array_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_TxBurstsPerMcs_Array_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_TxBurstsPerMcs_Array_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_TxBurstsPerMcs_Array_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal884_out_val;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET( base_ptr, idx0, bmlocal884_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal884_out_val), "%d", 1);\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal885_my_ptr;\
	UINT bmlocal886_my_bitoff;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_POS( base_ptr, idx0, bmlocal885_my_ptr, bmlocal886_my_bitoff );\
	(*((UINT16*)bmlocal885_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal886_my_bitoff );\
}

// BurstStatComp_TxBurstsPerMcs_Array_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal887_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal887_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal887_tmp_bits );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_BYTES_SIZE 2

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal890_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal890_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal890_tmp_bits );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_BYTES_CELL_SIZE 2

#define BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_TxBurstsPerMcs_Array_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal891_dim_size0;\
	UINT bmlocal892_idx0;\
	bmlocal891_dim_size0 = 10;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TxBurstsPerMcs_Array", 1);\
	for( bmlocal892_idx0=0; bmlocal892_idx0<bmlocal891_dim_size0; bmlocal892_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal892_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH_IDX( base_ptr, bmlocal892_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal893_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, out_bytes, bmlocal893_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal893_tmp_bits );\
}

#define BM_BurstStatComp_TxBurstsPerMcs_Array_BYTES_SIZE 20

#define BM_BurstStatComp_UL_BurstDataZone_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal894_tmp_bytes = 0;\
	UINT bmlocal895_tmp_bits = 0;\
	UINT bmlocal896_acc_bytes;\
	UINT bmlocal897_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal896_acc_bytes = 0;\
	bmlocal897_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal894_tmp_bytes, bmlocal895_tmp_bits );\
	bmlocal896_acc_bytes += bmlocal894_tmp_bytes;\
	bmlocal897_acc_bits += bmlocal895_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal894_tmp_bytes, bmlocal895_tmp_bits );\
	bmlocal896_acc_bytes += bmlocal894_tmp_bytes;\
	bmlocal897_acc_bits += bmlocal895_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal896_acc_bytes );\
	out_bitoff += bmlocal897_acc_bits;\
}

#define BM_BurstStatComp_UL_BurstDataZone_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal898_tmp_bitoff;\
	BM_BurstStatComp_UL_BurstDataZone_GET_POS( base_ptr, out_ptr, bmlocal898_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal898_tmp_bitoff);\
}

#define BM_BurstStatComp_UL_BurstDataZone_POS_ALIGNED 48

// Alignment of BurstStatComp_UL_BurstDataZone: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_UL_BurstDataZone_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_UL_BurstDataZone_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal899_my_ptr;\
	UINT bmlocal900_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataZone_GET_POS( base_ptr, bmlocal899_my_ptr, bmlocal900_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal899_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal899_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal899_my_ptr, bmlocal900_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_UL_BurstDataZone_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal901_my_ptr;\
	UINT bmlocal902_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataZone_GET_POS( base_ptr, bmlocal901_my_ptr, bmlocal902_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal901_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal901_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal901_my_ptr, bmlocal902_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_UL_BurstDataZone: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataZone: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataZone: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataZone: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataZone: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_UL_BurstDataZone: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_UL_BurstDataZone_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal903_out_val;\
	BM_BurstStatComp_UL_BurstDataZone_GET( base_ptr, bmlocal903_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_BurstDataZone", 16, (UINT)(bmlocal903_out_val), "%d", 1);\
}

#define BM_BurstStatComp_UL_BurstDataZone_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_UL_BurstDataZone_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_UL_BurstDataZone_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal904_my_ptr;\
	UINT bmlocal905_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataZone_GET_POS( base_ptr, bmlocal904_my_ptr, bmlocal905_my_bitoff );\
	(*((UINT16*)bmlocal904_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal905_my_bitoff );\
}

// BurstStatComp_UL_BurstDataZone: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_UL_BurstDataZone_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal906_tmp_bits;\
	BM_BurstStatComp_UL_BurstDataZone_GET_SIZE( base_ptr, out_bytes, bmlocal906_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal906_tmp_bits );\
}

#define BM_BurstStatComp_UL_BurstDataZone_BYTES_SIZE 2

#define BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal907_tmp_bytes = 0;\
	UINT bmlocal908_tmp_bits = 0;\
	UINT bmlocal909_acc_bytes;\
	UINT bmlocal910_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal909_acc_bytes = 2;\
	bmlocal910_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal907_tmp_bytes, bmlocal908_tmp_bits );\
	bmlocal909_acc_bytes += bmlocal907_tmp_bytes;\
	bmlocal910_acc_bits += bmlocal908_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal907_tmp_bytes, bmlocal908_tmp_bits );\
	bmlocal909_acc_bytes += bmlocal907_tmp_bytes;\
	bmlocal910_acc_bits += bmlocal908_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal909_acc_bytes );\
	out_bitoff += bmlocal910_acc_bits;\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal911_tmp_bitoff;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS( base_ptr, out_ptr, bmlocal911_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal911_tmp_bitoff);\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_POS_ALIGNED 50

// Alignment of BurstStatComp_DL_BurstDataFecScheme: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_DL_BurstDataFecScheme_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal912_my_ptr;\
	UINT bmlocal913_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal912_my_ptr, bmlocal913_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal912_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal912_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal912_my_ptr, bmlocal913_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal914_my_ptr;\
	UINT bmlocal915_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal914_my_ptr, bmlocal915_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal914_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal914_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal914_my_ptr, bmlocal915_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_DL_BurstDataFecScheme: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataFecScheme: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataFecScheme: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataFecScheme: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataFecScheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_DL_BurstDataFecScheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_DL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal916_out_val;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET( base_ptr, bmlocal916_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DL_BurstDataFecScheme", 16, (UINT)(bmlocal916_out_val), "%d", 1);\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal917_my_ptr;\
	UINT bmlocal918_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal917_my_ptr, bmlocal918_my_bitoff );\
	(*((UINT16*)bmlocal917_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal918_my_bitoff );\
}

// BurstStatComp_DL_BurstDataFecScheme: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_DL_BurstDataFecScheme_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal919_tmp_bits;\
	BM_BurstStatComp_DL_BurstDataFecScheme_GET_SIZE( base_ptr, out_bytes, bmlocal919_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal919_tmp_bits );\
}

#define BM_BurstStatComp_DL_BurstDataFecScheme_BYTES_SIZE 2

#define BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal920_tmp_bytes = 0;\
	UINT bmlocal921_tmp_bits = 0;\
	UINT bmlocal922_acc_bytes;\
	UINT bmlocal923_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal922_acc_bytes = 4;\
	bmlocal923_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal920_tmp_bytes, bmlocal921_tmp_bits );\
	bmlocal922_acc_bytes += bmlocal920_tmp_bytes;\
	bmlocal923_acc_bits += bmlocal921_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal920_tmp_bytes, bmlocal921_tmp_bits );\
	bmlocal922_acc_bytes += bmlocal920_tmp_bytes;\
	bmlocal923_acc_bits += bmlocal921_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal922_acc_bytes );\
	out_bitoff += bmlocal923_acc_bits;\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal924_tmp_bitoff;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS( base_ptr, out_ptr, bmlocal924_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal924_tmp_bitoff);\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_POS_ALIGNED 52

// Alignment of BurstStatComp_UL_BurstDataFecScheme: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_UL_BurstDataFecScheme_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal925_my_ptr;\
	UINT bmlocal926_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal925_my_ptr, bmlocal926_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal925_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal925_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal925_my_ptr, bmlocal926_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal927_my_ptr;\
	UINT bmlocal928_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal927_my_ptr, bmlocal928_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal927_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal927_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal927_my_ptr, bmlocal928_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_UL_BurstDataFecScheme: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataFecScheme: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataFecScheme: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataFecScheme: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataFecScheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_UL_BurstDataFecScheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_UL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal929_out_val;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET( base_ptr, bmlocal929_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_BurstDataFecScheme", 16, (UINT)(bmlocal929_out_val), "%d", 1);\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_UL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal930_my_ptr;\
	UINT bmlocal931_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET_POS( base_ptr, bmlocal930_my_ptr, bmlocal931_my_bitoff );\
	(*((UINT16*)bmlocal930_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal931_my_bitoff );\
}

// BurstStatComp_UL_BurstDataFecScheme: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_UL_BurstDataFecScheme_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal932_tmp_bits;\
	BM_BurstStatComp_UL_BurstDataFecScheme_GET_SIZE( base_ptr, out_bytes, bmlocal932_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal932_tmp_bits );\
}

#define BM_BurstStatComp_UL_BurstDataFecScheme_BYTES_SIZE 2

#define BM_BurstStatComp_DL_BurstDataCid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal933_tmp_bytes = 0;\
	UINT bmlocal934_tmp_bits = 0;\
	UINT bmlocal935_acc_bytes;\
	UINT bmlocal936_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal935_acc_bytes = 6;\
	bmlocal936_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal933_tmp_bytes, bmlocal934_tmp_bits );\
	bmlocal935_acc_bytes += bmlocal933_tmp_bytes;\
	bmlocal936_acc_bits += bmlocal934_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal933_tmp_bytes, bmlocal934_tmp_bits );\
	bmlocal935_acc_bytes += bmlocal933_tmp_bytes;\
	bmlocal936_acc_bits += bmlocal934_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal935_acc_bytes );\
	out_bitoff += bmlocal936_acc_bits;\
}

#define BM_BurstStatComp_DL_BurstDataCid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal937_tmp_bitoff;\
	BM_BurstStatComp_DL_BurstDataCid_GET_POS( base_ptr, out_ptr, bmlocal937_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal937_tmp_bitoff);\
}

#define BM_BurstStatComp_DL_BurstDataCid_POS_ALIGNED 54

// Alignment of BurstStatComp_DL_BurstDataCid: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_DL_BurstDataCid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DL_BurstDataCid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal938_my_ptr;\
	UINT bmlocal939_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataCid_GET_POS( base_ptr, bmlocal938_my_ptr, bmlocal939_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal938_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal938_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal938_my_ptr, bmlocal939_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_DL_BurstDataCid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal940_my_ptr;\
	UINT bmlocal941_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataCid_GET_POS( base_ptr, bmlocal940_my_ptr, bmlocal941_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal940_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal940_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal940_my_ptr, bmlocal941_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_DL_BurstDataCid: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataCid: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataCid: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataCid: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataCid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_DL_BurstDataCid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_DL_BurstDataCid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal942_out_val;\
	BM_BurstStatComp_DL_BurstDataCid_GET( base_ptr, bmlocal942_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DL_BurstDataCid", 16, (UINT)(bmlocal942_out_val), "%d", 1);\
}

#define BM_BurstStatComp_DL_BurstDataCid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DL_BurstDataCid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_DL_BurstDataCid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal943_my_ptr;\
	UINT bmlocal944_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataCid_GET_POS( base_ptr, bmlocal943_my_ptr, bmlocal944_my_bitoff );\
	(*((UINT16*)bmlocal943_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal944_my_bitoff );\
}

// BurstStatComp_DL_BurstDataCid: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_DL_BurstDataCid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal945_tmp_bits;\
	BM_BurstStatComp_DL_BurstDataCid_GET_SIZE( base_ptr, out_bytes, bmlocal945_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal945_tmp_bits );\
}

#define BM_BurstStatComp_DL_BurstDataCid_BYTES_SIZE 2

#define BM_BurstStatComp_DL_BurstDataDiuc_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal946_tmp_bytes = 0;\
	UINT bmlocal947_tmp_bits = 0;\
	UINT bmlocal948_acc_bytes;\
	UINT bmlocal949_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal948_acc_bytes = 8;\
	bmlocal949_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal946_tmp_bytes, bmlocal947_tmp_bits );\
	bmlocal948_acc_bytes += bmlocal946_tmp_bytes;\
	bmlocal949_acc_bits += bmlocal947_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal946_tmp_bytes, bmlocal947_tmp_bits );\
	bmlocal948_acc_bytes += bmlocal946_tmp_bytes;\
	bmlocal949_acc_bits += bmlocal947_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal948_acc_bytes );\
	out_bitoff += bmlocal949_acc_bits;\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal950_tmp_bitoff;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET_POS( base_ptr, out_ptr, bmlocal950_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal950_tmp_bitoff);\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_POS_ALIGNED 56

// Alignment of BurstStatComp_DL_BurstDataDiuc: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_DL_BurstDataDiuc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal951_my_ptr;\
	UINT bmlocal952_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET_POS( base_ptr, bmlocal951_my_ptr, bmlocal952_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal951_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal951_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal951_my_ptr, bmlocal952_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal953_my_ptr;\
	UINT bmlocal954_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET_POS( base_ptr, bmlocal953_my_ptr, bmlocal954_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal953_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal953_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal953_my_ptr, bmlocal954_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_DL_BurstDataDiuc: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataDiuc: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataDiuc: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataDiuc: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataDiuc: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_DL_BurstDataDiuc: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_DL_BurstDataDiuc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal955_out_val;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET( base_ptr, bmlocal955_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DL_BurstDataDiuc", 16, (UINT)(bmlocal955_out_val), "%d", 1);\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DL_BurstDataDiuc_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal956_my_ptr;\
	UINT bmlocal957_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET_POS( base_ptr, bmlocal956_my_ptr, bmlocal957_my_bitoff );\
	(*((UINT16*)bmlocal956_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal957_my_bitoff );\
}

// BurstStatComp_DL_BurstDataDiuc: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_DL_BurstDataDiuc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal958_tmp_bits;\
	BM_BurstStatComp_DL_BurstDataDiuc_GET_SIZE( base_ptr, out_bytes, bmlocal958_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal958_tmp_bits );\
}

#define BM_BurstStatComp_DL_BurstDataDiuc_BYTES_SIZE 2

#define BM_BurstStatComp_UL_BurstDataUiuc_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal959_tmp_bytes = 0;\
	UINT bmlocal960_tmp_bits = 0;\
	UINT bmlocal961_acc_bytes;\
	UINT bmlocal962_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal961_acc_bytes = 10;\
	bmlocal962_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal959_tmp_bytes, bmlocal960_tmp_bits );\
	bmlocal961_acc_bytes += bmlocal959_tmp_bytes;\
	bmlocal962_acc_bits += bmlocal960_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal959_tmp_bytes, bmlocal960_tmp_bits );\
	bmlocal961_acc_bytes += bmlocal959_tmp_bytes;\
	bmlocal962_acc_bits += bmlocal960_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal961_acc_bytes );\
	out_bitoff += bmlocal962_acc_bits;\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal963_tmp_bitoff;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET_POS( base_ptr, out_ptr, bmlocal963_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal963_tmp_bitoff);\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_POS_ALIGNED 58

// Alignment of BurstStatComp_UL_BurstDataUiuc: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_UL_BurstDataUiuc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal964_my_ptr;\
	UINT bmlocal965_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET_POS( base_ptr, bmlocal964_my_ptr, bmlocal965_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal964_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal964_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal964_my_ptr, bmlocal965_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal966_my_ptr;\
	UINT bmlocal967_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET_POS( base_ptr, bmlocal966_my_ptr, bmlocal967_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal966_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal966_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal966_my_ptr, bmlocal967_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_UL_BurstDataUiuc: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataUiuc: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataUiuc: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataUiuc: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataUiuc: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_UL_BurstDataUiuc: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_UL_BurstDataUiuc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal968_out_val;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET( base_ptr, bmlocal968_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_BurstDataUiuc", 16, (UINT)(bmlocal968_out_val), "%d", 1);\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_UL_BurstDataUiuc_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal969_my_ptr;\
	UINT bmlocal970_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET_POS( base_ptr, bmlocal969_my_ptr, bmlocal970_my_bitoff );\
	(*((UINT16*)bmlocal969_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal970_my_bitoff );\
}

// BurstStatComp_UL_BurstDataUiuc: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_UL_BurstDataUiuc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal971_tmp_bits;\
	BM_BurstStatComp_UL_BurstDataUiuc_GET_SIZE( base_ptr, out_bytes, bmlocal971_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal971_tmp_bits );\
}

#define BM_BurstStatComp_UL_BurstDataUiuc_BYTES_SIZE 2

#define BM_BurstStatComp_DL_BurstDataRepetition_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal972_tmp_bytes = 0;\
	UINT bmlocal973_tmp_bits = 0;\
	UINT bmlocal974_acc_bytes;\
	UINT bmlocal975_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal974_acc_bytes = 12;\
	bmlocal975_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal972_tmp_bytes, bmlocal973_tmp_bits );\
	bmlocal974_acc_bytes += bmlocal972_tmp_bytes;\
	bmlocal975_acc_bits += bmlocal973_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal972_tmp_bytes, bmlocal973_tmp_bits );\
	bmlocal974_acc_bytes += bmlocal972_tmp_bytes;\
	bmlocal975_acc_bits += bmlocal973_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal974_acc_bytes );\
	out_bitoff += bmlocal975_acc_bits;\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal976_tmp_bitoff;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET_POS( base_ptr, out_ptr, bmlocal976_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal976_tmp_bitoff);\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_POS_ALIGNED 60

// Alignment of BurstStatComp_DL_BurstDataRepetition: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_DL_BurstDataRepetition_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal977_my_ptr;\
	UINT bmlocal978_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET_POS( base_ptr, bmlocal977_my_ptr, bmlocal978_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal977_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal977_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal977_my_ptr, bmlocal978_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal979_my_ptr;\
	UINT bmlocal980_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET_POS( base_ptr, bmlocal979_my_ptr, bmlocal980_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal979_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal979_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal979_my_ptr, bmlocal980_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_DL_BurstDataRepetition: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataRepetition: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_BurstDataRepetition: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataRepetition: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_BurstDataRepetition: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_DL_BurstDataRepetition: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_DL_BurstDataRepetition_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal981_out_val;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET( base_ptr, bmlocal981_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DL_BurstDataRepetition", 16, (UINT)(bmlocal981_out_val), "%d", 1);\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DL_BurstDataRepetition_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal982_my_ptr;\
	UINT bmlocal983_my_bitoff;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET_POS( base_ptr, bmlocal982_my_ptr, bmlocal983_my_bitoff );\
	(*((UINT16*)bmlocal982_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal983_my_bitoff );\
}

// BurstStatComp_DL_BurstDataRepetition: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_DL_BurstDataRepetition_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal984_tmp_bits;\
	BM_BurstStatComp_DL_BurstDataRepetition_GET_SIZE( base_ptr, out_bytes, bmlocal984_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal984_tmp_bits );\
}

#define BM_BurstStatComp_DL_BurstDataRepetition_BYTES_SIZE 2

#define BM_BurstStatComp_UL_BurstDataRepetition_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal985_tmp_bytes = 0;\
	UINT bmlocal986_tmp_bits = 0;\
	UINT bmlocal987_acc_bytes;\
	UINT bmlocal988_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal987_acc_bytes = 14;\
	bmlocal988_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal985_tmp_bytes, bmlocal986_tmp_bits );\
	bmlocal987_acc_bytes += bmlocal985_tmp_bytes;\
	bmlocal988_acc_bits += bmlocal986_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal985_tmp_bytes, bmlocal986_tmp_bits );\
	bmlocal987_acc_bytes += bmlocal985_tmp_bytes;\
	bmlocal988_acc_bits += bmlocal986_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal987_acc_bytes );\
	out_bitoff += bmlocal988_acc_bits;\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal989_tmp_bitoff;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET_POS( base_ptr, out_ptr, bmlocal989_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal989_tmp_bitoff);\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_POS_ALIGNED 62

// Alignment of BurstStatComp_UL_BurstDataRepetition: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_UL_BurstDataRepetition_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal990_my_ptr;\
	UINT bmlocal991_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET_POS( base_ptr, bmlocal990_my_ptr, bmlocal991_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal990_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal990_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal990_my_ptr, bmlocal991_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal992_my_ptr;\
	UINT bmlocal993_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET_POS( base_ptr, bmlocal992_my_ptr, bmlocal993_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal992_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal992_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal992_my_ptr, bmlocal993_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_UL_BurstDataRepetition: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataRepetition: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_BurstDataRepetition: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataRepetition: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_BurstDataRepetition: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_UL_BurstDataRepetition: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_UL_BurstDataRepetition_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal994_out_val;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET( base_ptr, bmlocal994_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_BurstDataRepetition", 16, (UINT)(bmlocal994_out_val), "%d", 1);\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_UL_BurstDataRepetition_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal995_my_ptr;\
	UINT bmlocal996_my_bitoff;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET_POS( base_ptr, bmlocal995_my_ptr, bmlocal996_my_bitoff );\
	(*((UINT16*)bmlocal995_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal996_my_bitoff );\
}

// BurstStatComp_UL_BurstDataRepetition: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_UL_BurstDataRepetition_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal997_tmp_bits;\
	BM_BurstStatComp_UL_BurstDataRepetition_GET_SIZE( base_ptr, out_bytes, bmlocal997_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal997_tmp_bits );\
}

#define BM_BurstStatComp_UL_BurstDataRepetition_BYTES_SIZE 2

#define BM_BurstStatComp_UL_TotalFec_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal998_tmp_bytes = 0;\
	UINT bmlocal999_tmp_bits = 0;\
	UINT bmlocal1000_acc_bytes;\
	UINT bmlocal1001_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1000_acc_bytes = 16;\
	bmlocal1001_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal998_tmp_bytes, bmlocal999_tmp_bits );\
	bmlocal1000_acc_bytes += bmlocal998_tmp_bytes;\
	bmlocal1001_acc_bits += bmlocal999_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal998_tmp_bytes, bmlocal999_tmp_bits );\
	bmlocal1000_acc_bytes += bmlocal998_tmp_bytes;\
	bmlocal1001_acc_bits += bmlocal999_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1000_acc_bytes );\
	out_bitoff += bmlocal1001_acc_bits;\
}

#define BM_BurstStatComp_UL_TotalFec_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1002_tmp_bitoff;\
	BM_BurstStatComp_UL_TotalFec_GET_POS( base_ptr, out_ptr, bmlocal1002_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1002_tmp_bitoff);\
}

#define BM_BurstStatComp_UL_TotalFec_POS_ALIGNED 64

// Alignment of BurstStatComp_UL_TotalFec: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_UL_TotalFec_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_UL_TotalFec_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1003_my_ptr;\
	UINT bmlocal1004_my_bitoff;\
	BM_BurstStatComp_UL_TotalFec_GET_POS( base_ptr, bmlocal1003_my_ptr, bmlocal1004_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1003_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1003_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1003_my_ptr, bmlocal1004_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_UL_TotalFec_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1005_my_ptr;\
	UINT bmlocal1006_my_bitoff;\
	BM_BurstStatComp_UL_TotalFec_GET_POS( base_ptr, bmlocal1005_my_ptr, bmlocal1006_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1005_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1005_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1005_my_ptr, bmlocal1006_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_UL_TotalFec: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_TotalFec: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_UL_TotalFec: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_TotalFec: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_UL_TotalFec: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_UL_TotalFec: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_UL_TotalFec_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1007_out_val;\
	BM_BurstStatComp_UL_TotalFec_GET( base_ptr, bmlocal1007_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "UL_TotalFec", 16, (UINT)(bmlocal1007_out_val), "%d", 1);\
}

#define BM_BurstStatComp_UL_TotalFec_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_UL_TotalFec_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_UL_TotalFec_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1008_my_ptr;\
	UINT bmlocal1009_my_bitoff;\
	BM_BurstStatComp_UL_TotalFec_GET_POS( base_ptr, bmlocal1008_my_ptr, bmlocal1009_my_bitoff );\
	(*((UINT16*)bmlocal1008_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1009_my_bitoff );\
}

// BurstStatComp_UL_TotalFec: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_UL_TotalFec_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1010_tmp_bits;\
	BM_BurstStatComp_UL_TotalFec_GET_SIZE( base_ptr, out_bytes, bmlocal1010_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1010_tmp_bits );\
}

#define BM_BurstStatComp_UL_TotalFec_BYTES_SIZE 2

#define BM_BurstStatComp_DL_TotalFec_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1011_tmp_bytes = 0;\
	UINT bmlocal1012_tmp_bits = 0;\
	UINT bmlocal1013_acc_bytes;\
	UINT bmlocal1014_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1013_acc_bytes = 18;\
	bmlocal1014_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1011_tmp_bytes, bmlocal1012_tmp_bits );\
	bmlocal1013_acc_bytes += bmlocal1011_tmp_bytes;\
	bmlocal1014_acc_bits += bmlocal1012_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1011_tmp_bytes, bmlocal1012_tmp_bits );\
	bmlocal1013_acc_bytes += bmlocal1011_tmp_bytes;\
	bmlocal1014_acc_bits += bmlocal1012_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1013_acc_bytes );\
	out_bitoff += bmlocal1014_acc_bits;\
}

#define BM_BurstStatComp_DL_TotalFec_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1015_tmp_bitoff;\
	BM_BurstStatComp_DL_TotalFec_GET_POS( base_ptr, out_ptr, bmlocal1015_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1015_tmp_bitoff);\
}

#define BM_BurstStatComp_DL_TotalFec_POS_ALIGNED 66

// Alignment of BurstStatComp_DL_TotalFec: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_DL_TotalFec_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DL_TotalFec_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1016_my_ptr;\
	UINT bmlocal1017_my_bitoff;\
	BM_BurstStatComp_DL_TotalFec_GET_POS( base_ptr, bmlocal1016_my_ptr, bmlocal1017_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1016_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1016_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1016_my_ptr, bmlocal1017_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_DL_TotalFec_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1018_my_ptr;\
	UINT bmlocal1019_my_bitoff;\
	BM_BurstStatComp_DL_TotalFec_GET_POS( base_ptr, bmlocal1018_my_ptr, bmlocal1019_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1018_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1018_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1018_my_ptr, bmlocal1019_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_DL_TotalFec: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_TotalFec: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_DL_TotalFec: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_TotalFec: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_DL_TotalFec: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_DL_TotalFec: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_DL_TotalFec_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1020_out_val;\
	BM_BurstStatComp_DL_TotalFec_GET( base_ptr, bmlocal1020_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "DL_TotalFec", 16, (UINT)(bmlocal1020_out_val), "%d", 1);\
}

#define BM_BurstStatComp_DL_TotalFec_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DL_TotalFec_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_DL_TotalFec_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1021_my_ptr;\
	UINT bmlocal1022_my_bitoff;\
	BM_BurstStatComp_DL_TotalFec_GET_POS( base_ptr, bmlocal1021_my_ptr, bmlocal1022_my_bitoff );\
	(*((UINT16*)bmlocal1021_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1022_my_bitoff );\
}

// BurstStatComp_DL_TotalFec: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_DL_TotalFec_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1023_tmp_bits;\
	BM_BurstStatComp_DL_TotalFec_GET_SIZE( base_ptr, out_bytes, bmlocal1023_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1023_tmp_bits );\
}

#define BM_BurstStatComp_DL_TotalFec_BYTES_SIZE 2

#define BM_BurstStatComp_FecMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1024_tmp_bytes = 0;\
	UINT bmlocal1025_tmp_bits = 0;\
	UINT bmlocal1026_acc_bytes;\
	UINT bmlocal1027_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1026_acc_bytes = 20;\
	bmlocal1027_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1024_tmp_bytes, bmlocal1025_tmp_bits );\
	bmlocal1026_acc_bytes += bmlocal1024_tmp_bytes;\
	bmlocal1027_acc_bits += bmlocal1025_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1024_tmp_bytes, bmlocal1025_tmp_bits );\
	bmlocal1026_acc_bytes += bmlocal1024_tmp_bytes;\
	bmlocal1027_acc_bits += bmlocal1025_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1026_acc_bytes );\
	out_bitoff += bmlocal1027_acc_bits;\
}

#define BM_BurstStatComp_FecMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1028_tmp_bitoff;\
	BM_BurstStatComp_FecMode_GET_POS( base_ptr, out_ptr, bmlocal1028_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1028_tmp_bitoff);\
}

#define BM_BurstStatComp_FecMode_POS_ALIGNED 68

// Alignment of BurstStatComp_FecMode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_FecMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_FecMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1029_my_ptr;\
	UINT bmlocal1030_my_bitoff;\
	BM_BurstStatComp_FecMode_GET_POS( base_ptr, bmlocal1029_my_ptr, bmlocal1030_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1029_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1029_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1029_my_ptr, bmlocal1030_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_FecMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1031_my_ptr;\
	UINT bmlocal1032_my_bitoff;\
	BM_BurstStatComp_FecMode_GET_POS( base_ptr, bmlocal1031_my_ptr, bmlocal1032_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1031_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1031_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1031_my_ptr, bmlocal1032_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_FecMode: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecMode: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecMode: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecMode: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_FecMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_FecMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1033_out_val;\
	BM_BurstStatComp_FecMode_GET( base_ptr, bmlocal1033_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FecMode", 16, (UINT)(bmlocal1033_out_val), "%d", 1);\
}

#define BM_BurstStatComp_FecMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_FecMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_FecMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1034_my_ptr;\
	UINT bmlocal1035_my_bitoff;\
	BM_BurstStatComp_FecMode_GET_POS( base_ptr, bmlocal1034_my_ptr, bmlocal1035_my_bitoff );\
	(*((UINT16*)bmlocal1034_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1035_my_bitoff );\
}

// BurstStatComp_FecMode: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_FecMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1036_tmp_bits;\
	BM_BurstStatComp_FecMode_GET_SIZE( base_ptr, out_bytes, bmlocal1036_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1036_tmp_bits );\
}

#define BM_BurstStatComp_FecMode_BYTES_SIZE 2

#define BM_BurstStatComp_FecTypeID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1037_tmp_bytes = 0;\
	UINT bmlocal1038_tmp_bits = 0;\
	UINT bmlocal1039_acc_bytes;\
	UINT bmlocal1040_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1039_acc_bytes = 22;\
	bmlocal1040_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1037_tmp_bytes, bmlocal1038_tmp_bits );\
	bmlocal1039_acc_bytes += bmlocal1037_tmp_bytes;\
	bmlocal1040_acc_bits += bmlocal1038_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1037_tmp_bytes, bmlocal1038_tmp_bits );\
	bmlocal1039_acc_bytes += bmlocal1037_tmp_bytes;\
	bmlocal1040_acc_bits += bmlocal1038_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1039_acc_bytes );\
	out_bitoff += bmlocal1040_acc_bits;\
}

#define BM_BurstStatComp_FecTypeID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1041_tmp_bitoff;\
	BM_BurstStatComp_FecTypeID_GET_POS( base_ptr, out_ptr, bmlocal1041_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1041_tmp_bitoff);\
}

#define BM_BurstStatComp_FecTypeID_POS_ALIGNED 70

// Alignment of BurstStatComp_FecTypeID: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_FecTypeID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_FecTypeID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1042_my_ptr;\
	UINT bmlocal1043_my_bitoff;\
	BM_BurstStatComp_FecTypeID_GET_POS( base_ptr, bmlocal1042_my_ptr, bmlocal1043_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1042_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1042_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1042_my_ptr, bmlocal1043_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_BurstStatComp_FecTypeID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1044_my_ptr;\
	UINT bmlocal1045_my_bitoff;\
	BM_BurstStatComp_FecTypeID_GET_POS( base_ptr, bmlocal1044_my_ptr, bmlocal1045_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1044_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1044_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1044_my_ptr, bmlocal1045_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// BurstStatComp_FecTypeID: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecTypeID: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecTypeID: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecTypeID: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecTypeID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_FecTypeID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_FecTypeID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1046_out_val;\
	BM_BurstStatComp_FecTypeID_GET( base_ptr, bmlocal1046_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FecTypeID", 16, (UINT)(bmlocal1046_out_val), "%d", 1);\
}

#define BM_BurstStatComp_FecTypeID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_FecTypeID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_FecTypeID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1047_my_ptr;\
	UINT bmlocal1048_my_bitoff;\
	BM_BurstStatComp_FecTypeID_GET_POS( base_ptr, bmlocal1047_my_ptr, bmlocal1048_my_bitoff );\
	(*((UINT16*)bmlocal1047_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1048_my_bitoff );\
}

// BurstStatComp_FecTypeID: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_FecTypeID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1049_tmp_bits;\
	BM_BurstStatComp_FecTypeID_GET_SIZE( base_ptr, out_bytes, bmlocal1049_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1049_tmp_bits );\
}

#define BM_BurstStatComp_FecTypeID_BYTES_SIZE 2

#define BM_BurstStatComp_FecNumberOfError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1050_tmp_bytes = 0;\
	UINT bmlocal1051_tmp_bits = 0;\
	UINT bmlocal1052_acc_bytes;\
	UINT bmlocal1053_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1052_acc_bytes = 24;\
	bmlocal1053_acc_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1050_tmp_bytes, bmlocal1051_tmp_bits );\
	bmlocal1052_acc_bytes += bmlocal1050_tmp_bytes;\
	bmlocal1053_acc_bits += bmlocal1051_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1050_tmp_bytes, bmlocal1051_tmp_bits );\
	bmlocal1052_acc_bytes += bmlocal1050_tmp_bytes;\
	bmlocal1053_acc_bits += bmlocal1051_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1052_acc_bytes );\
	out_bitoff += bmlocal1053_acc_bits;\
}

#define BM_BurstStatComp_FecNumberOfError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1054_tmp_bitoff;\
	BM_BurstStatComp_FecNumberOfError_GET_POS( base_ptr, out_ptr, bmlocal1054_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1054_tmp_bitoff);\
}

#define BM_BurstStatComp_FecNumberOfError_POS_ALIGNED 72

// Alignment of BurstStatComp_FecNumberOfError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_BurstStatComp_FecNumberOfError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_FecNumberOfError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1055_my_ptr;\
	UINT bmlocal1056_my_bitoff;\
	BM_BurstStatComp_FecNumberOfError_GET_POS( base_ptr, bmlocal1055_my_ptr, bmlocal1056_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1055_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1055_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1055_my_ptr, bmlocal1056_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_BurstStatComp_FecNumberOfError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1057_my_ptr;\
	UINT bmlocal1058_my_bitoff;\
	BM_BurstStatComp_FecNumberOfError_GET_POS( base_ptr, bmlocal1057_my_ptr, bmlocal1058_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1057_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1057_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1057_my_ptr, bmlocal1058_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// BurstStatComp_FecNumberOfError: IS_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecNumberOfError: SET_DEFAULT accessor is not defined because no default value was specified.
// BurstStatComp_FecNumberOfError: IS_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecNumberOfError: SET_RESET accessor is not defined because no reset value was specified.
// BurstStatComp_FecNumberOfError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BurstStatComp_FecNumberOfError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BurstStatComp_FecNumberOfError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1059_out_val;\
	BM_BurstStatComp_FecNumberOfError_GET( base_ptr, bmlocal1059_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FecNumberOfError", 16, (UINT)(bmlocal1059_out_val), "%d", 1);\
}

#define BM_BurstStatComp_FecNumberOfError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_FecNumberOfError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_BurstStatComp_FecNumberOfError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1060_my_ptr;\
	UINT bmlocal1061_my_bitoff;\
	BM_BurstStatComp_FecNumberOfError_GET_POS( base_ptr, bmlocal1060_my_ptr, bmlocal1061_my_bitoff );\
	(*((UINT16*)bmlocal1060_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1061_my_bitoff );\
}

// BurstStatComp_FecNumberOfError: Validation accessors are not defined because validation condition was not specified.
#define BM_BurstStatComp_FecNumberOfError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1062_tmp_bits;\
	BM_BurstStatComp_FecNumberOfError_GET_SIZE( base_ptr, out_bytes, bmlocal1062_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1062_tmp_bits );\
}

#define BM_BurstStatComp_FecNumberOfError_BYTES_SIZE 2

#define BM_BurstStatComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal1063_tmp_bytes = 0;\
	UINT bmlocal1064_tmp_bits = 0;\
	out_bytes = 26;\
	out_bits = 0;\
	BM_BurstStatComp_RxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1063_tmp_bytes, bmlocal1064_tmp_bits );\
	out_bytes += bmlocal1063_tmp_bytes;\
	out_bits += bmlocal1064_tmp_bits;\
	BM_BurstStatComp_TxBurstsPerMcs_Array_GET_SIZE( base_ptr, bmlocal1063_tmp_bytes, bmlocal1064_tmp_bits );\
	out_bytes += bmlocal1063_tmp_bytes;\
	out_bits += bmlocal1064_tmp_bits;\
}

#define BM_BurstStatComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1065_tmp_bits;\
	BM_BurstStatComp_GET_SIZE( base_ptr, out_bytes, bmlocal1065_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1065_tmp_bits );\
}

#define BM_BurstStatComp_BYTES_SIZE 74

#define BM_BurstStatComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BurstStatComp", 1);\
	BM_BurstStatComp_RxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_TxBurstsPerMcs_Array_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_UL_BurstDataZone_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_DL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_UL_BurstDataFecScheme_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_DL_BurstDataCid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_DL_BurstDataDiuc_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_UL_BurstDataUiuc_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_DL_BurstDataRepetition_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_UL_BurstDataRepetition_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_UL_TotalFec_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_DL_TotalFec_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_FecMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_FecTypeID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_BurstStatComp_FecNumberOfError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_BurstStatComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_BurstStatComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 CdmaTxAttribComp[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _FrameContainsCdmaTx : 16; //0 if the UL frame doesnt contain a CDMA Tx, 1 if it does
	UINT16 _FrameRefLow : 16; //Reference frame number that contains the CDMA transmission
	UINT16 _SymbolsRef : 16; //symbols reference
	UINT16 _SubChRef : 16; //Subchannel reference
	UINT16 _RangingCode : 16; //ranging code
	UINT16 _Reserved : 16; //reserved
} BMS_CdmaTxAttribComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Reserved : 16; //reserved
	UINT16 _RangingCode : 16; //ranging code
	UINT16 _SubChRef : 16; //Subchannel reference
	UINT16 _SymbolsRef : 16; //symbols reference
	UINT16 _FrameRefLow : 16; //Reference frame number that contains the CDMA transmission
	UINT16 _FrameContainsCdmaTx : 16; //0 if the UL frame doesnt contain a CDMA Tx, 1 if it does
} BMS_CdmaTxAttribComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'CdmaTxAttribComp' Type: 'CdmaTxAttribComp', Top-level, Non-instance, No bitoff root
#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1066_tmp_bitoff;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS( base_ptr, out_ptr, bmlocal1066_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1066_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_POS_ALIGNED 0

// Alignment of CdmaTxAttribComp_FrameContainsCdmaTx: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1067_my_ptr;\
	UINT bmlocal1068_my_bitoff;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS( base_ptr, bmlocal1067_my_ptr, bmlocal1068_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1067_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1067_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1067_my_ptr, bmlocal1068_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1069_my_ptr;\
	UINT bmlocal1070_my_bitoff;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS( base_ptr, bmlocal1069_my_ptr, bmlocal1070_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1069_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1069_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1069_my_ptr, bmlocal1070_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// CdmaTxAttribComp_FrameContainsCdmaTx: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_FrameContainsCdmaTx: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_FrameContainsCdmaTx: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_FrameContainsCdmaTx: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_FrameContainsCdmaTx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_FrameContainsCdmaTx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1071_out_val;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET( base_ptr, bmlocal1071_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameContainsCdmaTx", 16, (UINT)(bmlocal1071_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1072_my_ptr;\
	UINT bmlocal1073_my_bitoff;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_POS( base_ptr, bmlocal1072_my_ptr, bmlocal1073_my_bitoff );\
	(*((UINT16*)bmlocal1072_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1073_my_bitoff );\
}

// CdmaTxAttribComp_FrameContainsCdmaTx: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1074_tmp_bits;\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_GET_SIZE( base_ptr, out_bytes, bmlocal1074_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1074_tmp_bits );\
}

#define BM_CdmaTxAttribComp_FrameContainsCdmaTx_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_FrameRefLow_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1077_acc_bytes;\
	UINT bmlocal1078_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1077_acc_bytes = 2;\
	bmlocal1078_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1077_acc_bytes );\
	out_bitoff += bmlocal1078_acc_bits;\
}

#define BM_CdmaTxAttribComp_FrameRefLow_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1079_tmp_bitoff;\
	BM_CdmaTxAttribComp_FrameRefLow_GET_POS( base_ptr, out_ptr, bmlocal1079_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1079_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_FrameRefLow_POS_ALIGNED 2

// Alignment of CdmaTxAttribComp_FrameRefLow: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_FrameRefLow_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_FrameRefLow_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1080_my_ptr;\
	UINT bmlocal1081_my_bitoff;\
	BM_CdmaTxAttribComp_FrameRefLow_GET_POS( base_ptr, bmlocal1080_my_ptr, bmlocal1081_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1080_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1080_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1080_my_ptr, bmlocal1081_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CdmaTxAttribComp_FrameRefLow_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1082_my_ptr;\
	UINT bmlocal1083_my_bitoff;\
	BM_CdmaTxAttribComp_FrameRefLow_GET_POS( base_ptr, bmlocal1082_my_ptr, bmlocal1083_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1082_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1082_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1082_my_ptr, bmlocal1083_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// CdmaTxAttribComp_FrameRefLow: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_FrameRefLow: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_FrameRefLow: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_FrameRefLow: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_FrameRefLow: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_FrameRefLow: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_FrameRefLow_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1084_out_val;\
	BM_CdmaTxAttribComp_FrameRefLow_GET( base_ptr, bmlocal1084_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrameRefLow", 16, (UINT)(bmlocal1084_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_FrameRefLow_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_FrameRefLow_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_FrameRefLow_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1085_my_ptr;\
	UINT bmlocal1086_my_bitoff;\
	BM_CdmaTxAttribComp_FrameRefLow_GET_POS( base_ptr, bmlocal1085_my_ptr, bmlocal1086_my_bitoff );\
	(*((UINT16*)bmlocal1085_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1086_my_bitoff );\
}

// CdmaTxAttribComp_FrameRefLow: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_FrameRefLow_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1087_tmp_bits;\
	BM_CdmaTxAttribComp_FrameRefLow_GET_SIZE( base_ptr, out_bytes, bmlocal1087_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1087_tmp_bits );\
}

#define BM_CdmaTxAttribComp_FrameRefLow_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_SymbolsRef_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1090_acc_bytes;\
	UINT bmlocal1091_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1090_acc_bytes = 4;\
	bmlocal1091_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1090_acc_bytes );\
	out_bitoff += bmlocal1091_acc_bits;\
}

#define BM_CdmaTxAttribComp_SymbolsRef_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1092_tmp_bitoff;\
	BM_CdmaTxAttribComp_SymbolsRef_GET_POS( base_ptr, out_ptr, bmlocal1092_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1092_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_SymbolsRef_POS_ALIGNED 4

// Alignment of CdmaTxAttribComp_SymbolsRef: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_SymbolsRef_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_SymbolsRef_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1093_my_ptr;\
	UINT bmlocal1094_my_bitoff;\
	BM_CdmaTxAttribComp_SymbolsRef_GET_POS( base_ptr, bmlocal1093_my_ptr, bmlocal1094_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1093_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1093_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1093_my_ptr, bmlocal1094_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_CdmaTxAttribComp_SymbolsRef_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1095_my_ptr;\
	UINT bmlocal1096_my_bitoff;\
	BM_CdmaTxAttribComp_SymbolsRef_GET_POS( base_ptr, bmlocal1095_my_ptr, bmlocal1096_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1095_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1095_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1095_my_ptr, bmlocal1096_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// CdmaTxAttribComp_SymbolsRef: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_SymbolsRef: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_SymbolsRef: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_SymbolsRef: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_SymbolsRef: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_SymbolsRef: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_SymbolsRef_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1097_out_val;\
	BM_CdmaTxAttribComp_SymbolsRef_GET( base_ptr, bmlocal1097_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "SymbolsRef", 16, (UINT)(bmlocal1097_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_SymbolsRef_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_SymbolsRef_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_SymbolsRef_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1098_my_ptr;\
	UINT bmlocal1099_my_bitoff;\
	BM_CdmaTxAttribComp_SymbolsRef_GET_POS( base_ptr, bmlocal1098_my_ptr, bmlocal1099_my_bitoff );\
	(*((UINT16*)bmlocal1098_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1099_my_bitoff );\
}

// CdmaTxAttribComp_SymbolsRef: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_SymbolsRef_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1100_tmp_bits;\
	BM_CdmaTxAttribComp_SymbolsRef_GET_SIZE( base_ptr, out_bytes, bmlocal1100_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1100_tmp_bits );\
}

#define BM_CdmaTxAttribComp_SymbolsRef_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_SubChRef_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1103_acc_bytes;\
	UINT bmlocal1104_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1103_acc_bytes = 6;\
	bmlocal1104_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1103_acc_bytes );\
	out_bitoff += bmlocal1104_acc_bits;\
}

#define BM_CdmaTxAttribComp_SubChRef_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1105_tmp_bitoff;\
	BM_CdmaTxAttribComp_SubChRef_GET_POS( base_ptr, out_ptr, bmlocal1105_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1105_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_SubChRef_POS_ALIGNED 6

// Alignment of CdmaTxAttribComp_SubChRef: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_SubChRef_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_SubChRef_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1106_my_ptr;\
	UINT bmlocal1107_my_bitoff;\
	BM_CdmaTxAttribComp_SubChRef_GET_POS( base_ptr, bmlocal1106_my_ptr, bmlocal1107_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1106_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1106_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1106_my_ptr, bmlocal1107_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CdmaTxAttribComp_SubChRef_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1108_my_ptr;\
	UINT bmlocal1109_my_bitoff;\
	BM_CdmaTxAttribComp_SubChRef_GET_POS( base_ptr, bmlocal1108_my_ptr, bmlocal1109_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1108_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1108_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1108_my_ptr, bmlocal1109_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// CdmaTxAttribComp_SubChRef: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_SubChRef: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_SubChRef: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_SubChRef: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_SubChRef: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_SubChRef: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_SubChRef_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1110_out_val;\
	BM_CdmaTxAttribComp_SubChRef_GET( base_ptr, bmlocal1110_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "SubChRef", 16, (UINT)(bmlocal1110_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_SubChRef_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_SubChRef_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_SubChRef_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1111_my_ptr;\
	UINT bmlocal1112_my_bitoff;\
	BM_CdmaTxAttribComp_SubChRef_GET_POS( base_ptr, bmlocal1111_my_ptr, bmlocal1112_my_bitoff );\
	(*((UINT16*)bmlocal1111_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1112_my_bitoff );\
}

// CdmaTxAttribComp_SubChRef: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_SubChRef_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1113_tmp_bits;\
	BM_CdmaTxAttribComp_SubChRef_GET_SIZE( base_ptr, out_bytes, bmlocal1113_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1113_tmp_bits );\
}

#define BM_CdmaTxAttribComp_SubChRef_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_RangingCode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1116_acc_bytes;\
	UINT bmlocal1117_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1116_acc_bytes = 8;\
	bmlocal1117_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1116_acc_bytes );\
	out_bitoff += bmlocal1117_acc_bits;\
}

#define BM_CdmaTxAttribComp_RangingCode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1118_tmp_bitoff;\
	BM_CdmaTxAttribComp_RangingCode_GET_POS( base_ptr, out_ptr, bmlocal1118_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1118_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_RangingCode_POS_ALIGNED 8

// Alignment of CdmaTxAttribComp_RangingCode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_RangingCode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_RangingCode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1119_my_ptr;\
	UINT bmlocal1120_my_bitoff;\
	BM_CdmaTxAttribComp_RangingCode_GET_POS( base_ptr, bmlocal1119_my_ptr, bmlocal1120_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1119_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1119_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1119_my_ptr, bmlocal1120_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_CdmaTxAttribComp_RangingCode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1121_my_ptr;\
	UINT bmlocal1122_my_bitoff;\
	BM_CdmaTxAttribComp_RangingCode_GET_POS( base_ptr, bmlocal1121_my_ptr, bmlocal1122_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1121_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1121_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1121_my_ptr, bmlocal1122_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// CdmaTxAttribComp_RangingCode: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_RangingCode: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_RangingCode: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_RangingCode: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_RangingCode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_RangingCode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_RangingCode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1123_out_val;\
	BM_CdmaTxAttribComp_RangingCode_GET( base_ptr, bmlocal1123_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RangingCode", 16, (UINT)(bmlocal1123_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_RangingCode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_RangingCode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_RangingCode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1124_my_ptr;\
	UINT bmlocal1125_my_bitoff;\
	BM_CdmaTxAttribComp_RangingCode_GET_POS( base_ptr, bmlocal1124_my_ptr, bmlocal1125_my_bitoff );\
	(*((UINT16*)bmlocal1124_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1125_my_bitoff );\
}

// CdmaTxAttribComp_RangingCode: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_RangingCode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1126_tmp_bits;\
	BM_CdmaTxAttribComp_RangingCode_GET_SIZE( base_ptr, out_bytes, bmlocal1126_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1126_tmp_bits );\
}

#define BM_CdmaTxAttribComp_RangingCode_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1129_acc_bytes;\
	UINT bmlocal1130_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1129_acc_bytes = 10;\
	bmlocal1130_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1129_acc_bytes );\
	out_bitoff += bmlocal1130_acc_bits;\
}

#define BM_CdmaTxAttribComp_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1131_tmp_bitoff;\
	BM_CdmaTxAttribComp_Reserved_GET_POS( base_ptr, out_ptr, bmlocal1131_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1131_tmp_bitoff);\
}

#define BM_CdmaTxAttribComp_Reserved_POS_ALIGNED 10

// Alignment of CdmaTxAttribComp_Reserved: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_CdmaTxAttribComp_Reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_Reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1132_my_ptr;\
	UINT bmlocal1133_my_bitoff;\
	BM_CdmaTxAttribComp_Reserved_GET_POS( base_ptr, bmlocal1132_my_ptr, bmlocal1133_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1132_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1132_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1132_my_ptr, bmlocal1133_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_CdmaTxAttribComp_Reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1134_my_ptr;\
	UINT bmlocal1135_my_bitoff;\
	BM_CdmaTxAttribComp_Reserved_GET_POS( base_ptr, bmlocal1134_my_ptr, bmlocal1135_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1134_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1134_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1134_my_ptr, bmlocal1135_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// CdmaTxAttribComp_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// CdmaTxAttribComp_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// CdmaTxAttribComp_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// CdmaTxAttribComp_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_CdmaTxAttribComp_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1136_out_val;\
	BM_CdmaTxAttribComp_Reserved_GET( base_ptr, bmlocal1136_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 16, (UINT)(bmlocal1136_out_val), "%d", 1);\
}

#define BM_CdmaTxAttribComp_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_CdmaTxAttribComp_Reserved_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1137_my_ptr;\
	UINT bmlocal1138_my_bitoff;\
	BM_CdmaTxAttribComp_Reserved_GET_POS( base_ptr, bmlocal1137_my_ptr, bmlocal1138_my_bitoff );\
	(*((UINT16*)bmlocal1137_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1138_my_bitoff );\
}

// CdmaTxAttribComp_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_CdmaTxAttribComp_Reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1139_tmp_bits;\
	BM_CdmaTxAttribComp_Reserved_GET_SIZE( base_ptr, out_bytes, bmlocal1139_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1139_tmp_bits );\
}

#define BM_CdmaTxAttribComp_Reserved_BYTES_SIZE 2

#define BM_CdmaTxAttribComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1142_tmp_bits;\
	BM_CdmaTxAttribComp_GET_SIZE( base_ptr, out_bytes, bmlocal1142_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1142_tmp_bits );\
}

#define BM_CdmaTxAttribComp_BYTES_SIZE 12

#define BM_CdmaTxAttribComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CdmaTxAttribComp", 1);\
	BM_CdmaTxAttribComp_FrameContainsCdmaTx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaTxAttribComp_FrameRefLow_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaTxAttribComp_SymbolsRef_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaTxAttribComp_SubChRef_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaTxAttribComp_RangingCode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_CdmaTxAttribComp_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_CdmaTxAttribComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_CdmaTxAttribComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TransitionGapsComp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _TTG : 16; //DL to UL Transition Gap in PS units
	UINT16 _RTG : 16; //UL to DL Transition Gap in PS units
} BMS_TransitionGapsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _RTG : 16; //UL to DL Transition Gap in PS units
	UINT16 _TTG : 16; //DL to UL Transition Gap in PS units
} BMS_TransitionGapsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TransitionGapsComp' Type: 'TransitionGapsComp', Top-level, Non-instance, No bitoff root
#define BM_TransitionGapsComp_TTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TransitionGapsComp_TTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1143_tmp_bitoff;\
	BM_TransitionGapsComp_TTG_GET_POS( base_ptr, out_ptr, bmlocal1143_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1143_tmp_bitoff);\
}

#define BM_TransitionGapsComp_TTG_POS_ALIGNED 0

// Alignment of TransitionGapsComp_TTG: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TransitionGapsComp_TTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TransitionGapsComp_TTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1144_my_ptr;\
	UINT bmlocal1145_my_bitoff;\
	BM_TransitionGapsComp_TTG_GET_POS( base_ptr, bmlocal1144_my_ptr, bmlocal1145_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1144_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1144_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1144_my_ptr, bmlocal1145_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_TransitionGapsComp_TTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1146_my_ptr;\
	UINT bmlocal1147_my_bitoff;\
	BM_TransitionGapsComp_TTG_GET_POS( base_ptr, bmlocal1146_my_ptr, bmlocal1147_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1146_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1146_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1146_my_ptr, bmlocal1147_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// TransitionGapsComp_TTG: IS_DEFAULT accessor is not defined because no default value was specified.
// TransitionGapsComp_TTG: SET_DEFAULT accessor is not defined because no default value was specified.
// TransitionGapsComp_TTG: IS_RESET accessor is not defined because no reset value was specified.
// TransitionGapsComp_TTG: SET_RESET accessor is not defined because no reset value was specified.
// TransitionGapsComp_TTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TransitionGapsComp_TTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TransitionGapsComp_TTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1148_out_val;\
	BM_TransitionGapsComp_TTG_GET( base_ptr, bmlocal1148_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TTG", 16, (UINT)(bmlocal1148_out_val), "%d", 1);\
}

#define BM_TransitionGapsComp_TTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TransitionGapsComp_TTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TransitionGapsComp_TTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1149_my_ptr;\
	UINT bmlocal1150_my_bitoff;\
	BM_TransitionGapsComp_TTG_GET_POS( base_ptr, bmlocal1149_my_ptr, bmlocal1150_my_bitoff );\
	(*((UINT16*)bmlocal1149_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1150_my_bitoff );\
}

// TransitionGapsComp_TTG: Validation accessors are not defined because validation condition was not specified.
#define BM_TransitionGapsComp_TTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1151_tmp_bits;\
	BM_TransitionGapsComp_TTG_GET_SIZE( base_ptr, out_bytes, bmlocal1151_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1151_tmp_bits );\
}

#define BM_TransitionGapsComp_TTG_BYTES_SIZE 2

#define BM_TransitionGapsComp_RTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1154_acc_bytes;\
	UINT bmlocal1155_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1154_acc_bytes = 2;\
	bmlocal1155_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1154_acc_bytes );\
	out_bitoff += bmlocal1155_acc_bits;\
}

#define BM_TransitionGapsComp_RTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1156_tmp_bitoff;\
	BM_TransitionGapsComp_RTG_GET_POS( base_ptr, out_ptr, bmlocal1156_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1156_tmp_bitoff);\
}

#define BM_TransitionGapsComp_RTG_POS_ALIGNED 2

// Alignment of TransitionGapsComp_RTG: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TransitionGapsComp_RTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TransitionGapsComp_RTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1157_my_ptr;\
	UINT bmlocal1158_my_bitoff;\
	BM_TransitionGapsComp_RTG_GET_POS( base_ptr, bmlocal1157_my_ptr, bmlocal1158_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1157_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1157_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1157_my_ptr, bmlocal1158_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_TransitionGapsComp_RTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1159_my_ptr;\
	UINT bmlocal1160_my_bitoff;\
	BM_TransitionGapsComp_RTG_GET_POS( base_ptr, bmlocal1159_my_ptr, bmlocal1160_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1159_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1159_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1159_my_ptr, bmlocal1160_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// TransitionGapsComp_RTG: IS_DEFAULT accessor is not defined because no default value was specified.
// TransitionGapsComp_RTG: SET_DEFAULT accessor is not defined because no default value was specified.
// TransitionGapsComp_RTG: IS_RESET accessor is not defined because no reset value was specified.
// TransitionGapsComp_RTG: SET_RESET accessor is not defined because no reset value was specified.
// TransitionGapsComp_RTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TransitionGapsComp_RTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TransitionGapsComp_RTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1161_out_val;\
	BM_TransitionGapsComp_RTG_GET( base_ptr, bmlocal1161_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RTG", 16, (UINT)(bmlocal1161_out_val), "%d", 1);\
}

#define BM_TransitionGapsComp_RTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TransitionGapsComp_RTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TransitionGapsComp_RTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1162_my_ptr;\
	UINT bmlocal1163_my_bitoff;\
	BM_TransitionGapsComp_RTG_GET_POS( base_ptr, bmlocal1162_my_ptr, bmlocal1163_my_bitoff );\
	(*((UINT16*)bmlocal1162_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1163_my_bitoff );\
}

// TransitionGapsComp_RTG: Validation accessors are not defined because validation condition was not specified.
#define BM_TransitionGapsComp_RTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1164_tmp_bits;\
	BM_TransitionGapsComp_RTG_GET_SIZE( base_ptr, out_bytes, bmlocal1164_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1164_tmp_bits );\
}

#define BM_TransitionGapsComp_RTG_BYTES_SIZE 2

#define BM_TransitionGapsComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TransitionGapsComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1167_tmp_bits;\
	BM_TransitionGapsComp_GET_SIZE( base_ptr, out_bytes, bmlocal1167_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1167_tmp_bits );\
}

#define BM_TransitionGapsComp_BYTES_SIZE 4

#define BM_TransitionGapsComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TransitionGapsComp", 1);\
	BM_TransitionGapsComp_TTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TransitionGapsComp_RTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TransitionGapsComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TransitionGapsComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DilloPhyConfigurationComp[124];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BurstsComp _DlMcsAllocationTableNoneMimo[14]; //A table of accumulated amount of allocations per 8 DL MCS: non-MIMO as Delta from last report.
	BMS_BurstsComp _DlMcsAllocationTableMatrixA[14]; //A table of accumulated amount of allocations per 8 DL MCS: Matrix A as Delta from last report.
	BMS_BurstsComp _DlMcsAllocationTableMatrixB[14]; //A table of accumulated amount of allocations per 8 DL MCS: Matrix B as Delta from last report.
	BMS_BurstsComp _UlMcsAllocationTableNoneStc[10]; //A table of accumulated amount of allocations per 4 UL MCS: non-STC as Delta from last report
	BMS_BurstsComp _UlMcsAllocationTableStc[10]; //A table of accumulated amount of allocations per 4 UL MCS: STC as Delta from last report
} BMS_DilloPhyConfigurationComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_BurstsComp _UlMcsAllocationTableStc[10]; //A table of accumulated amount of allocations per 4 UL MCS: STC as Delta from last report
	BMS_BurstsComp _UlMcsAllocationTableNoneStc[10]; //A table of accumulated amount of allocations per 4 UL MCS: non-STC as Delta from last report
	BMS_BurstsComp _DlMcsAllocationTableMatrixB[14]; //A table of accumulated amount of allocations per 8 DL MCS: Matrix B as Delta from last report.
	BMS_BurstsComp _DlMcsAllocationTableMatrixA[14]; //A table of accumulated amount of allocations per 8 DL MCS: Matrix A as Delta from last report.
	BMS_BurstsComp _DlMcsAllocationTableNoneMimo[14]; //A table of accumulated amount of allocations per 8 DL MCS: non-MIMO as Delta from last report.
} BMS_DilloPhyConfigurationComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DilloPhyConfigurationComp' Type: 'DilloPhyConfigurationComp', Top-level, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1168_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_POS( base_ptr, out_ptr, bmlocal1168_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1168_tmp_bitoff);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_POS_ALIGNED 0

// ARRAY: DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 14;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1169_out_ptr;\
	UINT bmlocal1170_out_bitoff;\
	UINT bmlocal1171_element_size_bytes;\
	UINT bmlocal1172_element_size_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_POS( base_ptr, bmlocal1169_out_ptr, bmlocal1170_out_bitoff );\
	bmlocal1171_element_size_bytes = 2;\
	bmlocal1172_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal1169_out_ptr) + (idx0) * bmlocal1171_element_size_bytes );\
	out_bitoff = bmlocal1170_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal1172_element_size_bits );\
}

// COMPOSITE: Full name: 'DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1173_parent_out_ptr;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_ELEMENT_POS( base_ptr, idx0, bmlocal1173_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1173_parent_out_ptr;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1174_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal1174_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1174_tmp_bitoff);\
}

// Alignment of DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1175_my_ptr;\
	UINT bmlocal1176_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS( base_ptr, idx0, bmlocal1175_my_ptr, bmlocal1176_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1175_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1175_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1175_my_ptr, bmlocal1176_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1177_my_ptr;\
	UINT bmlocal1178_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS( base_ptr, idx0, bmlocal1177_my_ptr, bmlocal1178_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1177_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1177_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1177_my_ptr, bmlocal1178_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1179_out_val;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET( base_ptr, idx0, bmlocal1179_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal1179_out_val), "%d", 1);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1180_my_ptr;\
	UINT bmlocal1181_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_POS( base_ptr, idx0, bmlocal1180_my_ptr, bmlocal1181_my_bitoff );\
	(*((UINT16*)bmlocal1180_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1181_my_bitoff );\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1182_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal1182_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1182_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_BYTES_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1185_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal1185_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1185_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_BYTES_CELL_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal1186_dim_size0;\
	UINT bmlocal1187_idx0;\
	bmlocal1186_dim_size0 = 14;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DlMcsAllocationTableNoneMimo", 1);\
	for( bmlocal1187_idx0=0; bmlocal1187_idx0<bmlocal1186_dim_size0; bmlocal1187_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal1187_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH_IDX( base_ptr, bmlocal1187_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1188_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, out_bytes, bmlocal1188_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1188_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_BYTES_SIZE 28

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1189_tmp_bytes = 0;\
	UINT bmlocal1190_tmp_bits = 0;\
	UINT bmlocal1191_acc_bytes;\
	UINT bmlocal1192_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1191_acc_bytes = 0;\
	bmlocal1192_acc_bits = 0;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, bmlocal1189_tmp_bytes, bmlocal1190_tmp_bits );\
	bmlocal1191_acc_bytes += bmlocal1189_tmp_bytes;\
	bmlocal1192_acc_bits += bmlocal1190_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1191_acc_bytes );\
	out_bitoff += bmlocal1192_acc_bits;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1193_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_POS( base_ptr, out_ptr, bmlocal1193_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1193_tmp_bitoff);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_POS_ALIGNED 28

// ARRAY: DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 14;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1194_out_ptr;\
	UINT bmlocal1195_out_bitoff;\
	UINT bmlocal1196_element_size_bytes;\
	UINT bmlocal1197_element_size_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_POS( base_ptr, bmlocal1194_out_ptr, bmlocal1195_out_bitoff );\
	bmlocal1196_element_size_bytes = 2;\
	bmlocal1197_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal1194_out_ptr) + (idx0) * bmlocal1196_element_size_bytes );\
	out_bitoff = bmlocal1195_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal1197_element_size_bits );\
}

// COMPOSITE: Full name: 'DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1198_parent_out_ptr;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_ELEMENT_POS( base_ptr, idx0, bmlocal1198_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1198_parent_out_ptr;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1199_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal1199_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1199_tmp_bitoff);\
}

// Alignment of DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1200_my_ptr;\
	UINT bmlocal1201_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS( base_ptr, idx0, bmlocal1200_my_ptr, bmlocal1201_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1200_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1200_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1200_my_ptr, bmlocal1201_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1202_my_ptr;\
	UINT bmlocal1203_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS( base_ptr, idx0, bmlocal1202_my_ptr, bmlocal1203_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1202_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1202_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1202_my_ptr, bmlocal1203_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1204_out_val;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET( base_ptr, idx0, bmlocal1204_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal1204_out_val), "%d", 1);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1205_my_ptr;\
	UINT bmlocal1206_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_POS( base_ptr, idx0, bmlocal1205_my_ptr, bmlocal1206_my_bitoff );\
	(*((UINT16*)bmlocal1205_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1206_my_bitoff );\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1207_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal1207_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1207_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_BYTES_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1210_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal1210_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1210_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_BYTES_CELL_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal1211_dim_size0;\
	UINT bmlocal1212_idx0;\
	bmlocal1211_dim_size0 = 14;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DlMcsAllocationTableMatrixA", 1);\
	for( bmlocal1212_idx0=0; bmlocal1212_idx0<bmlocal1211_dim_size0; bmlocal1212_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal1212_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH_IDX( base_ptr, bmlocal1212_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1213_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, out_bytes, bmlocal1213_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1213_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_BYTES_SIZE 28

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1214_tmp_bytes = 0;\
	UINT bmlocal1215_tmp_bits = 0;\
	UINT bmlocal1216_acc_bytes;\
	UINT bmlocal1217_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1216_acc_bytes = 0;\
	bmlocal1217_acc_bits = 0;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, bmlocal1214_tmp_bytes, bmlocal1215_tmp_bits );\
	bmlocal1216_acc_bytes += bmlocal1214_tmp_bytes;\
	bmlocal1217_acc_bits += bmlocal1215_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, bmlocal1214_tmp_bytes, bmlocal1215_tmp_bits );\
	bmlocal1216_acc_bytes += bmlocal1214_tmp_bytes;\
	bmlocal1217_acc_bits += bmlocal1215_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1216_acc_bytes );\
	out_bitoff += bmlocal1217_acc_bits;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1218_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_POS( base_ptr, out_ptr, bmlocal1218_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1218_tmp_bitoff);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_POS_ALIGNED 56

// ARRAY: DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 14;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1219_out_ptr;\
	UINT bmlocal1220_out_bitoff;\
	UINT bmlocal1221_element_size_bytes;\
	UINT bmlocal1222_element_size_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_POS( base_ptr, bmlocal1219_out_ptr, bmlocal1220_out_bitoff );\
	bmlocal1221_element_size_bytes = 2;\
	bmlocal1222_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal1219_out_ptr) + (idx0) * bmlocal1221_element_size_bytes );\
	out_bitoff = bmlocal1220_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal1222_element_size_bits );\
}

// COMPOSITE: Full name: 'DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1223_parent_out_ptr;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_ELEMENT_POS( base_ptr, idx0, bmlocal1223_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1223_parent_out_ptr;\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1224_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal1224_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1224_tmp_bitoff);\
}

// Alignment of DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1225_my_ptr;\
	UINT bmlocal1226_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS( base_ptr, idx0, bmlocal1225_my_ptr, bmlocal1226_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1225_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1225_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1225_my_ptr, bmlocal1226_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1227_my_ptr;\
	UINT bmlocal1228_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS( base_ptr, idx0, bmlocal1227_my_ptr, bmlocal1228_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1227_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1227_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1227_my_ptr, bmlocal1228_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1229_out_val;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET( base_ptr, idx0, bmlocal1229_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal1229_out_val), "%d", 1);\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1230_my_ptr;\
	UINT bmlocal1231_my_bitoff;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_POS( base_ptr, idx0, bmlocal1230_my_ptr, bmlocal1231_my_bitoff );\
	(*((UINT16*)bmlocal1230_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1231_my_bitoff );\
}

// DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1232_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal1232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1232_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_BYTES_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1235_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal1235_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1235_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_BYTES_CELL_SIZE 2

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal1236_dim_size0;\
	UINT bmlocal1237_idx0;\
	bmlocal1236_dim_size0 = 14;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DlMcsAllocationTableMatrixB", 1);\
	for( bmlocal1237_idx0=0; bmlocal1237_idx0<bmlocal1236_dim_size0; bmlocal1237_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal1237_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH_IDX( base_ptr, bmlocal1237_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1238_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_SIZE( base_ptr, out_bytes, bmlocal1238_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1238_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_BYTES_SIZE 28

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1239_tmp_bytes = 0;\
	UINT bmlocal1240_tmp_bits = 0;\
	UINT bmlocal1241_acc_bytes;\
	UINT bmlocal1242_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1241_acc_bytes = 0;\
	bmlocal1242_acc_bits = 0;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, bmlocal1239_tmp_bytes, bmlocal1240_tmp_bits );\
	bmlocal1241_acc_bytes += bmlocal1239_tmp_bytes;\
	bmlocal1242_acc_bits += bmlocal1240_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, bmlocal1239_tmp_bytes, bmlocal1240_tmp_bits );\
	bmlocal1241_acc_bytes += bmlocal1239_tmp_bytes;\
	bmlocal1242_acc_bits += bmlocal1240_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_SIZE( base_ptr, bmlocal1239_tmp_bytes, bmlocal1240_tmp_bits );\
	bmlocal1241_acc_bytes += bmlocal1239_tmp_bytes;\
	bmlocal1242_acc_bits += bmlocal1240_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1241_acc_bytes );\
	out_bitoff += bmlocal1242_acc_bits;\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1243_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_POS( base_ptr, out_ptr, bmlocal1243_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1243_tmp_bitoff);\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_POS_ALIGNED 84

// ARRAY: DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 20;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 10;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1244_out_ptr;\
	UINT bmlocal1245_out_bitoff;\
	UINT bmlocal1246_element_size_bytes;\
	UINT bmlocal1247_element_size_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_POS( base_ptr, bmlocal1244_out_ptr, bmlocal1245_out_bitoff );\
	bmlocal1246_element_size_bytes = 2;\
	bmlocal1247_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal1244_out_ptr) + (idx0) * bmlocal1246_element_size_bytes );\
	out_bitoff = bmlocal1245_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal1247_element_size_bits );\
}

// COMPOSITE: Full name: 'DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1248_parent_out_ptr;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_ELEMENT_POS( base_ptr, idx0, bmlocal1248_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1248_parent_out_ptr;\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1249_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal1249_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1249_tmp_bitoff);\
}

// Alignment of DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1250_my_ptr;\
	UINT bmlocal1251_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1250_my_ptr, bmlocal1251_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1250_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1250_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1250_my_ptr, bmlocal1251_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1252_my_ptr;\
	UINT bmlocal1253_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1252_my_ptr, bmlocal1253_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1252_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1252_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1252_my_ptr, bmlocal1253_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1254_out_val;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET( base_ptr, idx0, bmlocal1254_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal1254_out_val), "%d", 1);\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1255_my_ptr;\
	UINT bmlocal1256_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1255_my_ptr, bmlocal1256_my_bitoff );\
	(*((UINT16*)bmlocal1255_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1256_my_bitoff );\
}

// DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1257_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal1257_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1257_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_BYTES_SIZE 2

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1260_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal1260_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1260_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_BYTES_CELL_SIZE 2

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal1261_dim_size0;\
	UINT bmlocal1262_idx0;\
	bmlocal1261_dim_size0 = 10;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "UlMcsAllocationTableNoneStc", 1);\
	for( bmlocal1262_idx0=0; bmlocal1262_idx0<bmlocal1261_dim_size0; bmlocal1262_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal1262_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH_IDX( base_ptr, bmlocal1262_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1263_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_SIZE( base_ptr, out_bytes, bmlocal1263_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1263_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_BYTES_SIZE 20

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1264_tmp_bytes = 0;\
	UINT bmlocal1265_tmp_bits = 0;\
	UINT bmlocal1266_acc_bytes;\
	UINT bmlocal1267_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1266_acc_bytes = 0;\
	bmlocal1267_acc_bits = 0;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, bmlocal1264_tmp_bytes, bmlocal1265_tmp_bits );\
	bmlocal1266_acc_bytes += bmlocal1264_tmp_bytes;\
	bmlocal1267_acc_bits += bmlocal1265_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, bmlocal1264_tmp_bytes, bmlocal1265_tmp_bits );\
	bmlocal1266_acc_bytes += bmlocal1264_tmp_bytes;\
	bmlocal1267_acc_bits += bmlocal1265_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_SIZE( base_ptr, bmlocal1264_tmp_bytes, bmlocal1265_tmp_bits );\
	bmlocal1266_acc_bytes += bmlocal1264_tmp_bytes;\
	bmlocal1267_acc_bits += bmlocal1265_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_SIZE( base_ptr, bmlocal1264_tmp_bytes, bmlocal1265_tmp_bits );\
	bmlocal1266_acc_bytes += bmlocal1264_tmp_bytes;\
	bmlocal1267_acc_bits += bmlocal1265_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1266_acc_bytes );\
	out_bitoff += bmlocal1267_acc_bits;\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1268_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_POS( base_ptr, out_ptr, bmlocal1268_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1268_tmp_bitoff);\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_POS_ALIGNED 104

// ARRAY: DilloPhyConfigurationComp_UlMcsAllocationTableStc
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 20;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 10;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1269_out_ptr;\
	UINT bmlocal1270_out_bitoff;\
	UINT bmlocal1271_element_size_bytes;\
	UINT bmlocal1272_element_size_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_POS( base_ptr, bmlocal1269_out_ptr, bmlocal1270_out_bitoff );\
	bmlocal1271_element_size_bytes = 2;\
	bmlocal1272_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal1269_out_ptr) + (idx0) * bmlocal1271_element_size_bytes );\
	out_bitoff = bmlocal1270_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal1272_element_size_bits );\
}

// COMPOSITE: Full name: 'DilloPhyConfigurationComp_UlMcsAllocationTableStc' Type: 'BurstsComp', Inner, Non-instance, No bitoff root
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1273_parent_out_ptr;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_ELEMENT_POS( base_ptr, idx0, bmlocal1273_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1273_parent_out_ptr;\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1274_tmp_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS( base_ptr, idx0, out_ptr, bmlocal1274_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1274_tmp_bitoff);\
}

// Alignment of DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: accumulated=(0,0, ABA=2), parent.base=(0,0, ABA=2)
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1275_my_ptr;\
	UINT bmlocal1276_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1275_my_ptr, bmlocal1276_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1275_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1275_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1275_my_ptr, bmlocal1276_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
	}\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1277_my_ptr;\
	UINT bmlocal1278_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1277_my_ptr, bmlocal1278_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1277_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1277_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1277_my_ptr, bmlocal1278_my_bitoff, 16, in_val, 0xFFFFFFFF );\
	}\
}

// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: IS_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: SET_RESET accessor is not defined because no reset value was specified.
// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1279_out_val;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET( base_ptr, idx0, bmlocal1279_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bursts", 16, (UINT)(bmlocal1279_out_val), "%d", 1);\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1280_my_ptr;\
	UINT bmlocal1281_my_bitoff;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_POS( base_ptr, idx0, bmlocal1280_my_ptr, bmlocal1281_my_bitoff );\
	(*((UINT16*)bmlocal1280_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1281_my_bitoff );\
}

// DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1282_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal1282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1282_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_BYTES_SIZE 2

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1285_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal1285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1285_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_BYTES_CELL_SIZE 2

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_Bursts_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal1286_dim_size0;\
	UINT bmlocal1287_idx0;\
	bmlocal1286_dim_size0 = 10;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "UlMcsAllocationTableStc", 1);\
	for( bmlocal1287_idx0=0; bmlocal1287_idx0<bmlocal1286_dim_size0; bmlocal1287_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal1287_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH_IDX( base_ptr, bmlocal1287_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1288_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_SIZE( base_ptr, out_bytes, bmlocal1288_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1288_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_BYTES_SIZE 20

#define BM_DilloPhyConfigurationComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal1289_tmp_bytes = 0;\
	UINT bmlocal1290_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_GET_SIZE( base_ptr, bmlocal1289_tmp_bytes, bmlocal1290_tmp_bits );\
	out_bytes += bmlocal1289_tmp_bytes;\
	out_bits += bmlocal1290_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_GET_SIZE( base_ptr, bmlocal1289_tmp_bytes, bmlocal1290_tmp_bits );\
	out_bytes += bmlocal1289_tmp_bytes;\
	out_bits += bmlocal1290_tmp_bits;\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_GET_SIZE( base_ptr, bmlocal1289_tmp_bytes, bmlocal1290_tmp_bits );\
	out_bytes += bmlocal1289_tmp_bytes;\
	out_bits += bmlocal1290_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_GET_SIZE( base_ptr, bmlocal1289_tmp_bytes, bmlocal1290_tmp_bits );\
	out_bytes += bmlocal1289_tmp_bytes;\
	out_bits += bmlocal1290_tmp_bits;\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_GET_SIZE( base_ptr, bmlocal1289_tmp_bytes, bmlocal1290_tmp_bits );\
	out_bytes += bmlocal1289_tmp_bytes;\
	out_bits += bmlocal1290_tmp_bits;\
}

#define BM_DilloPhyConfigurationComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1291_tmp_bits;\
	BM_DilloPhyConfigurationComp_GET_SIZE( base_ptr, out_bytes, bmlocal1291_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1291_tmp_bits );\
}

#define BM_DilloPhyConfigurationComp_BYTES_SIZE 124

#define BM_DilloPhyConfigurationComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloPhyConfigurationComp", 1);\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableNoneMimo_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixA_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloPhyConfigurationComp_DlMcsAllocationTableMatrixB_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableNoneStc_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloPhyConfigurationComp_UlMcsAllocationTableStc_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloPhyConfigurationComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloPhyConfigurationComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DilloSfAndQosPerformanceComp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _TotalBytesThroughputOtaDL : 16; //Total DL OTA throughput (KB/sec) - throughput including all retransmitted bytes (HARQ, ARQ), overheads, CRC bytes.
	UINT16 _TotalBytesThroughputOtaUL : 16; //Total UL OTA throughput (KB/sec) - throughput including all retransmitted bytes (HARQ, ARQ), overheads, CRC bytes.
} BMS_DilloSfAndQosPerformanceComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _TotalBytesThroughputOtaUL : 16; //Total UL OTA throughput (KB/sec) - throughput including all retransmitted bytes (HARQ, ARQ), overheads, CRC bytes.
	UINT16 _TotalBytesThroughputOtaDL : 16; //Total DL OTA throughput (KB/sec) - throughput including all retransmitted bytes (HARQ, ARQ), overheads, CRC bytes.
} BMS_DilloSfAndQosPerformanceComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DilloSfAndQosPerformanceComp' Type: 'DilloSfAndQosPerformanceComp', Top-level, Non-instance, No bitoff root
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1292_tmp_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS( base_ptr, out_ptr, bmlocal1292_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1292_tmp_bitoff);\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_POS_ALIGNED 0

// Alignment of DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1293_my_ptr;\
	UINT bmlocal1294_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS( base_ptr, bmlocal1293_my_ptr, bmlocal1294_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1293_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1293_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1293_my_ptr, bmlocal1294_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1295_my_ptr;\
	UINT bmlocal1296_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS( base_ptr, bmlocal1295_my_ptr, bmlocal1296_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1295_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1295_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1295_my_ptr, bmlocal1296_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: IS_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: SET_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1297_out_val;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET( base_ptr, bmlocal1297_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalBytesThroughputOtaDL", 16, (UINT)(bmlocal1297_out_val), "%d", 1);\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1298_my_ptr;\
	UINT bmlocal1299_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_POS( base_ptr, bmlocal1298_my_ptr, bmlocal1299_my_bitoff );\
	(*((UINT16*)bmlocal1298_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1299_my_bitoff );\
}

// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1300_tmp_bits;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_GET_SIZE( base_ptr, out_bytes, bmlocal1300_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1300_tmp_bits );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_BYTES_SIZE 2

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1303_acc_bytes;\
	UINT bmlocal1304_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1303_acc_bytes = 2;\
	bmlocal1304_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1303_acc_bytes );\
	out_bitoff += bmlocal1304_acc_bits;\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1305_tmp_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS( base_ptr, out_ptr, bmlocal1305_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1305_tmp_bitoff);\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_POS_ALIGNED 2

// Alignment of DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1306_my_ptr;\
	UINT bmlocal1307_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS( base_ptr, bmlocal1306_my_ptr, bmlocal1307_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1306_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1306_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1306_my_ptr, bmlocal1307_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1308_my_ptr;\
	UINT bmlocal1309_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS( base_ptr, bmlocal1308_my_ptr, bmlocal1309_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1308_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1308_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1308_my_ptr, bmlocal1309_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: IS_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: SET_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1310_out_val;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET( base_ptr, bmlocal1310_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalBytesThroughputOtaUL", 16, (UINT)(bmlocal1310_out_val), "%d", 1);\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1311_my_ptr;\
	UINT bmlocal1312_my_bitoff;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_POS( base_ptr, bmlocal1311_my_ptr, bmlocal1312_my_bitoff );\
	(*((UINT16*)bmlocal1311_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1312_my_bitoff );\
}

// DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1313_tmp_bits;\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_GET_SIZE( base_ptr, out_bytes, bmlocal1313_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1313_tmp_bits );\
}

#define BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_BYTES_SIZE 2

#define BM_DilloSfAndQosPerformanceComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosPerformanceComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1316_tmp_bits;\
	BM_DilloSfAndQosPerformanceComp_GET_SIZE( base_ptr, out_bytes, bmlocal1316_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1316_tmp_bits );\
}

#define BM_DilloSfAndQosPerformanceComp_BYTES_SIZE 4

#define BM_DilloSfAndQosPerformanceComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloSfAndQosPerformanceComp", 1);\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaDL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloSfAndQosPerformanceComp_TotalBytesThroughputOtaUL_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosPerformanceComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosPerformanceComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DilloSfAndQosFlowManagementComp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _GrantsReceiveSlots : 16; //Accumulated slots of grants received.
	UINT16 _reserved : 16;
} BMS_DilloSfAndQosFlowManagementComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _reserved : 16;
	UINT16 _GrantsReceiveSlots : 16; //Accumulated slots of grants received.
} BMS_DilloSfAndQosFlowManagementComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DilloSfAndQosFlowManagementComp' Type: 'DilloSfAndQosFlowManagementComp', Top-level, Non-instance, No bitoff root
#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1317_tmp_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS( base_ptr, out_ptr, bmlocal1317_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1317_tmp_bitoff);\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_POS_ALIGNED 0

// Alignment of DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1318_my_ptr;\
	UINT bmlocal1319_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS( base_ptr, bmlocal1318_my_ptr, bmlocal1319_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1318_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1318_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1318_my_ptr, bmlocal1319_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1320_my_ptr;\
	UINT bmlocal1321_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS( base_ptr, bmlocal1320_my_ptr, bmlocal1321_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1320_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1320_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1320_my_ptr, bmlocal1321_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: IS_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: SET_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1322_out_val;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET( base_ptr, bmlocal1322_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "GrantsReceiveSlots", 16, (UINT)(bmlocal1322_out_val), "%d", 1);\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1323_my_ptr;\
	UINT bmlocal1324_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_POS( base_ptr, bmlocal1323_my_ptr, bmlocal1324_my_bitoff );\
	(*((UINT16*)bmlocal1323_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1324_my_bitoff );\
}

// DilloSfAndQosFlowManagementComp_GrantsReceiveSlots: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1325_tmp_bits;\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_GET_SIZE( base_ptr, out_bytes, bmlocal1325_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1325_tmp_bits );\
}

#define BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_BYTES_SIZE 2

#define BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1328_acc_bytes;\
	UINT bmlocal1329_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1328_acc_bytes = 2;\
	bmlocal1329_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1328_acc_bytes );\
	out_bitoff += bmlocal1329_acc_bits;\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1330_tmp_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS( base_ptr, out_ptr, bmlocal1330_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1330_tmp_bitoff);\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_POS_ALIGNED 2

// Alignment of DilloSfAndQosFlowManagementComp_reserved: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloSfAndQosFlowManagementComp_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1331_my_ptr;\
	UINT bmlocal1332_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS( base_ptr, bmlocal1331_my_ptr, bmlocal1332_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1331_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1331_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1331_my_ptr, bmlocal1332_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1333_my_ptr;\
	UINT bmlocal1334_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS( base_ptr, bmlocal1333_my_ptr, bmlocal1334_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1333_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1333_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1333_my_ptr, bmlocal1334_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// DilloSfAndQosFlowManagementComp_reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosFlowManagementComp_reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloSfAndQosFlowManagementComp_reserved: IS_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosFlowManagementComp_reserved: SET_RESET accessor is not defined because no reset value was specified.
// DilloSfAndQosFlowManagementComp_reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloSfAndQosFlowManagementComp_reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloSfAndQosFlowManagementComp_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1335_out_val;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET( base_ptr, bmlocal1335_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "reserved", 16, (UINT)(bmlocal1335_out_val), "%d", 1);\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosFlowManagementComp_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1336_my_ptr;\
	UINT bmlocal1337_my_bitoff;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET_POS( base_ptr, bmlocal1336_my_ptr, bmlocal1337_my_bitoff );\
	(*((UINT16*)bmlocal1336_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1337_my_bitoff );\
}

// DilloSfAndQosFlowManagementComp_reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloSfAndQosFlowManagementComp_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1338_tmp_bits;\
	BM_DilloSfAndQosFlowManagementComp_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal1338_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1338_tmp_bits );\
}

#define BM_DilloSfAndQosFlowManagementComp_reserved_BYTES_SIZE 2

#define BM_DilloSfAndQosFlowManagementComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosFlowManagementComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1341_tmp_bits;\
	BM_DilloSfAndQosFlowManagementComp_GET_SIZE( base_ptr, out_bytes, bmlocal1341_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1341_tmp_bits );\
}

#define BM_DilloSfAndQosFlowManagementComp_BYTES_SIZE 4

#define BM_DilloSfAndQosFlowManagementComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloSfAndQosFlowManagementComp", 1);\
	BM_DilloSfAndQosFlowManagementComp_GrantsReceiveSlots_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloSfAndQosFlowManagementComp_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloSfAndQosFlowManagementComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloSfAndQosFlowManagementComp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 DilloMapsComp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _TotalNumberOfMaps : 16; //Accumulated Number of Maps received.
	UINT16 _TotalBytesOfMaps : 16; //Accumulated Bytes of Maps received.
} BMS_DilloMapsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _TotalBytesOfMaps : 16; //Accumulated Bytes of Maps received.
	UINT16 _TotalNumberOfMaps : 16; //Accumulated Number of Maps received.
} BMS_DilloMapsComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'DilloMapsComp' Type: 'DilloMapsComp', Top-level, Non-instance, No bitoff root
#define BM_DilloMapsComp_TotalNumberOfMaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1342_tmp_bitoff;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET_POS( base_ptr, out_ptr, bmlocal1342_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1342_tmp_bitoff);\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_POS_ALIGNED 0

// Alignment of DilloMapsComp_TotalNumberOfMaps: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloMapsComp_TotalNumberOfMaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1343_my_ptr;\
	UINT bmlocal1344_my_bitoff;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET_POS( base_ptr, bmlocal1343_my_ptr, bmlocal1344_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1343_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1343_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1343_my_ptr, bmlocal1344_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1345_my_ptr;\
	UINT bmlocal1346_my_bitoff;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET_POS( base_ptr, bmlocal1345_my_ptr, bmlocal1346_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1345_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1345_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1345_my_ptr, bmlocal1346_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// DilloMapsComp_TotalNumberOfMaps: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloMapsComp_TotalNumberOfMaps: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloMapsComp_TotalNumberOfMaps: IS_RESET accessor is not defined because no reset value was specified.
// DilloMapsComp_TotalNumberOfMaps: SET_RESET accessor is not defined because no reset value was specified.
// DilloMapsComp_TotalNumberOfMaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloMapsComp_TotalNumberOfMaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloMapsComp_TotalNumberOfMaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1347_out_val;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET( base_ptr, bmlocal1347_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalNumberOfMaps", 16, (UINT)(bmlocal1347_out_val), "%d", 1);\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloMapsComp_TotalNumberOfMaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1348_my_ptr;\
	UINT bmlocal1349_my_bitoff;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET_POS( base_ptr, bmlocal1348_my_ptr, bmlocal1349_my_bitoff );\
	(*((UINT16*)bmlocal1348_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1349_my_bitoff );\
}

// DilloMapsComp_TotalNumberOfMaps: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloMapsComp_TotalNumberOfMaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1350_tmp_bits;\
	BM_DilloMapsComp_TotalNumberOfMaps_GET_SIZE( base_ptr, out_bytes, bmlocal1350_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1350_tmp_bits );\
}

#define BM_DilloMapsComp_TotalNumberOfMaps_BYTES_SIZE 2

#define BM_DilloMapsComp_TotalBytesOfMaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1353_acc_bytes;\
	UINT bmlocal1354_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1353_acc_bytes = 2;\
	bmlocal1354_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1353_acc_bytes );\
	out_bitoff += bmlocal1354_acc_bits;\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1355_tmp_bitoff;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET_POS( base_ptr, out_ptr, bmlocal1355_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1355_tmp_bitoff);\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_POS_ALIGNED 2

// Alignment of DilloMapsComp_TotalBytesOfMaps: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_DilloMapsComp_TotalBytesOfMaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1356_my_ptr;\
	UINT bmlocal1357_my_bitoff;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET_POS( base_ptr, bmlocal1356_my_ptr, bmlocal1357_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1356_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1356_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal1356_my_ptr, bmlocal1357_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1358_my_ptr;\
	UINT bmlocal1359_my_bitoff;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET_POS( base_ptr, bmlocal1358_my_ptr, bmlocal1359_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1358_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal1358_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal1358_my_ptr, bmlocal1359_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// DilloMapsComp_TotalBytesOfMaps: IS_DEFAULT accessor is not defined because no default value was specified.
// DilloMapsComp_TotalBytesOfMaps: SET_DEFAULT accessor is not defined because no default value was specified.
// DilloMapsComp_TotalBytesOfMaps: IS_RESET accessor is not defined because no reset value was specified.
// DilloMapsComp_TotalBytesOfMaps: SET_RESET accessor is not defined because no reset value was specified.
// DilloMapsComp_TotalBytesOfMaps: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// DilloMapsComp_TotalBytesOfMaps: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_DilloMapsComp_TotalBytesOfMaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1360_out_val;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET( base_ptr, bmlocal1360_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TotalBytesOfMaps", 16, (UINT)(bmlocal1360_out_val), "%d", 1);\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloMapsComp_TotalBytesOfMaps_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1361_my_ptr;\
	UINT bmlocal1362_my_bitoff;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET_POS( base_ptr, bmlocal1361_my_ptr, bmlocal1362_my_bitoff );\
	(*((UINT16*)bmlocal1361_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1362_my_bitoff );\
}

// DilloMapsComp_TotalBytesOfMaps: Validation accessors are not defined because validation condition was not specified.
#define BM_DilloMapsComp_TotalBytesOfMaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1363_tmp_bits;\
	BM_DilloMapsComp_TotalBytesOfMaps_GET_SIZE( base_ptr, out_bytes, bmlocal1363_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1363_tmp_bits );\
}

#define BM_DilloMapsComp_TotalBytesOfMaps_BYTES_SIZE 2

#define BM_DilloMapsComp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloMapsComp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1366_tmp_bits;\
	BM_DilloMapsComp_GET_SIZE( base_ptr, out_bytes, bmlocal1366_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1366_tmp_bits );\
}

#define BM_DilloMapsComp_BYTES_SIZE 4

#define BM_DilloMapsComp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "DilloMapsComp", 1);\
	BM_DilloMapsComp_TotalNumberOfMaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_DilloMapsComp_TotalBytesOfMaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_DilloMapsComp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_DilloMapsComp_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_DILLODIAGNOSTICS_H_ */

