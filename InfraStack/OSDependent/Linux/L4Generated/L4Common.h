/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Ofer
 * Module  : L3L4 interface
 * Author  : Roy Ramon And Anat Ganor
 * Date    : Oct 25th 2006
 * Purpose : Define the L3 L4 msgs
 *****************************************************************************/

#if !defined(_BITMAN_L4COMMON_H_)
#define _BITMAN_L4COMMON_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files
#include <L3L4CommonDefines.h>


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef UINT8 L3L4CompleteHeader[12];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Type : 16;
	UINT16 _Length : 16;
	UINT16 _Version : 16;
	UINT16 _Accessibility : 16;
	UINT16 _Status : 16;
	UINT16 _Reserved2 : 16;
} BMS_L3L4CompleteHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _Reserved2 : 16;
	UINT16 _Status : 16;
	UINT16 _Accessibility : 16;
	UINT16 _Version : 16;
	UINT16 _Length : 16;
	UINT16 _Type : 16;
} BMS_L3L4CompleteHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L3L4CompleteHeader' Type: 'L3L4CompleteHeader', Top-level, Non-instance, No bitoff root
#define BM_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L3L4CompleteHeader_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal72_tmp_bitoff;\
	BM_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, bmlocal72_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal72_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Type_POS_ALIGNED 0

// Alignment of L3L4CompleteHeader_Type: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal73_my_ptr;\
	UINT bmlocal74_my_bitoff;\
	BM_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal73_my_ptr, bmlocal74_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal73_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal73_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal73_my_ptr, bmlocal74_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L3L4CompleteHeader_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal75_my_ptr;\
	UINT bmlocal76_my_bitoff;\
	BM_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal75_my_ptr, bmlocal76_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal75_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal75_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal75_my_ptr, bmlocal76_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L3L4CompleteHeader_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Type: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Type: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal77_out_val;\
	BM_L3L4CompleteHeader_Type_GET( base_ptr, bmlocal77_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Type", 16, (UINT)(bmlocal77_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal78_my_ptr;\
	UINT bmlocal79_my_bitoff;\
	BM_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal78_my_ptr, bmlocal79_my_bitoff );\
	(*((UINT16*)bmlocal78_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal79_my_bitoff );\
}

// L3L4CompleteHeader_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal80_tmp_bits;\
	BM_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, bmlocal80_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal80_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Type_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal83_acc_bytes;\
	UINT bmlocal84_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal83_acc_bytes = 2;\
	bmlocal84_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal83_acc_bytes );\
	out_bitoff += bmlocal84_acc_bits;\
}

#define BM_L3L4CompleteHeader_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal85_tmp_bitoff;\
	BM_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, bmlocal85_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal85_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Length_POS_ALIGNED 2

// Alignment of L3L4CompleteHeader_Length: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal86_my_ptr;\
	UINT bmlocal87_my_bitoff;\
	BM_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal86_my_ptr, bmlocal87_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal86_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal86_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal86_my_ptr, bmlocal87_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L3L4CompleteHeader_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal88_my_ptr;\
	UINT bmlocal89_my_bitoff;\
	BM_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal88_my_ptr, bmlocal89_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal88_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal88_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal88_my_ptr, bmlocal89_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L3L4CompleteHeader_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Length: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Length: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal90_out_val;\
	BM_L3L4CompleteHeader_Length_GET( base_ptr, bmlocal90_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Length", 16, (UINT)(bmlocal90_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal91_my_ptr;\
	UINT bmlocal92_my_bitoff;\
	BM_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal91_my_ptr, bmlocal92_my_bitoff );\
	(*((UINT16*)bmlocal91_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal92_my_bitoff );\
}

// L3L4CompleteHeader_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal93_tmp_bits;\
	BM_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, bmlocal93_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal93_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Length_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal96_acc_bytes;\
	UINT bmlocal97_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal96_acc_bytes = 4;\
	bmlocal97_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal96_acc_bytes );\
	out_bitoff += bmlocal97_acc_bits;\
}

#define BM_L3L4CompleteHeader_Version_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal98_tmp_bitoff;\
	BM_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, bmlocal98_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal98_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Version_POS_ALIGNED 4

// Alignment of L3L4CompleteHeader_Version: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Version_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal99_my_ptr;\
	UINT bmlocal100_my_bitoff;\
	BM_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal99_my_ptr, bmlocal100_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal99_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal99_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal99_my_ptr, bmlocal100_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L3L4CompleteHeader_Version_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal101_my_ptr;\
	UINT bmlocal102_my_bitoff;\
	BM_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal101_my_ptr, bmlocal102_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal101_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal101_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal101_my_ptr, bmlocal102_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L3L4CompleteHeader_Version: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Version: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Version: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Version: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Version: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Version: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal103_out_val;\
	BM_L3L4CompleteHeader_Version_GET( base_ptr, bmlocal103_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Version", 16, (UINT)(bmlocal103_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Version_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Version_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal104_my_ptr;\
	UINT bmlocal105_my_bitoff;\
	BM_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal104_my_ptr, bmlocal105_my_bitoff );\
	(*((UINT16*)bmlocal104_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal105_my_bitoff );\
}

// L3L4CompleteHeader_Version: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Version_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal106_tmp_bits;\
	BM_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, bmlocal106_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal106_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Version_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal109_acc_bytes;\
	UINT bmlocal110_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal109_acc_bytes = 6;\
	bmlocal110_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal109_acc_bytes );\
	out_bitoff += bmlocal110_acc_bits;\
}

#define BM_L3L4CompleteHeader_Accessibility_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal111_tmp_bitoff;\
	BM_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, bmlocal111_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal111_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Accessibility_POS_ALIGNED 6

// Alignment of L3L4CompleteHeader_Accessibility: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Accessibility_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal112_my_ptr;\
	UINT bmlocal113_my_bitoff;\
	BM_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal112_my_ptr, bmlocal113_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal112_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal112_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal112_my_ptr, bmlocal113_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L3L4CompleteHeader_Accessibility_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal114_my_ptr;\
	UINT bmlocal115_my_bitoff;\
	BM_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal114_my_ptr, bmlocal115_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal114_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal114_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal114_my_ptr, bmlocal115_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L3L4CompleteHeader_Accessibility: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Accessibility: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Accessibility: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Accessibility: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Accessibility: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Accessibility: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal116_out_val;\
	BM_L3L4CompleteHeader_Accessibility_GET( base_ptr, bmlocal116_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Accessibility", 16, (UINT)(bmlocal116_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Accessibility_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Accessibility_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal117_my_ptr;\
	UINT bmlocal118_my_bitoff;\
	BM_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal117_my_ptr, bmlocal118_my_bitoff );\
	(*((UINT16*)bmlocal117_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal118_my_bitoff );\
}

// L3L4CompleteHeader_Accessibility: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Accessibility_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal119_tmp_bits;\
	BM_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, bmlocal119_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal119_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Accessibility_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal122_acc_bytes;\
	UINT bmlocal123_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal122_acc_bytes = 8;\
	bmlocal123_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal122_acc_bytes );\
	out_bitoff += bmlocal123_acc_bits;\
}

#define BM_L3L4CompleteHeader_Status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal124_tmp_bitoff;\
	BM_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, bmlocal124_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal124_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Status_POS_ALIGNED 8

// Alignment of L3L4CompleteHeader_Status: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal125_my_ptr;\
	UINT bmlocal126_my_bitoff;\
	BM_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal125_my_ptr, bmlocal126_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal125_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal125_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal125_my_ptr, bmlocal126_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L3L4CompleteHeader_Status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal127_my_ptr;\
	UINT bmlocal128_my_bitoff;\
	BM_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal127_my_ptr, bmlocal128_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal127_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal127_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal127_my_ptr, bmlocal128_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L3L4CompleteHeader_Status: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Status: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Status: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Status: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Status: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Status: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal129_out_val;\
	BM_L3L4CompleteHeader_Status_GET( base_ptr, bmlocal129_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Status", 16, (UINT)(bmlocal129_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Status_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal130_my_ptr;\
	UINT bmlocal131_my_bitoff;\
	BM_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal130_my_ptr, bmlocal131_my_bitoff );\
	(*((UINT16*)bmlocal130_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal131_my_bitoff );\
}

// L3L4CompleteHeader_Status: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal132_tmp_bits;\
	BM_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, bmlocal132_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal132_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Status_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal135_acc_bytes;\
	UINT bmlocal136_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal135_acc_bytes = 10;\
	bmlocal136_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal135_acc_bytes );\
	out_bitoff += bmlocal136_acc_bits;\
}

#define BM_L3L4CompleteHeader_Reserved2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal137_tmp_bitoff;\
	BM_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, bmlocal137_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal137_tmp_bitoff);\
}

#define BM_L3L4CompleteHeader_Reserved2_POS_ALIGNED 10

// Alignment of L3L4CompleteHeader_Reserved2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_Reserved2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal138_my_ptr;\
	UINT bmlocal139_my_bitoff;\
	BM_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal138_my_ptr, bmlocal139_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal138_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal138_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal138_my_ptr, bmlocal139_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L3L4CompleteHeader_Reserved2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal140_my_ptr;\
	UINT bmlocal141_my_bitoff;\
	BM_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal140_my_ptr, bmlocal141_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal140_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal140_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal140_my_ptr, bmlocal141_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L3L4CompleteHeader_Reserved2: IS_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Reserved2: SET_DEFAULT accessor is not defined because no default value was specified.
// L3L4CompleteHeader_Reserved2: IS_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Reserved2: SET_RESET accessor is not defined because no reset value was specified.
// L3L4CompleteHeader_Reserved2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L3L4CompleteHeader_Reserved2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal142_out_val;\
	BM_L3L4CompleteHeader_Reserved2_GET( base_ptr, bmlocal142_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved2", 16, (UINT)(bmlocal142_out_val), "%d", 1);\
}

#define BM_L3L4CompleteHeader_Reserved2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L3L4CompleteHeader_Reserved2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal143_my_ptr;\
	UINT bmlocal144_my_bitoff;\
	BM_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal143_my_ptr, bmlocal144_my_bitoff );\
	(*((UINT16*)bmlocal143_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal144_my_bitoff );\
}

// L3L4CompleteHeader_Reserved2: Validation accessors are not defined because validation condition was not specified.
#define BM_L3L4CompleteHeader_Reserved2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal145_tmp_bits;\
	BM_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, bmlocal145_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal145_tmp_bits );\
}

#define BM_L3L4CompleteHeader_Reserved2_BYTES_SIZE 2

#define BM_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal148_tmp_bits;\
	BM_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, bmlocal148_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal148_tmp_bits );\
}

#define BM_L3L4CompleteHeader_BYTES_SIZE 12

#define BM_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L3L4CompleteHeader", 1);\
	BM_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L3L4CompleteHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 ChannelInfoArray[24];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _Frequency;
	UINT16 _ChannelId : 16;
	UINT8 _Bandwidth : 8;
	UINT8 _Fft : 8;
	BMS_LittleEndianness_Uint8 _Preambles[15];
	UINT8 _Reserved : 8;
} BMS_ChannelInfoArray;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Reserved : 8;
	BMS_LittleEndianness_Uint8 _Preambles[15];
	UINT8 _Fft : 8;
	UINT8 _Bandwidth : 8;
	UINT16 _ChannelId : 16;
	UINT32 _Frequency;
} BMS_ChannelInfoArray;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'ChannelInfoArray' Type: 'ChannelInfoArray', Top-level, Non-instance, Including bitoff root
#define BM_ChannelInfoArray_Frequency_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of ChannelInfoArray_Frequency: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_Frequency_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Frequency_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal149_my_ptr;\
	UINT bmlocal150_my_bitoff;\
	BM_ChannelInfoArray_Frequency_GET_POS( base_ptr, base_bitoff, bmlocal149_my_ptr, bmlocal150_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal149_my_ptr, bmlocal150_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_Frequency_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal151_my_ptr;\
	UINT bmlocal152_my_bitoff;\
	BM_ChannelInfoArray_Frequency_GET_POS( base_ptr, base_bitoff, bmlocal151_my_ptr, bmlocal152_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal151_my_ptr, bmlocal152_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_Frequency: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Frequency: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Frequency: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Frequency: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Frequency: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_Frequency: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_Frequency_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal153_out_val;\
	BM_ChannelInfoArray_Frequency_GET( base_ptr, base_bitoff, bmlocal153_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Frequency", 32, (UINT)(bmlocal153_out_val), "%d", 1);\
}

#define BM_ChannelInfoArray_Frequency_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Frequency_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_Frequency_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal154_val;\
	BM_ChannelInfoArray_Frequency_GET( base_ptr, base_bitoff, bmlocal154_val );\
	(bmlocal154_val)++;\
	BM_ChannelInfoArray_Frequency_SET( base_ptr, base_bitoff, bmlocal154_val );\
}

// ChannelInfoArray_Frequency: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_Frequency_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal155_tmp_bits;\
	BM_ChannelInfoArray_Frequency_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal155_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal155_tmp_bits );\
}

#define BM_ChannelInfoArray_Frequency_BYTES_SIZE 4

#define BM_ChannelInfoArray_ChannelId_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal158_acc_bytes;\
	UINT bmlocal159_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal158_acc_bytes = 4;\
	bmlocal159_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal158_acc_bytes );\
	out_bitoff += bmlocal159_acc_bits;\
}

// Alignment of ChannelInfoArray_ChannelId: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_ChannelId_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_ChannelId_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal160_my_ptr;\
	UINT bmlocal161_my_bitoff;\
	BM_ChannelInfoArray_ChannelId_GET_POS( base_ptr, base_bitoff, bmlocal160_my_ptr, bmlocal161_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal160_my_ptr, bmlocal161_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_ChannelId_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal162_my_ptr;\
	UINT bmlocal163_my_bitoff;\
	BM_ChannelInfoArray_ChannelId_GET_POS( base_ptr, base_bitoff, bmlocal162_my_ptr, bmlocal163_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal162_my_ptr, bmlocal163_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_ChannelId: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_ChannelId: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_ChannelId: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_ChannelId: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_ChannelId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_ChannelId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_ChannelId_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal164_out_val;\
	BM_ChannelInfoArray_ChannelId_GET( base_ptr, base_bitoff, bmlocal164_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ChannelId", 16, (UINT)(bmlocal164_out_val), "%d", 1);\
}

#define BM_ChannelInfoArray_ChannelId_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_ChannelId_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_ChannelId_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal165_val;\
	BM_ChannelInfoArray_ChannelId_GET( base_ptr, base_bitoff, bmlocal165_val );\
	(bmlocal165_val)++;\
	BM_ChannelInfoArray_ChannelId_SET( base_ptr, base_bitoff, bmlocal165_val );\
}

// ChannelInfoArray_ChannelId: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_ChannelId_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal166_tmp_bits;\
	BM_ChannelInfoArray_ChannelId_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal166_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal166_tmp_bits );\
}

#define BM_ChannelInfoArray_ChannelId_BYTES_SIZE 2

#define BM_ChannelInfoArray_Bandwidth_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal169_acc_bytes;\
	UINT bmlocal170_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal169_acc_bytes = 6;\
	bmlocal170_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal169_acc_bytes );\
	out_bitoff += bmlocal170_acc_bits;\
}

// Alignment of ChannelInfoArray_Bandwidth: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_Bandwidth_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Bandwidth_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal171_my_ptr;\
	UINT bmlocal172_my_bitoff;\
	BM_ChannelInfoArray_Bandwidth_GET_POS( base_ptr, base_bitoff, bmlocal171_my_ptr, bmlocal172_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal171_my_ptr, bmlocal172_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_Bandwidth_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal173_my_ptr;\
	UINT bmlocal174_my_bitoff;\
	BM_ChannelInfoArray_Bandwidth_GET_POS( base_ptr, base_bitoff, bmlocal173_my_ptr, bmlocal174_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal173_my_ptr, bmlocal174_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_Bandwidth: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Bandwidth: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Bandwidth: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Bandwidth: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Bandwidth: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_Bandwidth: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_Bandwidth_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal175_out_val;\
	BM_ChannelInfoArray_Bandwidth_GET( base_ptr, base_bitoff, bmlocal175_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Bandwidth", 8, (UINT)(bmlocal175_out_val), "%d", 1);\
}

#define BM_ChannelInfoArray_Bandwidth_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Bandwidth_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_Bandwidth_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal176_val;\
	BM_ChannelInfoArray_Bandwidth_GET( base_ptr, base_bitoff, bmlocal176_val );\
	(bmlocal176_val)++;\
	BM_ChannelInfoArray_Bandwidth_SET( base_ptr, base_bitoff, bmlocal176_val );\
}

// ChannelInfoArray_Bandwidth: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_Bandwidth_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal177_tmp_bits;\
	BM_ChannelInfoArray_Bandwidth_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal177_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal177_tmp_bits );\
}

#define BM_ChannelInfoArray_Bandwidth_BYTES_SIZE 1

#define BM_ChannelInfoArray_Fft_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal180_acc_bytes;\
	UINT bmlocal181_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal180_acc_bytes = 7;\
	bmlocal181_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal180_acc_bytes );\
	out_bitoff += bmlocal181_acc_bits;\
}

// Alignment of ChannelInfoArray_Fft: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_Fft_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Fft_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal182_my_ptr;\
	UINT bmlocal183_my_bitoff;\
	BM_ChannelInfoArray_Fft_GET_POS( base_ptr, base_bitoff, bmlocal182_my_ptr, bmlocal183_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal182_my_ptr, bmlocal183_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_Fft_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal184_my_ptr;\
	UINT bmlocal185_my_bitoff;\
	BM_ChannelInfoArray_Fft_GET_POS( base_ptr, base_bitoff, bmlocal184_my_ptr, bmlocal185_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal184_my_ptr, bmlocal185_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_Fft: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Fft: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Fft: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Fft: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Fft: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_Fft: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_Fft_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal186_out_val;\
	BM_ChannelInfoArray_Fft_GET( base_ptr, base_bitoff, bmlocal186_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Fft", 8, (UINT)(bmlocal186_out_val), "%d", 1);\
}

#define BM_ChannelInfoArray_Fft_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Fft_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_Fft_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal187_val;\
	BM_ChannelInfoArray_Fft_GET( base_ptr, base_bitoff, bmlocal187_val );\
	(bmlocal187_val)++;\
	BM_ChannelInfoArray_Fft_SET( base_ptr, base_bitoff, bmlocal187_val );\
}

// ChannelInfoArray_Fft: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_Fft_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal188_tmp_bits;\
	BM_ChannelInfoArray_Fft_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal188_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal188_tmp_bits );\
}

#define BM_ChannelInfoArray_Fft_BYTES_SIZE 1

#define BM_ChannelInfoArray_Preambles_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal191_acc_bytes;\
	UINT bmlocal192_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal191_acc_bytes = 8;\
	bmlocal192_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal191_acc_bytes );\
	out_bitoff += bmlocal192_acc_bits;\
}

// ARRAY: ChannelInfoArray_Preambles
#define BM_ChannelInfoArray_Preambles_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 15;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Preambles_GET_DIMENSION_ELEMENT_COUNT( base_ptr, base_bitoff, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 15;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Preambles_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal193_out_ptr;\
	UINT bmlocal194_out_bitoff;\
	UINT bmlocal195_element_size_bytes;\
	UINT bmlocal196_element_size_bits;\
	BM_ChannelInfoArray_Preambles_GET_POS( base_ptr, base_bitoff, bmlocal193_out_ptr, bmlocal194_out_bitoff );\
	bmlocal195_element_size_bytes = 1;\
	bmlocal196_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal193_out_ptr) + (idx0) * bmlocal195_element_size_bytes );\
	out_bitoff = bmlocal194_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal196_element_size_bits );\
}

// COMPOSITE: Full name: 'ChannelInfoArray_Preambles' Type: 'Uint8', Inner, Non-instance, Including bitoff root
#define BM_ChannelInfoArray_Preambles_value_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal197_parent_out_ptr;\
	BM_ChannelInfoArray_Preambles_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal197_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal197_parent_out_ptr;\
}

// Alignment of ChannelInfoArray_Preambles_value: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_Preambles_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArray_Preambles_value_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal198_my_ptr;\
	UINT bmlocal199_my_bitoff;\
	BM_ChannelInfoArray_Preambles_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal198_my_ptr, bmlocal199_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal198_my_ptr, bmlocal199_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_Preambles_value_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal200_my_ptr;\
	UINT bmlocal201_my_bitoff;\
	BM_ChannelInfoArray_Preambles_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal200_my_ptr, bmlocal201_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal200_my_ptr, bmlocal201_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_Preambles_value: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Preambles_value: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Preambles_value: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Preambles_value: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Preambles_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_Preambles_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_Preambles_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal202_out_val;\
	BM_ChannelInfoArray_Preambles_value_GET( base_ptr, base_bitoff, idx0, bmlocal202_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal202_out_val), "%u", 1);\
}

#define BM_ChannelInfoArray_Preambles_value_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Preambles_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_ChannelInfoArray_Preambles_value_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal203_val;\
	BM_ChannelInfoArray_Preambles_value_GET( base_ptr, base_bitoff, idx0, bmlocal203_val );\
	(bmlocal203_val)++;\
	BM_ChannelInfoArray_Preambles_value_SET( base_ptr, base_bitoff, idx0, bmlocal203_val );\
}

// ChannelInfoArray_Preambles_value: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_Preambles_value_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal204_tmp_bits;\
	BM_ChannelInfoArray_Preambles_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal204_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal204_tmp_bits );\
}

#define BM_ChannelInfoArray_Preambles_value_BYTES_SIZE 1

#define BM_ChannelInfoArray_Preambles_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArray_Preambles_GET_BYTES_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal207_tmp_bits;\
	BM_ChannelInfoArray_Preambles_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal207_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal207_tmp_bits );\
}

#define BM_ChannelInfoArray_Preambles_BYTES_CELL_SIZE 1

#define BM_ChannelInfoArray_Preambles_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Preambles_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_ChannelInfoArray_Preambles_DUMP_IDX( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Preambles_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_ChannelInfoArray_Preambles_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal208_dim_size0;\
	UINT bmlocal209_idx0;\
	bmlocal208_dim_size0 = 15;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Preambles", 1);\
	for( bmlocal209_idx0=0; bmlocal209_idx0<bmlocal208_dim_size0; bmlocal209_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal209_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_ChannelInfoArray_Preambles_DUMP_DEPTH_IDX( base_ptr, base_bitoff, bmlocal209_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Preambles_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Preambles_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_Preambles_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal210_tmp_bits;\
	BM_ChannelInfoArray_Preambles_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal210_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal210_tmp_bits );\
}

#define BM_ChannelInfoArray_Preambles_BYTES_SIZE 15

#define BM_ChannelInfoArray_Reserved_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal211_tmp_bytes = 0;\
	UINT bmlocal212_tmp_bits = 0;\
	UINT bmlocal213_acc_bytes;\
	UINT bmlocal214_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal213_acc_bytes = 8;\
	bmlocal214_acc_bits = 0;\
	BM_ChannelInfoArray_Preambles_GET_SIZE( base_ptr, base_bitoff, bmlocal211_tmp_bytes, bmlocal212_tmp_bits );\
	bmlocal213_acc_bytes += bmlocal211_tmp_bytes;\
	bmlocal214_acc_bits += bmlocal212_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal213_acc_bytes );\
	out_bitoff += bmlocal214_acc_bits;\
}

// Alignment of ChannelInfoArray_Reserved: accumulated=(Variable), parent.base=(Variable)
#define BM_ChannelInfoArray_Reserved_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_Reserved_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal215_my_ptr;\
	UINT bmlocal216_my_bitoff;\
	BM_ChannelInfoArray_Reserved_GET_POS( base_ptr, base_bitoff, bmlocal215_my_ptr, bmlocal216_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal215_my_ptr, bmlocal216_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_ChannelInfoArray_Reserved_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal217_my_ptr;\
	UINT bmlocal218_my_bitoff;\
	BM_ChannelInfoArray_Reserved_GET_POS( base_ptr, base_bitoff, bmlocal217_my_ptr, bmlocal218_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal217_my_ptr, bmlocal218_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// ChannelInfoArray_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// ChannelInfoArray_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// ChannelInfoArray_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// ChannelInfoArray_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_ChannelInfoArray_Reserved_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal219_out_val;\
	BM_ChannelInfoArray_Reserved_GET( base_ptr, base_bitoff, bmlocal219_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 8, (UINT)(bmlocal219_out_val), "%d", 1);\
}

#define BM_ChannelInfoArray_Reserved_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_Reserved_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_ChannelInfoArray_Reserved_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal220_val;\
	BM_ChannelInfoArray_Reserved_GET( base_ptr, base_bitoff, bmlocal220_val );\
	(bmlocal220_val)++;\
	BM_ChannelInfoArray_Reserved_SET( base_ptr, base_bitoff, bmlocal220_val );\
}

// ChannelInfoArray_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_ChannelInfoArray_Reserved_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal221_tmp_bits;\
	BM_ChannelInfoArray_Reserved_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal221_tmp_bits );\
}

#define BM_ChannelInfoArray_Reserved_BYTES_SIZE 1

#define BM_ChannelInfoArray_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal222_tmp_bytes = 0;\
	UINT bmlocal223_tmp_bits = 0;\
	out_bytes = 9;\
	out_bits = 0;\
	BM_ChannelInfoArray_Preambles_GET_SIZE( base_ptr, base_bitoff, bmlocal222_tmp_bytes, bmlocal223_tmp_bits );\
	out_bytes += bmlocal222_tmp_bytes;\
	out_bits += bmlocal223_tmp_bits;\
}

#define BM_ChannelInfoArray_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal224_tmp_bits;\
	BM_ChannelInfoArray_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal224_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal224_tmp_bits );\
}

#define BM_ChannelInfoArray_BYTES_SIZE 24

#define BM_ChannelInfoArray_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ChannelInfoArray", 1);\
	BM_ChannelInfoArray_Frequency_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_ChannelInfoArray_ChannelId_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_ChannelInfoArray_Bandwidth_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_ChannelInfoArray_Fft_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_ChannelInfoArray_Preambles_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_ChannelInfoArray_Reserved_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_ChannelInfoArray_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_ChannelInfoArray_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L4COMMON_H_ */

