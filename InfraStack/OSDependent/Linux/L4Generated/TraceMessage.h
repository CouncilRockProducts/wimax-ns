/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:06 AM
 *
 * Project : Ofer
 * Module  : TraceMessage
 * Author  : Igor Brainman
 * Date    : 23/07/2006
 * Purpose : Trace Messages Format
 *****************************************************************************/

#if !defined(_BITMAN_TRACEMESSAGE_H_)
#define _BITMAN_TRACEMESSAGE_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define BM_TraceMsgStatus_msgID_MASK (0x000FFFFF)

#define BM_TraceMsgStatus_msgID_OFFSET (0)

#define BM_TraceMsgStatus_msgID_SHIFTED_MASK (0x000FFFFF)

#define BM_TraceMsgStatus_numOfParams_MASK (0x00000003)

#define BM_TraceMsgStatus_numOfParams_OFFSET (20)

#define BM_TraceMsgStatus_numOfParams_SHIFTED_MASK (0x00300000)

#define BM_TraceMsgStatus_timeStampPresent_MASK (0x00000001)

#define BM_TraceMsgStatus_timeStampPresent_OFFSET (22)

#define BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK (0x00400000)

#define BM_TraceMsgStatus_inlineString_MASK (0x00000001)

#define BM_TraceMsgStatus_inlineString_OFFSET (23)

#define BM_TraceMsgStatus_inlineString_SHIFTED_MASK (0x00800000)

#define BM_TraceMsgStatus_payload_MASK (0x00000001)

#define BM_TraceMsgStatus_payload_OFFSET (24)

#define BM_TraceMsgStatus_payload_SHIFTED_MASK (0x01000000)

#define BM_TraceMsgStatus_bufferOverrun_MASK (0x00000001)

#define BM_TraceMsgStatus_bufferOverrun_OFFSET (25)

#define BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK (0x02000000)

#define BM_TraceMsgStatus_subSystemID_MASK (0x00000007)

#define BM_TraceMsgStatus_subSystemID_OFFSET (26)

#define BM_TraceMsgStatus_subSystemID_SHIFTED_MASK (0x1C000000)

#define BM_TraceMsgStatus_severity_MASK (0x00000007)

#define BM_TraceMsgStatus_severity_OFFSET (29)

#define BM_TraceMsgStatus_severity_SHIFTED_MASK (0xE0000000)

typedef UINT8 TraceMsgStatus[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _msgID : 20; //a unique message ID to access trace string table
		UINT32 _numOfParams : 2; //may be 0..3
		UINT32 _timeStampPresent : 1; //set to TRUE, if time stamp is attached
		UINT32 _inlineString : 1; //set to TRUE, if inline string is attached
		UINT32 _payload : 1; //set to TRUE, if raw buffer (payload) is attached
		UINT32 _bufferOverrun : 1; //set to TRUE, if buffer overflow happened
		UINT32 _subSystemID : 3; //may be 0..7
		UINT32 _severity : 3; //may be 0..7
	} fields;
} BMS_TraceMsgStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _severity : 3; //may be 0..7
		UINT32 _subSystemID : 3; //may be 0..7
		UINT32 _bufferOverrun : 1; //set to TRUE, if buffer overflow happened
		UINT32 _payload : 1; //set to TRUE, if raw buffer (payload) is attached
		UINT32 _inlineString : 1; //set to TRUE, if inline string is attached
		UINT32 _timeStampPresent : 1; //set to TRUE, if time stamp is attached
		UINT32 _numOfParams : 2; //may be 0..3
		UINT32 _msgID : 20; //a unique message ID to access trace string table
	} fields;
} BMS_TraceMsgStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceMsgStatus' Type: 'TraceMsgStatus', Top-level, Non-instance, No bitoff root
#define BM_TraceMsgStatus_msgID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceMsgStatus_msgID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal79_tmp_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, out_ptr, bmlocal79_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal79_tmp_bitoff);\
}

#define BM_TraceMsgStatus_msgID_POS_ALIGNED 0

// Alignment of TraceMsgStatus_msgID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_msgID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 4;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_msgID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal80_my_ptr;\
	UINT bmlocal81_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal80_my_ptr, bmlocal81_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal80_my_ptr, bmlocal81_my_bitoff, 20, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_msgID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal82_tmp_var;
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal82_tmp_var );
	return bmlocal82_tmp_var;
}

#define BM_TraceMsgStatus_msgID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal83_my_ptr;\
	UINT bmlocal84_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal83_my_ptr, bmlocal84_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal83_my_ptr, bmlocal84_my_bitoff, 20, in_val, 0x00000000 );\
}

// TraceMsgStatus_msgID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_msgID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_msgID: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_msgID: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_msgID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_msgID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal85_out_val;\
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal85_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "msgID", 20, (UINT)(bmlocal85_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_msgID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_msgID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal86_val;\
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal86_val );\
	(bmlocal86_val)++;\
	BM_TraceMsgStatus_msgID_SET( base_ptr, bmlocal86_val );\
}

// TraceMsgStatus_msgID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_msgID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal87_tmp_bits;\
	BM_TraceMsgStatus_msgID_GET_SIZE( base_ptr, out_bytes, bmlocal87_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal87_tmp_bits );\
}

#define BM_TraceMsgStatus_msgID_BYTES_SIZE 3

#define BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal90_acc_bytes;\
	UINT bmlocal91_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal90_acc_bytes = 2;\
	bmlocal91_acc_bits = 4;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal90_acc_bytes );\
	out_bitoff += bmlocal91_acc_bits;\
}

// Alignment of TraceMsgStatus_numOfParams: accumulated=(2,4, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_numOfParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 2;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_numOfParams_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal92_my_ptr;\
	UINT bmlocal93_my_bitoff;\
	BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, bmlocal92_my_ptr, bmlocal93_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal92_my_ptr, bmlocal93_my_bitoff, 2, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_numOfParams_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal94_tmp_var;
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal94_tmp_var );
	return bmlocal94_tmp_var;
}

#define BM_TraceMsgStatus_numOfParams_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal95_my_ptr;\
	UINT bmlocal96_my_bitoff;\
	BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, bmlocal95_my_ptr, bmlocal96_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal95_my_ptr, bmlocal96_my_bitoff, 2, in_val, 0x00000002 );\
}

// TraceMsgStatus_numOfParams: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_numOfParams: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_numOfParams: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_numOfParams: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_numOfParams: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_numOfParams: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal97_out_val;\
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal97_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfParams", 2, (UINT)(bmlocal97_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_numOfParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_numOfParams_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal98_val;\
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal98_val );\
	(bmlocal98_val)++;\
	BM_TraceMsgStatus_numOfParams_SET( base_ptr, bmlocal98_val );\
}

// TraceMsgStatus_numOfParams: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_numOfParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal99_tmp_bits;\
	BM_TraceMsgStatus_numOfParams_GET_SIZE( base_ptr, out_bytes, bmlocal99_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal99_tmp_bits );\
}

#define BM_TraceMsgStatus_numOfParams_BYTES_SIZE 1

#define BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal102_acc_bytes;\
	UINT bmlocal103_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal102_acc_bytes = 2;\
	bmlocal103_acc_bits = 6;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal102_acc_bytes );\
	out_bitoff += bmlocal103_acc_bits;\
}

// Alignment of TraceMsgStatus_timeStampPresent: accumulated=(2,6, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_timeStampPresent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal104_my_ptr;\
	UINT bmlocal105_my_bitoff;\
	BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, bmlocal104_my_ptr, bmlocal105_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal104_my_ptr, bmlocal105_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_timeStampPresent_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal106_tmp_var;
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal106_tmp_var );
	return bmlocal106_tmp_var;
}

#define BM_TraceMsgStatus_timeStampPresent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal107_my_ptr;\
	UINT bmlocal108_my_bitoff;\
	BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, bmlocal107_my_ptr, bmlocal108_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal107_my_ptr, bmlocal108_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceMsgStatus_timeStampPresent: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_timeStampPresent: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_timeStampPresent: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_timeStampPresent: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_timeStampPresent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_timeStampPresent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal109_out_val;\
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal109_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStampPresent", 1, (UINT)(bmlocal109_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_timeStampPresent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_timeStampPresent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal110_val;\
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal110_val );\
	(bmlocal110_val)++;\
	BM_TraceMsgStatus_timeStampPresent_SET( base_ptr, bmlocal110_val );\
}

// TraceMsgStatus_timeStampPresent: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_timeStampPresent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal111_tmp_bits;\
	BM_TraceMsgStatus_timeStampPresent_GET_SIZE( base_ptr, out_bytes, bmlocal111_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal111_tmp_bits );\
}

#define BM_TraceMsgStatus_timeStampPresent_BYTES_SIZE 1

#define BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal114_acc_bytes;\
	UINT bmlocal115_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal114_acc_bytes = 2;\
	bmlocal115_acc_bits = 7;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal114_acc_bytes );\
	out_bitoff += bmlocal115_acc_bits;\
}

// Alignment of TraceMsgStatus_inlineString: accumulated=(2,7, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_inlineString_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal116_my_ptr;\
	UINT bmlocal117_my_bitoff;\
	BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, bmlocal116_my_ptr, bmlocal117_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal116_my_ptr, bmlocal117_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_inlineString_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal118_tmp_var;
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal118_tmp_var );
	return bmlocal118_tmp_var;
}

#define BM_TraceMsgStatus_inlineString_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal119_my_ptr;\
	UINT bmlocal120_my_bitoff;\
	BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, bmlocal119_my_ptr, bmlocal120_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal119_my_ptr, bmlocal120_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceMsgStatus_inlineString: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_inlineString: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_inlineString: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_inlineString: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_inlineString: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_inlineString: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal121_out_val;\
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal121_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "inlineString", 1, (UINT)(bmlocal121_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_inlineString_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal122_val;\
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal122_val );\
	(bmlocal122_val)++;\
	BM_TraceMsgStatus_inlineString_SET( base_ptr, bmlocal122_val );\
}

// TraceMsgStatus_inlineString: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal123_tmp_bits;\
	BM_TraceMsgStatus_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal123_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal123_tmp_bits );\
}

#define BM_TraceMsgStatus_inlineString_BYTES_SIZE 1

#define BM_TraceMsgStatus_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal126_acc_bytes;\
	UINT bmlocal127_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal126_acc_bytes = 3;\
	bmlocal127_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal126_acc_bytes );\
	out_bitoff += bmlocal127_acc_bits;\
}

#define BM_TraceMsgStatus_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal128_tmp_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, out_ptr, bmlocal128_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal128_tmp_bitoff);\
}

#define BM_TraceMsgStatus_payload_POS_ALIGNED 3

// Alignment of TraceMsgStatus_payload: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_payload_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal129_my_ptr;\
	UINT bmlocal130_my_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, bmlocal129_my_ptr, bmlocal130_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal129_my_ptr, bmlocal130_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_payload_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal131_tmp_var;
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal131_tmp_var );
	return bmlocal131_tmp_var;
}

#define BM_TraceMsgStatus_payload_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal132_my_ptr;\
	UINT bmlocal133_my_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, bmlocal132_my_ptr, bmlocal133_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal132_my_ptr, bmlocal133_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceMsgStatus_payload: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_payload: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_payload: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_payload: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_payload: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_payload: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal134_out_val;\
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal134_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "payload", 1, (UINT)(bmlocal134_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_payload_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal135_val;\
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal135_val );\
	(bmlocal135_val)++;\
	BM_TraceMsgStatus_payload_SET( base_ptr, bmlocal135_val );\
}

// TraceMsgStatus_payload: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal136_tmp_bits;\
	BM_TraceMsgStatus_payload_GET_SIZE( base_ptr, out_bytes, bmlocal136_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal136_tmp_bits );\
}

#define BM_TraceMsgStatus_payload_BYTES_SIZE 1

#define BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal139_acc_bytes;\
	UINT bmlocal140_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal139_acc_bytes = 3;\
	bmlocal140_acc_bits = 1;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal139_acc_bytes );\
	out_bitoff += bmlocal140_acc_bits;\
}

// Alignment of TraceMsgStatus_bufferOverrun: accumulated=(3,1, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_bufferOverrun_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal141_my_ptr;\
	UINT bmlocal142_my_bitoff;\
	BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, bmlocal141_my_ptr, bmlocal142_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal141_my_ptr, bmlocal142_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_bufferOverrun_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal143_tmp_var;
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal143_tmp_var );
	return bmlocal143_tmp_var;
}

#define BM_TraceMsgStatus_bufferOverrun_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal144_my_ptr;\
	UINT bmlocal145_my_bitoff;\
	BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, bmlocal144_my_ptr, bmlocal145_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal144_my_ptr, bmlocal145_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceMsgStatus_bufferOverrun: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_bufferOverrun: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_bufferOverrun: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_bufferOverrun: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_bufferOverrun: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_bufferOverrun: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal146_out_val;\
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal146_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "bufferOverrun", 1, (UINT)(bmlocal146_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_bufferOverrun_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_bufferOverrun_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal147_val;\
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal147_val );\
	(bmlocal147_val)++;\
	BM_TraceMsgStatus_bufferOverrun_SET( base_ptr, bmlocal147_val );\
}

// TraceMsgStatus_bufferOverrun: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_bufferOverrun_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal148_tmp_bits;\
	BM_TraceMsgStatus_bufferOverrun_GET_SIZE( base_ptr, out_bytes, bmlocal148_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal148_tmp_bits );\
}

#define BM_TraceMsgStatus_bufferOverrun_BYTES_SIZE 1

#define BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal151_acc_bytes;\
	UINT bmlocal152_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal151_acc_bytes = 3;\
	bmlocal152_acc_bits = 2;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal151_acc_bytes );\
	out_bitoff += bmlocal152_acc_bits;\
}

// Alignment of TraceMsgStatus_subSystemID: accumulated=(3,2, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal153_my_ptr;\
	UINT bmlocal154_my_bitoff;\
	BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, bmlocal153_my_ptr, bmlocal154_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal153_my_ptr, bmlocal154_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal155_tmp_var;
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal155_tmp_var );
	return bmlocal155_tmp_var;
}

#define BM_TraceMsgStatus_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal156_my_ptr;\
	UINT bmlocal157_my_bitoff;\
	BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, bmlocal156_my_ptr, bmlocal157_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal156_my_ptr, bmlocal157_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceMsgStatus_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal158_out_val;\
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal158_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 3, (UINT)(bmlocal158_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal159_val;\
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal159_val );\
	(bmlocal159_val)++;\
	BM_TraceMsgStatus_subSystemID_SET( base_ptr, bmlocal159_val );\
}

// TraceMsgStatus_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal160_tmp_bits;\
	BM_TraceMsgStatus_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal160_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal160_tmp_bits );\
}

#define BM_TraceMsgStatus_subSystemID_BYTES_SIZE 1

#define BM_TraceMsgStatus_severity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal163_acc_bytes;\
	UINT bmlocal164_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal163_acc_bytes = 3;\
	bmlocal164_acc_bits = 5;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal163_acc_bytes );\
	out_bitoff += bmlocal164_acc_bits;\
}

// Alignment of TraceMsgStatus_severity: accumulated=(3,5, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_severity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_severity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal165_my_ptr;\
	UINT bmlocal166_my_bitoff;\
	BM_TraceMsgStatus_severity_GET_POS( base_ptr, bmlocal165_my_ptr, bmlocal166_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal165_my_ptr, bmlocal166_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_severity_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal167_tmp_var;
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal167_tmp_var );
	return bmlocal167_tmp_var;
}

#define BM_TraceMsgStatus_severity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal168_my_ptr;\
	UINT bmlocal169_my_bitoff;\
	BM_TraceMsgStatus_severity_GET_POS( base_ptr, bmlocal168_my_ptr, bmlocal169_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal168_my_ptr, bmlocal169_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceMsgStatus_severity: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_severity: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_severity: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_severity: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_severity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_severity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal170_out_val;\
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal170_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "severity", 3, (UINT)(bmlocal170_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_severity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_severity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal171_val;\
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal171_val );\
	(bmlocal171_val)++;\
	BM_TraceMsgStatus_severity_SET( base_ptr, bmlocal171_val );\
}

// TraceMsgStatus_severity: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_severity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal172_tmp_bits;\
	BM_TraceMsgStatus_severity_GET_SIZE( base_ptr, out_bytes, bmlocal172_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal172_tmp_bits );\
}

#define BM_TraceMsgStatus_severity_BYTES_SIZE 1

#define BM_TraceMsgStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal175_tmp_bits;\
	BM_TraceMsgStatus_GET_SIZE( base_ptr, out_bytes, bmlocal175_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal175_tmp_bits );\
}

#define BM_TraceMsgStatus_BYTES_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceMsgStatus_GET_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceMsgStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal176_my_ptr;\
	UINT bmlocal177_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal176_my_ptr, bmlocal177_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal176_my_ptr, bmlocal177_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal178_tmp_var;
	BM_TraceMsgStatus_GET( base_ptr, bmlocal178_tmp_var );
	return bmlocal178_tmp_var;
}

#define BM_TraceMsgStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal179_my_ptr;\
	UINT bmlocal180_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal179_my_ptr, bmlocal180_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal179_my_ptr, bmlocal180_my_bitoff, 32, in_val, 0x00000000 );\
}

// TraceMsgStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus: SET_RESET accessor is not defined because no reset value was specified.
#define BM_TraceMsgStatus_GET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal181_val;\
	BM_TraceMsgStatus_GET( base_ptr, bmlocal181_val );\
	param_msgID = (UINT32)(((bmlocal181_val&BM_TraceMsgStatus_msgID_SHIFTED_MASK) >> BM_TraceMsgStatus_msgID_OFFSET));\
	param_numOfParams = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_numOfParams_SHIFTED_MASK) >> BM_TraceMsgStatus_numOfParams_OFFSET));\
	param_timeStampPresent = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK) >> BM_TraceMsgStatus_timeStampPresent_OFFSET));\
	param_inlineString = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_inlineString_SHIFTED_MASK) >> BM_TraceMsgStatus_inlineString_OFFSET));\
	param_payload = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_payload_SHIFTED_MASK) >> BM_TraceMsgStatus_payload_OFFSET));\
	param_bufferOverrun = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK) >> BM_TraceMsgStatus_bufferOverrun_OFFSET));\
	param_subSystemID = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_subSystemID_SHIFTED_MASK) >> BM_TraceMsgStatus_subSystemID_OFFSET));\
	param_severity = (UINT8)(((bmlocal181_val&BM_TraceMsgStatus_severity_SHIFTED_MASK) >> BM_TraceMsgStatus_severity_OFFSET));\
}

#define BM_TraceMsgStatus_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal182_varToWrite = (UINT32)(((param_msgID&BM_TraceMsgStatus_msgID_MASK) << BM_TraceMsgStatus_msgID_OFFSET) | ((param_numOfParams&BM_TraceMsgStatus_numOfParams_MASK) << BM_TraceMsgStatus_numOfParams_OFFSET) | ((param_timeStampPresent&BM_TraceMsgStatus_timeStampPresent_MASK) << BM_TraceMsgStatus_timeStampPresent_OFFSET) | ((param_inlineString&BM_TraceMsgStatus_inlineString_MASK) << BM_TraceMsgStatus_inlineString_OFFSET) | ((param_payload&BM_TraceMsgStatus_payload_MASK) << BM_TraceMsgStatus_payload_OFFSET) | ((param_bufferOverrun&BM_TraceMsgStatus_bufferOverrun_MASK) << BM_TraceMsgStatus_bufferOverrun_OFFSET) | ((param_subSystemID&BM_TraceMsgStatus_subSystemID_MASK) << BM_TraceMsgStatus_subSystemID_OFFSET) | ((param_severity&BM_TraceMsgStatus_severity_MASK) << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceMsgStatus_SET( base_ptr, bmlocal182_varToWrite );\
}

#define BM_TraceMsgStatus_STRICT_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal183_varToWrite = (UINT32)((param_msgID << BM_TraceMsgStatus_msgID_OFFSET) | (param_numOfParams << BM_TraceMsgStatus_numOfParams_OFFSET) | (param_timeStampPresent << BM_TraceMsgStatus_timeStampPresent_OFFSET) | (param_inlineString << BM_TraceMsgStatus_inlineString_OFFSET) | (param_payload << BM_TraceMsgStatus_payload_OFFSET) | (param_bufferOverrun << BM_TraceMsgStatus_bufferOverrun_OFFSET) | (param_subSystemID << BM_TraceMsgStatus_subSystemID_OFFSET) | (param_severity << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceMsgStatus_SET( base_ptr, bmlocal183_varToWrite );\
}

#define BM_TraceMsgStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceMsgStatus", 1);\
	BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceTimeStamp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _timeStamp; //HW clock(Timer1) timestamp
} BMS_TraceTimeStamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _timeStamp; //HW clock(Timer1) timestamp
} BMS_TraceTimeStamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceTimeStamp' Type: 'TraceTimeStamp', Top-level, Non-instance, No bitoff root
#define BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceTimeStamp_timeStamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal184_tmp_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, out_ptr, bmlocal184_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal184_tmp_bitoff);\
}

#define BM_TraceTimeStamp_timeStamp_POS_ALIGNED 0

// Alignment of TraceTimeStamp_timeStamp: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceTimeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_timeStamp_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal185_my_ptr;\
	UINT bmlocal186_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal185_my_ptr, bmlocal186_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal185_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal185_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal185_my_ptr, bmlocal186_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceTimeStamp_timeStamp_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal187_tmp_var;
	BM_TraceTimeStamp_timeStamp_GET( base_ptr, bmlocal187_tmp_var );
	return bmlocal187_tmp_var;
}

#define BM_TraceTimeStamp_timeStamp_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal188_my_ptr;\
	UINT bmlocal189_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal188_my_ptr, bmlocal189_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal188_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal188_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal188_my_ptr, bmlocal189_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceTimeStamp_timeStamp: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceTimeStamp_timeStamp: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceTimeStamp_timeStamp: IS_RESET accessor is not defined because no reset value was specified.
// TraceTimeStamp_timeStamp: SET_RESET accessor is not defined because no reset value was specified.
// TraceTimeStamp_timeStamp: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceTimeStamp_timeStamp: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal190_out_val;\
	BM_TraceTimeStamp_timeStamp_GET( base_ptr, bmlocal190_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStamp", 32, (UINT)(bmlocal190_out_val), "%d", 1);\
}

#define BM_TraceTimeStamp_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceTimeStamp_timeStamp_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal191_my_ptr;\
	UINT bmlocal192_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal191_my_ptr, bmlocal192_my_bitoff );\
	(*((UINT32*)bmlocal191_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal192_my_bitoff );\
}

// TraceTimeStamp_timeStamp: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceTimeStamp_timeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal193_tmp_bits;\
	BM_TraceTimeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal193_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal193_tmp_bits );\
}

#define BM_TraceTimeStamp_timeStamp_BYTES_SIZE 4

#define BM_TraceTimeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal196_tmp_bits;\
	BM_TraceTimeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal196_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal196_tmp_bits );\
}

#define BM_TraceTimeStamp_BYTES_SIZE 4

#define BM_TraceTimeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceTimeStamp", 1);\
	BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceTimeStamp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceInlineString[4];

// COMPOSITE: Full name: 'TraceInlineString' Type: 'TraceInlineString', Top-level, Non-instance, No bitoff root
#define BM_TraceInlineString_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceInlineString_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal197_tmp_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, out_ptr, bmlocal197_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal197_tmp_bitoff);\
}

#define BM_TraceInlineString_length_POS_ALIGNED 0

// Alignment of TraceInlineString_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceInlineString_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal198_my_ptr;\
	UINT bmlocal199_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal198_my_ptr, bmlocal199_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal198_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal198_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal198_my_ptr, bmlocal199_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceInlineString_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal200_tmp_var;
	BM_TraceInlineString_length_GET( base_ptr, bmlocal200_tmp_var );
	return bmlocal200_tmp_var;
}

#define BM_TraceInlineString_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal201_my_ptr;\
	UINT bmlocal202_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal201_my_ptr, bmlocal202_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal201_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal201_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal201_my_ptr, bmlocal202_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceInlineString_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceInlineString_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal203_out_val;\
	BM_TraceInlineString_length_GET( base_ptr, bmlocal203_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal203_out_val), "%d", 1);\
}

#define BM_TraceInlineString_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceInlineString_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal204_my_ptr;\
	UINT bmlocal205_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal204_my_ptr, bmlocal205_my_bitoff );\
	(*((UINT32*)bmlocal204_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal205_my_bitoff );\
}

// TraceInlineString_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceInlineString_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal206_tmp_bits;\
	BM_TraceInlineString_length_GET_SIZE( base_ptr, out_bytes, bmlocal206_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal206_tmp_bits );\
}

#define BM_TraceInlineString_length_BYTES_SIZE 4

#define BM_TraceInlineString_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal209_acc_bytes;\
	UINT bmlocal210_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal209_acc_bytes = 4;\
	bmlocal210_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal209_acc_bytes );\
	out_bitoff += bmlocal210_acc_bits;\
}

#define BM_TraceInlineString_inlineString_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal211_tmp_bitoff;\
	BM_TraceInlineString_inlineString_GET_POS( base_ptr, out_ptr, bmlocal211_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal211_tmp_bitoff);\
}

#define BM_TraceInlineString_inlineString_POS_ALIGNED 4

// ARRAY: TraceInlineString_inlineString
#define BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal212_var0;\
		BM_TraceInlineString_length_GET( base_ptr, bmlocal212_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal212_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceInlineString_inlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal213_my_bytes;
	UINT bmlocal214_my_bits;
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal213_my_bytes, bmlocal214_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal213_my_bytes, bmlocal214_my_bits);
	BMI_UNUSED_VAR( bmlocal214_my_bits );
	return bmlocal213_my_bytes;
}

#define BM_TraceInlineString_inlineString_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal215_var0;\
			BM_TraceInlineString_length_GET( base_ptr, bmlocal215_var0 );\
			out_element_count = (UINT)(bmlocal215_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal216_out_ptr;\
	UINT bmlocal217_out_bitoff;\
	UINT bmlocal218_element_size_bytes;\
	UINT bmlocal219_element_size_bits;\
	BM_TraceInlineString_inlineString_GET_POS( base_ptr, bmlocal216_out_ptr, bmlocal217_out_bitoff );\
	bmlocal218_element_size_bytes = 1;\
	bmlocal219_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal216_out_ptr) + (idx0) * bmlocal218_element_size_bytes );\
	out_bitoff = bmlocal217_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal219_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceInlineString_inlineString' Type: 'Char', Inner, Non-instance, No bitoff root
#define BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal220_parent_out_ptr;\
	BM_TraceInlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, bmlocal220_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal220_parent_out_ptr;\
}

// Alignment of TraceInlineString_inlineString_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TraceInlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal221_my_ptr;\
	UINT bmlocal222_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal221_my_ptr, bmlocal222_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (char)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal221_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (char)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal221_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal221_my_ptr, bmlocal222_my_bitoff, 8, char, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE char BM_INLINE_TraceInlineString_inlineString_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	char bmlocal223_tmp_var;
	BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, bmlocal223_tmp_var );
	return bmlocal223_tmp_var;
}

#define BM_TraceInlineString_inlineString_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal224_my_ptr;\
	UINT bmlocal225_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal224_my_ptr, bmlocal225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal224_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal224_my_ptr, bmlocal225_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TraceInlineString_inlineString_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_inlineString_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_inlineString_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_inlineString_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_inlineString_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceInlineString_inlineString_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	char bmlocal226_out_val;\
	BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, bmlocal226_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal226_out_val), "%d", 1);\
}

#define BM_TraceInlineString_inlineString_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceInlineString_inlineString_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal227_my_ptr;\
	UINT bmlocal228_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal227_my_ptr, bmlocal228_my_bitoff );\
	(*((UINT8*)bmlocal227_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal228_my_bitoff );\
}

// TraceInlineString_inlineString_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceInlineString_inlineString_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal229_tmp_bits;\
	BM_TraceInlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal229_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal229_tmp_bits );\
}

#define BM_TraceInlineString_inlineString_value_BYTES_SIZE 1

#define BM_TraceInlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal232_tmp_bits;\
	BM_TraceInlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal232_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal232_tmp_bits );\
}

#define BM_TraceInlineString_inlineString_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceInlineString_inlineString_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal233_dim_size0;\
	UINT bmlocal234_idx0;\
	{\
		UINT32 bmlocal235_var0;\
		BM_TraceInlineString_length_GET( base_ptr, bmlocal235_var0 );\
		bmlocal233_dim_size0 = (UINT)(bmlocal235_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	for( bmlocal234_idx0=0; bmlocal234_idx0<bmlocal233_dim_size0; bmlocal234_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal234_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, bmlocal234_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceInlineString_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal236_tmp_bits;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal236_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal236_tmp_bits );\
}


#define BM_TraceInlineString_r1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal237_tmp_bytes = 0;\
	UINT bmlocal238_tmp_bits = 0;\
	UINT bmlocal239_acc_bytes;\
	UINT bmlocal240_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal239_acc_bytes = 4;\
	bmlocal240_acc_bits = 0;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal237_tmp_bytes, bmlocal238_tmp_bits );\
	bmlocal239_acc_bytes += bmlocal237_tmp_bytes;\
	bmlocal240_acc_bits += bmlocal238_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal239_acc_bytes );\
	out_bitoff += bmlocal240_acc_bits;\
}

#define BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r1>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_r1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceInlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal241_tmp_bytes = 0;\
	UINT bmlocal242_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal241_tmp_bytes, bmlocal242_tmp_bits );\
	out_bytes += bmlocal241_tmp_bytes;\
	out_bits += bmlocal242_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceInlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal243_tmp_bits;\
	BM_TraceInlineString_GET_SIZE( base_ptr, out_bytes, bmlocal243_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal243_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceInlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal244_my_bytes;
	UINT bmlocal245_my_bits;
	BM_TraceInlineString_GET_SIZE( base_ptr, bmlocal244_my_bytes, bmlocal245_my_bits );
	BMI_UNUSED_VAR( bmlocal245_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal244_my_bytes;
}

#define BM_TraceInlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceInlineString", 1);\
	BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TracePayload[4];

// COMPOSITE: Full name: 'TracePayload' Type: 'TracePayload', Top-level, Non-instance, No bitoff root
#define BM_TracePayload_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TracePayload_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal246_tmp_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, out_ptr, bmlocal246_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal246_tmp_bitoff);\
}

#define BM_TracePayload_length_POS_ALIGNED 0

// Alignment of TracePayload_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TracePayload_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal247_my_ptr;\
	UINT bmlocal248_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal247_my_ptr, bmlocal248_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal247_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal247_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal247_my_ptr, bmlocal248_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TracePayload_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal249_tmp_var;
	BM_TracePayload_length_GET( base_ptr, bmlocal249_tmp_var );
	return bmlocal249_tmp_var;
}

#define BM_TracePayload_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal250_my_ptr;\
	UINT bmlocal251_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal250_my_ptr, bmlocal251_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal250_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal250_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal250_my_ptr, bmlocal251_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TracePayload_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_length: IS_RESET accessor is not defined because no reset value was specified.
// TracePayload_length: SET_RESET accessor is not defined because no reset value was specified.
// TracePayload_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TracePayload_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TracePayload_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal252_out_val;\
	BM_TracePayload_length_GET( base_ptr, bmlocal252_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal252_out_val), "%d", 1);\
}

#define BM_TracePayload_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TracePayload_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal253_my_ptr;\
	UINT bmlocal254_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal253_my_ptr, bmlocal254_my_bitoff );\
	(*((UINT32*)bmlocal253_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal254_my_bitoff );\
}

// TracePayload_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TracePayload_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal255_tmp_bits;\
	BM_TracePayload_length_GET_SIZE( base_ptr, out_bytes, bmlocal255_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal255_tmp_bits );\
}

#define BM_TracePayload_length_BYTES_SIZE 4

#define BM_TracePayload_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal258_acc_bytes;\
	UINT bmlocal259_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal258_acc_bytes = 4;\
	bmlocal259_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal258_acc_bytes );\
	out_bitoff += bmlocal259_acc_bits;\
}

#define BM_TracePayload_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal260_tmp_bitoff;\
	BM_TracePayload_payload_GET_POS( base_ptr, out_ptr, bmlocal260_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal260_tmp_bitoff);\
}

#define BM_TracePayload_payload_POS_ALIGNED 4

// ARRAY: TracePayload_payload
#define BM_TracePayload_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal261_var0;\
		BM_TracePayload_length_GET( base_ptr, bmlocal261_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal261_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TracePayload_payload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal262_my_bytes;
	UINT bmlocal263_my_bits;
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal262_my_bytes, bmlocal263_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal262_my_bytes, bmlocal263_my_bits);
	BMI_UNUSED_VAR( bmlocal263_my_bits );
	return bmlocal262_my_bytes;
}

#define BM_TracePayload_payload_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal264_var0;\
			BM_TracePayload_length_GET( base_ptr, bmlocal264_var0 );\
			out_element_count = (UINT)(bmlocal264_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_payload_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal265_out_ptr;\
	UINT bmlocal266_out_bitoff;\
	UINT bmlocal267_element_size_bytes;\
	UINT bmlocal268_element_size_bits;\
	BM_TracePayload_payload_GET_POS( base_ptr, bmlocal265_out_ptr, bmlocal266_out_bitoff );\
	bmlocal267_element_size_bytes = 1;\
	bmlocal268_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal265_out_ptr) + (idx0) * bmlocal267_element_size_bytes );\
	out_bitoff = bmlocal266_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal268_element_size_bits );\
}

// COMPOSITE: Full name: 'TracePayload_payload' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal269_parent_out_ptr;\
	BM_TracePayload_payload_GET_ELEMENT_POS( base_ptr, idx0, bmlocal269_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal269_parent_out_ptr;\
}

// Alignment of TracePayload_payload_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TracePayload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal270_my_ptr;\
	UINT bmlocal271_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal270_my_ptr, bmlocal271_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal270_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal270_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal270_my_ptr, bmlocal271_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_TracePayload_payload_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal272_tmp_var;
	BM_TracePayload_payload_value_GET( base_ptr, idx0, bmlocal272_tmp_var );
	return bmlocal272_tmp_var;
}

#define BM_TracePayload_payload_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal273_my_ptr;\
	UINT bmlocal274_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal273_my_ptr, bmlocal274_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal273_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal273_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal273_my_ptr, bmlocal274_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TracePayload_payload_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_payload_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_payload_value: IS_RESET accessor is not defined because no reset value was specified.
// TracePayload_payload_value: SET_RESET accessor is not defined because no reset value was specified.
// TracePayload_payload_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TracePayload_payload_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal275_out_val;\
	BM_TracePayload_payload_value_GET( base_ptr, idx0, bmlocal275_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal275_out_val), "%u", 1);\
}

#define BM_TracePayload_payload_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TracePayload_payload_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal276_my_ptr;\
	UINT bmlocal277_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal276_my_ptr, bmlocal277_my_bitoff );\
	(*((UINT8*)bmlocal276_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal277_my_bitoff );\
}

// TracePayload_payload_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TracePayload_payload_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal278_tmp_bits;\
	BM_TracePayload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal278_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal278_tmp_bits );\
}

#define BM_TracePayload_payload_value_BYTES_SIZE 1

#define BM_TracePayload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal281_tmp_bits;\
	BM_TracePayload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal281_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal281_tmp_bits );\
}

#define BM_TracePayload_payload_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TracePayload_payload_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TracePayload_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal282_dim_size0;\
	UINT bmlocal283_idx0;\
	{\
		UINT32 bmlocal284_var0;\
		BM_TracePayload_length_GET( base_ptr, bmlocal284_var0 );\
		bmlocal282_dim_size0 = (UINT)(bmlocal284_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	for( bmlocal283_idx0=0; bmlocal283_idx0<bmlocal282_dim_size0; bmlocal283_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal283_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, bmlocal283_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TracePayload_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal285_tmp_bits;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, out_bytes, bmlocal285_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal285_tmp_bits );\
}


#define BM_TracePayload_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal286_tmp_bytes = 0;\
	UINT bmlocal287_tmp_bits = 0;\
	UINT bmlocal288_acc_bytes;\
	UINT bmlocal289_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal288_acc_bytes = 4;\
	bmlocal289_acc_bits = 0;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal286_tmp_bytes, bmlocal287_tmp_bits );\
	bmlocal288_acc_bytes += bmlocal286_tmp_bytes;\
	bmlocal289_acc_bits += bmlocal287_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal288_acc_bytes );\
	out_bitoff += bmlocal289_acc_bits;\
}

#define BM_TracePayload_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TracePayload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal290_tmp_bytes = 0;\
	UINT bmlocal291_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal290_tmp_bytes, bmlocal291_tmp_bits );\
	out_bytes += bmlocal290_tmp_bytes;\
	out_bits += bmlocal291_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TracePayload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal292_tmp_bits;\
	BM_TracePayload_GET_SIZE( base_ptr, out_bytes, bmlocal292_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal292_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TracePayload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal293_my_bytes;
	UINT bmlocal294_my_bits;
	BM_TracePayload_GET_SIZE( base_ptr, bmlocal293_my_bytes, bmlocal294_my_bits );
	BMI_UNUSED_VAR( bmlocal294_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal293_my_bytes;
}

#define BM_TracePayload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TracePayload", 1);\
	BM_TracePayload_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TracePayload_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TracePayload_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceRunTimeMsgData[4];

// COMPOSITE: Full name: 'TraceRunTimeMsgData' Type: 'TraceRunTimeMsgData', Top-level, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceRunTimeMsgData_status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal295_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, out_ptr, bmlocal295_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal295_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_POS_ALIGNED 0

// COMPOSITE: Full name: 'TraceRunTimeMsgData_status' Type: 'TraceMsgStatus', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal296_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal296_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal296_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_status_msgID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal297_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, out_ptr, bmlocal297_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal297_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_msgID_POS_ALIGNED 0

// Alignment of TraceRunTimeMsgData_status_msgID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_msgID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 4;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal298_my_ptr;\
	UINT bmlocal299_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal298_my_ptr, bmlocal299_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal298_my_ptr, bmlocal299_my_bitoff, 20, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_msgID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal300_tmp_var;
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal300_tmp_var );
	return bmlocal300_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_msgID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal301_my_ptr;\
	UINT bmlocal302_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal301_my_ptr, bmlocal302_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal301_my_ptr, bmlocal302_my_bitoff, 20, in_val, 0x00000000 );\
}

// TraceRunTimeMsgData_status_msgID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_msgID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_msgID: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_msgID: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_msgID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_msgID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal303_out_val;\
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal303_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "msgID", 20, (UINT)(bmlocal303_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_msgID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_msgID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal304_val;\
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal304_val );\
	(bmlocal304_val)++;\
	BM_TraceRunTimeMsgData_status_msgID_SET( base_ptr, bmlocal304_val );\
}

// TraceRunTimeMsgData_status_msgID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_msgID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal305_tmp_bits;\
	BM_TraceRunTimeMsgData_status_msgID_GET_SIZE( base_ptr, out_bytes, bmlocal305_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal305_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_msgID_BYTES_SIZE 3

#define BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal308_acc_bytes;\
	UINT bmlocal309_acc_bits;\
	PVOID bmlocal310_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal310_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal310_parent_out_ptr;\
	bmlocal308_acc_bytes = 2;\
	bmlocal309_acc_bits = 4;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal308_acc_bytes );\
	out_bitoff += bmlocal309_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_numOfParams: accumulated=(2,4, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_numOfParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 2;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal311_my_ptr;\
	UINT bmlocal312_my_bitoff;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, bmlocal311_my_ptr, bmlocal312_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal311_my_ptr, bmlocal312_my_bitoff, 2, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_numOfParams_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal313_tmp_var;
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal313_tmp_var );
	return bmlocal313_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_numOfParams_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal314_my_ptr;\
	UINT bmlocal315_my_bitoff;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, bmlocal314_my_ptr, bmlocal315_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal314_my_ptr, bmlocal315_my_bitoff, 2, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_numOfParams: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_numOfParams: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_numOfParams: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_numOfParams: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_numOfParams: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_numOfParams: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal316_out_val;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal316_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfParams", 2, (UINT)(bmlocal316_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal317_val;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal317_val );\
	(bmlocal317_val)++;\
	BM_TraceRunTimeMsgData_status_numOfParams_SET( base_ptr, bmlocal317_val );\
}

// TraceRunTimeMsgData_status_numOfParams: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_numOfParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal318_tmp_bits;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_SIZE( base_ptr, out_bytes, bmlocal318_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal318_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal321_acc_bytes;\
	UINT bmlocal322_acc_bits;\
	PVOID bmlocal323_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal323_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal323_parent_out_ptr;\
	bmlocal321_acc_bytes = 2;\
	bmlocal322_acc_bits = 6;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal321_acc_bytes );\
	out_bitoff += bmlocal322_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_timeStampPresent: accumulated=(2,6, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal324_my_ptr;\
	UINT bmlocal325_my_bitoff;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, bmlocal324_my_ptr, bmlocal325_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal324_my_ptr, bmlocal325_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_timeStampPresent_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal326_tmp_var;
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal326_tmp_var );
	return bmlocal326_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal327_my_ptr;\
	UINT bmlocal328_my_bitoff;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, bmlocal327_my_ptr, bmlocal328_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal327_my_ptr, bmlocal328_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_timeStampPresent: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_timeStampPresent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal329_out_val;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal329_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStampPresent", 1, (UINT)(bmlocal329_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal330_val;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal330_val );\
	(bmlocal330_val)++;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_SET( base_ptr, bmlocal330_val );\
}

// TraceRunTimeMsgData_status_timeStampPresent: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal331_tmp_bits;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_SIZE( base_ptr, out_bytes, bmlocal331_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal331_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal334_acc_bytes;\
	UINT bmlocal335_acc_bits;\
	PVOID bmlocal336_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal336_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal336_parent_out_ptr;\
	bmlocal334_acc_bytes = 2;\
	bmlocal335_acc_bits = 7;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal334_acc_bytes );\
	out_bitoff += bmlocal335_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_inlineString: accumulated=(2,7, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal337_my_ptr;\
	UINT bmlocal338_my_bitoff;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, bmlocal337_my_ptr, bmlocal338_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal337_my_ptr, bmlocal338_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_inlineString_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal339_tmp_var;
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal339_tmp_var );
	return bmlocal339_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_inlineString_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal340_my_ptr;\
	UINT bmlocal341_my_bitoff;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, bmlocal340_my_ptr, bmlocal341_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal340_my_ptr, bmlocal341_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_inlineString: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_inlineString: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_inlineString: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_inlineString: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_inlineString: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_inlineString: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal342_out_val;\
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal342_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "inlineString", 1, (UINT)(bmlocal342_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal343_val;\
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal343_val );\
	(bmlocal343_val)++;\
	BM_TraceRunTimeMsgData_status_inlineString_SET( base_ptr, bmlocal343_val );\
}

// TraceRunTimeMsgData_status_inlineString: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal344_tmp_bits;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal344_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal344_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal347_acc_bytes;\
	UINT bmlocal348_acc_bits;\
	PVOID bmlocal349_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal349_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal349_parent_out_ptr;\
	bmlocal347_acc_bytes = 3;\
	bmlocal348_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal347_acc_bytes );\
	out_bitoff += bmlocal348_acc_bits;\
}

#define BM_TraceRunTimeMsgData_status_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal350_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, out_ptr, bmlocal350_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal350_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_payload_POS_ALIGNED 3

// Alignment of TraceRunTimeMsgData_status_payload: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal351_my_ptr;\
	UINT bmlocal352_my_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, bmlocal351_my_ptr, bmlocal352_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal351_my_ptr, bmlocal352_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_payload_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal353_tmp_var;
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal353_tmp_var );
	return bmlocal353_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_payload_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal354_my_ptr;\
	UINT bmlocal355_my_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, bmlocal354_my_ptr, bmlocal355_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal354_my_ptr, bmlocal355_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_payload: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_payload: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_payload: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_payload: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_payload: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_payload: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal356_out_val;\
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal356_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "payload", 1, (UINT)(bmlocal356_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_payload_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal357_val;\
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal357_val );\
	(bmlocal357_val)++;\
	BM_TraceRunTimeMsgData_status_payload_SET( base_ptr, bmlocal357_val );\
}

// TraceRunTimeMsgData_status_payload: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal358_tmp_bits;\
	BM_TraceRunTimeMsgData_status_payload_GET_SIZE( base_ptr, out_bytes, bmlocal358_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal358_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_payload_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal361_acc_bytes;\
	UINT bmlocal362_acc_bits;\
	PVOID bmlocal363_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal363_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal363_parent_out_ptr;\
	bmlocal361_acc_bytes = 3;\
	bmlocal362_acc_bits = 1;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal361_acc_bytes );\
	out_bitoff += bmlocal362_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_bufferOverrun: accumulated=(3,1, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal364_my_ptr;\
	UINT bmlocal365_my_bitoff;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, bmlocal364_my_ptr, bmlocal365_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal364_my_ptr, bmlocal365_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_bufferOverrun_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal366_tmp_var;
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal366_tmp_var );
	return bmlocal366_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal367_my_ptr;\
	UINT bmlocal368_my_bitoff;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, bmlocal367_my_ptr, bmlocal368_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal367_my_ptr, bmlocal368_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_bufferOverrun: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_bufferOverrun: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal369_out_val;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal369_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "bufferOverrun", 1, (UINT)(bmlocal369_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal370_val;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal370_val );\
	(bmlocal370_val)++;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_SET( base_ptr, bmlocal370_val );\
}

// TraceRunTimeMsgData_status_bufferOverrun: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal371_tmp_bits;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_SIZE( base_ptr, out_bytes, bmlocal371_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal371_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal374_acc_bytes;\
	UINT bmlocal375_acc_bits;\
	PVOID bmlocal376_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal376_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal376_parent_out_ptr;\
	bmlocal374_acc_bytes = 3;\
	bmlocal375_acc_bits = 2;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal374_acc_bytes );\
	out_bitoff += bmlocal375_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_subSystemID: accumulated=(3,2, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal377_my_ptr;\
	UINT bmlocal378_my_bitoff;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, bmlocal377_my_ptr, bmlocal378_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal377_my_ptr, bmlocal378_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal379_tmp_var;
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal379_tmp_var );
	return bmlocal379_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal380_my_ptr;\
	UINT bmlocal381_my_bitoff;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, bmlocal380_my_ptr, bmlocal381_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal380_my_ptr, bmlocal381_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal382_out_val;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal382_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 3, (UINT)(bmlocal382_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal383_val;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal383_val );\
	(bmlocal383_val)++;\
	BM_TraceRunTimeMsgData_status_subSystemID_SET( base_ptr, bmlocal383_val );\
}

// TraceRunTimeMsgData_status_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal384_tmp_bits;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal384_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal384_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal387_acc_bytes;\
	UINT bmlocal388_acc_bits;\
	PVOID bmlocal389_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal389_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal389_parent_out_ptr;\
	bmlocal387_acc_bytes = 3;\
	bmlocal388_acc_bits = 5;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal387_acc_bytes );\
	out_bitoff += bmlocal388_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_severity: accumulated=(3,5, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_severity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal390_my_ptr;\
	UINT bmlocal391_my_bitoff;\
	BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, bmlocal390_my_ptr, bmlocal391_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal390_my_ptr, bmlocal391_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_severity_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal392_tmp_var;
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal392_tmp_var );
	return bmlocal392_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_severity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal393_my_ptr;\
	UINT bmlocal394_my_bitoff;\
	BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, bmlocal393_my_ptr, bmlocal394_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal393_my_ptr, bmlocal394_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_severity: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_severity: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_severity: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_severity: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_severity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_severity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal395_out_val;\
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal395_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "severity", 3, (UINT)(bmlocal395_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_severity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_severity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal396_val;\
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal396_val );\
	(bmlocal396_val)++;\
	BM_TraceRunTimeMsgData_status_severity_SET( base_ptr, bmlocal396_val );\
}

// TraceRunTimeMsgData_status_severity: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_severity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal397_tmp_bits;\
	BM_TraceRunTimeMsgData_status_severity_GET_SIZE( base_ptr, out_bytes, bmlocal397_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal397_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_severity_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal400_tmp_bits;\
	BM_TraceRunTimeMsgData_status_GET_SIZE( base_ptr, out_bytes, bmlocal400_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal400_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_BYTES_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_status_GET_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceRunTimeMsgData_status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal401_my_ptr;\
	UINT bmlocal402_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal401_my_ptr, bmlocal402_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal401_my_ptr, bmlocal402_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal403_tmp_var;
	BM_TraceRunTimeMsgData_status_GET( base_ptr, bmlocal403_tmp_var );
	return bmlocal403_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal404_my_ptr;\
	UINT bmlocal405_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal404_my_ptr, bmlocal405_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal404_my_ptr, bmlocal405_my_bitoff, 32, in_val, 0x00000000 );\
}

// TraceRunTimeMsgData_status: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status: SET_RESET accessor is not defined because no reset value was specified.
#define BM_TraceRunTimeMsgData_status_GET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal406_val;\
	BM_TraceRunTimeMsgData_status_GET( base_ptr, bmlocal406_val );\
	param_msgID = (UINT32)(((bmlocal406_val&BM_TraceMsgStatus_msgID_SHIFTED_MASK) >> BM_TraceMsgStatus_msgID_OFFSET));\
	param_numOfParams = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_numOfParams_SHIFTED_MASK) >> BM_TraceMsgStatus_numOfParams_OFFSET));\
	param_timeStampPresent = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK) >> BM_TraceMsgStatus_timeStampPresent_OFFSET));\
	param_inlineString = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_inlineString_SHIFTED_MASK) >> BM_TraceMsgStatus_inlineString_OFFSET));\
	param_payload = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_payload_SHIFTED_MASK) >> BM_TraceMsgStatus_payload_OFFSET));\
	param_bufferOverrun = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK) >> BM_TraceMsgStatus_bufferOverrun_OFFSET));\
	param_subSystemID = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_subSystemID_SHIFTED_MASK) >> BM_TraceMsgStatus_subSystemID_OFFSET));\
	param_severity = (UINT8)(((bmlocal406_val&BM_TraceMsgStatus_severity_SHIFTED_MASK) >> BM_TraceMsgStatus_severity_OFFSET));\
}

#define BM_TraceRunTimeMsgData_status_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal407_varToWrite = (UINT32)(((param_msgID&BM_TraceMsgStatus_msgID_MASK) << BM_TraceMsgStatus_msgID_OFFSET) | ((param_numOfParams&BM_TraceMsgStatus_numOfParams_MASK) << BM_TraceMsgStatus_numOfParams_OFFSET) | ((param_timeStampPresent&BM_TraceMsgStatus_timeStampPresent_MASK) << BM_TraceMsgStatus_timeStampPresent_OFFSET) | ((param_inlineString&BM_TraceMsgStatus_inlineString_MASK) << BM_TraceMsgStatus_inlineString_OFFSET) | ((param_payload&BM_TraceMsgStatus_payload_MASK) << BM_TraceMsgStatus_payload_OFFSET) | ((param_bufferOverrun&BM_TraceMsgStatus_bufferOverrun_MASK) << BM_TraceMsgStatus_bufferOverrun_OFFSET) | ((param_subSystemID&BM_TraceMsgStatus_subSystemID_MASK) << BM_TraceMsgStatus_subSystemID_OFFSET) | ((param_severity&BM_TraceMsgStatus_severity_MASK) << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceRunTimeMsgData_status_SET( base_ptr, bmlocal407_varToWrite );\
}

#define BM_TraceRunTimeMsgData_status_STRICT_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal408_varToWrite = (UINT32)((param_msgID << BM_TraceMsgStatus_msgID_OFFSET) | (param_numOfParams << BM_TraceMsgStatus_numOfParams_OFFSET) | (param_timeStampPresent << BM_TraceMsgStatus_timeStampPresent_OFFSET) | (param_inlineString << BM_TraceMsgStatus_inlineString_OFFSET) | (param_payload << BM_TraceMsgStatus_payload_OFFSET) | (param_bufferOverrun << BM_TraceMsgStatus_bufferOverrun_OFFSET) | (param_subSystemID << BM_TraceMsgStatus_subSystemID_OFFSET) | (param_severity << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceRunTimeMsgData_status_SET( base_ptr, bmlocal408_varToWrite );\
}

#define BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "status", 1);\
	BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal411_acc_bytes;\
	UINT bmlocal412_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal411_acc_bytes = 4;\
	bmlocal412_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal411_acc_bytes );\
	out_bitoff += bmlocal412_acc_bits;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal413_tmp_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, out_ptr, bmlocal413_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal413_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_POS_ALIGNED 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal414_parent_out_ptr;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, bmlocal414_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal414_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_timeStampOpt_timeStamp' Type: 'TraceTimeStamp', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal415_parent_out_ptr;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_POS( base_ptr, bmlocal415_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal415_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal416_tmp_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, out_ptr, bmlocal416_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal416_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal417_my_ptr;\
	UINT bmlocal418_my_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, bmlocal417_my_ptr, bmlocal418_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal417_my_ptr, bmlocal418_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal419_tmp_var;
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal419_tmp_var );
	return bmlocal419_tmp_var;
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal420_my_ptr;\
	UINT bmlocal421_my_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, bmlocal420_my_ptr, bmlocal421_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal420_my_ptr, bmlocal421_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal422_out_val;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal422_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStamp", 32, (UINT)(bmlocal422_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal423_val;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal423_val );\
	(bmlocal423_val)++;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_SET( base_ptr, bmlocal423_val );\
}

// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal424_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal424_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal424_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal427_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal427_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal427_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "timeStamp", 1);\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal428_var0;\
		BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal428_var0 );\
		if( bmlocal428_var0 != 0 )\
		{\
			out_bytes = 4;\
			out_bits = 0;\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal429_var0;\
		BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal429_var0 );\
		out_flag = (bmlocal429_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal430_tmp_bytes = 0;\
	UINT bmlocal431_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_SIZE( base_ptr, bmlocal430_tmp_bytes, bmlocal431_tmp_bits );\
	out_bytes += bmlocal430_tmp_bytes;\
	out_bits += bmlocal431_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal432_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, out_bytes, bmlocal432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal432_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal433_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "timeStampOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_EVALUATE( base_ptr, bmlocal433_out_flag );\
		if( bmlocal433_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal434_tmp_bytes = 0;\
	UINT bmlocal435_tmp_bits = 0;\
	UINT bmlocal436_acc_bytes;\
	UINT bmlocal437_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal436_acc_bytes = 4;\
	bmlocal437_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal434_tmp_bytes, bmlocal435_tmp_bits );\
	bmlocal436_acc_bytes += bmlocal434_tmp_bytes;\
	bmlocal437_acc_bits += bmlocal435_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal436_acc_bytes );\
	out_bitoff += bmlocal437_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal438_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_POS( base_ptr, bmlocal438_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal438_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_inlineStringOpt_inlineString' Type: 'TraceInlineString', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal439_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal439_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal439_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal440_tmp_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, out_ptr, bmlocal440_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal440_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_inlineStringOpt_inlineString_length: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal441_my_ptr;\
	UINT bmlocal442_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, bmlocal441_my_ptr, bmlocal442_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal441_my_ptr, bmlocal442_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal443_tmp_var;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal443_tmp_var );
	return bmlocal443_tmp_var;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal444_my_ptr;\
	UINT bmlocal445_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, bmlocal444_my_ptr, bmlocal445_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal444_my_ptr, bmlocal445_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal446_out_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal446_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal446_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal447_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal447_val );\
	(bmlocal447_val)++;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_SET( base_ptr, bmlocal447_val );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal448_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_SIZE( base_ptr, out_bytes, bmlocal448_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal448_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal451_acc_bytes;\
	UINT bmlocal452_acc_bits;\
	PVOID bmlocal453_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal453_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal453_parent_out_ptr;\
	bmlocal451_acc_bytes = 4;\
	bmlocal452_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal451_acc_bytes );\
	out_bitoff += bmlocal452_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal454_tmp_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, out_ptr, bmlocal454_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal454_tmp_bitoff);\
}

// ARRAY: TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal455_var0;\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal455_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal455_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal456_my_bytes;
	UINT bmlocal457_my_bits;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal456_my_bytes, bmlocal457_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal456_my_bytes, bmlocal457_my_bits);
	BMI_UNUSED_VAR( bmlocal457_my_bits );
	return bmlocal456_my_bytes;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal458_var0;\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal458_var0 );\
			out_element_count = (UINT)(bmlocal458_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal459_out_ptr;\
	UINT bmlocal460_out_bitoff;\
	UINT bmlocal461_element_size_bytes;\
	UINT bmlocal462_element_size_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, bmlocal459_out_ptr, bmlocal460_out_bitoff );\
	bmlocal461_element_size_bytes = 1;\
	bmlocal462_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal459_out_ptr) + (idx0) * bmlocal461_element_size_bytes );\
	out_bitoff = bmlocal460_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal462_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString' Type: 'Char', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal463_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, bmlocal463_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal463_parent_out_ptr;\
}

// Alignment of TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal464_my_ptr;\
	UINT bmlocal465_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal464_my_ptr, bmlocal465_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal464_my_ptr, bmlocal465_my_bitoff, 8, char, out_val, 0xFFFFFFFF );\
}

BMI_INLINE char BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	char bmlocal466_tmp_var;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal466_tmp_var );
	return bmlocal466_tmp_var;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal467_my_ptr;\
	UINT bmlocal468_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal467_my_ptr, bmlocal468_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal467_my_ptr, bmlocal468_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	char bmlocal469_out_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal469_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal469_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	char bmlocal470_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal470_val );\
	(bmlocal470_val)++;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_SET( base_ptr, idx0, bmlocal470_val );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal471_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal471_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal471_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal474_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal474_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal474_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal475_dim_size0;\
	UINT bmlocal476_idx0;\
	{\
		UINT32 bmlocal477_var0;\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal477_var0 );\
		bmlocal475_dim_size0 = (UINT)(bmlocal477_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	for( bmlocal476_idx0=0; bmlocal476_idx0<bmlocal475_dim_size0; bmlocal476_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal476_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, bmlocal476_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal478_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal478_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal478_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal479_tmp_bytes = 0;\
	UINT bmlocal480_tmp_bits = 0;\
	UINT bmlocal481_acc_bytes;\
	UINT bmlocal482_acc_bits;\
	PVOID bmlocal483_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal483_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal483_parent_out_ptr;\
	bmlocal481_acc_bytes = 4;\
	bmlocal482_acc_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal479_tmp_bytes, bmlocal480_tmp_bits );\
	bmlocal481_acc_bytes += bmlocal479_tmp_bytes;\
	bmlocal482_acc_bits += bmlocal480_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal481_acc_bytes );\
	out_bitoff += bmlocal482_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r1>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal484_tmp_bytes = 0;\
	UINT bmlocal485_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal484_tmp_bytes, bmlocal485_tmp_bits );\
	out_bytes += bmlocal484_tmp_bytes;\
	out_bits += bmlocal485_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal486_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal486_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal486_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal487_my_bytes;
	UINT bmlocal488_my_bits;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, bmlocal487_my_bytes, bmlocal488_my_bits );
	BMI_UNUSED_VAR( bmlocal488_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal487_my_bytes;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal489_var0;\
		BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal489_var0 );\
		if( bmlocal489_var0 != 0 )\
		{\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits );\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal490_var0;\
		BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal490_var0 );\
		out_flag = (bmlocal490_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal491_tmp_bytes = 0;\
	UINT bmlocal492_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_SIZE( base_ptr, bmlocal491_tmp_bytes, bmlocal492_tmp_bits );\
	out_bytes += bmlocal491_tmp_bytes;\
	out_bits += bmlocal492_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal493_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, out_bytes, bmlocal493_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal493_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal494_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineStringOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_EVALUATE( base_ptr, bmlocal494_out_flag );\
		if( bmlocal494_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_params_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal495_tmp_bytes = 0;\
	UINT bmlocal496_tmp_bits = 0;\
	UINT bmlocal497_acc_bytes;\
	UINT bmlocal498_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal497_acc_bytes = 4;\
	bmlocal498_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal495_tmp_bytes, bmlocal496_tmp_bits );\
	bmlocal497_acc_bytes += bmlocal495_tmp_bytes;\
	bmlocal498_acc_bits += bmlocal496_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal495_tmp_bytes, bmlocal496_tmp_bits );\
	bmlocal497_acc_bytes += bmlocal495_tmp_bytes;\
	bmlocal498_acc_bits += bmlocal496_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal497_acc_bytes );\
	out_bitoff += bmlocal498_acc_bits;\
}

// ARRAY: TraceRunTimeMsgData_params
#define BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal499_var0;\
		BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal499_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal499_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_params_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal500_my_bytes;
	UINT bmlocal501_my_bits;
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal500_my_bytes, bmlocal501_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal500_my_bytes, bmlocal501_my_bits);
	BMI_UNUSED_VAR( bmlocal501_my_bits );
	return bmlocal500_my_bytes;
}

#define BM_TraceRunTimeMsgData_params_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal502_var0;\
			BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal502_var0 );\
			out_element_count = (UINT)(bmlocal502_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_params_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal503_out_ptr;\
	UINT bmlocal504_out_bitoff;\
	UINT bmlocal505_element_size_bytes;\
	UINT bmlocal506_element_size_bits;\
	BM_TraceRunTimeMsgData_params_GET_POS( base_ptr, bmlocal503_out_ptr, bmlocal504_out_bitoff );\
	bmlocal505_element_size_bytes = 4;\
	bmlocal506_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal503_out_ptr) + (idx0) * bmlocal505_element_size_bytes );\
	out_bitoff = bmlocal504_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal506_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_params' Type: 'Uint32', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal507_parent_out_ptr;\
	BM_TraceRunTimeMsgData_params_GET_ELEMENT_POS( base_ptr, idx0, bmlocal507_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal507_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_params_value_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal508_tmp_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, out_ptr, bmlocal508_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal508_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_params_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_params_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal509_my_ptr;\
	UINT bmlocal510_my_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, bmlocal509_my_ptr, bmlocal510_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal509_my_ptr, bmlocal510_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_params_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal511_tmp_var;
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal511_tmp_var );
	return bmlocal511_tmp_var;
}

#define BM_TraceRunTimeMsgData_params_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal512_my_ptr;\
	UINT bmlocal513_my_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, bmlocal512_my_ptr, bmlocal513_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal512_my_ptr, bmlocal513_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_params_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_params_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_params_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_params_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_params_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_params_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal514_out_val;\
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal514_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 32, (UINT)(bmlocal514_out_val), "%u", 1);\
}

#define BM_TraceRunTimeMsgData_params_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_params_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal515_val;\
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal515_val );\
	(bmlocal515_val)++;\
	BM_TraceRunTimeMsgData_params_value_SET( base_ptr, idx0, bmlocal515_val );\
}

// TraceRunTimeMsgData_params_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_params_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal516_tmp_bits;\
	BM_TraceRunTimeMsgData_params_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal516_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal516_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_params_value_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_params_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal519_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal519_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal519_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_params_BYTES_CELL_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_params_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal520_dim_size0;\
	UINT bmlocal521_idx0;\
	{\
		UINT32 bmlocal522_var0;\
		BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal522_var0 );\
		bmlocal520_dim_size0 = (UINT)(bmlocal522_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "params", 1);\
	for( bmlocal521_idx0=0; bmlocal521_idx0<bmlocal520_dim_size0; bmlocal521_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal521_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, bmlocal521_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_params_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_params_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal523_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, out_bytes, bmlocal523_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal523_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal524_tmp_bytes = 0;\
	UINT bmlocal525_tmp_bits = 0;\
	UINT bmlocal526_acc_bytes;\
	UINT bmlocal527_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal526_acc_bytes = 4;\
	bmlocal527_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal524_tmp_bytes, bmlocal525_tmp_bits );\
	bmlocal526_acc_bytes += bmlocal524_tmp_bytes;\
	bmlocal527_acc_bits += bmlocal525_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal524_tmp_bytes, bmlocal525_tmp_bits );\
	bmlocal526_acc_bytes += bmlocal524_tmp_bytes;\
	bmlocal527_acc_bits += bmlocal525_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal524_tmp_bytes, bmlocal525_tmp_bits );\
	bmlocal526_acc_bytes += bmlocal524_tmp_bytes;\
	bmlocal527_acc_bits += bmlocal525_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal526_acc_bytes );\
	out_bitoff += bmlocal527_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal528_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_POS( base_ptr, bmlocal528_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal528_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_payloadOpt_payload' Type: 'TracePayload', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal529_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal529_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal529_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal530_tmp_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, out_ptr, bmlocal530_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal530_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_payloadOpt_payload_length: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal531_my_ptr;\
	UINT bmlocal532_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, bmlocal531_my_ptr, bmlocal532_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal531_my_ptr, bmlocal532_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal533_tmp_var;
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal533_tmp_var );
	return bmlocal533_tmp_var;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal534_my_ptr;\
	UINT bmlocal535_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, bmlocal534_my_ptr, bmlocal535_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal534_my_ptr, bmlocal535_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_payloadOpt_payload_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal536_out_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal536_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal536_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal537_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal537_val );\
	(bmlocal537_val)++;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_SET( base_ptr, bmlocal537_val );\
}

// TraceRunTimeMsgData_payloadOpt_payload_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal538_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_SIZE( base_ptr, out_bytes, bmlocal538_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal538_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal541_acc_bytes;\
	UINT bmlocal542_acc_bits;\
	PVOID bmlocal543_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal543_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal543_parent_out_ptr;\
	bmlocal541_acc_bytes = 4;\
	bmlocal542_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal541_acc_bytes );\
	out_bitoff += bmlocal542_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal544_tmp_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, out_ptr, bmlocal544_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal544_tmp_bitoff);\
}

// ARRAY: TraceRunTimeMsgData_payloadOpt_payload_payload
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal545_var0;\
		BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal545_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal545_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal546_my_bytes;
	UINT bmlocal547_my_bits;
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal546_my_bytes, bmlocal547_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal546_my_bytes, bmlocal547_my_bits);
	BMI_UNUSED_VAR( bmlocal547_my_bits );
	return bmlocal546_my_bytes;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal548_var0;\
			BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal548_var0 );\
			out_element_count = (UINT)(bmlocal548_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal549_out_ptr;\
	UINT bmlocal550_out_bitoff;\
	UINT bmlocal551_element_size_bytes;\
	UINT bmlocal552_element_size_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, bmlocal549_out_ptr, bmlocal550_out_bitoff );\
	bmlocal551_element_size_bytes = 1;\
	bmlocal552_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal549_out_ptr) + (idx0) * bmlocal551_element_size_bytes );\
	out_bitoff = bmlocal550_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal552_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_payloadOpt_payload_payload' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal553_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_ELEMENT_POS( base_ptr, idx0, bmlocal553_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal553_parent_out_ptr;\
}

// Alignment of TraceRunTimeMsgData_payloadOpt_payload_payload_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal554_my_ptr;\
	UINT bmlocal555_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, bmlocal554_my_ptr, bmlocal555_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal554_my_ptr, bmlocal555_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal556_tmp_var;
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal556_tmp_var );
	return bmlocal556_tmp_var;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal557_my_ptr;\
	UINT bmlocal558_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, bmlocal557_my_ptr, bmlocal558_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal557_my_ptr, bmlocal558_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_payloadOpt_payload_payload_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal559_out_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal559_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal559_out_val), "%u", 1);\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal560_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal560_val );\
	(bmlocal560_val)++;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_SET( base_ptr, idx0, bmlocal560_val );\
}

// TraceRunTimeMsgData_payloadOpt_payload_payload_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal561_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal561_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal561_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal564_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal564_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal564_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal565_dim_size0;\
	UINT bmlocal566_idx0;\
	{\
		UINT32 bmlocal567_var0;\
		BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal567_var0 );\
		bmlocal565_dim_size0 = (UINT)(bmlocal567_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	for( bmlocal566_idx0=0; bmlocal566_idx0<bmlocal565_dim_size0; bmlocal566_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal566_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, bmlocal566_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal568_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, out_bytes, bmlocal568_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal568_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal569_tmp_bytes = 0;\
	UINT bmlocal570_tmp_bits = 0;\
	UINT bmlocal571_acc_bytes;\
	UINT bmlocal572_acc_bits;\
	PVOID bmlocal573_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal573_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal573_parent_out_ptr;\
	bmlocal571_acc_bytes = 4;\
	bmlocal572_acc_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal569_tmp_bytes, bmlocal570_tmp_bits );\
	bmlocal571_acc_bytes += bmlocal569_tmp_bytes;\
	bmlocal572_acc_bits += bmlocal570_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal571_acc_bytes );\
	out_bitoff += bmlocal572_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal574_tmp_bytes = 0;\
	UINT bmlocal575_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal574_tmp_bytes, bmlocal575_tmp_bits );\
	out_bytes += bmlocal574_tmp_bytes;\
	out_bits += bmlocal575_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal576_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal576_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal576_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal577_my_bytes;
	UINT bmlocal578_my_bits;
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, bmlocal577_my_bytes, bmlocal578_my_bits );
	BMI_UNUSED_VAR( bmlocal578_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal577_my_bytes;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal579_var0;\
		BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal579_var0 );\
		if( bmlocal579_var0 != 0 )\
		{\
			BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits );\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal580_var0;\
		BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal580_var0 );\
		out_flag = (bmlocal580_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal581_tmp_bytes = 0;\
	UINT bmlocal582_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_SIZE( base_ptr, bmlocal581_tmp_bytes, bmlocal582_tmp_bits );\
	out_bytes += bmlocal581_tmp_bytes;\
	out_bits += bmlocal582_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal583_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, out_bytes, bmlocal583_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal583_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal584_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payloadOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_payloadOpt_payload_EVALUATE( base_ptr, bmlocal584_out_flag );\
		if( bmlocal584_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal585_tmp_bytes = 0;\
	UINT bmlocal586_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal585_tmp_bytes, bmlocal586_tmp_bits );\
	out_bytes += bmlocal585_tmp_bytes;\
	out_bits += bmlocal586_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal585_tmp_bytes, bmlocal586_tmp_bits );\
	out_bytes += bmlocal585_tmp_bytes;\
	out_bits += bmlocal586_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal585_tmp_bytes, bmlocal586_tmp_bits );\
	out_bytes += bmlocal585_tmp_bytes;\
	out_bits += bmlocal586_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, bmlocal585_tmp_bytes, bmlocal586_tmp_bits );\
	out_bytes += bmlocal585_tmp_bytes;\
	out_bits += bmlocal586_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal587_tmp_bits;\
	BM_TraceRunTimeMsgData_GET_SIZE( base_ptr, out_bytes, bmlocal587_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal587_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceRunTimeMsgData", 1);\
	BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_TRACEMESSAGE_H_ */

