/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:55:57 AM
 *
 * Project : Ofer
 * Module  : Trace Severity Definition
 * Author  : Nati Nimni
 * Date    : 06/10/2007
 * Purpose : OFER Trace Severity Definitions
 *****************************************************************************/

#if !defined(_BITMAN_LEDDEFINITIONS_H_)
#define _BITMAN_LEDDEFINITIONS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef UINT8 usrIndLedBlinkRate[2];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _onPeriod : 8;
	UINT8 _offPeriod : 8;
} BMS_usrIndLedBlinkRate;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _offPeriod : 8;
	UINT8 _onPeriod : 8;
} BMS_usrIndLedBlinkRate;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'usrIndLedBlinkRate' Type: 'usrIndLedBlinkRate', Top-level, Non-instance, Including bitoff root
#define BM_usrIndLedBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of usrIndLedBlinkRate_onPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndLedBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndLedBlinkRate_onPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal225_my_ptr;\
	UINT bmlocal226_my_bitoff;\
	BM_usrIndLedBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal225_my_ptr, bmlocal226_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal225_my_ptr, bmlocal226_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndLedBlinkRate_onPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal227_my_ptr;\
	UINT bmlocal228_my_bitoff;\
	BM_usrIndLedBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal227_my_ptr, bmlocal228_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal227_my_ptr, bmlocal228_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// usrIndLedBlinkRate_onPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndLedBlinkRate_onPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndLedBlinkRate_onPeriod: IS_RESET accessor is not defined because no reset value was specified.
// usrIndLedBlinkRate_onPeriod: SET_RESET accessor is not defined because no reset value was specified.
// usrIndLedBlinkRate_onPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndLedBlinkRate_onPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndLedBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal229_out_val;\
	BM_usrIndLedBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal229_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "onPeriod", 8, (UINT)(bmlocal229_out_val), "%d", 1);\
}

#define BM_usrIndLedBlinkRate_onPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndLedBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndLedBlinkRate_onPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal230_val;\
	BM_usrIndLedBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal230_val );\
	(bmlocal230_val)++;\
	BM_usrIndLedBlinkRate_onPeriod_SET( base_ptr, base_bitoff, bmlocal230_val );\
}

// usrIndLedBlinkRate_onPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndLedBlinkRate_onPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal231_tmp_bits;\
	BM_usrIndLedBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal231_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal231_tmp_bits );\
}

#define BM_usrIndLedBlinkRate_onPeriod_BYTES_SIZE 1

#define BM_usrIndLedBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal234_acc_bytes;\
	UINT bmlocal235_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal234_acc_bytes = 1;\
	bmlocal235_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal234_acc_bytes );\
	out_bitoff += bmlocal235_acc_bits;\
}

// Alignment of usrIndLedBlinkRate_offPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndLedBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndLedBlinkRate_offPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal236_my_ptr;\
	UINT bmlocal237_my_bitoff;\
	BM_usrIndLedBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal236_my_ptr, bmlocal237_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal236_my_ptr, bmlocal237_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndLedBlinkRate_offPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal238_my_ptr;\
	UINT bmlocal239_my_bitoff;\
	BM_usrIndLedBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal238_my_ptr, bmlocal239_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal238_my_ptr, bmlocal239_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// usrIndLedBlinkRate_offPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndLedBlinkRate_offPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndLedBlinkRate_offPeriod: IS_RESET accessor is not defined because no reset value was specified.
// usrIndLedBlinkRate_offPeriod: SET_RESET accessor is not defined because no reset value was specified.
// usrIndLedBlinkRate_offPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndLedBlinkRate_offPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndLedBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal240_out_val;\
	BM_usrIndLedBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal240_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offPeriod", 8, (UINT)(bmlocal240_out_val), "%d", 1);\
}

#define BM_usrIndLedBlinkRate_offPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndLedBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndLedBlinkRate_offPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal241_val;\
	BM_usrIndLedBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal241_val );\
	(bmlocal241_val)++;\
	BM_usrIndLedBlinkRate_offPeriod_SET( base_ptr, base_bitoff, bmlocal241_val );\
}

// usrIndLedBlinkRate_offPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndLedBlinkRate_offPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal242_tmp_bits;\
	BM_usrIndLedBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal242_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal242_tmp_bits );\
}

#define BM_usrIndLedBlinkRate_offPeriod_BYTES_SIZE 1

#define BM_usrIndLedBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndLedBlinkRate_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal245_tmp_bits;\
	BM_usrIndLedBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal245_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal245_tmp_bits );\
}

#define BM_usrIndLedBlinkRate_BYTES_SIZE 2

#define BM_usrIndLedBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "usrIndLedBlinkRate", 1);\
	BM_usrIndLedBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_usrIndLedBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndLedBlinkRate_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndLedBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


typedef UINT8 LedBehaviorScheme[2];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Led0Scheme : 8;
	UINT8 _Led1Scheme : 8;
} BMS_LedBehaviorScheme;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Led1Scheme : 8;
	UINT8 _Led0Scheme : 8;
} BMS_LedBehaviorScheme;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'LedBehaviorScheme' Type: 'LedBehaviorScheme', Top-level, Non-instance, Including bitoff root
#define BM_LedBehaviorScheme_Led0Scheme_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of LedBehaviorScheme_Led0Scheme: accumulated=(Variable), parent.base=(Variable)
#define BM_LedBehaviorScheme_Led0Scheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedBehaviorScheme_Led0Scheme_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal246_my_ptr;\
	UINT bmlocal247_my_bitoff;\
	BM_LedBehaviorScheme_Led0Scheme_GET_POS( base_ptr, base_bitoff, bmlocal246_my_ptr, bmlocal247_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal246_my_ptr, bmlocal247_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedBehaviorScheme_Led0Scheme_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal248_my_ptr;\
	UINT bmlocal249_my_bitoff;\
	BM_LedBehaviorScheme_Led0Scheme_GET_POS( base_ptr, base_bitoff, bmlocal248_my_ptr, bmlocal249_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal248_my_ptr, bmlocal249_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedBehaviorScheme_Led0Scheme: IS_DEFAULT accessor is not defined because no default value was specified.
// LedBehaviorScheme_Led0Scheme: SET_DEFAULT accessor is not defined because no default value was specified.
// LedBehaviorScheme_Led0Scheme: IS_RESET accessor is not defined because no reset value was specified.
// LedBehaviorScheme_Led0Scheme: SET_RESET accessor is not defined because no reset value was specified.
// LedBehaviorScheme_Led0Scheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedBehaviorScheme_Led0Scheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedBehaviorScheme_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal250_out_val;\
	BM_LedBehaviorScheme_Led0Scheme_GET( base_ptr, base_bitoff, bmlocal250_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Led0Scheme", 8, (UINT)(bmlocal250_out_val), "%d", 1);\
}

#define BM_LedBehaviorScheme_Led0Scheme_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedBehaviorScheme_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedBehaviorScheme_Led0Scheme_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal251_val;\
	BM_LedBehaviorScheme_Led0Scheme_GET( base_ptr, base_bitoff, bmlocal251_val );\
	(bmlocal251_val)++;\
	BM_LedBehaviorScheme_Led0Scheme_SET( base_ptr, base_bitoff, bmlocal251_val );\
}

// LedBehaviorScheme_Led0Scheme: Validation accessors are not defined because validation condition was not specified.
#define BM_LedBehaviorScheme_Led0Scheme_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal252_tmp_bits;\
	BM_LedBehaviorScheme_Led0Scheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal252_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal252_tmp_bits );\
}

#define BM_LedBehaviorScheme_Led0Scheme_BYTES_SIZE 1

#define BM_LedBehaviorScheme_Led1Scheme_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal255_acc_bytes;\
	UINT bmlocal256_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal255_acc_bytes = 1;\
	bmlocal256_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal255_acc_bytes );\
	out_bitoff += bmlocal256_acc_bits;\
}

// Alignment of LedBehaviorScheme_Led1Scheme: accumulated=(Variable), parent.base=(Variable)
#define BM_LedBehaviorScheme_Led1Scheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedBehaviorScheme_Led1Scheme_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal257_my_ptr;\
	UINT bmlocal258_my_bitoff;\
	BM_LedBehaviorScheme_Led1Scheme_GET_POS( base_ptr, base_bitoff, bmlocal257_my_ptr, bmlocal258_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal257_my_ptr, bmlocal258_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedBehaviorScheme_Led1Scheme_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal259_my_ptr;\
	UINT bmlocal260_my_bitoff;\
	BM_LedBehaviorScheme_Led1Scheme_GET_POS( base_ptr, base_bitoff, bmlocal259_my_ptr, bmlocal260_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal259_my_ptr, bmlocal260_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedBehaviorScheme_Led1Scheme: IS_DEFAULT accessor is not defined because no default value was specified.
// LedBehaviorScheme_Led1Scheme: SET_DEFAULT accessor is not defined because no default value was specified.
// LedBehaviorScheme_Led1Scheme: IS_RESET accessor is not defined because no reset value was specified.
// LedBehaviorScheme_Led1Scheme: SET_RESET accessor is not defined because no reset value was specified.
// LedBehaviorScheme_Led1Scheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedBehaviorScheme_Led1Scheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedBehaviorScheme_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal261_out_val;\
	BM_LedBehaviorScheme_Led1Scheme_GET( base_ptr, base_bitoff, bmlocal261_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Led1Scheme", 8, (UINT)(bmlocal261_out_val), "%d", 1);\
}

#define BM_LedBehaviorScheme_Led1Scheme_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedBehaviorScheme_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedBehaviorScheme_Led1Scheme_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal262_val;\
	BM_LedBehaviorScheme_Led1Scheme_GET( base_ptr, base_bitoff, bmlocal262_val );\
	(bmlocal262_val)++;\
	BM_LedBehaviorScheme_Led1Scheme_SET( base_ptr, base_bitoff, bmlocal262_val );\
}

// LedBehaviorScheme_Led1Scheme: Validation accessors are not defined because validation condition was not specified.
#define BM_LedBehaviorScheme_Led1Scheme_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal263_tmp_bits;\
	BM_LedBehaviorScheme_Led1Scheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal263_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal263_tmp_bits );\
}

#define BM_LedBehaviorScheme_Led1Scheme_BYTES_SIZE 1

#define BM_LedBehaviorScheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedBehaviorScheme_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal266_tmp_bits;\
	BM_LedBehaviorScheme_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal266_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal266_tmp_bits );\
}

#define BM_LedBehaviorScheme_BYTES_SIZE 2

#define BM_LedBehaviorScheme_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "LedBehaviorScheme", 1);\
	BM_LedBehaviorScheme_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedBehaviorScheme_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedBehaviorScheme_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedBehaviorScheme_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


typedef UINT8 usrIndPowerSaveInfo[7];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_usrIndLedBlinkRate _ledBlinkRate;
	UINT8 _powerSaveMode : 8;
	UINT32 _ledTimeInterval;
} BMS_usrIndPowerSaveInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _ledTimeInterval;
	UINT8 _powerSaveMode : 8;
	BMS_usrIndLedBlinkRate _ledBlinkRate;
} BMS_usrIndPowerSaveInfo;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'usrIndPowerSaveInfo' Type: 'usrIndPowerSaveInfo', Top-level, Non-instance, Including bitoff root
#define BM_usrIndPowerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// COMPOSITE: Full name: 'usrIndPowerSaveInfo_ledBlinkRate' Type: 'usrIndLedBlinkRate', Inner, Non-instance, Including bitoff root
#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal267_parent_out_ptr;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, bmlocal267_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal267_parent_out_ptr;\
}

// Alignment of usrIndPowerSaveInfo_ledBlinkRate_onPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal268_my_ptr;\
	UINT bmlocal269_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal268_my_ptr, bmlocal269_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal268_my_ptr, bmlocal269_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal270_my_ptr;\
	UINT bmlocal271_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal270_my_ptr, bmlocal271_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal270_my_ptr, bmlocal271_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: IS_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: SET_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal272_out_val;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal272_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "onPeriod", 8, (UINT)(bmlocal272_out_val), "%d", 1);\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal273_val;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal273_val );\
	(bmlocal273_val)++;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_SET( base_ptr, base_bitoff, bmlocal273_val );\
}

// usrIndPowerSaveInfo_ledBlinkRate_onPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal274_tmp_bits;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal274_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal274_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_BYTES_SIZE 1

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal277_acc_bytes;\
	UINT bmlocal278_acc_bits;\
	PVOID bmlocal279_parent_out_ptr;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, bmlocal279_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal279_parent_out_ptr;\
	bmlocal277_acc_bytes = 1;\
	bmlocal278_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal277_acc_bytes );\
	out_bitoff += bmlocal278_acc_bits;\
}

// Alignment of usrIndPowerSaveInfo_ledBlinkRate_offPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal280_my_ptr;\
	UINT bmlocal281_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal280_my_ptr, bmlocal281_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal280_my_ptr, bmlocal281_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal282_my_ptr;\
	UINT bmlocal283_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal282_my_ptr, bmlocal283_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal282_my_ptr, bmlocal283_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: IS_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: SET_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal284_out_val;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal284_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offPeriod", 8, (UINT)(bmlocal284_out_val), "%d", 1);\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal285_val;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal285_val );\
	(bmlocal285_val)++;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_SET( base_ptr, base_bitoff, bmlocal285_val );\
}

// usrIndPowerSaveInfo_ledBlinkRate_offPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal286_tmp_bits;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal286_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal286_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_BYTES_SIZE 1

#define BM_usrIndPowerSaveInfo_ledBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal289_tmp_bits;\
	BM_usrIndPowerSaveInfo_ledBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal289_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal289_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_BYTES_SIZE 2

#define BM_usrIndPowerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ledBlinkRate", 1);\
	BM_usrIndPowerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_usrIndPowerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_ledBlinkRate_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


#define BM_usrIndPowerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal292_acc_bytes;\
	UINT bmlocal293_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal292_acc_bytes = 2;\
	bmlocal293_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal292_acc_bytes );\
	out_bitoff += bmlocal293_acc_bits;\
}

// Alignment of usrIndPowerSaveInfo_powerSaveMode: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndPowerSaveInfo_powerSaveMode_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal294_my_ptr;\
	UINT bmlocal295_my_bitoff;\
	BM_usrIndPowerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, bmlocal294_my_ptr, bmlocal295_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal294_my_ptr, bmlocal295_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndPowerSaveInfo_powerSaveMode_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal296_my_ptr;\
	UINT bmlocal297_my_bitoff;\
	BM_usrIndPowerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, bmlocal296_my_ptr, bmlocal297_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal296_my_ptr, bmlocal297_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// usrIndPowerSaveInfo_powerSaveMode: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_powerSaveMode: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_powerSaveMode: IS_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_powerSaveMode: SET_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_powerSaveMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndPowerSaveInfo_powerSaveMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndPowerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal298_out_val;\
	BM_usrIndPowerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, bmlocal298_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "powerSaveMode", 8, (UINT)(bmlocal298_out_val), "%d", 1);\
}

#define BM_usrIndPowerSaveInfo_powerSaveMode_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndPowerSaveInfo_powerSaveMode_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal299_val;\
	BM_usrIndPowerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, bmlocal299_val );\
	(bmlocal299_val)++;\
	BM_usrIndPowerSaveInfo_powerSaveMode_SET( base_ptr, base_bitoff, bmlocal299_val );\
}

// usrIndPowerSaveInfo_powerSaveMode: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndPowerSaveInfo_powerSaveMode_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal300_tmp_bits;\
	BM_usrIndPowerSaveInfo_powerSaveMode_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal300_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal300_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_powerSaveMode_BYTES_SIZE 1

#define BM_usrIndPowerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal303_acc_bytes;\
	UINT bmlocal304_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal303_acc_bytes = 3;\
	bmlocal304_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal303_acc_bytes );\
	out_bitoff += bmlocal304_acc_bits;\
}

// Alignment of usrIndPowerSaveInfo_ledTimeInterval: accumulated=(Variable), parent.base=(Variable)
#define BM_usrIndPowerSaveInfo_ledTimeInterval_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal305_my_ptr;\
	UINT bmlocal306_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, bmlocal305_my_ptr, bmlocal306_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal305_my_ptr, bmlocal306_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_usrIndPowerSaveInfo_ledTimeInterval_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal307_my_ptr;\
	UINT bmlocal308_my_bitoff;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, bmlocal307_my_ptr, bmlocal308_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal307_my_ptr, bmlocal308_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// usrIndPowerSaveInfo_ledTimeInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledTimeInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// usrIndPowerSaveInfo_ledTimeInterval: IS_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledTimeInterval: SET_RESET accessor is not defined because no reset value was specified.
// usrIndPowerSaveInfo_ledTimeInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// usrIndPowerSaveInfo_ledTimeInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_usrIndPowerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal309_out_val;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, bmlocal309_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ledTimeInterval", 32, (UINT)(bmlocal309_out_val), "%d", 1);\
}

#define BM_usrIndPowerSaveInfo_ledTimeInterval_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_usrIndPowerSaveInfo_ledTimeInterval_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal310_val;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, bmlocal310_val );\
	(bmlocal310_val)++;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_SET( base_ptr, base_bitoff, bmlocal310_val );\
}

// usrIndPowerSaveInfo_ledTimeInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_usrIndPowerSaveInfo_ledTimeInterval_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal311_tmp_bits;\
	BM_usrIndPowerSaveInfo_ledTimeInterval_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal311_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal311_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_ledTimeInterval_BYTES_SIZE 4

#define BM_usrIndPowerSaveInfo_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 7;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal314_tmp_bits;\
	BM_usrIndPowerSaveInfo_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal314_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal314_tmp_bits );\
}

#define BM_usrIndPowerSaveInfo_BYTES_SIZE 7

#define BM_usrIndPowerSaveInfo_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "usrIndPowerSaveInfo", 1);\
	BM_usrIndPowerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_usrIndPowerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_usrIndPowerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_usrIndPowerSaveInfo_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_usrIndPowerSaveInfo_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


typedef UINT8 LedOperationalConfigComp[64];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _NvmOverride : 8;
	BMS_LedBehaviorScheme _ledBehavior[14];
	BMS_usrIndPowerSaveInfo _powerSaveInfo;
	UINT8 _numOfLeds : 8;
	BMS_usrIndLedBlinkRate _blinkingRate[13];
	UINT8 _reserved : 8;
} BMS_LedOperationalConfigComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _reserved : 8;
	BMS_usrIndLedBlinkRate _blinkingRate[13];
	UINT8 _numOfLeds : 8;
	BMS_usrIndPowerSaveInfo _powerSaveInfo;
	BMS_LedBehaviorScheme _ledBehavior[14];
	UINT8 _NvmOverride : 8;
} BMS_LedOperationalConfigComp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'LedOperationalConfigComp' Type: 'LedOperationalConfigComp', Top-level, Non-instance, Including bitoff root
#define BM_LedOperationalConfigComp_NvmOverride_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of LedOperationalConfigComp_NvmOverride: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_NvmOverride_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_NvmOverride_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal315_my_ptr;\
	UINT bmlocal316_my_bitoff;\
	BM_LedOperationalConfigComp_NvmOverride_GET_POS( base_ptr, base_bitoff, bmlocal315_my_ptr, bmlocal316_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal315_my_ptr, bmlocal316_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_NvmOverride_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal317_my_ptr;\
	UINT bmlocal318_my_bitoff;\
	BM_LedOperationalConfigComp_NvmOverride_GET_POS( base_ptr, base_bitoff, bmlocal317_my_ptr, bmlocal318_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal317_my_ptr, bmlocal318_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_NvmOverride: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_NvmOverride: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_NvmOverride: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_NvmOverride: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_NvmOverride: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_NvmOverride: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_NvmOverride_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal319_out_val;\
	BM_LedOperationalConfigComp_NvmOverride_GET( base_ptr, base_bitoff, bmlocal319_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NvmOverride", 8, (UINT)(bmlocal319_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_NvmOverride_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_NvmOverride_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_NvmOverride_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal320_val;\
	BM_LedOperationalConfigComp_NvmOverride_GET( base_ptr, base_bitoff, bmlocal320_val );\
	(bmlocal320_val)++;\
	BM_LedOperationalConfigComp_NvmOverride_SET( base_ptr, base_bitoff, bmlocal320_val );\
}

// LedOperationalConfigComp_NvmOverride: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_NvmOverride_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal321_tmp_bits;\
	BM_LedOperationalConfigComp_NvmOverride_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal321_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal321_tmp_bits );\
}

#define BM_LedOperationalConfigComp_NvmOverride_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_ledBehavior_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal324_acc_bytes;\
	UINT bmlocal325_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal324_acc_bytes = 1;\
	bmlocal325_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal324_acc_bytes );\
	out_bitoff += bmlocal325_acc_bits;\
}

// ARRAY: LedOperationalConfigComp_ledBehavior
#define BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 28;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_ledBehavior_GET_DIMENSION_ELEMENT_COUNT( base_ptr, base_bitoff, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 14;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_ledBehavior_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal326_out_ptr;\
	UINT bmlocal327_out_bitoff;\
	UINT bmlocal328_element_size_bytes;\
	UINT bmlocal329_element_size_bits;\
	BM_LedOperationalConfigComp_ledBehavior_GET_POS( base_ptr, base_bitoff, bmlocal326_out_ptr, bmlocal327_out_bitoff );\
	bmlocal328_element_size_bytes = 2;\
	bmlocal329_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal326_out_ptr) + (idx0) * bmlocal328_element_size_bytes );\
	out_bitoff = bmlocal327_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal329_element_size_bits );\
}

// COMPOSITE: Full name: 'LedOperationalConfigComp_ledBehavior' Type: 'LedBehaviorScheme', Inner, Non-instance, Including bitoff root
#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal330_parent_out_ptr;\
	BM_LedOperationalConfigComp_ledBehavior_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal330_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal330_parent_out_ptr;\
}

// Alignment of LedOperationalConfigComp_ledBehavior_Led0Scheme: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal331_my_ptr;\
	UINT bmlocal332_my_bitoff;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_POS( base_ptr, base_bitoff, idx0, bmlocal331_my_ptr, bmlocal332_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal331_my_ptr, bmlocal332_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal333_my_ptr;\
	UINT bmlocal334_my_bitoff;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_POS( base_ptr, base_bitoff, idx0, bmlocal333_my_ptr, bmlocal334_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal333_my_ptr, bmlocal334_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_ledBehavior_Led0Scheme: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_ledBehavior_Led0Scheme: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_ledBehavior_Led0Scheme: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_ledBehavior_Led0Scheme: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_ledBehavior_Led0Scheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_ledBehavior_Led0Scheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal335_out_val;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET( base_ptr, base_bitoff, idx0, bmlocal335_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Led0Scheme", 8, (UINT)(bmlocal335_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal336_val;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET( base_ptr, base_bitoff, idx0, bmlocal336_val );\
	(bmlocal336_val)++;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_SET( base_ptr, base_bitoff, idx0, bmlocal336_val );\
}

// LedOperationalConfigComp_ledBehavior_Led0Scheme: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal337_tmp_bits;\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal337_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal337_tmp_bits );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal340_acc_bytes;\
	UINT bmlocal341_acc_bits;\
	PVOID bmlocal342_parent_out_ptr;\
	BM_LedOperationalConfigComp_ledBehavior_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal342_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal342_parent_out_ptr;\
	bmlocal340_acc_bytes = 1;\
	bmlocal341_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal340_acc_bytes );\
	out_bitoff += bmlocal341_acc_bits;\
}

// Alignment of LedOperationalConfigComp_ledBehavior_Led1Scheme: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal343_my_ptr;\
	UINT bmlocal344_my_bitoff;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_POS( base_ptr, base_bitoff, idx0, bmlocal343_my_ptr, bmlocal344_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal343_my_ptr, bmlocal344_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal345_my_ptr;\
	UINT bmlocal346_my_bitoff;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_POS( base_ptr, base_bitoff, idx0, bmlocal345_my_ptr, bmlocal346_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal345_my_ptr, bmlocal346_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_ledBehavior_Led1Scheme: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_ledBehavior_Led1Scheme: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_ledBehavior_Led1Scheme: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_ledBehavior_Led1Scheme: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_ledBehavior_Led1Scheme: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_ledBehavior_Led1Scheme: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal347_out_val;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET( base_ptr, base_bitoff, idx0, bmlocal347_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Led1Scheme", 8, (UINT)(bmlocal347_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal348_val;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET( base_ptr, base_bitoff, idx0, bmlocal348_val );\
	(bmlocal348_val)++;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_SET( base_ptr, base_bitoff, idx0, bmlocal348_val );\
}

// LedOperationalConfigComp_ledBehavior_Led1Scheme: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal349_tmp_bits;\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal349_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal349_tmp_bits );\
}

#define BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_ledBehavior_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_GET_BYTES_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal352_tmp_bits;\
	BM_LedOperationalConfigComp_ledBehavior_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal352_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal352_tmp_bits );\
}

#define BM_LedOperationalConfigComp_ledBehavior_BYTES_CELL_SIZE 2

#define BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_ledBehavior_Led0Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BM_LedOperationalConfigComp_ledBehavior_Led1Scheme_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_DUMP_IDX( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal353_dim_size0;\
	UINT bmlocal354_idx0;\
	bmlocal353_dim_size0 = 14;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ledBehavior", 1);\
	for( bmlocal354_idx0=0; bmlocal354_idx0<bmlocal353_dim_size0; bmlocal354_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal354_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH_IDX( base_ptr, base_bitoff, bmlocal354_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_ledBehavior_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_ledBehavior_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal355_tmp_bits;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal355_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal355_tmp_bits );\
}

#define BM_LedOperationalConfigComp_ledBehavior_BYTES_SIZE 28

#define BM_LedOperationalConfigComp_powerSaveInfo_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal356_tmp_bytes = 0;\
	UINT bmlocal357_tmp_bits = 0;\
	UINT bmlocal358_acc_bytes;\
	UINT bmlocal359_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal358_acc_bytes = 1;\
	bmlocal359_acc_bits = 0;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, bmlocal356_tmp_bytes, bmlocal357_tmp_bits );\
	bmlocal358_acc_bytes += bmlocal356_tmp_bytes;\
	bmlocal359_acc_bits += bmlocal357_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal358_acc_bytes );\
	out_bitoff += bmlocal359_acc_bits;\
}

// COMPOSITE: Full name: 'LedOperationalConfigComp_powerSaveInfo' Type: 'usrIndPowerSaveInfo', Inner, Non-instance, Including bitoff root
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal360_parent_out_ptr;\
	BM_LedOperationalConfigComp_powerSaveInfo_GET_POS( base_ptr, base_bitoff, bmlocal360_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal360_parent_out_ptr;\
}

// COMPOSITE: Full name: 'LedOperationalConfigComp_powerSaveInfo_ledBlinkRate' Type: 'usrIndLedBlinkRate', Inner, Non-instance, Including bitoff root
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal361_parent_out_ptr;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, bmlocal361_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal361_parent_out_ptr;\
}

// Alignment of LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal362_my_ptr;\
	UINT bmlocal363_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal362_my_ptr, bmlocal363_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal362_my_ptr, bmlocal363_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal364_my_ptr;\
	UINT bmlocal365_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_POS( base_ptr, base_bitoff, bmlocal364_my_ptr, bmlocal365_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal364_my_ptr, bmlocal365_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal366_out_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal366_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "onPeriod", 8, (UINT)(bmlocal366_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal367_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET( base_ptr, base_bitoff, bmlocal367_val );\
	(bmlocal367_val)++;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_SET( base_ptr, base_bitoff, bmlocal367_val );\
}

// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal368_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal368_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal368_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal371_acc_bytes;\
	UINT bmlocal372_acc_bits;\
	PVOID bmlocal373_parent_out_ptr;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_POS( base_ptr, base_bitoff, bmlocal373_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal373_parent_out_ptr;\
	bmlocal371_acc_bytes = 1;\
	bmlocal372_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal371_acc_bytes );\
	out_bitoff += bmlocal372_acc_bits;\
}

// Alignment of LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal374_my_ptr;\
	UINT bmlocal375_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal374_my_ptr, bmlocal375_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal374_my_ptr, bmlocal375_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal376_my_ptr;\
	UINT bmlocal377_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_POS( base_ptr, base_bitoff, bmlocal376_my_ptr, bmlocal377_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal376_my_ptr, bmlocal377_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal378_out_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal378_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offPeriod", 8, (UINT)(bmlocal378_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal379_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET( base_ptr, base_bitoff, bmlocal379_val );\
	(bmlocal379_val)++;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_SET( base_ptr, base_bitoff, bmlocal379_val );\
}

// LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal380_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal380_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal380_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal383_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal383_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal383_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_BYTES_SIZE 2

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ledBlinkRate", 1);\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal386_acc_bytes;\
	UINT bmlocal387_acc_bits;\
	PVOID bmlocal388_parent_out_ptr;\
	BM_LedOperationalConfigComp_powerSaveInfo_GET_POS( base_ptr, base_bitoff, bmlocal388_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal388_parent_out_ptr;\
	bmlocal386_acc_bytes = 2;\
	bmlocal387_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal386_acc_bytes );\
	out_bitoff += bmlocal387_acc_bits;\
}

// Alignment of LedOperationalConfigComp_powerSaveInfo_powerSaveMode: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal389_my_ptr;\
	UINT bmlocal390_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, bmlocal389_my_ptr, bmlocal390_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal389_my_ptr, bmlocal390_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal391_my_ptr;\
	UINT bmlocal392_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_POS( base_ptr, base_bitoff, bmlocal391_my_ptr, bmlocal392_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal391_my_ptr, bmlocal392_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal393_out_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, bmlocal393_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "powerSaveMode", 8, (UINT)(bmlocal393_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal394_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET( base_ptr, base_bitoff, bmlocal394_val );\
	(bmlocal394_val)++;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_SET( base_ptr, base_bitoff, bmlocal394_val );\
}

// LedOperationalConfigComp_powerSaveInfo_powerSaveMode: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal395_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal395_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal395_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal398_acc_bytes;\
	UINT bmlocal399_acc_bits;\
	PVOID bmlocal400_parent_out_ptr;\
	BM_LedOperationalConfigComp_powerSaveInfo_GET_POS( base_ptr, base_bitoff, bmlocal400_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal400_parent_out_ptr;\
	bmlocal398_acc_bytes = 3;\
	bmlocal399_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal398_acc_bytes );\
	out_bitoff += bmlocal399_acc_bits;\
}

// Alignment of LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal401_my_ptr;\
	UINT bmlocal402_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, bmlocal401_my_ptr, bmlocal402_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal401_my_ptr, bmlocal402_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal403_my_ptr;\
	UINT bmlocal404_my_bitoff;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_POS( base_ptr, base_bitoff, bmlocal403_my_ptr, bmlocal404_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal403_my_ptr, bmlocal404_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal405_out_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, bmlocal405_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "ledTimeInterval", 32, (UINT)(bmlocal405_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal406_val;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET( base_ptr, base_bitoff, bmlocal406_val );\
	(bmlocal406_val)++;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_SET( base_ptr, base_bitoff, bmlocal406_val );\
}

// LedOperationalConfigComp_powerSaveInfo_ledTimeInterval: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal407_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal407_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal407_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_BYTES_SIZE 4

#define BM_LedOperationalConfigComp_powerSaveInfo_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 7;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal410_tmp_bits;\
	BM_LedOperationalConfigComp_powerSaveInfo_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal410_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal410_tmp_bits );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_BYTES_SIZE 7

#define BM_LedOperationalConfigComp_powerSaveInfo_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "powerSaveInfo", 1);\
	BM_LedOperationalConfigComp_powerSaveInfo_ledBlinkRate_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_powerSaveInfo_powerSaveMode_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_powerSaveInfo_ledTimeInterval_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_powerSaveInfo_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_powerSaveInfo_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


#define BM_LedOperationalConfigComp_numOfLeds_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal411_tmp_bytes = 0;\
	UINT bmlocal412_tmp_bits = 0;\
	UINT bmlocal413_acc_bytes;\
	UINT bmlocal414_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal413_acc_bytes = 8;\
	bmlocal414_acc_bits = 0;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, bmlocal411_tmp_bytes, bmlocal412_tmp_bits );\
	bmlocal413_acc_bytes += bmlocal411_tmp_bytes;\
	bmlocal414_acc_bits += bmlocal412_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal413_acc_bytes );\
	out_bitoff += bmlocal414_acc_bits;\
}

// Alignment of LedOperationalConfigComp_numOfLeds: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_numOfLeds_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_numOfLeds_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal415_my_ptr;\
	UINT bmlocal416_my_bitoff;\
	BM_LedOperationalConfigComp_numOfLeds_GET_POS( base_ptr, base_bitoff, bmlocal415_my_ptr, bmlocal416_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal415_my_ptr, bmlocal416_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_numOfLeds_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal417_my_ptr;\
	UINT bmlocal418_my_bitoff;\
	BM_LedOperationalConfigComp_numOfLeds_GET_POS( base_ptr, base_bitoff, bmlocal417_my_ptr, bmlocal418_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal417_my_ptr, bmlocal418_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_numOfLeds: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_numOfLeds: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_numOfLeds: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_numOfLeds: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_numOfLeds: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_numOfLeds: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_numOfLeds_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal419_out_val;\
	BM_LedOperationalConfigComp_numOfLeds_GET( base_ptr, base_bitoff, bmlocal419_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfLeds", 8, (UINT)(bmlocal419_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_numOfLeds_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_numOfLeds_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_numOfLeds_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal420_val;\
	BM_LedOperationalConfigComp_numOfLeds_GET( base_ptr, base_bitoff, bmlocal420_val );\
	(bmlocal420_val)++;\
	BM_LedOperationalConfigComp_numOfLeds_SET( base_ptr, base_bitoff, bmlocal420_val );\
}

// LedOperationalConfigComp_numOfLeds: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_numOfLeds_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal421_tmp_bits;\
	BM_LedOperationalConfigComp_numOfLeds_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal421_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal421_tmp_bits );\
}

#define BM_LedOperationalConfigComp_numOfLeds_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_blinkingRate_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal422_tmp_bytes = 0;\
	UINT bmlocal423_tmp_bits = 0;\
	UINT bmlocal424_acc_bytes;\
	UINT bmlocal425_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal424_acc_bytes = 9;\
	bmlocal425_acc_bits = 0;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, bmlocal422_tmp_bytes, bmlocal423_tmp_bits );\
	bmlocal424_acc_bytes += bmlocal422_tmp_bytes;\
	bmlocal425_acc_bits += bmlocal423_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal424_acc_bytes );\
	out_bitoff += bmlocal425_acc_bits;\
}

// ARRAY: LedOperationalConfigComp_blinkingRate
#define BM_LedOperationalConfigComp_blinkingRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 26;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_blinkingRate_GET_DIMENSION_ELEMENT_COUNT( base_ptr, base_bitoff, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		out_element_count = 13;\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_blinkingRate_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal426_out_ptr;\
	UINT bmlocal427_out_bitoff;\
	UINT bmlocal428_element_size_bytes;\
	UINT bmlocal429_element_size_bits;\
	BM_LedOperationalConfigComp_blinkingRate_GET_POS( base_ptr, base_bitoff, bmlocal426_out_ptr, bmlocal427_out_bitoff );\
	bmlocal428_element_size_bytes = 2;\
	bmlocal429_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal426_out_ptr) + (idx0) * bmlocal428_element_size_bytes );\
	out_bitoff = bmlocal427_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal429_element_size_bits );\
}

// COMPOSITE: Full name: 'LedOperationalConfigComp_blinkingRate' Type: 'usrIndLedBlinkRate', Inner, Non-instance, Including bitoff root
#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal430_parent_out_ptr;\
	BM_LedOperationalConfigComp_blinkingRate_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal430_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal430_parent_out_ptr;\
}

// Alignment of LedOperationalConfigComp_blinkingRate_onPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal431_my_ptr;\
	UINT bmlocal432_my_bitoff;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_POS( base_ptr, base_bitoff, idx0, bmlocal431_my_ptr, bmlocal432_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal431_my_ptr, bmlocal432_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal433_my_ptr;\
	UINT bmlocal434_my_bitoff;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_POS( base_ptr, base_bitoff, idx0, bmlocal433_my_ptr, bmlocal434_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal433_my_ptr, bmlocal434_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_blinkingRate_onPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_blinkingRate_onPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_blinkingRate_onPeriod: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_blinkingRate_onPeriod: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_blinkingRate_onPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_blinkingRate_onPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal435_out_val;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET( base_ptr, base_bitoff, idx0, bmlocal435_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "onPeriod", 8, (UINT)(bmlocal435_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal436_val;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET( base_ptr, base_bitoff, idx0, bmlocal436_val );\
	(bmlocal436_val)++;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_SET( base_ptr, base_bitoff, idx0, bmlocal436_val );\
}

// LedOperationalConfigComp_blinkingRate_onPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal437_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal437_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal437_tmp_bits );\
}

#define BM_LedOperationalConfigComp_blinkingRate_onPeriod_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal440_acc_bytes;\
	UINT bmlocal441_acc_bits;\
	PVOID bmlocal442_parent_out_ptr;\
	BM_LedOperationalConfigComp_blinkingRate_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal442_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal442_parent_out_ptr;\
	bmlocal440_acc_bytes = 1;\
	bmlocal441_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal440_acc_bytes );\
	out_bitoff += bmlocal441_acc_bits;\
}

// Alignment of LedOperationalConfigComp_blinkingRate_offPeriod: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal443_my_ptr;\
	UINT bmlocal444_my_bitoff;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_POS( base_ptr, base_bitoff, idx0, bmlocal443_my_ptr, bmlocal444_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal443_my_ptr, bmlocal444_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal445_my_ptr;\
	UINT bmlocal446_my_bitoff;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_POS( base_ptr, base_bitoff, idx0, bmlocal445_my_ptr, bmlocal446_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal445_my_ptr, bmlocal446_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_blinkingRate_offPeriod: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_blinkingRate_offPeriod: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_blinkingRate_offPeriod: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_blinkingRate_offPeriod: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_blinkingRate_offPeriod: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_blinkingRate_offPeriod: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal447_out_val;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET( base_ptr, base_bitoff, idx0, bmlocal447_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offPeriod", 8, (UINT)(bmlocal447_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal448_val;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET( base_ptr, base_bitoff, idx0, bmlocal448_val );\
	(bmlocal448_val)++;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_SET( base_ptr, base_bitoff, idx0, bmlocal448_val );\
}

// LedOperationalConfigComp_blinkingRate_offPeriod: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal449_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal449_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal449_tmp_bits );\
}

#define BM_LedOperationalConfigComp_blinkingRate_offPeriod_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_blinkingRate_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_GET_BYTES_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal452_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal452_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal452_tmp_bits );\
}

#define BM_LedOperationalConfigComp_blinkingRate_BYTES_CELL_SIZE 2

#define BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_blinkingRate_onPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BM_LedOperationalConfigComp_blinkingRate_offPeriod_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_DUMP_IDX( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal453_dim_size0;\
	UINT bmlocal454_idx0;\
	bmlocal453_dim_size0 = 13;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "blinkingRate", 1);\
	for( bmlocal454_idx0=0; bmlocal454_idx0<bmlocal453_dim_size0; bmlocal454_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal454_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH_IDX( base_ptr, base_bitoff, bmlocal454_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_blinkingRate_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_blinkingRate_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal455_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal455_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal455_tmp_bits );\
}

#define BM_LedOperationalConfigComp_blinkingRate_BYTES_SIZE 26

#define BM_LedOperationalConfigComp_reserved_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal456_tmp_bytes = 0;\
	UINT bmlocal457_tmp_bits = 0;\
	UINT bmlocal458_acc_bytes;\
	UINT bmlocal459_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal458_acc_bytes = 9;\
	bmlocal459_acc_bits = 0;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, bmlocal456_tmp_bytes, bmlocal457_tmp_bits );\
	bmlocal458_acc_bytes += bmlocal456_tmp_bytes;\
	bmlocal459_acc_bits += bmlocal457_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_GET_SIZE( base_ptr, base_bitoff, bmlocal456_tmp_bytes, bmlocal457_tmp_bits );\
	bmlocal458_acc_bytes += bmlocal456_tmp_bytes;\
	bmlocal459_acc_bits += bmlocal457_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal458_acc_bytes );\
	out_bitoff += bmlocal459_acc_bits;\
}

// Alignment of LedOperationalConfigComp_reserved: accumulated=(Variable), parent.base=(Variable)
#define BM_LedOperationalConfigComp_reserved_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_reserved_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal460_my_ptr;\
	UINT bmlocal461_my_bitoff;\
	BM_LedOperationalConfigComp_reserved_GET_POS( base_ptr, base_bitoff, bmlocal460_my_ptr, bmlocal461_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal460_my_ptr, bmlocal461_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

#define BM_LedOperationalConfigComp_reserved_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal462_my_ptr;\
	UINT bmlocal463_my_bitoff;\
	BM_LedOperationalConfigComp_reserved_GET_POS( base_ptr, base_bitoff, bmlocal462_my_ptr, bmlocal463_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal462_my_ptr, bmlocal463_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// LedOperationalConfigComp_reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// LedOperationalConfigComp_reserved: IS_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_reserved: SET_RESET accessor is not defined because no reset value was specified.
// LedOperationalConfigComp_reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// LedOperationalConfigComp_reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_LedOperationalConfigComp_reserved_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal464_out_val;\
	BM_LedOperationalConfigComp_reserved_GET( base_ptr, base_bitoff, bmlocal464_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "reserved", 8, (UINT)(bmlocal464_out_val), "%d", 1);\
}

#define BM_LedOperationalConfigComp_reserved_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_reserved_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_LedOperationalConfigComp_reserved_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal465_val;\
	BM_LedOperationalConfigComp_reserved_GET( base_ptr, base_bitoff, bmlocal465_val );\
	(bmlocal465_val)++;\
	BM_LedOperationalConfigComp_reserved_SET( base_ptr, base_bitoff, bmlocal465_val );\
}

// LedOperationalConfigComp_reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_LedOperationalConfigComp_reserved_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal466_tmp_bits;\
	BM_LedOperationalConfigComp_reserved_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal466_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal466_tmp_bits );\
}

#define BM_LedOperationalConfigComp_reserved_BYTES_SIZE 1

#define BM_LedOperationalConfigComp_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal467_tmp_bytes = 0;\
	UINT bmlocal468_tmp_bits = 0;\
	out_bytes = 10;\
	out_bits = 0;\
	BM_LedOperationalConfigComp_ledBehavior_GET_SIZE( base_ptr, base_bitoff, bmlocal467_tmp_bytes, bmlocal468_tmp_bits );\
	out_bytes += bmlocal467_tmp_bytes;\
	out_bits += bmlocal468_tmp_bits;\
	BM_LedOperationalConfigComp_blinkingRate_GET_SIZE( base_ptr, base_bitoff, bmlocal467_tmp_bytes, bmlocal468_tmp_bits );\
	out_bytes += bmlocal467_tmp_bytes;\
	out_bits += bmlocal468_tmp_bits;\
}

#define BM_LedOperationalConfigComp_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal469_tmp_bits;\
	BM_LedOperationalConfigComp_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal469_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal469_tmp_bits );\
}

#define BM_LedOperationalConfigComp_BYTES_SIZE 64

#define BM_LedOperationalConfigComp_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "LedOperationalConfigComp", 1);\
	BM_LedOperationalConfigComp_NvmOverride_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_ledBehavior_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_powerSaveInfo_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_numOfLeds_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_blinkingRate_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_LedOperationalConfigComp_reserved_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_LedOperationalConfigComp_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_LedOperationalConfigComp_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_LEDDEFINITIONS_H_ */

