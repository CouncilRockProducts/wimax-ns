/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 11/19/2009 12:56:00 AM
 *
 * Project : Besor
 * Module  : FW DM Parameters
 * Author  : Timor Israeli
 * Date    : 11/10/2007
 * Purpose : L1FW - PAL API to pass DM parameters
 *****************************************************************************/

#if !defined(_BITMAN_L1DMMONITORGROUPS_H_)
#define _BITMAN_L1DMMONITORGROUPS_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "L2L1SdilloDmCommon.h"
#include "DilloDiagnostics.h"

// Include user C header files


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef UINT8 PowerCharacteristics[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	INT16 _Total : 16; //Total power transmitted
	UINT8 _NumOfSubchannels : 8; //Number of subchannels for the UL allocation
	UINT8 _AllocationType : 8; //Type of the UL allocation(values 0-6 indicate indexes 0-6 in table 583 in the standard (C/N). value 7 indicates Sounding. Values 8-15 indicate entries 7-14 in table 583 (C/N)
} BMS_PowerCharacteristics;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _AllocationType : 8; //Type of the UL allocation(values 0-6 indicate indexes 0-6 in table 583 in the standard (C/N). value 7 indicates Sounding. Values 8-15 indicate entries 7-14 in table 583 (C/N)
	UINT8 _NumOfSubchannels : 8; //Number of subchannels for the UL allocation
	INT16 _Total : 16; //Total power transmitted
} BMS_PowerCharacteristics;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PowerCharacteristics' Type: 'PowerCharacteristics', Top-level, Non-instance, No bitoff root
#define BM_PowerCharacteristics_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PowerCharacteristics_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1367_tmp_bitoff;\
	BM_PowerCharacteristics_Total_GET_POS( base_ptr, out_ptr, bmlocal1367_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1367_tmp_bitoff);\
}

#define BM_PowerCharacteristics_Total_POS_ALIGNED 0

// Alignment of PowerCharacteristics_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerCharacteristics_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerCharacteristics_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1368_my_ptr;\
	UINT bmlocal1369_my_bitoff;\
	BM_PowerCharacteristics_Total_GET_POS( base_ptr, bmlocal1368_my_ptr, bmlocal1369_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1368_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1368_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1368_my_ptr, bmlocal1369_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_PowerCharacteristics_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1370_my_ptr;\
	UINT bmlocal1371_my_bitoff;\
	BM_PowerCharacteristics_Total_GET_POS( base_ptr, bmlocal1370_my_ptr, bmlocal1371_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1370_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1370_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1370_my_ptr, bmlocal1371_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// PowerCharacteristics_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_Total: IS_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_Total: SET_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerCharacteristics_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerCharacteristics_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1372_out_val;\
	BM_PowerCharacteristics_Total_GET( base_ptr, bmlocal1372_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1372_out_val), "%d", 1);\
}

#define BM_PowerCharacteristics_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerCharacteristics_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerCharacteristics_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1373_my_ptr;\
	UINT bmlocal1374_my_bitoff;\
	BM_PowerCharacteristics_Total_GET_POS( base_ptr, bmlocal1373_my_ptr, bmlocal1374_my_bitoff );\
	(*((UINT16*)bmlocal1373_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1374_my_bitoff );\
}

// PowerCharacteristics_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerCharacteristics_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1375_tmp_bits;\
	BM_PowerCharacteristics_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1375_tmp_bits );\
}

#define BM_PowerCharacteristics_Total_BYTES_SIZE 2

#define BM_PowerCharacteristics_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1378_acc_bytes;\
	UINT bmlocal1379_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1378_acc_bytes = 2;\
	bmlocal1379_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1378_acc_bytes );\
	out_bitoff += bmlocal1379_acc_bits;\
}

#define BM_PowerCharacteristics_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1380_tmp_bitoff;\
	BM_PowerCharacteristics_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1380_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1380_tmp_bitoff);\
}

#define BM_PowerCharacteristics_NumOfSubchannels_POS_ALIGNED 2

// Alignment of PowerCharacteristics_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerCharacteristics_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerCharacteristics_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1381_my_ptr;\
	UINT bmlocal1382_my_bitoff;\
	BM_PowerCharacteristics_NumOfSubchannels_GET_POS( base_ptr, bmlocal1381_my_ptr, bmlocal1382_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1381_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1381_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1381_my_ptr, bmlocal1382_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_PowerCharacteristics_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1383_my_ptr;\
	UINT bmlocal1384_my_bitoff;\
	BM_PowerCharacteristics_NumOfSubchannels_GET_POS( base_ptr, bmlocal1383_my_ptr, bmlocal1384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1383_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1383_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1383_my_ptr, bmlocal1384_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// PowerCharacteristics_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerCharacteristics_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerCharacteristics_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1385_out_val;\
	BM_PowerCharacteristics_NumOfSubchannels_GET( base_ptr, bmlocal1385_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1385_out_val), "%d", 1);\
}

#define BM_PowerCharacteristics_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerCharacteristics_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerCharacteristics_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1386_my_ptr;\
	UINT bmlocal1387_my_bitoff;\
	BM_PowerCharacteristics_NumOfSubchannels_GET_POS( base_ptr, bmlocal1386_my_ptr, bmlocal1387_my_bitoff );\
	(*((UINT8*)bmlocal1386_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1387_my_bitoff );\
}

// PowerCharacteristics_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerCharacteristics_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1388_tmp_bits;\
	BM_PowerCharacteristics_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1388_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1388_tmp_bits );\
}

#define BM_PowerCharacteristics_NumOfSubchannels_BYTES_SIZE 1

#define BM_PowerCharacteristics_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1391_acc_bytes;\
	UINT bmlocal1392_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1391_acc_bytes = 3;\
	bmlocal1392_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1391_acc_bytes );\
	out_bitoff += bmlocal1392_acc_bits;\
}

#define BM_PowerCharacteristics_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1393_tmp_bitoff;\
	BM_PowerCharacteristics_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1393_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1393_tmp_bitoff);\
}

#define BM_PowerCharacteristics_AllocationType_POS_ALIGNED 3

// Alignment of PowerCharacteristics_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerCharacteristics_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerCharacteristics_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1394_my_ptr;\
	UINT bmlocal1395_my_bitoff;\
	BM_PowerCharacteristics_AllocationType_GET_POS( base_ptr, bmlocal1394_my_ptr, bmlocal1395_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1394_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1394_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1394_my_ptr, bmlocal1395_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_PowerCharacteristics_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1396_my_ptr;\
	UINT bmlocal1397_my_bitoff;\
	BM_PowerCharacteristics_AllocationType_GET_POS( base_ptr, bmlocal1396_my_ptr, bmlocal1397_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1396_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1396_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1396_my_ptr, bmlocal1397_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// PowerCharacteristics_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerCharacteristics_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// PowerCharacteristics_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerCharacteristics_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerCharacteristics_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1398_out_val;\
	BM_PowerCharacteristics_AllocationType_GET( base_ptr, bmlocal1398_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1398_out_val), "%d", 1);\
}

#define BM_PowerCharacteristics_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerCharacteristics_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerCharacteristics_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1399_my_ptr;\
	UINT bmlocal1400_my_bitoff;\
	BM_PowerCharacteristics_AllocationType_GET_POS( base_ptr, bmlocal1399_my_ptr, bmlocal1400_my_bitoff );\
	(*((UINT8*)bmlocal1399_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1400_my_bitoff );\
}

// PowerCharacteristics_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerCharacteristics_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1401_tmp_bits;\
	BM_PowerCharacteristics_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1401_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1401_tmp_bits );\
}

#define BM_PowerCharacteristics_AllocationType_BYTES_SIZE 1

#define BM_PowerCharacteristics_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerCharacteristics_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1404_tmp_bits;\
	BM_PowerCharacteristics_GET_SIZE( base_ptr, out_bytes, bmlocal1404_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1404_tmp_bits );\
}

#define BM_PowerCharacteristics_BYTES_SIZE 4

#define BM_PowerCharacteristics_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PowerCharacteristics", 1);\
	BM_PowerCharacteristics_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerCharacteristics_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerCharacteristics_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerCharacteristics_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerCharacteristics_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 PowerStatistics[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_PowerCharacteristics _MaxPower; //represents the most powerfull Tx allocation ever transmitted
	BMS_PowerCharacteristics _MinPower; //represents the least powerfull Tx allocation ever transmitted
} BMS_PowerStatistics;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_PowerCharacteristics _MinPower; //represents the least powerfull Tx allocation ever transmitted
	BMS_PowerCharacteristics _MaxPower; //represents the most powerfull Tx allocation ever transmitted
} BMS_PowerStatistics;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'PowerStatistics' Type: 'PowerStatistics', Top-level, Non-instance, No bitoff root
#define BM_PowerStatistics_MaxPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_PowerStatistics_MaxPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1405_tmp_bitoff;\
	BM_PowerStatistics_MaxPower_GET_POS( base_ptr, out_ptr, bmlocal1405_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1405_tmp_bitoff);\
}

#define BM_PowerStatistics_MaxPower_POS_ALIGNED 0

// COMPOSITE: Full name: 'PowerStatistics_MaxPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_PowerStatistics_MaxPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1406_parent_out_ptr;\
	BM_PowerStatistics_MaxPower_GET_POS( base_ptr, bmlocal1406_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1406_parent_out_ptr;\
}

#define BM_PowerStatistics_MaxPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1407_tmp_bitoff;\
	BM_PowerStatistics_MaxPower_Total_GET_POS( base_ptr, out_ptr, bmlocal1407_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1407_tmp_bitoff);\
}

#define BM_PowerStatistics_MaxPower_Total_POS_ALIGNED 0

// Alignment of PowerStatistics_MaxPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MaxPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1408_my_ptr;\
	UINT bmlocal1409_my_bitoff;\
	BM_PowerStatistics_MaxPower_Total_GET_POS( base_ptr, bmlocal1408_my_ptr, bmlocal1409_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1408_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1408_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1408_my_ptr, bmlocal1409_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_PowerStatistics_MaxPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1410_my_ptr;\
	UINT bmlocal1411_my_bitoff;\
	BM_PowerStatistics_MaxPower_Total_GET_POS( base_ptr, bmlocal1410_my_ptr, bmlocal1411_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1410_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1410_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1410_my_ptr, bmlocal1411_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// PowerStatistics_MaxPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MaxPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MaxPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1412_out_val;\
	BM_PowerStatistics_MaxPower_Total_GET( base_ptr, bmlocal1412_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1412_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MaxPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MaxPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MaxPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1413_my_ptr;\
	UINT bmlocal1414_my_bitoff;\
	BM_PowerStatistics_MaxPower_Total_GET_POS( base_ptr, bmlocal1413_my_ptr, bmlocal1414_my_bitoff );\
	(*((UINT16*)bmlocal1413_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1414_my_bitoff );\
}

// PowerStatistics_MaxPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MaxPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1415_tmp_bits;\
	BM_PowerStatistics_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1415_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1415_tmp_bits );\
}

#define BM_PowerStatistics_MaxPower_Total_BYTES_SIZE 2

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1418_acc_bytes;\
	UINT bmlocal1419_acc_bits;\
	PVOID bmlocal1420_parent_out_ptr;\
	BM_PowerStatistics_MaxPower_GET_POS( base_ptr, bmlocal1420_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1420_parent_out_ptr;\
	bmlocal1418_acc_bytes = 2;\
	bmlocal1419_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1418_acc_bytes );\
	out_bitoff += bmlocal1419_acc_bits;\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1421_tmp_bitoff;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1421_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1421_tmp_bitoff);\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_POS_ALIGNED 2

// Alignment of PowerStatistics_MaxPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1422_my_ptr;\
	UINT bmlocal1423_my_bitoff;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1422_my_ptr, bmlocal1423_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1422_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1422_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1422_my_ptr, bmlocal1423_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1424_my_ptr;\
	UINT bmlocal1425_my_bitoff;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1424_my_ptr, bmlocal1425_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1424_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1424_my_ptr, bmlocal1425_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// PowerStatistics_MaxPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MaxPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1426_out_val;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET( base_ptr, bmlocal1426_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1426_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1427_my_ptr;\
	UINT bmlocal1428_my_bitoff;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1427_my_ptr, bmlocal1428_my_bitoff );\
	(*((UINT8*)bmlocal1427_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1428_my_bitoff );\
}

// PowerStatistics_MaxPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1429_tmp_bits;\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1429_tmp_bits );\
}

#define BM_PowerStatistics_MaxPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_PowerStatistics_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1432_acc_bytes;\
	UINT bmlocal1433_acc_bits;\
	PVOID bmlocal1434_parent_out_ptr;\
	BM_PowerStatistics_MaxPower_GET_POS( base_ptr, bmlocal1434_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1434_parent_out_ptr;\
	bmlocal1432_acc_bytes = 3;\
	bmlocal1433_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1432_acc_bytes );\
	out_bitoff += bmlocal1433_acc_bits;\
}

#define BM_PowerStatistics_MaxPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1435_tmp_bitoff;\
	BM_PowerStatistics_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1435_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1435_tmp_bitoff);\
}

#define BM_PowerStatistics_MaxPower_AllocationType_POS_ALIGNED 3

// Alignment of PowerStatistics_MaxPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MaxPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1436_my_ptr;\
	UINT bmlocal1437_my_bitoff;\
	BM_PowerStatistics_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1436_my_ptr, bmlocal1437_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1436_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1436_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1436_my_ptr, bmlocal1437_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_PowerStatistics_MaxPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1438_my_ptr;\
	UINT bmlocal1439_my_bitoff;\
	BM_PowerStatistics_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1438_my_ptr, bmlocal1439_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1438_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1438_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1438_my_ptr, bmlocal1439_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// PowerStatistics_MaxPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MaxPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MaxPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MaxPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1440_out_val;\
	BM_PowerStatistics_MaxPower_AllocationType_GET( base_ptr, bmlocal1440_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1440_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MaxPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MaxPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1441_my_ptr;\
	UINT bmlocal1442_my_bitoff;\
	BM_PowerStatistics_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1441_my_ptr, bmlocal1442_my_bitoff );\
	(*((UINT8*)bmlocal1441_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1442_my_bitoff );\
}

// PowerStatistics_MaxPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MaxPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1443_tmp_bits;\
	BM_PowerStatistics_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1443_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1443_tmp_bits );\
}

#define BM_PowerStatistics_MaxPower_AllocationType_BYTES_SIZE 1

#define BM_PowerStatistics_MaxPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MaxPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1446_tmp_bits;\
	BM_PowerStatistics_MaxPower_GET_SIZE( base_ptr, out_bytes, bmlocal1446_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1446_tmp_bits );\
}

#define BM_PowerStatistics_MaxPower_BYTES_SIZE 4

#define BM_PowerStatistics_MaxPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MaxPower", 1);\
	BM_PowerStatistics_MaxPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerStatistics_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerStatistics_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MaxPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MaxPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PowerStatistics_MinPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1449_acc_bytes;\
	UINT bmlocal1450_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1449_acc_bytes = 4;\
	bmlocal1450_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1449_acc_bytes );\
	out_bitoff += bmlocal1450_acc_bits;\
}

#define BM_PowerStatistics_MinPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1451_tmp_bitoff;\
	BM_PowerStatistics_MinPower_GET_POS( base_ptr, out_ptr, bmlocal1451_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1451_tmp_bitoff);\
}

#define BM_PowerStatistics_MinPower_POS_ALIGNED 4

// COMPOSITE: Full name: 'PowerStatistics_MinPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_PowerStatistics_MinPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1452_parent_out_ptr;\
	BM_PowerStatistics_MinPower_GET_POS( base_ptr, bmlocal1452_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1452_parent_out_ptr;\
}

#define BM_PowerStatistics_MinPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1453_tmp_bitoff;\
	BM_PowerStatistics_MinPower_Total_GET_POS( base_ptr, out_ptr, bmlocal1453_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1453_tmp_bitoff);\
}

#define BM_PowerStatistics_MinPower_Total_POS_ALIGNED 4

// Alignment of PowerStatistics_MinPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MinPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MinPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1454_my_ptr;\
	UINT bmlocal1455_my_bitoff;\
	BM_PowerStatistics_MinPower_Total_GET_POS( base_ptr, bmlocal1454_my_ptr, bmlocal1455_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1454_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1454_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1454_my_ptr, bmlocal1455_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_PowerStatistics_MinPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1456_my_ptr;\
	UINT bmlocal1457_my_bitoff;\
	BM_PowerStatistics_MinPower_Total_GET_POS( base_ptr, bmlocal1456_my_ptr, bmlocal1457_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1456_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1456_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1456_my_ptr, bmlocal1457_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// PowerStatistics_MinPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MinPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MinPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1458_out_val;\
	BM_PowerStatistics_MinPower_Total_GET( base_ptr, bmlocal1458_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1458_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MinPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MinPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MinPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1459_my_ptr;\
	UINT bmlocal1460_my_bitoff;\
	BM_PowerStatistics_MinPower_Total_GET_POS( base_ptr, bmlocal1459_my_ptr, bmlocal1460_my_bitoff );\
	(*((UINT16*)bmlocal1459_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1460_my_bitoff );\
}

// PowerStatistics_MinPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MinPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1461_tmp_bits;\
	BM_PowerStatistics_MinPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1461_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1461_tmp_bits );\
}

#define BM_PowerStatistics_MinPower_Total_BYTES_SIZE 2

#define BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1464_acc_bytes;\
	UINT bmlocal1465_acc_bits;\
	PVOID bmlocal1466_parent_out_ptr;\
	BM_PowerStatistics_MinPower_GET_POS( base_ptr, bmlocal1466_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1466_parent_out_ptr;\
	bmlocal1464_acc_bytes = 2;\
	bmlocal1465_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1464_acc_bytes );\
	out_bitoff += bmlocal1465_acc_bits;\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1467_tmp_bitoff;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1467_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1467_tmp_bitoff);\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_POS_ALIGNED 6

// Alignment of PowerStatistics_MinPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1468_my_ptr;\
	UINT bmlocal1469_my_bitoff;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1468_my_ptr, bmlocal1469_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1468_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1468_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1468_my_ptr, bmlocal1469_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1470_my_ptr;\
	UINT bmlocal1471_my_bitoff;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1470_my_ptr, bmlocal1471_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1470_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1470_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1470_my_ptr, bmlocal1471_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// PowerStatistics_MinPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MinPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1472_out_val;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET( base_ptr, bmlocal1472_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1472_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1473_my_ptr;\
	UINT bmlocal1474_my_bitoff;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1473_my_ptr, bmlocal1474_my_bitoff );\
	(*((UINT8*)bmlocal1473_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1474_my_bitoff );\
}

// PowerStatistics_MinPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MinPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1475_tmp_bits;\
	BM_PowerStatistics_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1475_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1475_tmp_bits );\
}

#define BM_PowerStatistics_MinPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_PowerStatistics_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1478_acc_bytes;\
	UINT bmlocal1479_acc_bits;\
	PVOID bmlocal1480_parent_out_ptr;\
	BM_PowerStatistics_MinPower_GET_POS( base_ptr, bmlocal1480_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1480_parent_out_ptr;\
	bmlocal1478_acc_bytes = 3;\
	bmlocal1479_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1478_acc_bytes );\
	out_bitoff += bmlocal1479_acc_bits;\
}

#define BM_PowerStatistics_MinPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1481_tmp_bitoff;\
	BM_PowerStatistics_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1481_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1481_tmp_bitoff);\
}

#define BM_PowerStatistics_MinPower_AllocationType_POS_ALIGNED 7

// Alignment of PowerStatistics_MinPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_PowerStatistics_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MinPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1482_my_ptr;\
	UINT bmlocal1483_my_bitoff;\
	BM_PowerStatistics_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1482_my_ptr, bmlocal1483_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1482_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1482_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1482_my_ptr, bmlocal1483_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_PowerStatistics_MinPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1484_my_ptr;\
	UINT bmlocal1485_my_bitoff;\
	BM_PowerStatistics_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1484_my_ptr, bmlocal1485_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1484_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1484_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1484_my_ptr, bmlocal1485_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// PowerStatistics_MinPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// PowerStatistics_MinPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// PowerStatistics_MinPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// PowerStatistics_MinPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_PowerStatistics_MinPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1486_out_val;\
	BM_PowerStatistics_MinPower_AllocationType_GET( base_ptr, bmlocal1486_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1486_out_val), "%d", 1);\
}

#define BM_PowerStatistics_MinPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MinPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_PowerStatistics_MinPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1487_my_ptr;\
	UINT bmlocal1488_my_bitoff;\
	BM_PowerStatistics_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1487_my_ptr, bmlocal1488_my_bitoff );\
	(*((UINT8*)bmlocal1487_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1488_my_bitoff );\
}

// PowerStatistics_MinPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_PowerStatistics_MinPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1489_tmp_bits;\
	BM_PowerStatistics_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1489_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1489_tmp_bits );\
}

#define BM_PowerStatistics_MinPower_AllocationType_BYTES_SIZE 1

#define BM_PowerStatistics_MinPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MinPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1492_tmp_bits;\
	BM_PowerStatistics_MinPower_GET_SIZE( base_ptr, out_bytes, bmlocal1492_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1492_tmp_bits );\
}

#define BM_PowerStatistics_MinPower_BYTES_SIZE 4

#define BM_PowerStatistics_MinPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MinPower", 1);\
	BM_PowerStatistics_MinPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerStatistics_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerStatistics_MinPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_MinPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_MinPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_PowerStatistics_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1495_tmp_bits;\
	BM_PowerStatistics_GET_SIZE( base_ptr, out_bytes, bmlocal1495_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1495_tmp_bits );\
}

#define BM_PowerStatistics_BYTES_SIZE 8

#define BM_PowerStatistics_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PowerStatistics", 1);\
	BM_PowerStatistics_MaxPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_PowerStatistics_MinPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_PowerStatistics_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_PowerStatistics_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmTpc[42];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	INT16 _PowerPerToneCur : 16; //Current Power Per Tone in units of 0.25 dB
	INT16 _PowerPerToneAvg : 16; //Averaged Power Per Tone in units of 0.25 dB
	UINT16 _PathLoss : 16; //Indicates the path loss. Calculated as BS_EIRP - RSSI. Units are [1 dB]
	UINT16 _Headroom : 16; //Tx Headroom in [0.25 dB]. Indicates the difference between the max power capability per tone and the current P_Tone
	UINT16 _Reserved : 16; //Get to word alignment
	UINT8 _powerControlMode : 8; //This parameter is the TPC mode recieved in the last PMC_RSP message(CL=0/OL-retention=1/OL-reset=2/Active OL=3)
	UINT8 _isTx : 8; //indicates whether the current frame contains any kind of Tx.
	BMS_PowerCharacteristics _CurrentFrameTxPower;
	BMS_PowerStatistics _ExtremePowerValues;
	INT16 _offsetBSperSS : 16; //This parameter is to be used when moving from close to open loop (same as the parametr in the PMC_RSP message
	INT16 _offsetSSperSS : 16; //this is the correction term for SS-specific power offset
	BMS_ULNoiseAndInterferenceRegions _ulNoiseAndInterferenceLevel; //Defined in DlMapParsingInfo.BM. Units are as defined in 8.4.5.3.19
	UINT16 _LackOfHeadroomCounter : 16; //Lack of Tx Headroom
} BMS_dmTpc; //L1 Tpc parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT16 _LackOfHeadroomCounter : 16; //Lack of Tx Headroom
	BMS_ULNoiseAndInterferenceRegions _ulNoiseAndInterferenceLevel; //Defined in DlMapParsingInfo.BM. Units are as defined in 8.4.5.3.19
	INT16 _offsetSSperSS : 16; //this is the correction term for SS-specific power offset
	INT16 _offsetBSperSS : 16; //This parameter is to be used when moving from close to open loop (same as the parametr in the PMC_RSP message
	BMS_PowerStatistics _ExtremePowerValues;
	BMS_PowerCharacteristics _CurrentFrameTxPower;
	UINT8 _isTx : 8; //indicates whether the current frame contains any kind of Tx.
	UINT8 _powerControlMode : 8; //This parameter is the TPC mode recieved in the last PMC_RSP message(CL=0/OL-retention=1/OL-reset=2/Active OL=3)
	UINT16 _Reserved : 16; //Get to word alignment
	UINT16 _Headroom : 16; //Tx Headroom in [0.25 dB]. Indicates the difference between the max power capability per tone and the current P_Tone
	UINT16 _PathLoss : 16; //Indicates the path loss. Calculated as BS_EIRP - RSSI. Units are [1 dB]
	INT16 _PowerPerToneAvg : 16; //Averaged Power Per Tone in units of 0.25 dB
	INT16 _PowerPerToneCur : 16; //Current Power Per Tone in units of 0.25 dB
} BMS_dmTpc; //L1 Tpc parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'dmTpc' Type: 'dmTpc', Top-level, Non-instance, No bitoff root
#define BM_dmTpc_PowerPerToneCur_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmTpc_PowerPerToneCur_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1496_tmp_bitoff;\
	BM_dmTpc_PowerPerToneCur_GET_POS( base_ptr, out_ptr, bmlocal1496_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1496_tmp_bitoff);\
}

#define BM_dmTpc_PowerPerToneCur_POS_ALIGNED 0

// Alignment of dmTpc_PowerPerToneCur: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_PowerPerToneCur_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_PowerPerToneCur_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1497_my_ptr;\
	UINT bmlocal1498_my_bitoff;\
	BM_dmTpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal1497_my_ptr, bmlocal1498_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1497_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1497_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1497_my_ptr, bmlocal1498_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_PowerPerToneCur_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1499_my_ptr;\
	UINT bmlocal1500_my_bitoff;\
	BM_dmTpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal1499_my_ptr, bmlocal1500_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1499_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1499_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1499_my_ptr, bmlocal1500_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_PowerPerToneCur: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PowerPerToneCur: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PowerPerToneCur: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_PowerPerToneCur: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_PowerPerToneCur: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_PowerPerToneCur: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1501_out_val;\
	BM_dmTpc_PowerPerToneCur_GET( base_ptr, bmlocal1501_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerPerToneCur", 16, (UINT)(bmlocal1501_out_val), "%d", 1);\
}

#define BM_dmTpc_PowerPerToneCur_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_PowerPerToneCur_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1502_my_ptr;\
	UINT bmlocal1503_my_bitoff;\
	BM_dmTpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal1502_my_ptr, bmlocal1503_my_bitoff );\
	(*((UINT16*)bmlocal1502_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1503_my_bitoff );\
}

// dmTpc_PowerPerToneCur: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_PowerPerToneCur_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1504_tmp_bits;\
	BM_dmTpc_PowerPerToneCur_GET_SIZE( base_ptr, out_bytes, bmlocal1504_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1504_tmp_bits );\
}

#define BM_dmTpc_PowerPerToneCur_BYTES_SIZE 2

#define BM_dmTpc_PowerPerToneAvg_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1507_acc_bytes;\
	UINT bmlocal1508_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1507_acc_bytes = 2;\
	bmlocal1508_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1507_acc_bytes );\
	out_bitoff += bmlocal1508_acc_bits;\
}

#define BM_dmTpc_PowerPerToneAvg_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1509_tmp_bitoff;\
	BM_dmTpc_PowerPerToneAvg_GET_POS( base_ptr, out_ptr, bmlocal1509_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1509_tmp_bitoff);\
}

#define BM_dmTpc_PowerPerToneAvg_POS_ALIGNED 2

// Alignment of dmTpc_PowerPerToneAvg: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_PowerPerToneAvg_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_PowerPerToneAvg_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1510_my_ptr;\
	UINT bmlocal1511_my_bitoff;\
	BM_dmTpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal1510_my_ptr, bmlocal1511_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1510_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1510_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1510_my_ptr, bmlocal1511_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_PowerPerToneAvg_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1512_my_ptr;\
	UINT bmlocal1513_my_bitoff;\
	BM_dmTpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal1512_my_ptr, bmlocal1513_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1512_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1512_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1512_my_ptr, bmlocal1513_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// dmTpc_PowerPerToneAvg: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PowerPerToneAvg: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PowerPerToneAvg: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_PowerPerToneAvg: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_PowerPerToneAvg: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_PowerPerToneAvg: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1514_out_val;\
	BM_dmTpc_PowerPerToneAvg_GET( base_ptr, bmlocal1514_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerPerToneAvg", 16, (UINT)(bmlocal1514_out_val), "%d", 1);\
}

#define BM_dmTpc_PowerPerToneAvg_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_PowerPerToneAvg_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1515_my_ptr;\
	UINT bmlocal1516_my_bitoff;\
	BM_dmTpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal1515_my_ptr, bmlocal1516_my_bitoff );\
	(*((UINT16*)bmlocal1515_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1516_my_bitoff );\
}

// dmTpc_PowerPerToneAvg: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_PowerPerToneAvg_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1517_tmp_bits;\
	BM_dmTpc_PowerPerToneAvg_GET_SIZE( base_ptr, out_bytes, bmlocal1517_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1517_tmp_bits );\
}

#define BM_dmTpc_PowerPerToneAvg_BYTES_SIZE 2

#define BM_dmTpc_PathLoss_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1520_acc_bytes;\
	UINT bmlocal1521_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1520_acc_bytes = 4;\
	bmlocal1521_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1520_acc_bytes );\
	out_bitoff += bmlocal1521_acc_bits;\
}

#define BM_dmTpc_PathLoss_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1522_tmp_bitoff;\
	BM_dmTpc_PathLoss_GET_POS( base_ptr, out_ptr, bmlocal1522_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1522_tmp_bitoff);\
}

#define BM_dmTpc_PathLoss_POS_ALIGNED 4

// Alignment of dmTpc_PathLoss: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_PathLoss_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_PathLoss_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1523_my_ptr;\
	UINT bmlocal1524_my_bitoff;\
	BM_dmTpc_PathLoss_GET_POS( base_ptr, bmlocal1523_my_ptr, bmlocal1524_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1523_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1523_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1523_my_ptr, bmlocal1524_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_PathLoss_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1525_my_ptr;\
	UINT bmlocal1526_my_bitoff;\
	BM_dmTpc_PathLoss_GET_POS( base_ptr, bmlocal1525_my_ptr, bmlocal1526_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1525_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1525_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1525_my_ptr, bmlocal1526_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_PathLoss: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PathLoss: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_PathLoss: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_PathLoss: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_PathLoss: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_PathLoss: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_PathLoss_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1527_out_val;\
	BM_dmTpc_PathLoss_GET( base_ptr, bmlocal1527_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PathLoss", 16, (UINT)(bmlocal1527_out_val), "%d", 1);\
}

#define BM_dmTpc_PathLoss_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_PathLoss_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_PathLoss_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1528_my_ptr;\
	UINT bmlocal1529_my_bitoff;\
	BM_dmTpc_PathLoss_GET_POS( base_ptr, bmlocal1528_my_ptr, bmlocal1529_my_bitoff );\
	(*((UINT16*)bmlocal1528_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1529_my_bitoff );\
}

// dmTpc_PathLoss: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_PathLoss_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1530_tmp_bits;\
	BM_dmTpc_PathLoss_GET_SIZE( base_ptr, out_bytes, bmlocal1530_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1530_tmp_bits );\
}

#define BM_dmTpc_PathLoss_BYTES_SIZE 2

#define BM_dmTpc_Headroom_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1533_acc_bytes;\
	UINT bmlocal1534_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1533_acc_bytes = 6;\
	bmlocal1534_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1533_acc_bytes );\
	out_bitoff += bmlocal1534_acc_bits;\
}

#define BM_dmTpc_Headroom_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1535_tmp_bitoff;\
	BM_dmTpc_Headroom_GET_POS( base_ptr, out_ptr, bmlocal1535_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1535_tmp_bitoff);\
}

#define BM_dmTpc_Headroom_POS_ALIGNED 6

// Alignment of dmTpc_Headroom: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_Headroom_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_Headroom_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1536_my_ptr;\
	UINT bmlocal1537_my_bitoff;\
	BM_dmTpc_Headroom_GET_POS( base_ptr, bmlocal1536_my_ptr, bmlocal1537_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1536_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1536_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1536_my_ptr, bmlocal1537_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_Headroom_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1538_my_ptr;\
	UINT bmlocal1539_my_bitoff;\
	BM_dmTpc_Headroom_GET_POS( base_ptr, bmlocal1538_my_ptr, bmlocal1539_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1538_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1538_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1538_my_ptr, bmlocal1539_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// dmTpc_Headroom: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_Headroom: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_Headroom: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_Headroom: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_Headroom: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_Headroom: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_Headroom_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1540_out_val;\
	BM_dmTpc_Headroom_GET( base_ptr, bmlocal1540_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Headroom", 16, (UINT)(bmlocal1540_out_val), "%d", 1);\
}

#define BM_dmTpc_Headroom_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_Headroom_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_Headroom_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1541_my_ptr;\
	UINT bmlocal1542_my_bitoff;\
	BM_dmTpc_Headroom_GET_POS( base_ptr, bmlocal1541_my_ptr, bmlocal1542_my_bitoff );\
	(*((UINT16*)bmlocal1541_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1542_my_bitoff );\
}

// dmTpc_Headroom: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_Headroom_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1543_tmp_bits;\
	BM_dmTpc_Headroom_GET_SIZE( base_ptr, out_bytes, bmlocal1543_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1543_tmp_bits );\
}

#define BM_dmTpc_Headroom_BYTES_SIZE 2

#define BM_dmTpc_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1546_acc_bytes;\
	UINT bmlocal1547_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1546_acc_bytes = 8;\
	bmlocal1547_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1546_acc_bytes );\
	out_bitoff += bmlocal1547_acc_bits;\
}

#define BM_dmTpc_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1548_tmp_bitoff;\
	BM_dmTpc_Reserved_GET_POS( base_ptr, out_ptr, bmlocal1548_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1548_tmp_bitoff);\
}

#define BM_dmTpc_Reserved_POS_ALIGNED 8

// Alignment of dmTpc_Reserved: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_Reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_Reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1549_my_ptr;\
	UINT bmlocal1550_my_bitoff;\
	BM_dmTpc_Reserved_GET_POS( base_ptr, bmlocal1549_my_ptr, bmlocal1550_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1549_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1549_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1549_my_ptr, bmlocal1550_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_Reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1551_my_ptr;\
	UINT bmlocal1552_my_bitoff;\
	BM_dmTpc_Reserved_GET_POS( base_ptr, bmlocal1551_my_ptr, bmlocal1552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1551_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1551_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1551_my_ptr, bmlocal1552_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1553_out_val;\
	BM_dmTpc_Reserved_GET( base_ptr, bmlocal1553_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 16, (UINT)(bmlocal1553_out_val), "%d", 1);\
}

#define BM_dmTpc_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_Reserved_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1554_my_ptr;\
	UINT bmlocal1555_my_bitoff;\
	BM_dmTpc_Reserved_GET_POS( base_ptr, bmlocal1554_my_ptr, bmlocal1555_my_bitoff );\
	(*((UINT16*)bmlocal1554_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1555_my_bitoff );\
}

// dmTpc_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_Reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1556_tmp_bits;\
	BM_dmTpc_Reserved_GET_SIZE( base_ptr, out_bytes, bmlocal1556_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1556_tmp_bits );\
}

#define BM_dmTpc_Reserved_BYTES_SIZE 2

#define BM_dmTpc_powerControlMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1559_acc_bytes;\
	UINT bmlocal1560_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1559_acc_bytes = 10;\
	bmlocal1560_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1559_acc_bytes );\
	out_bitoff += bmlocal1560_acc_bits;\
}

#define BM_dmTpc_powerControlMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1561_tmp_bitoff;\
	BM_dmTpc_powerControlMode_GET_POS( base_ptr, out_ptr, bmlocal1561_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1561_tmp_bitoff);\
}

#define BM_dmTpc_powerControlMode_POS_ALIGNED 10

// Alignment of dmTpc_powerControlMode: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_powerControlMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_powerControlMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1562_my_ptr;\
	UINT bmlocal1563_my_bitoff;\
	BM_dmTpc_powerControlMode_GET_POS( base_ptr, bmlocal1562_my_ptr, bmlocal1563_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1562_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1562_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1562_my_ptr, bmlocal1563_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_powerControlMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1564_my_ptr;\
	UINT bmlocal1565_my_bitoff;\
	BM_dmTpc_powerControlMode_GET_POS( base_ptr, bmlocal1564_my_ptr, bmlocal1565_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1564_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1564_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1564_my_ptr, bmlocal1565_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_powerControlMode: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_powerControlMode: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_powerControlMode: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_powerControlMode: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_powerControlMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_powerControlMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_powerControlMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1566_out_val;\
	BM_dmTpc_powerControlMode_GET( base_ptr, bmlocal1566_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "powerControlMode", 8, (UINT)(bmlocal1566_out_val), "%d", 1);\
}

#define BM_dmTpc_powerControlMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_powerControlMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_powerControlMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1567_my_ptr;\
	UINT bmlocal1568_my_bitoff;\
	BM_dmTpc_powerControlMode_GET_POS( base_ptr, bmlocal1567_my_ptr, bmlocal1568_my_bitoff );\
	(*((UINT8*)bmlocal1567_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1568_my_bitoff );\
}

// dmTpc_powerControlMode: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_powerControlMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1569_tmp_bits;\
	BM_dmTpc_powerControlMode_GET_SIZE( base_ptr, out_bytes, bmlocal1569_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1569_tmp_bits );\
}

#define BM_dmTpc_powerControlMode_BYTES_SIZE 1

#define BM_dmTpc_isTx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1572_acc_bytes;\
	UINT bmlocal1573_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1572_acc_bytes = 11;\
	bmlocal1573_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1572_acc_bytes );\
	out_bitoff += bmlocal1573_acc_bits;\
}

#define BM_dmTpc_isTx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1574_tmp_bitoff;\
	BM_dmTpc_isTx_GET_POS( base_ptr, out_ptr, bmlocal1574_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1574_tmp_bitoff);\
}

#define BM_dmTpc_isTx_POS_ALIGNED 11

// Alignment of dmTpc_isTx: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_isTx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_isTx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1575_my_ptr;\
	UINT bmlocal1576_my_bitoff;\
	BM_dmTpc_isTx_GET_POS( base_ptr, bmlocal1575_my_ptr, bmlocal1576_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1575_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1575_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1575_my_ptr, bmlocal1576_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_isTx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1577_my_ptr;\
	UINT bmlocal1578_my_bitoff;\
	BM_dmTpc_isTx_GET_POS( base_ptr, bmlocal1577_my_ptr, bmlocal1578_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1577_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1577_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1577_my_ptr, bmlocal1578_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_isTx: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_isTx: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_isTx: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_isTx: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_isTx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_isTx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_isTx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1579_out_val;\
	BM_dmTpc_isTx_GET( base_ptr, bmlocal1579_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "isTx", 8, (UINT)(bmlocal1579_out_val), "%d", 1);\
}

#define BM_dmTpc_isTx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_isTx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_isTx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1580_my_ptr;\
	UINT bmlocal1581_my_bitoff;\
	BM_dmTpc_isTx_GET_POS( base_ptr, bmlocal1580_my_ptr, bmlocal1581_my_bitoff );\
	(*((UINT8*)bmlocal1580_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1581_my_bitoff );\
}

// dmTpc_isTx: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_isTx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1582_tmp_bits;\
	BM_dmTpc_isTx_GET_SIZE( base_ptr, out_bytes, bmlocal1582_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1582_tmp_bits );\
}

#define BM_dmTpc_isTx_BYTES_SIZE 1

#define BM_dmTpc_CurrentFrameTxPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1585_acc_bytes;\
	UINT bmlocal1586_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1585_acc_bytes = 12;\
	bmlocal1586_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1585_acc_bytes );\
	out_bitoff += bmlocal1586_acc_bits;\
}

#define BM_dmTpc_CurrentFrameTxPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1587_tmp_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_GET_POS( base_ptr, out_ptr, bmlocal1587_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1587_tmp_bitoff);\
}

#define BM_dmTpc_CurrentFrameTxPower_POS_ALIGNED 12

// COMPOSITE: Full name: 'dmTpc_CurrentFrameTxPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_dmTpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1588_parent_out_ptr;\
	BM_dmTpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal1588_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1588_parent_out_ptr;\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1589_tmp_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, out_ptr, bmlocal1589_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1589_tmp_bitoff);\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_POS_ALIGNED 12

// Alignment of dmTpc_CurrentFrameTxPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_CurrentFrameTxPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1590_my_ptr;\
	UINT bmlocal1591_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal1590_my_ptr, bmlocal1591_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1590_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1590_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1590_my_ptr, bmlocal1591_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1592_my_ptr;\
	UINT bmlocal1593_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal1592_my_ptr, bmlocal1593_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1592_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1592_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1592_my_ptr, bmlocal1593_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_CurrentFrameTxPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_CurrentFrameTxPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1594_out_val;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET( base_ptr, bmlocal1594_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1594_out_val), "%d", 1);\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1595_my_ptr;\
	UINT bmlocal1596_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal1595_my_ptr, bmlocal1596_my_bitoff );\
	(*((UINT16*)bmlocal1595_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1596_my_bitoff );\
}

// dmTpc_CurrentFrameTxPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_CurrentFrameTxPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1597_tmp_bits;\
	BM_dmTpc_CurrentFrameTxPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1597_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1597_tmp_bits );\
}

#define BM_dmTpc_CurrentFrameTxPower_Total_BYTES_SIZE 2

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1600_acc_bytes;\
	UINT bmlocal1601_acc_bits;\
	PVOID bmlocal1602_parent_out_ptr;\
	BM_dmTpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal1602_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1602_parent_out_ptr;\
	bmlocal1600_acc_bytes = 2;\
	bmlocal1601_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1600_acc_bytes );\
	out_bitoff += bmlocal1601_acc_bits;\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1603_tmp_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1603_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1603_tmp_bitoff);\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_POS_ALIGNED 14

// Alignment of dmTpc_CurrentFrameTxPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1604_my_ptr;\
	UINT bmlocal1605_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1604_my_ptr, bmlocal1605_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1604_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1604_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1604_my_ptr, bmlocal1605_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1606_my_ptr;\
	UINT bmlocal1607_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1606_my_ptr, bmlocal1607_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1606_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1606_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1606_my_ptr, bmlocal1607_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_CurrentFrameTxPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_CurrentFrameTxPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1608_out_val;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET( base_ptr, bmlocal1608_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1608_out_val), "%d", 1);\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1609_my_ptr;\
	UINT bmlocal1610_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1609_my_ptr, bmlocal1610_my_bitoff );\
	(*((UINT8*)bmlocal1609_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1610_my_bitoff );\
}

// dmTpc_CurrentFrameTxPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1611_tmp_bits;\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1611_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1611_tmp_bits );\
}

#define BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1614_acc_bytes;\
	UINT bmlocal1615_acc_bits;\
	PVOID bmlocal1616_parent_out_ptr;\
	BM_dmTpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal1616_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1616_parent_out_ptr;\
	bmlocal1614_acc_bytes = 3;\
	bmlocal1615_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1614_acc_bytes );\
	out_bitoff += bmlocal1615_acc_bits;\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1617_tmp_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1617_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1617_tmp_bitoff);\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_POS_ALIGNED 15

// Alignment of dmTpc_CurrentFrameTxPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1618_my_ptr;\
	UINT bmlocal1619_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal1618_my_ptr, bmlocal1619_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1618_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1618_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1618_my_ptr, bmlocal1619_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1620_my_ptr;\
	UINT bmlocal1621_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal1620_my_ptr, bmlocal1621_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1620_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1620_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1620_my_ptr, bmlocal1621_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_CurrentFrameTxPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_CurrentFrameTxPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_CurrentFrameTxPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_CurrentFrameTxPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1622_out_val;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET( base_ptr, bmlocal1622_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1622_out_val), "%d", 1);\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1623_my_ptr;\
	UINT bmlocal1624_my_bitoff;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal1623_my_ptr, bmlocal1624_my_bitoff );\
	(*((UINT8*)bmlocal1623_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1624_my_bitoff );\
}

// dmTpc_CurrentFrameTxPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1625_tmp_bits;\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1625_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1625_tmp_bits );\
}

#define BM_dmTpc_CurrentFrameTxPower_AllocationType_BYTES_SIZE 1

#define BM_dmTpc_CurrentFrameTxPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_CurrentFrameTxPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1628_tmp_bits;\
	BM_dmTpc_CurrentFrameTxPower_GET_SIZE( base_ptr, out_bytes, bmlocal1628_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1628_tmp_bits );\
}

#define BM_dmTpc_CurrentFrameTxPower_BYTES_SIZE 4

#define BM_dmTpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CurrentFrameTxPower", 1);\
	BM_dmTpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_CurrentFrameTxPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ExtremePowerValues_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1631_acc_bytes;\
	UINT bmlocal1632_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1631_acc_bytes = 16;\
	bmlocal1632_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1631_acc_bytes );\
	out_bitoff += bmlocal1632_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1633_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_GET_POS( base_ptr, out_ptr, bmlocal1633_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1633_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_POS_ALIGNED 16

// COMPOSITE: Full name: 'dmTpc_ExtremePowerValues' Type: 'PowerStatistics', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1634_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_GET_POS( base_ptr, bmlocal1634_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1634_parent_out_ptr;\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1635_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, out_ptr, bmlocal1635_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1635_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_POS_ALIGNED 16

// COMPOSITE: Full name: 'dmTpc_ExtremePowerValues_MaxPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1636_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal1636_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1636_parent_out_ptr;\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1637_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, out_ptr, bmlocal1637_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1637_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_POS_ALIGNED 16

// Alignment of dmTpc_ExtremePowerValues_MaxPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1638_my_ptr;\
	UINT bmlocal1639_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal1638_my_ptr, bmlocal1639_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1638_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1638_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1638_my_ptr, bmlocal1639_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1640_my_ptr;\
	UINT bmlocal1641_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal1640_my_ptr, bmlocal1641_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1640_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1640_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1640_my_ptr, bmlocal1641_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_ExtremePowerValues_MaxPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MaxPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1642_out_val;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET( base_ptr, bmlocal1642_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1642_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1643_my_ptr;\
	UINT bmlocal1644_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal1643_my_ptr, bmlocal1644_my_bitoff );\
	(*((UINT16*)bmlocal1643_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1644_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MaxPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1645_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1645_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1645_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_Total_BYTES_SIZE 2

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1648_acc_bytes;\
	UINT bmlocal1649_acc_bits;\
	PVOID bmlocal1650_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal1650_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1650_parent_out_ptr;\
	bmlocal1648_acc_bytes = 2;\
	bmlocal1649_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1648_acc_bytes );\
	out_bitoff += bmlocal1649_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1651_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1651_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1651_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_POS_ALIGNED 18

// Alignment of dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1652_my_ptr;\
	UINT bmlocal1653_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1652_my_ptr, bmlocal1653_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1652_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1652_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1652_my_ptr, bmlocal1653_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1654_my_ptr;\
	UINT bmlocal1655_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1654_my_ptr, bmlocal1655_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1654_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1654_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1654_my_ptr, bmlocal1655_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1656_out_val;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET( base_ptr, bmlocal1656_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1656_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1657_my_ptr;\
	UINT bmlocal1658_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1657_my_ptr, bmlocal1658_my_bitoff );\
	(*((UINT8*)bmlocal1657_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1658_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1659_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1659_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1659_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1662_acc_bytes;\
	UINT bmlocal1663_acc_bits;\
	PVOID bmlocal1664_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal1664_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1664_parent_out_ptr;\
	bmlocal1662_acc_bytes = 3;\
	bmlocal1663_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1662_acc_bytes );\
	out_bitoff += bmlocal1663_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1665_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1665_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1665_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_POS_ALIGNED 19

// Alignment of dmTpc_ExtremePowerValues_MaxPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1666_my_ptr;\
	UINT bmlocal1667_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1666_my_ptr, bmlocal1667_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1666_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1666_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1666_my_ptr, bmlocal1667_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1668_my_ptr;\
	UINT bmlocal1669_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1668_my_ptr, bmlocal1669_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1668_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1668_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1668_my_ptr, bmlocal1669_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_ExtremePowerValues_MaxPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MaxPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MaxPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MaxPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1670_out_val;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET( base_ptr, bmlocal1670_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1670_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1671_my_ptr;\
	UINT bmlocal1672_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal1671_my_ptr, bmlocal1672_my_bitoff );\
	(*((UINT8*)bmlocal1671_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1672_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MaxPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1673_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1673_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1673_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_BYTES_SIZE 1

#define BM_dmTpc_ExtremePowerValues_MaxPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1676_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MaxPower_GET_SIZE( base_ptr, out_bytes, bmlocal1676_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1676_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_BYTES_SIZE 4

#define BM_dmTpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MaxPower", 1);\
	BM_dmTpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MaxPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1679_acc_bytes;\
	UINT bmlocal1680_acc_bits;\
	PVOID bmlocal1681_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_GET_POS( base_ptr, bmlocal1681_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1681_parent_out_ptr;\
	bmlocal1679_acc_bytes = 4;\
	bmlocal1680_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1679_acc_bytes );\
	out_bitoff += bmlocal1680_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1682_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, out_ptr, bmlocal1682_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1682_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_POS_ALIGNED 20

// COMPOSITE: Full name: 'dmTpc_ExtremePowerValues_MinPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1683_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal1683_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1683_parent_out_ptr;\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1684_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, out_ptr, bmlocal1684_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1684_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_POS_ALIGNED 20

// Alignment of dmTpc_ExtremePowerValues_MinPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1685_my_ptr;\
	UINT bmlocal1686_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal1685_my_ptr, bmlocal1686_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1685_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1685_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1685_my_ptr, bmlocal1686_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1687_my_ptr;\
	UINT bmlocal1688_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal1687_my_ptr, bmlocal1688_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1687_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1687_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1687_my_ptr, bmlocal1688_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_ExtremePowerValues_MinPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MinPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1689_out_val;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET( base_ptr, bmlocal1689_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal1689_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1690_my_ptr;\
	UINT bmlocal1691_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal1690_my_ptr, bmlocal1691_my_bitoff );\
	(*((UINT16*)bmlocal1690_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1691_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MinPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1692_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal1692_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1692_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_Total_BYTES_SIZE 2

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1695_acc_bytes;\
	UINT bmlocal1696_acc_bits;\
	PVOID bmlocal1697_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal1697_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1697_parent_out_ptr;\
	bmlocal1695_acc_bytes = 2;\
	bmlocal1696_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1695_acc_bytes );\
	out_bitoff += bmlocal1696_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1698_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal1698_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1698_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_POS_ALIGNED 22

// Alignment of dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1699_my_ptr;\
	UINT bmlocal1700_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1699_my_ptr, bmlocal1700_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1699_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1699_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1699_my_ptr, bmlocal1700_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1701_my_ptr;\
	UINT bmlocal1702_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1701_my_ptr, bmlocal1702_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1701_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1701_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1701_my_ptr, bmlocal1702_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1703_out_val;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET( base_ptr, bmlocal1703_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal1703_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1704_my_ptr;\
	UINT bmlocal1705_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal1704_my_ptr, bmlocal1705_my_bitoff );\
	(*((UINT8*)bmlocal1704_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1705_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1706_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal1706_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1706_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1709_acc_bytes;\
	UINT bmlocal1710_acc_bits;\
	PVOID bmlocal1711_parent_out_ptr;\
	BM_dmTpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal1711_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1711_parent_out_ptr;\
	bmlocal1709_acc_bytes = 3;\
	bmlocal1710_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1709_acc_bytes );\
	out_bitoff += bmlocal1710_acc_bits;\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1712_tmp_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal1712_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1712_tmp_bitoff);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_POS_ALIGNED 23

// Alignment of dmTpc_ExtremePowerValues_MinPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1713_my_ptr;\
	UINT bmlocal1714_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1713_my_ptr, bmlocal1714_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1713_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1713_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1713_my_ptr, bmlocal1714_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1715_my_ptr;\
	UINT bmlocal1716_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1715_my_ptr, bmlocal1716_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1715_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1715_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1715_my_ptr, bmlocal1716_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_ExtremePowerValues_MinPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ExtremePowerValues_MinPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ExtremePowerValues_MinPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ExtremePowerValues_MinPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1717_out_val;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET( base_ptr, bmlocal1717_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal1717_out_val), "%d", 1);\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1718_my_ptr;\
	UINT bmlocal1719_my_bitoff;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal1718_my_ptr, bmlocal1719_my_bitoff );\
	(*((UINT8*)bmlocal1718_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1719_my_bitoff );\
}

// dmTpc_ExtremePowerValues_MinPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1720_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal1720_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1720_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_BYTES_SIZE 1

#define BM_dmTpc_ExtremePowerValues_MinPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1723_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_MinPower_GET_SIZE( base_ptr, out_bytes, bmlocal1723_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1723_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_BYTES_SIZE 4

#define BM_dmTpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MinPower", 1);\
	BM_dmTpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_MinPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ExtremePowerValues_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1726_tmp_bits;\
	BM_dmTpc_ExtremePowerValues_GET_SIZE( base_ptr, out_bytes, bmlocal1726_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1726_tmp_bits );\
}

#define BM_dmTpc_ExtremePowerValues_BYTES_SIZE 8

#define BM_dmTpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ExtremePowerValues", 1);\
	BM_dmTpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ExtremePowerValues_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_offsetBSperSS_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1729_acc_bytes;\
	UINT bmlocal1730_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1729_acc_bytes = 24;\
	bmlocal1730_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1729_acc_bytes );\
	out_bitoff += bmlocal1730_acc_bits;\
}

#define BM_dmTpc_offsetBSperSS_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1731_tmp_bitoff;\
	BM_dmTpc_offsetBSperSS_GET_POS( base_ptr, out_ptr, bmlocal1731_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1731_tmp_bitoff);\
}

#define BM_dmTpc_offsetBSperSS_POS_ALIGNED 24

// Alignment of dmTpc_offsetBSperSS: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_offsetBSperSS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_offsetBSperSS_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1732_my_ptr;\
	UINT bmlocal1733_my_bitoff;\
	BM_dmTpc_offsetBSperSS_GET_POS( base_ptr, bmlocal1732_my_ptr, bmlocal1733_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1732_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1732_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1732_my_ptr, bmlocal1733_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_offsetBSperSS_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1734_my_ptr;\
	UINT bmlocal1735_my_bitoff;\
	BM_dmTpc_offsetBSperSS_GET_POS( base_ptr, bmlocal1734_my_ptr, bmlocal1735_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1734_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1734_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1734_my_ptr, bmlocal1735_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_offsetBSperSS: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_offsetBSperSS: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_offsetBSperSS: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_offsetBSperSS: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_offsetBSperSS: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_offsetBSperSS: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_offsetBSperSS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1736_out_val;\
	BM_dmTpc_offsetBSperSS_GET( base_ptr, bmlocal1736_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offsetBSperSS", 16, (UINT)(bmlocal1736_out_val), "%d", 1);\
}

#define BM_dmTpc_offsetBSperSS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_offsetBSperSS_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_offsetBSperSS_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1737_my_ptr;\
	UINT bmlocal1738_my_bitoff;\
	BM_dmTpc_offsetBSperSS_GET_POS( base_ptr, bmlocal1737_my_ptr, bmlocal1738_my_bitoff );\
	(*((UINT16*)bmlocal1737_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1738_my_bitoff );\
}

// dmTpc_offsetBSperSS: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_offsetBSperSS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1739_tmp_bits;\
	BM_dmTpc_offsetBSperSS_GET_SIZE( base_ptr, out_bytes, bmlocal1739_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1739_tmp_bits );\
}

#define BM_dmTpc_offsetBSperSS_BYTES_SIZE 2

#define BM_dmTpc_offsetSSperSS_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1742_acc_bytes;\
	UINT bmlocal1743_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1742_acc_bytes = 26;\
	bmlocal1743_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1742_acc_bytes );\
	out_bitoff += bmlocal1743_acc_bits;\
}

#define BM_dmTpc_offsetSSperSS_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1744_tmp_bitoff;\
	BM_dmTpc_offsetSSperSS_GET_POS( base_ptr, out_ptr, bmlocal1744_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1744_tmp_bitoff);\
}

#define BM_dmTpc_offsetSSperSS_POS_ALIGNED 26

// Alignment of dmTpc_offsetSSperSS: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_offsetSSperSS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_offsetSSperSS_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1745_my_ptr;\
	UINT bmlocal1746_my_bitoff;\
	BM_dmTpc_offsetSSperSS_GET_POS( base_ptr, bmlocal1745_my_ptr, bmlocal1746_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1745_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1745_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1745_my_ptr, bmlocal1746_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_offsetSSperSS_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1747_my_ptr;\
	UINT bmlocal1748_my_bitoff;\
	BM_dmTpc_offsetSSperSS_GET_POS( base_ptr, bmlocal1747_my_ptr, bmlocal1748_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1747_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1747_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1747_my_ptr, bmlocal1748_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// dmTpc_offsetSSperSS: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_offsetSSperSS: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_offsetSSperSS: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_offsetSSperSS: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_offsetSSperSS: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_offsetSSperSS: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_offsetSSperSS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal1749_out_val;\
	BM_dmTpc_offsetSSperSS_GET( base_ptr, bmlocal1749_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offsetSSperSS", 16, (UINT)(bmlocal1749_out_val), "%d", 1);\
}

#define BM_dmTpc_offsetSSperSS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_offsetSSperSS_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_offsetSSperSS_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1750_my_ptr;\
	UINT bmlocal1751_my_bitoff;\
	BM_dmTpc_offsetSSperSS_GET_POS( base_ptr, bmlocal1750_my_ptr, bmlocal1751_my_bitoff );\
	(*((UINT16*)bmlocal1750_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1751_my_bitoff );\
}

// dmTpc_offsetSSperSS: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_offsetSSperSS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1752_tmp_bits;\
	BM_dmTpc_offsetSSperSS_GET_SIZE( base_ptr, out_bytes, bmlocal1752_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1752_tmp_bits );\
}

#define BM_dmTpc_offsetSSperSS_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1755_acc_bytes;\
	UINT bmlocal1756_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1755_acc_bytes = 28;\
	bmlocal1756_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1755_acc_bytes );\
	out_bitoff += bmlocal1756_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1757_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, out_ptr, bmlocal1757_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1757_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_POS_ALIGNED 28

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel' Type: 'ULNoiseAndInterferenceRegions', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1758_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1758_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1758_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1759_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal1759_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1759_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_POS_ALIGNED 28

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1760_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal1760_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1760_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1761_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1761_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1761_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_POS_ALIGNED 28

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1762_my_ptr;\
	UINT bmlocal1763_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal1762_my_ptr, bmlocal1763_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1762_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1762_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1762_my_ptr, bmlocal1763_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1764_my_ptr;\
	UINT bmlocal1765_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal1764_my_ptr, bmlocal1765_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1764_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1764_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1764_my_ptr, bmlocal1765_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1766_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET( base_ptr, bmlocal1766_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1766_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1767_my_ptr;\
	UINT bmlocal1768_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal1767_my_ptr, bmlocal1768_my_bitoff );\
	(*((UINT8*)bmlocal1767_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1768_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1769_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1769_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1769_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1772_acc_bytes;\
	UINT bmlocal1773_acc_bits;\
	PVOID bmlocal1774_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal1774_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1774_parent_out_ptr;\
	bmlocal1772_acc_bytes = 1;\
	bmlocal1773_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1772_acc_bytes );\
	out_bitoff += bmlocal1773_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1775_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal1775_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1775_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_POS_ALIGNED 29

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1776_my_ptr;\
	UINT bmlocal1777_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal1776_my_ptr, bmlocal1777_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1776_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1776_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1776_my_ptr, bmlocal1777_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1778_my_ptr;\
	UINT bmlocal1779_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal1778_my_ptr, bmlocal1779_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1778_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1778_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1778_my_ptr, bmlocal1779_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1780_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET( base_ptr, bmlocal1780_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1780_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1781_my_ptr;\
	UINT bmlocal1782_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal1781_my_ptr, bmlocal1782_my_bitoff );\
	(*((UINT8*)bmlocal1781_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1782_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1783_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1783_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1783_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1786_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal1786_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1786_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "cqiAckPeriodicRangingNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1789_acc_bytes;\
	UINT bmlocal1790_acc_bits;\
	PVOID bmlocal1791_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1791_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1791_parent_out_ptr;\
	bmlocal1789_acc_bytes = 2;\
	bmlocal1790_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1789_acc_bytes );\
	out_bitoff += bmlocal1790_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1792_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, out_ptr, bmlocal1792_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1792_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_POS_ALIGNED 30

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_puscNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1793_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, bmlocal1793_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1793_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1794_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1794_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1794_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_POS_ALIGNED 30

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1795_my_ptr;\
	UINT bmlocal1796_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal1795_my_ptr, bmlocal1796_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1795_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1795_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1795_my_ptr, bmlocal1796_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1797_my_ptr;\
	UINT bmlocal1798_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal1797_my_ptr, bmlocal1798_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1797_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1797_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1797_my_ptr, bmlocal1798_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1799_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET( base_ptr, bmlocal1799_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1799_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1800_my_ptr;\
	UINT bmlocal1801_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal1800_my_ptr, bmlocal1801_my_bitoff );\
	(*((UINT8*)bmlocal1800_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1801_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1802_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1802_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1802_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1805_acc_bytes;\
	UINT bmlocal1806_acc_bits;\
	PVOID bmlocal1807_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, bmlocal1807_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1807_parent_out_ptr;\
	bmlocal1805_acc_bytes = 1;\
	bmlocal1806_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1805_acc_bytes );\
	out_bitoff += bmlocal1806_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1808_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, out_ptr, bmlocal1808_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1808_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_POS_ALIGNED 31

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1809_my_ptr;\
	UINT bmlocal1810_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal1809_my_ptr, bmlocal1810_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1809_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1809_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1809_my_ptr, bmlocal1810_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1811_my_ptr;\
	UINT bmlocal1812_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal1811_my_ptr, bmlocal1812_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1811_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1811_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1811_my_ptr, bmlocal1812_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1813_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET( base_ptr, bmlocal1813_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1813_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1814_my_ptr;\
	UINT bmlocal1815_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal1814_my_ptr, bmlocal1815_my_bitoff );\
	(*((UINT8*)bmlocal1814_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1815_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_puscNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1816_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1816_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1816_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1819_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_GET_SIZE( base_ptr, out_bytes, bmlocal1819_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1819_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "puscNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1822_acc_bytes;\
	UINT bmlocal1823_acc_bits;\
	PVOID bmlocal1824_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1824_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1824_parent_out_ptr;\
	bmlocal1822_acc_bytes = 4;\
	bmlocal1823_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1822_acc_bytes );\
	out_bitoff += bmlocal1823_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1825_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, out_ptr, bmlocal1825_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1825_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_POS_ALIGNED 32

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_amcNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1826_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, bmlocal1826_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1826_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1827_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1827_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1827_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_POS_ALIGNED 32

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1828_my_ptr;\
	UINT bmlocal1829_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal1828_my_ptr, bmlocal1829_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1828_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1828_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1828_my_ptr, bmlocal1829_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1830_my_ptr;\
	UINT bmlocal1831_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal1830_my_ptr, bmlocal1831_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1830_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1830_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1830_my_ptr, bmlocal1831_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1832_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET( base_ptr, bmlocal1832_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1832_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1833_my_ptr;\
	UINT bmlocal1834_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal1833_my_ptr, bmlocal1834_my_bitoff );\
	(*((UINT8*)bmlocal1833_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1834_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1835_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1835_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1835_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1838_acc_bytes;\
	UINT bmlocal1839_acc_bits;\
	PVOID bmlocal1840_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, bmlocal1840_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1840_parent_out_ptr;\
	bmlocal1838_acc_bytes = 1;\
	bmlocal1839_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1838_acc_bytes );\
	out_bitoff += bmlocal1839_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1841_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, out_ptr, bmlocal1841_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1841_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_POS_ALIGNED 33

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1842_my_ptr;\
	UINT bmlocal1843_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal1842_my_ptr, bmlocal1843_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1842_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1842_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1842_my_ptr, bmlocal1843_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1844_my_ptr;\
	UINT bmlocal1845_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal1844_my_ptr, bmlocal1845_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1844_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1844_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1844_my_ptr, bmlocal1845_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1846_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET( base_ptr, bmlocal1846_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1846_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1847_my_ptr;\
	UINT bmlocal1848_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal1847_my_ptr, bmlocal1848_my_bitoff );\
	(*((UINT8*)bmlocal1847_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1848_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_amcNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1849_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1849_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1849_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1852_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_GET_SIZE( base_ptr, out_bytes, bmlocal1852_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1852_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "amcNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1855_acc_bytes;\
	UINT bmlocal1856_acc_bits;\
	PVOID bmlocal1857_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1857_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1857_parent_out_ptr;\
	bmlocal1855_acc_bytes = 6;\
	bmlocal1856_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1855_acc_bytes );\
	out_bitoff += bmlocal1856_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1858_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal1858_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1858_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_POS_ALIGNED 34

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1859_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, bmlocal1859_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1859_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1860_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1860_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1860_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_POS_ALIGNED 34

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1861_my_ptr;\
	UINT bmlocal1862_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal1861_my_ptr, bmlocal1862_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1861_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1861_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1861_my_ptr, bmlocal1862_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1863_my_ptr;\
	UINT bmlocal1864_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal1863_my_ptr, bmlocal1864_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1863_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1863_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1863_my_ptr, bmlocal1864_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1865_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET( base_ptr, bmlocal1865_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1865_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1866_my_ptr;\
	UINT bmlocal1867_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal1866_my_ptr, bmlocal1867_my_bitoff );\
	(*((UINT8*)bmlocal1866_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1867_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1868_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1868_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1868_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1871_acc_bytes;\
	UINT bmlocal1872_acc_bits;\
	PVOID bmlocal1873_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, bmlocal1873_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1873_parent_out_ptr;\
	bmlocal1871_acc_bytes = 1;\
	bmlocal1872_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1871_acc_bytes );\
	out_bitoff += bmlocal1872_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1874_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal1874_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1874_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_POS_ALIGNED 35

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1875_my_ptr;\
	UINT bmlocal1876_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal1875_my_ptr, bmlocal1876_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1875_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1875_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1875_my_ptr, bmlocal1876_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1877_my_ptr;\
	UINT bmlocal1878_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal1877_my_ptr, bmlocal1878_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1877_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1877_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1877_my_ptr, bmlocal1878_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1879_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET( base_ptr, bmlocal1879_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1879_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1880_my_ptr;\
	UINT bmlocal1881_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal1880_my_ptr, bmlocal1881_my_bitoff );\
	(*((UINT8*)bmlocal1880_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1881_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1882_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1882_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1882_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1885_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal1885_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1885_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "periodicRangingNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1888_acc_bytes;\
	UINT bmlocal1889_acc_bits;\
	PVOID bmlocal1890_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1890_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1890_parent_out_ptr;\
	bmlocal1888_acc_bytes = 8;\
	bmlocal1889_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1888_acc_bytes );\
	out_bitoff += bmlocal1889_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1891_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, out_ptr, bmlocal1891_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1891_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_POS_ALIGNED 36

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_soundingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1892_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, bmlocal1892_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1892_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1893_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1893_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1893_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_POS_ALIGNED 36

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1894_my_ptr;\
	UINT bmlocal1895_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal1894_my_ptr, bmlocal1895_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1894_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1894_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1894_my_ptr, bmlocal1895_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1896_my_ptr;\
	UINT bmlocal1897_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal1896_my_ptr, bmlocal1897_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1896_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1896_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1896_my_ptr, bmlocal1897_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1898_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET( base_ptr, bmlocal1898_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1898_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1899_my_ptr;\
	UINT bmlocal1900_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal1899_my_ptr, bmlocal1900_my_bitoff );\
	(*((UINT8*)bmlocal1899_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1900_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1901_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1901_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1901_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1904_acc_bytes;\
	UINT bmlocal1905_acc_bits;\
	PVOID bmlocal1906_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, bmlocal1906_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1906_parent_out_ptr;\
	bmlocal1904_acc_bytes = 1;\
	bmlocal1905_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1904_acc_bytes );\
	out_bitoff += bmlocal1905_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1907_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, out_ptr, bmlocal1907_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1907_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_POS_ALIGNED 37

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1908_my_ptr;\
	UINT bmlocal1909_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal1908_my_ptr, bmlocal1909_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1908_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1908_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1908_my_ptr, bmlocal1909_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1910_my_ptr;\
	UINT bmlocal1911_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal1910_my_ptr, bmlocal1911_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1910_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1910_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1910_my_ptr, bmlocal1911_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1912_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET( base_ptr, bmlocal1912_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1912_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1913_my_ptr;\
	UINT bmlocal1914_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal1913_my_ptr, bmlocal1914_my_bitoff );\
	(*((UINT8*)bmlocal1913_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1914_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1915_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1915_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1915_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1918_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_GET_SIZE( base_ptr, out_bytes, bmlocal1918_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1918_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "soundingNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1921_acc_bytes;\
	UINT bmlocal1922_acc_bits;\
	PVOID bmlocal1923_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal1923_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1923_parent_out_ptr;\
	bmlocal1921_acc_bytes = 10;\
	bmlocal1922_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1921_acc_bytes );\
	out_bitoff += bmlocal1922_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1924_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, out_ptr, bmlocal1924_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1924_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_POS_ALIGNED 38

// COMPOSITE: Full name: 'dmTpc_ulNoiseAndInterferenceLevel_mimoNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1925_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, bmlocal1925_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1925_parent_out_ptr;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1926_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, out_ptr, bmlocal1926_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1926_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_POS_ALIGNED 38

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1927_my_ptr;\
	UINT bmlocal1928_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal1927_my_ptr, bmlocal1928_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1927_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1927_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1927_my_ptr, bmlocal1928_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1929_my_ptr;\
	UINT bmlocal1930_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal1929_my_ptr, bmlocal1930_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1929_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1929_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1929_my_ptr, bmlocal1930_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1931_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET( base_ptr, bmlocal1931_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal1931_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1932_my_ptr;\
	UINT bmlocal1933_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal1932_my_ptr, bmlocal1933_my_bitoff );\
	(*((UINT8*)bmlocal1932_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1933_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1934_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal1934_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1934_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1937_acc_bytes;\
	UINT bmlocal1938_acc_bits;\
	PVOID bmlocal1939_parent_out_ptr;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, bmlocal1939_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal1939_parent_out_ptr;\
	bmlocal1937_acc_bytes = 1;\
	bmlocal1938_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1937_acc_bytes );\
	out_bitoff += bmlocal1938_acc_bits;\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1940_tmp_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, out_ptr, bmlocal1940_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1940_tmp_bitoff);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_POS_ALIGNED 39

// Alignment of dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1941_my_ptr;\
	UINT bmlocal1942_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal1941_my_ptr, bmlocal1942_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1941_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1941_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1941_my_ptr, bmlocal1942_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1943_my_ptr;\
	UINT bmlocal1944_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal1943_my_ptr, bmlocal1944_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1943_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1943_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1943_my_ptr, bmlocal1944_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1945_out_val;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET( base_ptr, bmlocal1945_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal1945_out_val), "%d", 1);\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1946_my_ptr;\
	UINT bmlocal1947_my_bitoff;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal1946_my_ptr, bmlocal1947_my_bitoff );\
	(*((UINT8*)bmlocal1946_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1947_my_bitoff );\
}

// dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1948_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal1948_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1948_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_BYTES_SIZE 1

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1951_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_GET_SIZE( base_ptr, out_bytes, bmlocal1951_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1951_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_BYTES_SIZE 2

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "mimoNI", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_ulNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1954_tmp_bits;\
	BM_dmTpc_ulNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, bmlocal1954_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1954_tmp_bits );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_BYTES_SIZE 12

#define BM_dmTpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ulNoiseAndInterferenceLevel", 1);\
	BM_dmTpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_ulNoiseAndInterferenceLevel_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpc_LackOfHeadroomCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1957_acc_bytes;\
	UINT bmlocal1958_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1957_acc_bytes = 40;\
	bmlocal1958_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1957_acc_bytes );\
	out_bitoff += bmlocal1958_acc_bits;\
}

#define BM_dmTpc_LackOfHeadroomCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1959_tmp_bitoff;\
	BM_dmTpc_LackOfHeadroomCounter_GET_POS( base_ptr, out_ptr, bmlocal1959_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1959_tmp_bitoff);\
}

#define BM_dmTpc_LackOfHeadroomCounter_POS_ALIGNED 40

// Alignment of dmTpc_LackOfHeadroomCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpc_LackOfHeadroomCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_LackOfHeadroomCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1960_my_ptr;\
	UINT bmlocal1961_my_bitoff;\
	BM_dmTpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal1960_my_ptr, bmlocal1961_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1960_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1960_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1960_my_ptr, bmlocal1961_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpc_LackOfHeadroomCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1962_my_ptr;\
	UINT bmlocal1963_my_bitoff;\
	BM_dmTpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal1962_my_ptr, bmlocal1963_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1962_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1962_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1962_my_ptr, bmlocal1963_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmTpc_LackOfHeadroomCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_LackOfHeadroomCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpc_LackOfHeadroomCounter: IS_RESET accessor is not defined because no reset value was specified.
// dmTpc_LackOfHeadroomCounter: SET_RESET accessor is not defined because no reset value was specified.
// dmTpc_LackOfHeadroomCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpc_LackOfHeadroomCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal1964_out_val;\
	BM_dmTpc_LackOfHeadroomCounter_GET( base_ptr, bmlocal1964_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "LackOfHeadroomCounter", 16, (UINT)(bmlocal1964_out_val), "%d", 1);\
}

#define BM_dmTpc_LackOfHeadroomCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpc_LackOfHeadroomCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1965_my_ptr;\
	UINT bmlocal1966_my_bitoff;\
	BM_dmTpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal1965_my_ptr, bmlocal1966_my_bitoff );\
	(*((UINT16*)bmlocal1965_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1966_my_bitoff );\
}

// dmTpc_LackOfHeadroomCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpc_LackOfHeadroomCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1967_tmp_bits;\
	BM_dmTpc_LackOfHeadroomCounter_GET_SIZE( base_ptr, out_bytes, bmlocal1967_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1967_tmp_bits );\
}

#define BM_dmTpc_LackOfHeadroomCounter_BYTES_SIZE 2

#define BM_dmTpc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 42;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1970_tmp_bits;\
	BM_dmTpc_GET_SIZE( base_ptr, out_bytes, bmlocal1970_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1970_tmp_bits );\
}

#define BM_dmTpc_BYTES_SIZE 42

#define BM_dmTpc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmTpc", 1);\
	BM_dmTpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_PathLoss_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_Headroom_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_powerControlMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_isTx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_offsetBSperSS_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_offsetSSperSS_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpc_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmTpcEvents[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _TPCModeChange : 8;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_dmTpcEvents; //L1 Tpc parameters for the DM that will be passed when TPC event occur

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT8 _TPCModeChange : 8;
} BMS_dmTpcEvents; //L1 Tpc parameters for the DM that will be passed when TPC event occur

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'dmTpcEvents' Type: 'dmTpcEvents', Top-level, Non-instance, No bitoff root
#define BM_dmTpcEvents_TPCModeChange_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmTpcEvents_TPCModeChange_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1971_tmp_bitoff;\
	BM_dmTpcEvents_TPCModeChange_GET_POS( base_ptr, out_ptr, bmlocal1971_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1971_tmp_bitoff);\
}

#define BM_dmTpcEvents_TPCModeChange_POS_ALIGNED 0

// Alignment of dmTpcEvents_TPCModeChange: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmTpcEvents_TPCModeChange_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpcEvents_TPCModeChange_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1972_my_ptr;\
	UINT bmlocal1973_my_bitoff;\
	BM_dmTpcEvents_TPCModeChange_GET_POS( base_ptr, bmlocal1972_my_ptr, bmlocal1973_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1972_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1972_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1972_my_ptr, bmlocal1973_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmTpcEvents_TPCModeChange_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1974_my_ptr;\
	UINT bmlocal1975_my_bitoff;\
	BM_dmTpcEvents_TPCModeChange_GET_POS( base_ptr, bmlocal1974_my_ptr, bmlocal1975_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1974_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1974_my_ptr, bmlocal1975_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmTpcEvents_TPCModeChange: IS_DEFAULT accessor is not defined because no default value was specified.
// dmTpcEvents_TPCModeChange: SET_DEFAULT accessor is not defined because no default value was specified.
// dmTpcEvents_TPCModeChange: IS_RESET accessor is not defined because no reset value was specified.
// dmTpcEvents_TPCModeChange: SET_RESET accessor is not defined because no reset value was specified.
// dmTpcEvents_TPCModeChange: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmTpcEvents_TPCModeChange: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmTpcEvents_TPCModeChange_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal1976_out_val;\
	BM_dmTpcEvents_TPCModeChange_GET( base_ptr, bmlocal1976_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TPCModeChange", 8, (UINT)(bmlocal1976_out_val), "%d", 1);\
}

#define BM_dmTpcEvents_TPCModeChange_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpcEvents_TPCModeChange_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmTpcEvents_TPCModeChange_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1977_my_ptr;\
	UINT bmlocal1978_my_bitoff;\
	BM_dmTpcEvents_TPCModeChange_GET_POS( base_ptr, bmlocal1977_my_ptr, bmlocal1978_my_bitoff );\
	(*((UINT8*)bmlocal1977_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1978_my_bitoff );\
}

// dmTpcEvents_TPCModeChange: Validation accessors are not defined because validation condition was not specified.
#define BM_dmTpcEvents_TPCModeChange_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1979_tmp_bits;\
	BM_dmTpcEvents_TPCModeChange_GET_SIZE( base_ptr, out_bytes, bmlocal1979_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1979_tmp_bits );\
}

#define BM_dmTpcEvents_TPCModeChange_BYTES_SIZE 1

#define BM_dmTpcEvents_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1982_acc_bytes;\
	UINT bmlocal1983_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1982_acc_bytes = 1;\
	bmlocal1983_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1982_acc_bytes );\
	out_bitoff += bmlocal1983_acc_bits;\
}

#define BM_dmTpcEvents_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1984_tmp_bitoff;\
	BM_dmTpcEvents_r2_GET_POS( base_ptr, out_ptr, bmlocal1984_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1984_tmp_bitoff);\
}

#define BM_dmTpcEvents_r2_POS_ALIGNED 1

#define BM_dmTpcEvents_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpcEvents_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpcEvents_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmTpcEvents_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpcEvents_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1987_tmp_bits;\
	BM_dmTpcEvents_GET_SIZE( base_ptr, out_bytes, bmlocal1987_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1987_tmp_bits );\
}

#define BM_dmTpcEvents_BYTES_SIZE 4

#define BM_dmTpcEvents_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmTpcEvents", 1);\
	BM_dmTpcEvents_TPCModeChange_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmTpcEvents_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmTpcEvents_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmTpcEvents_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmL1NBSPSCANResult[24];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _PHYLinkID;
	INT32 _NeighbourBSPreambleCINRMeanReuse1;
	INT32 _NeighbourBSPreambleCINRMeanReuse3;
	INT32 _NeighbourBSPreambleRSSIMean;
	INT32 _NeighbourBSTimeOffset;
	UINT8 _IntraInterFAFlag : 8;
	UINT8 _MeasurementsValidityFlag : 8;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_dmL1NBSPSCANResult;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT8 _MeasurementsValidityFlag : 8;
	UINT8 _IntraInterFAFlag : 8;
	INT32 _NeighbourBSTimeOffset;
	INT32 _NeighbourBSPreambleRSSIMean;
	INT32 _NeighbourBSPreambleCINRMeanReuse3;
	INT32 _NeighbourBSPreambleCINRMeanReuse1;
	UINT32 _PHYLinkID;
} BMS_dmL1NBSPSCANResult;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'dmL1NBSPSCANResult' Type: 'dmL1NBSPSCANResult', Top-level, Non-instance, No bitoff root
#define BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal1988_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, out_ptr, bmlocal1988_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal1988_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_POS_ALIGNED 0

// Alignment of dmL1NBSPSCANResult_PHYLinkID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_PHYLinkID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1989_my_ptr;\
	UINT bmlocal1990_my_bitoff;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, bmlocal1989_my_ptr, bmlocal1990_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1989_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1989_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal1989_my_ptr, bmlocal1990_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1991_my_ptr;\
	UINT bmlocal1992_my_bitoff;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, bmlocal1991_my_ptr, bmlocal1992_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1991_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal1991_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal1991_my_ptr, bmlocal1992_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_PHYLinkID: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_PHYLinkID: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_PHYLinkID: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_PHYLinkID: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_PHYLinkID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_PHYLinkID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal1993_out_val;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET( base_ptr, bmlocal1993_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PHYLinkID", 32, (UINT)(bmlocal1993_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal1994_my_ptr;\
	UINT bmlocal1995_my_bitoff;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, bmlocal1994_my_ptr, bmlocal1995_my_bitoff );\
	(*((UINT32*)bmlocal1994_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal1995_my_bitoff );\
}

// dmL1NBSPSCANResult_PHYLinkID: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_PHYLinkID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal1996_tmp_bits;\
	BM_dmL1NBSPSCANResult_PHYLinkID_GET_SIZE( base_ptr, out_bytes, bmlocal1996_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal1996_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_PHYLinkID_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal1999_acc_bytes;\
	UINT bmlocal2000_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal1999_acc_bytes = 4;\
	bmlocal2000_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal1999_acc_bytes );\
	out_bitoff += bmlocal2000_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2001_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, out_ptr, bmlocal2001_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2001_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_POS_ALIGNED 4

// Alignment of dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2002_my_ptr;\
	UINT bmlocal2003_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, bmlocal2002_my_ptr, bmlocal2003_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2002_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2002_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2002_my_ptr, bmlocal2003_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2004_my_ptr;\
	UINT bmlocal2005_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, bmlocal2004_my_ptr, bmlocal2005_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2004_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2004_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2004_my_ptr, bmlocal2005_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2006_out_val;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET( base_ptr, bmlocal2006_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleCINRMeanReuse1", 32, (UINT)(bmlocal2006_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2007_my_ptr;\
	UINT bmlocal2008_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, bmlocal2007_my_ptr, bmlocal2008_my_bitoff );\
	(*((UINT32*)bmlocal2007_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2008_my_bitoff );\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2009_tmp_bits;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_SIZE( base_ptr, out_bytes, bmlocal2009_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2009_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2012_acc_bytes;\
	UINT bmlocal2013_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2012_acc_bytes = 8;\
	bmlocal2013_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2012_acc_bytes );\
	out_bitoff += bmlocal2013_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2014_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, out_ptr, bmlocal2014_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2014_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_POS_ALIGNED 8

// Alignment of dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2015_my_ptr;\
	UINT bmlocal2016_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, bmlocal2015_my_ptr, bmlocal2016_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2015_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2015_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2015_my_ptr, bmlocal2016_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2017_my_ptr;\
	UINT bmlocal2018_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, bmlocal2017_my_ptr, bmlocal2018_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2017_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2017_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2017_my_ptr, bmlocal2018_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2019_out_val;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET( base_ptr, bmlocal2019_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleCINRMeanReuse3", 32, (UINT)(bmlocal2019_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2020_my_ptr;\
	UINT bmlocal2021_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, bmlocal2020_my_ptr, bmlocal2021_my_bitoff );\
	(*((UINT32*)bmlocal2020_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2021_my_bitoff );\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2022_tmp_bits;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_SIZE( base_ptr, out_bytes, bmlocal2022_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2022_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2025_acc_bytes;\
	UINT bmlocal2026_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2025_acc_bytes = 12;\
	bmlocal2026_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2025_acc_bytes );\
	out_bitoff += bmlocal2026_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2027_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, out_ptr, bmlocal2027_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2027_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_POS_ALIGNED 12

// Alignment of dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2028_my_ptr;\
	UINT bmlocal2029_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, bmlocal2028_my_ptr, bmlocal2029_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2028_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2028_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2028_my_ptr, bmlocal2029_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2030_my_ptr;\
	UINT bmlocal2031_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, bmlocal2030_my_ptr, bmlocal2031_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2030_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2030_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2030_my_ptr, bmlocal2031_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2032_out_val;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET( base_ptr, bmlocal2032_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleRSSIMean", 32, (UINT)(bmlocal2032_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2033_my_ptr;\
	UINT bmlocal2034_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, bmlocal2033_my_ptr, bmlocal2034_my_bitoff );\
	(*((UINT32*)bmlocal2033_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2034_my_bitoff );\
}

// dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2035_tmp_bits;\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_SIZE( base_ptr, out_bytes, bmlocal2035_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2035_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2038_acc_bytes;\
	UINT bmlocal2039_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2038_acc_bytes = 16;\
	bmlocal2039_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2038_acc_bytes );\
	out_bitoff += bmlocal2039_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2040_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, out_ptr, bmlocal2040_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2040_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_POS_ALIGNED 16

// Alignment of dmL1NBSPSCANResult_NeighbourBSTimeOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2041_my_ptr;\
	UINT bmlocal2042_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, bmlocal2041_my_ptr, bmlocal2042_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2041_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2041_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2041_my_ptr, bmlocal2042_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2043_my_ptr;\
	UINT bmlocal2044_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, bmlocal2043_my_ptr, bmlocal2044_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2043_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2043_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2043_my_ptr, bmlocal2044_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_NeighbourBSTimeOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSTimeOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_NeighbourBSTimeOffset: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSTimeOffset: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_NeighbourBSTimeOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_NeighbourBSTimeOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2045_out_val;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET( base_ptr, bmlocal2045_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSTimeOffset", 32, (UINT)(bmlocal2045_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2046_my_ptr;\
	UINT bmlocal2047_my_bitoff;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, bmlocal2046_my_ptr, bmlocal2047_my_bitoff );\
	(*((UINT32*)bmlocal2046_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2047_my_bitoff );\
}

// dmL1NBSPSCANResult_NeighbourBSTimeOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2048_tmp_bits;\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_GET_SIZE( base_ptr, out_bytes, bmlocal2048_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2048_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2051_acc_bytes;\
	UINT bmlocal2052_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2051_acc_bytes = 20;\
	bmlocal2052_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2051_acc_bytes );\
	out_bitoff += bmlocal2052_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2053_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, out_ptr, bmlocal2053_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2053_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_POS_ALIGNED 20

// Alignment of dmL1NBSPSCANResult_IntraInterFAFlag: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2054_my_ptr;\
	UINT bmlocal2055_my_bitoff;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, bmlocal2054_my_ptr, bmlocal2055_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2054_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2054_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2054_my_ptr, bmlocal2055_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2056_my_ptr;\
	UINT bmlocal2057_my_bitoff;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, bmlocal2056_my_ptr, bmlocal2057_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2056_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2056_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2056_my_ptr, bmlocal2057_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResult_IntraInterFAFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_IntraInterFAFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_IntraInterFAFlag: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_IntraInterFAFlag: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_IntraInterFAFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_IntraInterFAFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2058_out_val;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET( base_ptr, bmlocal2058_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "IntraInterFAFlag", 8, (UINT)(bmlocal2058_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2059_my_ptr;\
	UINT bmlocal2060_my_bitoff;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, bmlocal2059_my_ptr, bmlocal2060_my_bitoff );\
	(*((UINT8*)bmlocal2059_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2060_my_bitoff );\
}

// dmL1NBSPSCANResult_IntraInterFAFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2061_tmp_bits;\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_GET_SIZE( base_ptr, out_bytes, bmlocal2061_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2061_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_IntraInterFAFlag_BYTES_SIZE 1

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2064_acc_bytes;\
	UINT bmlocal2065_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2064_acc_bytes = 21;\
	bmlocal2065_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2064_acc_bytes );\
	out_bitoff += bmlocal2065_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2066_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, out_ptr, bmlocal2066_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2066_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_POS_ALIGNED 21

// Alignment of dmL1NBSPSCANResult_MeasurementsValidityFlag: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2067_my_ptr;\
	UINT bmlocal2068_my_bitoff;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, bmlocal2067_my_ptr, bmlocal2068_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2067_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2067_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2067_my_ptr, bmlocal2068_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2069_my_ptr;\
	UINT bmlocal2070_my_bitoff;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, bmlocal2069_my_ptr, bmlocal2070_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2069_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2069_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2069_my_ptr, bmlocal2070_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmL1NBSPSCANResult_MeasurementsValidityFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_MeasurementsValidityFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResult_MeasurementsValidityFlag: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_MeasurementsValidityFlag: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResult_MeasurementsValidityFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResult_MeasurementsValidityFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2071_out_val;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET( base_ptr, bmlocal2071_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MeasurementsValidityFlag", 8, (UINT)(bmlocal2071_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2072_my_ptr;\
	UINT bmlocal2073_my_bitoff;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, bmlocal2072_my_ptr, bmlocal2073_my_bitoff );\
	(*((UINT8*)bmlocal2072_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2073_my_bitoff );\
}

// dmL1NBSPSCANResult_MeasurementsValidityFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2074_tmp_bits;\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_GET_SIZE( base_ptr, out_bytes, bmlocal2074_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2074_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_BYTES_SIZE 1

#define BM_dmL1NBSPSCANResult_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2077_acc_bytes;\
	UINT bmlocal2078_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2077_acc_bytes = 22;\
	bmlocal2078_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2077_acc_bytes );\
	out_bitoff += bmlocal2078_acc_bits;\
}

#define BM_dmL1NBSPSCANResult_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2079_tmp_bitoff;\
	BM_dmL1NBSPSCANResult_r2_GET_POS( base_ptr, out_ptr, bmlocal2079_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2079_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResult_r2_POS_ALIGNED 22

#define BM_dmL1NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmL1NBSPSCANResult_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 24;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2082_tmp_bits;\
	BM_dmL1NBSPSCANResult_GET_SIZE( base_ptr, out_bytes, bmlocal2082_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2082_tmp_bits );\
}

#define BM_dmL1NBSPSCANResult_BYTES_SIZE 24

#define BM_dmL1NBSPSCANResult_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmL1NBSPSCANResult", 1);\
	BM_dmL1NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResult_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResult_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmL1NBSPSCANResults[4];

// COMPOSITE: Full name: 'dmL1NBSPSCANResults' Type: 'dmL1NBSPSCANResults', Top-level, Non-instance, No bitoff root
#define BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2083_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS( base_ptr, out_ptr, bmlocal2083_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2083_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_POS_ALIGNED 0

// Alignment of dmL1NBSPSCANResults_numOfReportedBs: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_numOfReportedBs_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2084_my_ptr;\
	UINT bmlocal2085_my_bitoff;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS( base_ptr, bmlocal2084_my_ptr, bmlocal2085_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2084_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2084_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2084_my_ptr, bmlocal2085_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2086_my_ptr;\
	UINT bmlocal2087_my_bitoff;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS( base_ptr, bmlocal2086_my_ptr, bmlocal2087_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2086_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2086_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2086_my_ptr, bmlocal2087_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_numOfReportedBs: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_numOfReportedBs: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_numOfReportedBs: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_numOfReportedBs: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_numOfReportedBs: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_numOfReportedBs: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_numOfReportedBs_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2088_out_val;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET( base_ptr, bmlocal2088_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfReportedBs", 8, (UINT)(bmlocal2088_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_numOfReportedBs_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2089_my_ptr;\
	UINT bmlocal2090_my_bitoff;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET_POS( base_ptr, bmlocal2089_my_ptr, bmlocal2090_my_bitoff );\
	(*((UINT8*)bmlocal2089_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2090_my_bitoff );\
}

// dmL1NBSPSCANResults_numOfReportedBs: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_numOfReportedBs_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2091_tmp_bits;\
	BM_dmL1NBSPSCANResults_numOfReportedBs_GET_SIZE( base_ptr, out_bytes, bmlocal2091_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2091_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_numOfReportedBs_BYTES_SIZE 1

#define BM_dmL1NBSPSCANResults_reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2094_acc_bytes;\
	UINT bmlocal2095_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2094_acc_bytes = 1;\
	bmlocal2095_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2094_acc_bytes );\
	out_bitoff += bmlocal2095_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2096_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_reserved_GET_POS( base_ptr, out_ptr, bmlocal2096_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2096_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResults_reserved_POS_ALIGNED 1

#define BM_dmL1NBSPSCANResults_reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2097_my_ptr;\
	UINT bmlocal2098_my_bitoff;\
	BM_dmL1NBSPSCANResults_reserved_GET_POS( base_ptr, bmlocal2097_my_ptr, bmlocal2098_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2097_my_ptr)-1) ), 8, 24, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2097_my_ptr)) ), 0, 24, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2097_my_ptr, bmlocal2098_my_bitoff, 24, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_dmL1NBSPSCANResults_reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2099_my_ptr;\
	UINT bmlocal2100_my_bitoff;\
	BM_dmL1NBSPSCANResults_reserved_GET_POS( base_ptr, bmlocal2099_my_ptr, bmlocal2100_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2099_my_ptr)-1 ), (in_val), 8, 0, 24, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2099_my_ptr) ), (in_val), 0, 0, 24, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2099_my_ptr, bmlocal2100_my_bitoff, 24, in_val, 0x00000001 );\
	}\
}

#define BM_dmL1NBSPSCANResults_reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 3;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal2101_out_bytes;\
	UINT bmlocal2102_out_bits;\
	BM_dmL1NBSPSCANResults_reserved_GET_SIZE( base_ptr, bmlocal2101_out_bytes, bmlocal2102_out_bits );\
	bmlocal2102_out_bits += bmlocal2101_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-reserved", 32, (UINT)(bmlocal2102_out_bits), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResults_reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2103_tmp_bits;\
	BM_dmL1NBSPSCANResults_reserved_GET_SIZE( base_ptr, out_bytes, bmlocal2103_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2103_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_reserved_BYTES_SIZE 3

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2106_acc_bytes;\
	UINT bmlocal2107_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2106_acc_bytes = 4;\
	bmlocal2107_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2106_acc_bytes );\
	out_bitoff += bmlocal2107_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2108_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_POS( base_ptr, out_ptr, bmlocal2108_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2108_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_POS_ALIGNED 4

// ARRAY: dmL1NBSPSCANResults_NBSPSCANResult
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT8 bmlocal2109_var0;\
		BM_dmL1NBSPSCANResults_numOfReportedBs_GET( base_ptr, bmlocal2109_var0 );\
		out_bytes = (UINT)(24*(1*bmlocal2109_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT8 bmlocal2110_var0;\
			BM_dmL1NBSPSCANResults_numOfReportedBs_GET( base_ptr, bmlocal2110_var0 );\
			out_element_count = (UINT)(bmlocal2110_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2111_out_ptr;\
	UINT bmlocal2112_out_bitoff;\
	UINT bmlocal2113_element_size_bytes;\
	UINT bmlocal2114_element_size_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_POS( base_ptr, bmlocal2111_out_ptr, bmlocal2112_out_bitoff );\
	bmlocal2113_element_size_bytes = 24;\
	bmlocal2114_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal2111_out_ptr) + (idx0) * bmlocal2113_element_size_bytes );\
	out_bitoff = bmlocal2112_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal2114_element_size_bits );\
}

// COMPOSITE: Full name: 'dmL1NBSPSCANResults_NBSPSCANResult' Type: 'dmL1NBSPSCANResult', Inner, Non-instance, No bitoff root
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2115_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2115_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2115_parent_out_ptr;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2116_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, idx0, out_ptr, bmlocal2116_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2116_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2117_my_ptr;\
	UINT bmlocal2118_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, idx0, bmlocal2117_my_ptr, bmlocal2118_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2117_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2117_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2117_my_ptr, bmlocal2118_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2119_my_ptr;\
	UINT bmlocal2120_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, idx0, bmlocal2119_my_ptr, bmlocal2120_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2119_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2119_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2119_my_ptr, bmlocal2120_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2121_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET( base_ptr, idx0, bmlocal2121_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PHYLinkID", 32, (UINT)(bmlocal2121_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2122_my_ptr;\
	UINT bmlocal2123_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_POS( base_ptr, idx0, bmlocal2122_my_ptr, bmlocal2123_my_bitoff );\
	(*((UINT32*)bmlocal2122_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2123_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2124_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2124_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2124_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2127_acc_bytes;\
	UINT bmlocal2128_acc_bits;\
	PVOID bmlocal2129_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2129_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2129_parent_out_ptr;\
	bmlocal2127_acc_bytes = 4;\
	bmlocal2128_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2127_acc_bytes );\
	out_bitoff += bmlocal2128_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2130_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, idx0, out_ptr, bmlocal2130_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2130_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2131_my_ptr;\
	UINT bmlocal2132_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, idx0, bmlocal2131_my_ptr, bmlocal2132_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2131_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2131_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2131_my_ptr, bmlocal2132_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2133_my_ptr;\
	UINT bmlocal2134_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, idx0, bmlocal2133_my_ptr, bmlocal2134_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2133_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2133_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2133_my_ptr, bmlocal2134_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2135_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET( base_ptr, idx0, bmlocal2135_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleCINRMeanReuse1", 32, (UINT)(bmlocal2135_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2136_my_ptr;\
	UINT bmlocal2137_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_POS( base_ptr, idx0, bmlocal2136_my_ptr, bmlocal2137_my_bitoff );\
	(*((UINT32*)bmlocal2136_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2137_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2138_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2138_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2138_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2141_acc_bytes;\
	UINT bmlocal2142_acc_bits;\
	PVOID bmlocal2143_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2143_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2143_parent_out_ptr;\
	bmlocal2141_acc_bytes = 8;\
	bmlocal2142_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2141_acc_bytes );\
	out_bitoff += bmlocal2142_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2144_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, idx0, out_ptr, bmlocal2144_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2144_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2145_my_ptr;\
	UINT bmlocal2146_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, idx0, bmlocal2145_my_ptr, bmlocal2146_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2145_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2145_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2145_my_ptr, bmlocal2146_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2147_my_ptr;\
	UINT bmlocal2148_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, idx0, bmlocal2147_my_ptr, bmlocal2148_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2147_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2147_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2147_my_ptr, bmlocal2148_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2149_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET( base_ptr, idx0, bmlocal2149_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleCINRMeanReuse3", 32, (UINT)(bmlocal2149_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2150_my_ptr;\
	UINT bmlocal2151_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_POS( base_ptr, idx0, bmlocal2150_my_ptr, bmlocal2151_my_bitoff );\
	(*((UINT32*)bmlocal2150_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2151_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2152_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2152_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2152_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2155_acc_bytes;\
	UINT bmlocal2156_acc_bits;\
	PVOID bmlocal2157_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2157_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2157_parent_out_ptr;\
	bmlocal2155_acc_bytes = 12;\
	bmlocal2156_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2155_acc_bytes );\
	out_bitoff += bmlocal2156_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2158_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, idx0, out_ptr, bmlocal2158_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2158_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2159_my_ptr;\
	UINT bmlocal2160_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, idx0, bmlocal2159_my_ptr, bmlocal2160_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2159_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2159_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2159_my_ptr, bmlocal2160_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2161_my_ptr;\
	UINT bmlocal2162_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, idx0, bmlocal2161_my_ptr, bmlocal2162_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2161_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2161_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2161_my_ptr, bmlocal2162_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2163_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET( base_ptr, idx0, bmlocal2163_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSPreambleRSSIMean", 32, (UINT)(bmlocal2163_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2164_my_ptr;\
	UINT bmlocal2165_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_POS( base_ptr, idx0, bmlocal2164_my_ptr, bmlocal2165_my_bitoff );\
	(*((UINT32*)bmlocal2164_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2165_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2166_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2166_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2166_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2169_acc_bytes;\
	UINT bmlocal2170_acc_bits;\
	PVOID bmlocal2171_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2171_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2171_parent_out_ptr;\
	bmlocal2169_acc_bytes = 16;\
	bmlocal2170_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2169_acc_bytes );\
	out_bitoff += bmlocal2170_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2172_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, idx0, out_ptr, bmlocal2172_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2172_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2173_my_ptr;\
	UINT bmlocal2174_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, idx0, bmlocal2173_my_ptr, bmlocal2174_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2173_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2173_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2173_my_ptr, bmlocal2174_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2175_my_ptr;\
	UINT bmlocal2176_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, idx0, bmlocal2175_my_ptr, bmlocal2176_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2175_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2175_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2175_my_ptr, bmlocal2176_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2177_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET( base_ptr, idx0, bmlocal2177_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NeighbourBSTimeOffset", 32, (UINT)(bmlocal2177_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2178_my_ptr;\
	UINT bmlocal2179_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_POS( base_ptr, idx0, bmlocal2178_my_ptr, bmlocal2179_my_bitoff );\
	(*((UINT32*)bmlocal2178_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2179_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2180_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2180_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2180_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_BYTES_SIZE 4

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2183_acc_bytes;\
	UINT bmlocal2184_acc_bits;\
	PVOID bmlocal2185_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2185_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2185_parent_out_ptr;\
	bmlocal2183_acc_bytes = 20;\
	bmlocal2184_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2183_acc_bytes );\
	out_bitoff += bmlocal2184_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2186_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, idx0, out_ptr, bmlocal2186_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2186_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2187_my_ptr;\
	UINT bmlocal2188_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, idx0, bmlocal2187_my_ptr, bmlocal2188_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2187_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2187_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2187_my_ptr, bmlocal2188_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2189_my_ptr;\
	UINT bmlocal2190_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, idx0, bmlocal2189_my_ptr, bmlocal2190_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2189_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2189_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2189_my_ptr, bmlocal2190_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2191_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET( base_ptr, idx0, bmlocal2191_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "IntraInterFAFlag", 8, (UINT)(bmlocal2191_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2192_my_ptr;\
	UINT bmlocal2193_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_POS( base_ptr, idx0, bmlocal2192_my_ptr, bmlocal2193_my_bitoff );\
	(*((UINT8*)bmlocal2192_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2193_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2194_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2194_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2194_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_BYTES_SIZE 1

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2197_acc_bytes;\
	UINT bmlocal2198_acc_bits;\
	PVOID bmlocal2199_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2199_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2199_parent_out_ptr;\
	bmlocal2197_acc_bytes = 21;\
	bmlocal2198_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2197_acc_bytes );\
	out_bitoff += bmlocal2198_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2200_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, idx0, out_ptr, bmlocal2200_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2200_tmp_bitoff);\
}

// Alignment of dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2201_my_ptr;\
	UINT bmlocal2202_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, idx0, bmlocal2201_my_ptr, bmlocal2202_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2201_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2201_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2201_my_ptr, bmlocal2202_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2203_my_ptr;\
	UINT bmlocal2204_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, idx0, bmlocal2203_my_ptr, bmlocal2204_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2203_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2203_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2203_my_ptr, bmlocal2204_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: IS_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: SET_DEFAULT accessor is not defined because no default value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: IS_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: SET_RESET accessor is not defined because no reset value was specified.
// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2205_out_val;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET( base_ptr, idx0, bmlocal2205_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MeasurementsValidityFlag", 8, (UINT)(bmlocal2205_out_val), "%d", 1);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2206_my_ptr;\
	UINT bmlocal2207_my_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_POS( base_ptr, idx0, bmlocal2206_my_ptr, bmlocal2207_my_bitoff );\
	(*((UINT8*)bmlocal2206_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2207_my_bitoff );\
}

// dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag: Validation accessors are not defined because validation condition was not specified.
#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2208_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal2208_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2208_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_BYTES_SIZE 1

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2211_acc_bytes;\
	UINT bmlocal2212_acc_bits;\
	PVOID bmlocal2213_parent_out_ptr;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_ELEMENT_POS( base_ptr, idx0, bmlocal2213_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2213_parent_out_ptr;\
	bmlocal2211_acc_bytes = 22;\
	bmlocal2212_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2211_acc_bytes );\
	out_bitoff += bmlocal2212_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2214_tmp_bitoff;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_GET_POS( base_ptr, idx0, out_ptr, bmlocal2214_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2214_tmp_bitoff);\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, idx0, 0 );\
}


#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 24;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2217_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal2217_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2217_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_BYTES_CELL_SIZE 24

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_PHYLinkID_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse1_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleCINRMeanReuse3_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSPreambleRSSIMean_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_NeighbourBSTimeOffset_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_IntraInterFAFlag_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_MeasurementsValidityFlag_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_r2_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal2218_dim_size0;\
	UINT bmlocal2219_idx0;\
	{\
		UINT8 bmlocal2220_var0;\
		BM_dmL1NBSPSCANResults_numOfReportedBs_GET( base_ptr, bmlocal2220_var0 );\
		bmlocal2218_dim_size0 = (UINT)(bmlocal2220_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "NBSPSCANResult", 1);\
	for( bmlocal2219_idx0=0; bmlocal2219_idx0<bmlocal2218_dim_size0; bmlocal2219_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal2219_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH_IDX( base_ptr, bmlocal2219_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2221_tmp_bits;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_SIZE( base_ptr, out_bytes, bmlocal2221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2221_tmp_bits );\
}


#define BM_dmL1NBSPSCANResults_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2222_tmp_bytes = 0;\
	UINT bmlocal2223_tmp_bits = 0;\
	UINT bmlocal2224_acc_bytes;\
	UINT bmlocal2225_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2224_acc_bytes = 4;\
	bmlocal2225_acc_bits = 0;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_SIZE( base_ptr, bmlocal2222_tmp_bytes, bmlocal2223_tmp_bits );\
	bmlocal2224_acc_bytes += bmlocal2222_tmp_bytes;\
	bmlocal2225_acc_bits += bmlocal2223_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2224_acc_bytes );\
	out_bitoff += bmlocal2225_acc_bits;\
}

#define BM_dmL1NBSPSCANResults_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmL1NBSPSCANResults_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal2226_tmp_bytes = 0;\
	UINT bmlocal2227_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_GET_SIZE( base_ptr, bmlocal2226_tmp_bytes, bmlocal2227_tmp_bits );\
	out_bytes += bmlocal2226_tmp_bytes;\
	out_bits += bmlocal2227_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_dmL1NBSPSCANResults_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2228_tmp_bits;\
	BM_dmL1NBSPSCANResults_GET_SIZE( base_ptr, out_bytes, bmlocal2228_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2228_tmp_bits );\
}

#define BM_dmL1NBSPSCANResults_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmL1NBSPSCANResults", 1);\
	BM_dmL1NBSPSCANResults_numOfReportedBs_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResults_reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResults_NBSPSCANResult_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmL1NBSPSCANResults_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmL1NBSPSCANResults_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmL1NBSPSCANResults_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmPhyConfiguration[16];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	INT32 _FrequencyOffsetInHz; //totFrqOfstHz in FreqCorrectionMonitor.bm
	UINT32 _CenterFrequencyInKHz; //center frequency at the SBS (L1DB_GetSbsFrequencyKhz)
	BMS_TransitionGapsComp _transitionGaps; //TTG and RTG values in PS units
	UINT8 _RecommendedMIMOMode : 8;
	UINT32 : 0; //Align the structure to 32 bits
} BMS_dmPhyConfiguration; //L1 PHY Configuration parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 : 0; //Align the structure to 32 bits
	UINT8 _RecommendedMIMOMode : 8;
	BMS_TransitionGapsComp _transitionGaps; //TTG and RTG values in PS units
	UINT32 _CenterFrequencyInKHz; //center frequency at the SBS (L1DB_GetSbsFrequencyKhz)
	INT32 _FrequencyOffsetInHz; //totFrqOfstHz in FreqCorrectionMonitor.bm
} BMS_dmPhyConfiguration; //L1 PHY Configuration parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'dmPhyConfiguration' Type: 'dmPhyConfiguration', Top-level, Non-instance, No bitoff root
#define BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2229_tmp_bitoff;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS( base_ptr, out_ptr, bmlocal2229_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2229_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_POS_ALIGNED 0

// Alignment of dmPhyConfiguration_FrequencyOffsetInHz: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2230_my_ptr;\
	UINT bmlocal2231_my_bitoff;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal2230_my_ptr, bmlocal2231_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2230_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2230_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2230_my_ptr, bmlocal2231_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2232_my_ptr;\
	UINT bmlocal2233_my_bitoff;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal2232_my_ptr, bmlocal2233_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2232_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2232_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2232_my_ptr, bmlocal2233_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyConfiguration_FrequencyOffsetInHz: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_FrequencyOffsetInHz: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_FrequencyOffsetInHz: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_FrequencyOffsetInHz: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_FrequencyOffsetInHz: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyConfiguration_FrequencyOffsetInHz: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyConfiguration_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2234_out_val;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET( base_ptr, bmlocal2234_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrequencyOffsetInHz", 32, (UINT)(bmlocal2234_out_val), "%d", 1);\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2235_my_ptr;\
	UINT bmlocal2236_my_bitoff;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal2235_my_ptr, bmlocal2236_my_bitoff );\
	(*((UINT32*)bmlocal2235_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2236_my_bitoff );\
}

// dmPhyConfiguration_FrequencyOffsetInHz: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2237_tmp_bits;\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_GET_SIZE( base_ptr, out_bytes, bmlocal2237_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2237_tmp_bits );\
}

#define BM_dmPhyConfiguration_FrequencyOffsetInHz_BYTES_SIZE 4

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2240_acc_bytes;\
	UINT bmlocal2241_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2240_acc_bytes = 4;\
	bmlocal2241_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2240_acc_bytes );\
	out_bitoff += bmlocal2241_acc_bits;\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2242_tmp_bitoff;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS( base_ptr, out_ptr, bmlocal2242_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2242_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_POS_ALIGNED 4

// Alignment of dmPhyConfiguration_CenterFrequencyInKHz: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2243_my_ptr;\
	UINT bmlocal2244_my_bitoff;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal2243_my_ptr, bmlocal2244_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2243_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2243_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2243_my_ptr, bmlocal2244_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2245_my_ptr;\
	UINT bmlocal2246_my_bitoff;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal2245_my_ptr, bmlocal2246_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2245_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2245_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2245_my_ptr, bmlocal2246_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyConfiguration_CenterFrequencyInKHz: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_CenterFrequencyInKHz: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_CenterFrequencyInKHz: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_CenterFrequencyInKHz: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_CenterFrequencyInKHz: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyConfiguration_CenterFrequencyInKHz: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyConfiguration_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2247_out_val;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET( base_ptr, bmlocal2247_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CenterFrequencyInKHz", 32, (UINT)(bmlocal2247_out_val), "%d", 1);\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2248_my_ptr;\
	UINT bmlocal2249_my_bitoff;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal2248_my_ptr, bmlocal2249_my_bitoff );\
	(*((UINT32*)bmlocal2248_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2249_my_bitoff );\
}

// dmPhyConfiguration_CenterFrequencyInKHz: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2250_tmp_bits;\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_GET_SIZE( base_ptr, out_bytes, bmlocal2250_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2250_tmp_bits );\
}

#define BM_dmPhyConfiguration_CenterFrequencyInKHz_BYTES_SIZE 4

#define BM_dmPhyConfiguration_transitionGaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2253_acc_bytes;\
	UINT bmlocal2254_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2253_acc_bytes = 8;\
	bmlocal2254_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2253_acc_bytes );\
	out_bitoff += bmlocal2254_acc_bits;\
}

#define BM_dmPhyConfiguration_transitionGaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2255_tmp_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_GET_POS( base_ptr, out_ptr, bmlocal2255_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2255_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_transitionGaps_POS_ALIGNED 8

// COMPOSITE: Full name: 'dmPhyConfiguration_transitionGaps' Type: 'TransitionGapsComp', Inner, Non-instance, No bitoff root
#define BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2256_parent_out_ptr;\
	BM_dmPhyConfiguration_transitionGaps_GET_POS( base_ptr, bmlocal2256_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2256_parent_out_ptr;\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2257_tmp_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS( base_ptr, out_ptr, bmlocal2257_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2257_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_POS_ALIGNED 8

// Alignment of dmPhyConfiguration_transitionGaps_TTG: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyConfiguration_transitionGaps_TTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2258_my_ptr;\
	UINT bmlocal2259_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS( base_ptr, bmlocal2258_my_ptr, bmlocal2259_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2258_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2258_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal2258_my_ptr, bmlocal2259_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2260_my_ptr;\
	UINT bmlocal2261_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS( base_ptr, bmlocal2260_my_ptr, bmlocal2261_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2260_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2260_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal2260_my_ptr, bmlocal2261_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmPhyConfiguration_transitionGaps_TTG: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_transitionGaps_TTG: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_transitionGaps_TTG: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_transitionGaps_TTG: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_transitionGaps_TTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyConfiguration_transitionGaps_TTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyConfiguration_transitionGaps_TTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal2262_out_val;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET( base_ptr, bmlocal2262_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TTG", 16, (UINT)(bmlocal2262_out_val), "%d", 1);\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_transitionGaps_TTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2263_my_ptr;\
	UINT bmlocal2264_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET_POS( base_ptr, bmlocal2263_my_ptr, bmlocal2264_my_bitoff );\
	(*((UINT16*)bmlocal2263_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2264_my_bitoff );\
}

// dmPhyConfiguration_transitionGaps_TTG: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyConfiguration_transitionGaps_TTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2265_tmp_bits;\
	BM_dmPhyConfiguration_transitionGaps_TTG_GET_SIZE( base_ptr, out_bytes, bmlocal2265_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2265_tmp_bits );\
}

#define BM_dmPhyConfiguration_transitionGaps_TTG_BYTES_SIZE 2

#define BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2268_acc_bytes;\
	UINT bmlocal2269_acc_bits;\
	PVOID bmlocal2270_parent_out_ptr;\
	BM_dmPhyConfiguration_transitionGaps_GET_POS( base_ptr, bmlocal2270_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2270_parent_out_ptr;\
	bmlocal2268_acc_bytes = 2;\
	bmlocal2269_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2268_acc_bytes );\
	out_bitoff += bmlocal2269_acc_bits;\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2271_tmp_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS( base_ptr, out_ptr, bmlocal2271_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2271_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_POS_ALIGNED 10

// Alignment of dmPhyConfiguration_transitionGaps_RTG: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyConfiguration_transitionGaps_RTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2272_my_ptr;\
	UINT bmlocal2273_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS( base_ptr, bmlocal2272_my_ptr, bmlocal2273_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2272_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2272_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal2272_my_ptr, bmlocal2273_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2274_my_ptr;\
	UINT bmlocal2275_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS( base_ptr, bmlocal2274_my_ptr, bmlocal2275_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2274_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal2274_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal2274_my_ptr, bmlocal2275_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// dmPhyConfiguration_transitionGaps_RTG: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_transitionGaps_RTG: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_transitionGaps_RTG: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_transitionGaps_RTG: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_transitionGaps_RTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyConfiguration_transitionGaps_RTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyConfiguration_transitionGaps_RTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal2276_out_val;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET( base_ptr, bmlocal2276_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RTG", 16, (UINT)(bmlocal2276_out_val), "%d", 1);\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_transitionGaps_RTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2277_my_ptr;\
	UINT bmlocal2278_my_bitoff;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET_POS( base_ptr, bmlocal2277_my_ptr, bmlocal2278_my_bitoff );\
	(*((UINT16*)bmlocal2277_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2278_my_bitoff );\
}

// dmPhyConfiguration_transitionGaps_RTG: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyConfiguration_transitionGaps_RTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2279_tmp_bits;\
	BM_dmPhyConfiguration_transitionGaps_RTG_GET_SIZE( base_ptr, out_bytes, bmlocal2279_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2279_tmp_bits );\
}

#define BM_dmPhyConfiguration_transitionGaps_RTG_BYTES_SIZE 2

#define BM_dmPhyConfiguration_transitionGaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_transitionGaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2282_tmp_bits;\
	BM_dmPhyConfiguration_transitionGaps_GET_SIZE( base_ptr, out_bytes, bmlocal2282_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2282_tmp_bits );\
}

#define BM_dmPhyConfiguration_transitionGaps_BYTES_SIZE 4

#define BM_dmPhyConfiguration_transitionGaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "transitionGaps", 1);\
	BM_dmPhyConfiguration_transitionGaps_TTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyConfiguration_transitionGaps_RTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_transitionGaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_transitionGaps_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2285_acc_bytes;\
	UINT bmlocal2286_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2285_acc_bytes = 12;\
	bmlocal2286_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2285_acc_bytes );\
	out_bitoff += bmlocal2286_acc_bits;\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2287_tmp_bitoff;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS( base_ptr, out_ptr, bmlocal2287_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2287_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_POS_ALIGNED 12

// Alignment of dmPhyConfiguration_RecommendedMIMOMode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyConfiguration_RecommendedMIMOMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2288_my_ptr;\
	UINT bmlocal2289_my_bitoff;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal2288_my_ptr, bmlocal2289_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2288_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2288_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2288_my_ptr, bmlocal2289_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2290_my_ptr;\
	UINT bmlocal2291_my_bitoff;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal2290_my_ptr, bmlocal2291_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2290_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2290_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2290_my_ptr, bmlocal2291_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmPhyConfiguration_RecommendedMIMOMode: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_RecommendedMIMOMode: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyConfiguration_RecommendedMIMOMode: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_RecommendedMIMOMode: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyConfiguration_RecommendedMIMOMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyConfiguration_RecommendedMIMOMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyConfiguration_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal2292_out_val;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET( base_ptr, bmlocal2292_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RecommendedMIMOMode", 8, (UINT)(bmlocal2292_out_val), "%d", 1);\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2293_my_ptr;\
	UINT bmlocal2294_my_bitoff;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal2293_my_ptr, bmlocal2294_my_bitoff );\
	(*((UINT8*)bmlocal2293_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2294_my_bitoff );\
}

// dmPhyConfiguration_RecommendedMIMOMode: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyConfiguration_RecommendedMIMOMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2295_tmp_bits;\
	BM_dmPhyConfiguration_RecommendedMIMOMode_GET_SIZE( base_ptr, out_bytes, bmlocal2295_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2295_tmp_bits );\
}

#define BM_dmPhyConfiguration_RecommendedMIMOMode_BYTES_SIZE 1

#define BM_dmPhyConfiguration_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2298_acc_bytes;\
	UINT bmlocal2299_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2298_acc_bytes = 13;\
	bmlocal2299_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2298_acc_bytes );\
	out_bitoff += bmlocal2299_acc_bits;\
}

#define BM_dmPhyConfiguration_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2300_tmp_bitoff;\
	BM_dmPhyConfiguration_r2_GET_POS( base_ptr, out_ptr, bmlocal2300_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2300_tmp_bitoff);\
}

#define BM_dmPhyConfiguration_r2_POS_ALIGNED 13

#define BM_dmPhyConfiguration_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmPhyConfiguration_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2303_tmp_bits;\
	BM_dmPhyConfiguration_GET_SIZE( base_ptr, out_bytes, bmlocal2303_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2303_tmp_bits );\
}

#define BM_dmPhyConfiguration_BYTES_SIZE 16

#define BM_dmPhyConfiguration_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmPhyConfiguration", 1);\
	BM_dmPhyConfiguration_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyConfiguration_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyConfiguration_transitionGaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyConfiguration_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyConfiguration_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyConfiguration_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyConfiguration_DUMP_DEPTH( base_ptr, 0 );\
}


typedef enum
{
	eBOTH_RX_ANT_MODE = 0,
	eRX_ANT0_MODE = 1,
	eRX_ANT1_MODE = 2,
	eBOTH_RX_ANT_DISABLED = 3
} eRF_RX_ANT_MODE;

typedef enum
{
	eRX_ANT_ALWAYS_ON_MODE = 1,
	eRX_ANT_TOGGLE_MODE = 2
} eRF_RX_ANT_ACTIVATION_MODE;

typedef UINT8 MapsStatistics[40];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _FchRecievedOK; //Total number of FCH bursts that passed validation criteria in the PHY
	UINT32 _FchFailures; //Total number of FCH bursts that failed validation criteria in the PHY
	UINT32 _NormalDlMapRecievedOK; //Total number of DL maps recived correctly
	UINT32 _NormalDlMapHcsError; //Total number of erroneous DL maps , due to HCS error
	UINT32 _NormalDlMapCrcError; //Total number of erroneous DL maps, due to CRC32 error
	UINT32 _NormalUlMapRecievedOK; //Total number of DL maps recived correctly
	UINT32 _NormalUlMapHcsError; //Total number of erroneous UL maps , due to HCS error
	UINT32 _NormalUlMapCrcError; //Total number of erroneous DL maps, due to CRC32 error
	UINT32 _CompressedMapRecievedOK; //Total number of Compressed maps recived correctly
	UINT32 _CompressedMapCrcError; //Total number of erroneous compressed maps, due to CRC32 error
} BMS_MapsStatistics; //L1 PHY Configuration parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _CompressedMapCrcError; //Total number of erroneous compressed maps, due to CRC32 error
	UINT32 _CompressedMapRecievedOK; //Total number of Compressed maps recived correctly
	UINT32 _NormalUlMapCrcError; //Total number of erroneous DL maps, due to CRC32 error
	UINT32 _NormalUlMapHcsError; //Total number of erroneous UL maps , due to HCS error
	UINT32 _NormalUlMapRecievedOK; //Total number of DL maps recived correctly
	UINT32 _NormalDlMapCrcError; //Total number of erroneous DL maps, due to CRC32 error
	UINT32 _NormalDlMapHcsError; //Total number of erroneous DL maps , due to HCS error
	UINT32 _NormalDlMapRecievedOK; //Total number of DL maps recived correctly
	UINT32 _FchFailures; //Total number of FCH bursts that failed validation criteria in the PHY
	UINT32 _FchRecievedOK; //Total number of FCH bursts that passed validation criteria in the PHY
} BMS_MapsStatistics; //L1 PHY Configuration parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'MapsStatistics' Type: 'MapsStatistics', Top-level, Non-instance, No bitoff root
#define BM_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_MapsStatistics_FchRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2304_tmp_bitoff;\
	BM_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2304_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2304_tmp_bitoff);\
}

#define BM_MapsStatistics_FchRecievedOK_POS_ALIGNED 0

// Alignment of MapsStatistics_FchRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_FchRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2305_my_ptr;\
	UINT bmlocal2306_my_bitoff;\
	BM_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2305_my_ptr, bmlocal2306_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2305_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2305_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2305_my_ptr, bmlocal2306_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_FchRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2307_my_ptr;\
	UINT bmlocal2308_my_bitoff;\
	BM_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2307_my_ptr, bmlocal2308_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2307_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2307_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2307_my_ptr, bmlocal2308_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_FchRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_FchRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_FchRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_FchRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_FchRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_FchRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2309_out_val;\
	BM_MapsStatistics_FchRecievedOK_GET( base_ptr, bmlocal2309_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchRecievedOK", 32, (UINT)(bmlocal2309_out_val), "%d", 1);\
}

#define BM_MapsStatistics_FchRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_FchRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2310_my_ptr;\
	UINT bmlocal2311_my_bitoff;\
	BM_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2310_my_ptr, bmlocal2311_my_bitoff );\
	(*((UINT32*)bmlocal2310_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2311_my_bitoff );\
}

// MapsStatistics_FchRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_FchRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2312_tmp_bits;\
	BM_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2312_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2312_tmp_bits );\
}

#define BM_MapsStatistics_FchRecievedOK_BYTES_SIZE 4

#define BM_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2315_acc_bytes;\
	UINT bmlocal2316_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2315_acc_bytes = 4;\
	bmlocal2316_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2315_acc_bytes );\
	out_bitoff += bmlocal2316_acc_bits;\
}

#define BM_MapsStatistics_FchFailures_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2317_tmp_bitoff;\
	BM_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, bmlocal2317_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2317_tmp_bitoff);\
}

#define BM_MapsStatistics_FchFailures_POS_ALIGNED 4

// Alignment of MapsStatistics_FchFailures: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_FchFailures_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2318_my_ptr;\
	UINT bmlocal2319_my_bitoff;\
	BM_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2318_my_ptr, bmlocal2319_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2318_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2318_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2318_my_ptr, bmlocal2319_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_FchFailures_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2320_my_ptr;\
	UINT bmlocal2321_my_bitoff;\
	BM_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2320_my_ptr, bmlocal2321_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2320_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2320_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2320_my_ptr, bmlocal2321_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_FchFailures: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_FchFailures: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_FchFailures: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_FchFailures: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_FchFailures: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_FchFailures: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2322_out_val;\
	BM_MapsStatistics_FchFailures_GET( base_ptr, bmlocal2322_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchFailures", 32, (UINT)(bmlocal2322_out_val), "%d", 1);\
}

#define BM_MapsStatistics_FchFailures_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_FchFailures_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2323_my_ptr;\
	UINT bmlocal2324_my_bitoff;\
	BM_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2323_my_ptr, bmlocal2324_my_bitoff );\
	(*((UINT32*)bmlocal2323_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2324_my_bitoff );\
}

// MapsStatistics_FchFailures: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_FchFailures_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2325_tmp_bits;\
	BM_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, bmlocal2325_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2325_tmp_bits );\
}

#define BM_MapsStatistics_FchFailures_BYTES_SIZE 4

#define BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2328_acc_bytes;\
	UINT bmlocal2329_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2328_acc_bytes = 8;\
	bmlocal2329_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2328_acc_bytes );\
	out_bitoff += bmlocal2329_acc_bits;\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2330_tmp_bitoff;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2330_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2330_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_POS_ALIGNED 8

// Alignment of MapsStatistics_NormalDlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2331_my_ptr;\
	UINT bmlocal2332_my_bitoff;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2331_my_ptr, bmlocal2332_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2331_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2331_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2331_my_ptr, bmlocal2332_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2333_my_ptr;\
	UINT bmlocal2334_my_bitoff;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2333_my_ptr, bmlocal2334_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2333_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2333_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2333_my_ptr, bmlocal2334_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalDlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalDlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2335_out_val;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, bmlocal2335_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapRecievedOK", 32, (UINT)(bmlocal2335_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2336_my_ptr;\
	UINT bmlocal2337_my_bitoff;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2336_my_ptr, bmlocal2337_my_bitoff );\
	(*((UINT32*)bmlocal2336_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2337_my_bitoff );\
}

// MapsStatistics_NormalDlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalDlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2338_tmp_bits;\
	BM_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2338_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2338_tmp_bits );\
}

#define BM_MapsStatistics_NormalDlMapRecievedOK_BYTES_SIZE 4

#define BM_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2341_acc_bytes;\
	UINT bmlocal2342_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2341_acc_bytes = 12;\
	bmlocal2342_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2341_acc_bytes );\
	out_bitoff += bmlocal2342_acc_bits;\
}

#define BM_MapsStatistics_NormalDlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2343_tmp_bitoff;\
	BM_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal2343_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2343_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalDlMapHcsError_POS_ALIGNED 12

// Alignment of MapsStatistics_NormalDlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2344_my_ptr;\
	UINT bmlocal2345_my_bitoff;\
	BM_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2344_my_ptr, bmlocal2345_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2344_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2344_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2344_my_ptr, bmlocal2345_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalDlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2346_my_ptr;\
	UINT bmlocal2347_my_bitoff;\
	BM_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2346_my_ptr, bmlocal2347_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2346_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2346_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2346_my_ptr, bmlocal2347_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalDlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalDlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2348_out_val;\
	BM_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, bmlocal2348_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapHcsError", 32, (UINT)(bmlocal2348_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalDlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalDlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2349_my_ptr;\
	UINT bmlocal2350_my_bitoff;\
	BM_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2349_my_ptr, bmlocal2350_my_bitoff );\
	(*((UINT32*)bmlocal2349_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2350_my_bitoff );\
}

// MapsStatistics_NormalDlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalDlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2351_tmp_bits;\
	BM_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal2351_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2351_tmp_bits );\
}

#define BM_MapsStatistics_NormalDlMapHcsError_BYTES_SIZE 4

#define BM_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2354_acc_bytes;\
	UINT bmlocal2355_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2354_acc_bytes = 16;\
	bmlocal2355_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2354_acc_bytes );\
	out_bitoff += bmlocal2355_acc_bits;\
}

#define BM_MapsStatistics_NormalDlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2356_tmp_bitoff;\
	BM_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2356_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2356_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalDlMapCrcError_POS_ALIGNED 16

// Alignment of MapsStatistics_NormalDlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2357_my_ptr;\
	UINT bmlocal2358_my_bitoff;\
	BM_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2357_my_ptr, bmlocal2358_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2357_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2357_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2357_my_ptr, bmlocal2358_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalDlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2359_my_ptr;\
	UINT bmlocal2360_my_bitoff;\
	BM_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2359_my_ptr, bmlocal2360_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2359_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2359_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2359_my_ptr, bmlocal2360_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalDlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalDlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalDlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalDlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2361_out_val;\
	BM_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, bmlocal2361_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapCrcError", 32, (UINT)(bmlocal2361_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalDlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalDlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2362_my_ptr;\
	UINT bmlocal2363_my_bitoff;\
	BM_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2362_my_ptr, bmlocal2363_my_bitoff );\
	(*((UINT32*)bmlocal2362_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2363_my_bitoff );\
}

// MapsStatistics_NormalDlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalDlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2364_tmp_bits;\
	BM_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2364_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2364_tmp_bits );\
}

#define BM_MapsStatistics_NormalDlMapCrcError_BYTES_SIZE 4

#define BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2367_acc_bytes;\
	UINT bmlocal2368_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2367_acc_bytes = 20;\
	bmlocal2368_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2367_acc_bytes );\
	out_bitoff += bmlocal2368_acc_bits;\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2369_tmp_bitoff;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2369_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2369_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_POS_ALIGNED 20

// Alignment of MapsStatistics_NormalUlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2370_my_ptr;\
	UINT bmlocal2371_my_bitoff;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2370_my_ptr, bmlocal2371_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2370_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2370_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2370_my_ptr, bmlocal2371_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2372_my_ptr;\
	UINT bmlocal2373_my_bitoff;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2372_my_ptr, bmlocal2373_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2372_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2372_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2372_my_ptr, bmlocal2373_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalUlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalUlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2374_out_val;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, bmlocal2374_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapRecievedOK", 32, (UINT)(bmlocal2374_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2375_my_ptr;\
	UINT bmlocal2376_my_bitoff;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2375_my_ptr, bmlocal2376_my_bitoff );\
	(*((UINT32*)bmlocal2375_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2376_my_bitoff );\
}

// MapsStatistics_NormalUlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalUlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2377_tmp_bits;\
	BM_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2377_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2377_tmp_bits );\
}

#define BM_MapsStatistics_NormalUlMapRecievedOK_BYTES_SIZE 4

#define BM_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2380_acc_bytes;\
	UINT bmlocal2381_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2380_acc_bytes = 24;\
	bmlocal2381_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2380_acc_bytes );\
	out_bitoff += bmlocal2381_acc_bits;\
}

#define BM_MapsStatistics_NormalUlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2382_tmp_bitoff;\
	BM_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal2382_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2382_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalUlMapHcsError_POS_ALIGNED 24

// Alignment of MapsStatistics_NormalUlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2383_my_ptr;\
	UINT bmlocal2384_my_bitoff;\
	BM_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2383_my_ptr, bmlocal2384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2383_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2383_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2383_my_ptr, bmlocal2384_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalUlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2385_my_ptr;\
	UINT bmlocal2386_my_bitoff;\
	BM_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2385_my_ptr, bmlocal2386_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2385_my_ptr, bmlocal2386_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalUlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalUlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2387_out_val;\
	BM_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, bmlocal2387_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapHcsError", 32, (UINT)(bmlocal2387_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalUlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalUlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2388_my_ptr;\
	UINT bmlocal2389_my_bitoff;\
	BM_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2388_my_ptr, bmlocal2389_my_bitoff );\
	(*((UINT32*)bmlocal2388_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2389_my_bitoff );\
}

// MapsStatistics_NormalUlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalUlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2390_tmp_bits;\
	BM_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal2390_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2390_tmp_bits );\
}

#define BM_MapsStatistics_NormalUlMapHcsError_BYTES_SIZE 4

#define BM_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2393_acc_bytes;\
	UINT bmlocal2394_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2393_acc_bytes = 28;\
	bmlocal2394_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2393_acc_bytes );\
	out_bitoff += bmlocal2394_acc_bits;\
}

#define BM_MapsStatistics_NormalUlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2395_tmp_bitoff;\
	BM_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2395_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2395_tmp_bitoff);\
}

#define BM_MapsStatistics_NormalUlMapCrcError_POS_ALIGNED 28

// Alignment of MapsStatistics_NormalUlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2396_my_ptr;\
	UINT bmlocal2397_my_bitoff;\
	BM_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2396_my_ptr, bmlocal2397_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2396_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2396_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2396_my_ptr, bmlocal2397_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_NormalUlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2398_my_ptr;\
	UINT bmlocal2399_my_bitoff;\
	BM_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2398_my_ptr, bmlocal2399_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2398_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2398_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2398_my_ptr, bmlocal2399_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_NormalUlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_NormalUlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_NormalUlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_NormalUlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2400_out_val;\
	BM_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, bmlocal2400_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapCrcError", 32, (UINT)(bmlocal2400_out_val), "%d", 1);\
}

#define BM_MapsStatistics_NormalUlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_NormalUlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2401_my_ptr;\
	UINT bmlocal2402_my_bitoff;\
	BM_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2401_my_ptr, bmlocal2402_my_bitoff );\
	(*((UINT32*)bmlocal2401_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2402_my_bitoff );\
}

// MapsStatistics_NormalUlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_NormalUlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2403_tmp_bits;\
	BM_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2403_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2403_tmp_bits );\
}

#define BM_MapsStatistics_NormalUlMapCrcError_BYTES_SIZE 4

#define BM_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2406_acc_bytes;\
	UINT bmlocal2407_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2406_acc_bytes = 32;\
	bmlocal2407_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2406_acc_bytes );\
	out_bitoff += bmlocal2407_acc_bits;\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2408_tmp_bitoff;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2408_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2408_tmp_bitoff);\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_POS_ALIGNED 32

// Alignment of MapsStatistics_CompressedMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2409_my_ptr;\
	UINT bmlocal2410_my_bitoff;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2409_my_ptr, bmlocal2410_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2409_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2409_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2409_my_ptr, bmlocal2410_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2411_my_ptr;\
	UINT bmlocal2412_my_bitoff;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2411_my_ptr, bmlocal2412_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2411_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2411_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2411_my_ptr, bmlocal2412_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_CompressedMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_CompressedMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_CompressedMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_CompressedMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_CompressedMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_CompressedMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2413_out_val;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, bmlocal2413_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapRecievedOK", 32, (UINT)(bmlocal2413_out_val), "%d", 1);\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2414_my_ptr;\
	UINT bmlocal2415_my_bitoff;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2414_my_ptr, bmlocal2415_my_bitoff );\
	(*((UINT32*)bmlocal2414_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2415_my_bitoff );\
}

// MapsStatistics_CompressedMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_CompressedMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2416_tmp_bits;\
	BM_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2416_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2416_tmp_bits );\
}

#define BM_MapsStatistics_CompressedMapRecievedOK_BYTES_SIZE 4

#define BM_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2419_acc_bytes;\
	UINT bmlocal2420_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2419_acc_bytes = 36;\
	bmlocal2420_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2419_acc_bytes );\
	out_bitoff += bmlocal2420_acc_bits;\
}

#define BM_MapsStatistics_CompressedMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2421_tmp_bitoff;\
	BM_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2421_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2421_tmp_bitoff);\
}

#define BM_MapsStatistics_CompressedMapCrcError_POS_ALIGNED 36

// Alignment of MapsStatistics_CompressedMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_CompressedMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2422_my_ptr;\
	UINT bmlocal2423_my_bitoff;\
	BM_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2422_my_ptr, bmlocal2423_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2422_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2422_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2422_my_ptr, bmlocal2423_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_MapsStatistics_CompressedMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2424_my_ptr;\
	UINT bmlocal2425_my_bitoff;\
	BM_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2424_my_ptr, bmlocal2425_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2424_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2424_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2424_my_ptr, bmlocal2425_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// MapsStatistics_CompressedMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_CompressedMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// MapsStatistics_CompressedMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_CompressedMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// MapsStatistics_CompressedMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// MapsStatistics_CompressedMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2426_out_val;\
	BM_MapsStatistics_CompressedMapCrcError_GET( base_ptr, bmlocal2426_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapCrcError", 32, (UINT)(bmlocal2426_out_val), "%d", 1);\
}

#define BM_MapsStatistics_CompressedMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_MapsStatistics_CompressedMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2427_my_ptr;\
	UINT bmlocal2428_my_bitoff;\
	BM_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2427_my_ptr, bmlocal2428_my_bitoff );\
	(*((UINT32*)bmlocal2427_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2428_my_bitoff );\
}

// MapsStatistics_CompressedMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_MapsStatistics_CompressedMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2429_tmp_bits;\
	BM_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2429_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2429_tmp_bits );\
}

#define BM_MapsStatistics_CompressedMapCrcError_BYTES_SIZE 4

#define BM_MapsStatistics_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 40;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2432_tmp_bits;\
	BM_MapsStatistics_GET_SIZE( base_ptr, out_bytes, bmlocal2432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2432_tmp_bits );\
}

#define BM_MapsStatistics_BYTES_SIZE 40

#define BM_MapsStatistics_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MapsStatistics", 1);\
	BM_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_MapsStatistics_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_MapsStatistics_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 L1Measurements[52];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	INT32 _PreamblePCinr; //Mean CINR calculated (out of the SBS signal) in [1 dB]
	INT32 _PreamblePCinrAnt0; //Immediate CINR Ant0 calculated (out of the SBS signal) in [1 dB]
	INT32 _PreamblePCinrAnt1; //Immediate CINR Ant1 calculated (out of the SBS signal) in [1 dB]
	INT32 _PreamblePCinrStd;
	INT32 _Rssi; //Mean RSSI calcualted (out of the SBS signal) in [1 dBm]
	INT32 _RssiStd;
	INT32 _MimoStbcPCinr; //Mean PCINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoStbcPCinrStd; //STD PCINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoSmPCinr; //Mean PCINR Matrix B calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoSmPCinrStd; //STD PCINR Matrix B calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoStbcECinr; //Mean ECINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoSmECinr; //Mean ECINR Matrix B calculated (out of the SBS signal) in [1 dB]
	eRF_RX_ANT_MODE _RxAntModeAutoDetect : 8; //Both antenas enabled=0,Ant0=1,Ant1=2,Both antenas disabled=3 AutoDetect
	UINT32 _Reserved8 : 8; //Reserved to get to short alignment
	UINT32 _Reserved16 : 16; //Reserved to get to dword alignment
} BMS_L1Measurements; //L1 Measurements parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _Reserved16 : 16; //Reserved to get to dword alignment
	UINT32 _Reserved8 : 8; //Reserved to get to short alignment
	eRF_RX_ANT_MODE _RxAntModeAutoDetect : 8; //Both antenas enabled=0,Ant0=1,Ant1=2,Both antenas disabled=3 AutoDetect
	INT32 _MimoSmECinr; //Mean ECINR Matrix B calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoStbcECinr; //Mean ECINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoSmPCinrStd; //STD PCINR Matrix B calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoSmPCinr; //Mean PCINR Matrix B calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoStbcPCinrStd; //STD PCINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _MimoStbcPCinr; //Mean PCINR Matrix A calculated (out of the SBS signal) in [1 dB]
	INT32 _RssiStd;
	INT32 _Rssi; //Mean RSSI calcualted (out of the SBS signal) in [1 dBm]
	INT32 _PreamblePCinrStd;
	INT32 _PreamblePCinrAnt1; //Immediate CINR Ant1 calculated (out of the SBS signal) in [1 dB]
	INT32 _PreamblePCinrAnt0; //Immediate CINR Ant0 calculated (out of the SBS signal) in [1 dB]
	INT32 _PreamblePCinr; //Mean CINR calculated (out of the SBS signal) in [1 dB]
} BMS_L1Measurements; //L1 Measurements parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L1Measurements' Type: 'L1Measurements', Top-level, Non-instance, No bitoff root
#define BM_L1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L1Measurements_PreamblePCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2433_tmp_bitoff;\
	BM_L1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, bmlocal2433_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2433_tmp_bitoff);\
}

#define BM_L1Measurements_PreamblePCinr_POS_ALIGNED 0

// Alignment of L1Measurements_PreamblePCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_PreamblePCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2434_my_ptr;\
	UINT bmlocal2435_my_bitoff;\
	BM_L1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2434_my_ptr, bmlocal2435_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2434_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2434_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2434_my_ptr, bmlocal2435_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_PreamblePCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2436_my_ptr;\
	UINT bmlocal2437_my_bitoff;\
	BM_L1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2436_my_ptr, bmlocal2437_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2436_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2436_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2436_my_ptr, bmlocal2437_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_PreamblePCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_PreamblePCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2438_out_val;\
	BM_L1Measurements_PreamblePCinr_GET( base_ptr, bmlocal2438_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinr", 32, (UINT)(bmlocal2438_out_val), "%d", 1);\
}

#define BM_L1Measurements_PreamblePCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_PreamblePCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2439_my_ptr;\
	UINT bmlocal2440_my_bitoff;\
	BM_L1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2439_my_ptr, bmlocal2440_my_bitoff );\
	(*((UINT32*)bmlocal2439_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2440_my_bitoff );\
}

// L1Measurements_PreamblePCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_PreamblePCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2441_tmp_bits;\
	BM_L1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2441_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2441_tmp_bits );\
}

#define BM_L1Measurements_PreamblePCinr_BYTES_SIZE 4

#define BM_L1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2444_acc_bytes;\
	UINT bmlocal2445_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2444_acc_bytes = 4;\
	bmlocal2445_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2444_acc_bytes );\
	out_bitoff += bmlocal2445_acc_bits;\
}

#define BM_L1Measurements_PreamblePCinrAnt0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2446_tmp_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, bmlocal2446_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2446_tmp_bitoff);\
}

#define BM_L1Measurements_PreamblePCinrAnt0_POS_ALIGNED 4

// Alignment of L1Measurements_PreamblePCinrAnt0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_PreamblePCinrAnt0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2447_my_ptr;\
	UINT bmlocal2448_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2447_my_ptr, bmlocal2448_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2447_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2447_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2447_my_ptr, bmlocal2448_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_PreamblePCinrAnt0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2449_my_ptr;\
	UINT bmlocal2450_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2449_my_ptr, bmlocal2450_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2449_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2449_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2449_my_ptr, bmlocal2450_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_PreamblePCinrAnt0: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrAnt0: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrAnt0: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrAnt0: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrAnt0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_PreamblePCinrAnt0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2451_out_val;\
	BM_L1Measurements_PreamblePCinrAnt0_GET( base_ptr, bmlocal2451_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt0", 32, (UINT)(bmlocal2451_out_val), "%d", 1);\
}

#define BM_L1Measurements_PreamblePCinrAnt0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_PreamblePCinrAnt0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2452_my_ptr;\
	UINT bmlocal2453_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2452_my_ptr, bmlocal2453_my_bitoff );\
	(*((UINT32*)bmlocal2452_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2453_my_bitoff );\
}

// L1Measurements_PreamblePCinrAnt0: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_PreamblePCinrAnt0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2454_tmp_bits;\
	BM_L1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, bmlocal2454_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2454_tmp_bits );\
}

#define BM_L1Measurements_PreamblePCinrAnt0_BYTES_SIZE 4

#define BM_L1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2457_acc_bytes;\
	UINT bmlocal2458_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2457_acc_bytes = 8;\
	bmlocal2458_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2457_acc_bytes );\
	out_bitoff += bmlocal2458_acc_bits;\
}

#define BM_L1Measurements_PreamblePCinrAnt1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2459_tmp_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, bmlocal2459_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2459_tmp_bitoff);\
}

#define BM_L1Measurements_PreamblePCinrAnt1_POS_ALIGNED 8

// Alignment of L1Measurements_PreamblePCinrAnt1: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_PreamblePCinrAnt1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2460_my_ptr;\
	UINT bmlocal2461_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2460_my_ptr, bmlocal2461_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2460_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2460_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2460_my_ptr, bmlocal2461_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_PreamblePCinrAnt1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2462_my_ptr;\
	UINT bmlocal2463_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2462_my_ptr, bmlocal2463_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2462_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2462_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2462_my_ptr, bmlocal2463_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_PreamblePCinrAnt1: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrAnt1: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrAnt1: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrAnt1: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrAnt1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_PreamblePCinrAnt1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2464_out_val;\
	BM_L1Measurements_PreamblePCinrAnt1_GET( base_ptr, bmlocal2464_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt1", 32, (UINT)(bmlocal2464_out_val), "%d", 1);\
}

#define BM_L1Measurements_PreamblePCinrAnt1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_PreamblePCinrAnt1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2465_my_ptr;\
	UINT bmlocal2466_my_bitoff;\
	BM_L1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2465_my_ptr, bmlocal2466_my_bitoff );\
	(*((UINT32*)bmlocal2465_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2466_my_bitoff );\
}

// L1Measurements_PreamblePCinrAnt1: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_PreamblePCinrAnt1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2467_tmp_bits;\
	BM_L1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, bmlocal2467_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2467_tmp_bits );\
}

#define BM_L1Measurements_PreamblePCinrAnt1_BYTES_SIZE 4

#define BM_L1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2470_acc_bytes;\
	UINT bmlocal2471_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2470_acc_bytes = 12;\
	bmlocal2471_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2470_acc_bytes );\
	out_bitoff += bmlocal2471_acc_bits;\
}

#define BM_L1Measurements_PreamblePCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2472_tmp_bitoff;\
	BM_L1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2472_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2472_tmp_bitoff);\
}

#define BM_L1Measurements_PreamblePCinrStd_POS_ALIGNED 12

// Alignment of L1Measurements_PreamblePCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_PreamblePCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2473_my_ptr;\
	UINT bmlocal2474_my_bitoff;\
	BM_L1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2473_my_ptr, bmlocal2474_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2473_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2473_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2473_my_ptr, bmlocal2474_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_PreamblePCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2475_my_ptr;\
	UINT bmlocal2476_my_bitoff;\
	BM_L1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2475_my_ptr, bmlocal2476_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2475_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2475_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2475_my_ptr, bmlocal2476_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_PreamblePCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_PreamblePCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_PreamblePCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_PreamblePCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2477_out_val;\
	BM_L1Measurements_PreamblePCinrStd_GET( base_ptr, bmlocal2477_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrStd", 32, (UINT)(bmlocal2477_out_val), "%d", 1);\
}

#define BM_L1Measurements_PreamblePCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_PreamblePCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2478_my_ptr;\
	UINT bmlocal2479_my_bitoff;\
	BM_L1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2478_my_ptr, bmlocal2479_my_bitoff );\
	(*((UINT32*)bmlocal2478_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2479_my_bitoff );\
}

// L1Measurements_PreamblePCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_PreamblePCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2480_tmp_bits;\
	BM_L1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2480_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2480_tmp_bits );\
}

#define BM_L1Measurements_PreamblePCinrStd_BYTES_SIZE 4

#define BM_L1Measurements_Rssi_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2483_acc_bytes;\
	UINT bmlocal2484_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2483_acc_bytes = 16;\
	bmlocal2484_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2483_acc_bytes );\
	out_bitoff += bmlocal2484_acc_bits;\
}

#define BM_L1Measurements_Rssi_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2485_tmp_bitoff;\
	BM_L1Measurements_Rssi_GET_POS( base_ptr, out_ptr, bmlocal2485_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2485_tmp_bitoff);\
}

#define BM_L1Measurements_Rssi_POS_ALIGNED 16

// Alignment of L1Measurements_Rssi: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_Rssi_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2486_my_ptr;\
	UINT bmlocal2487_my_bitoff;\
	BM_L1Measurements_Rssi_GET_POS( base_ptr, bmlocal2486_my_ptr, bmlocal2487_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2486_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2486_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2486_my_ptr, bmlocal2487_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_Rssi_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2488_my_ptr;\
	UINT bmlocal2489_my_bitoff;\
	BM_L1Measurements_Rssi_GET_POS( base_ptr, bmlocal2488_my_ptr, bmlocal2489_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2488_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2488_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2488_my_ptr, bmlocal2489_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_Rssi: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Rssi: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Rssi: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Rssi: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Rssi: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_Rssi: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_Rssi_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2490_out_val;\
	BM_L1Measurements_Rssi_GET( base_ptr, bmlocal2490_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Rssi", 32, (UINT)(bmlocal2490_out_val), "%d", 1);\
}

#define BM_L1Measurements_Rssi_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_Rssi_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_Rssi_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2491_my_ptr;\
	UINT bmlocal2492_my_bitoff;\
	BM_L1Measurements_Rssi_GET_POS( base_ptr, bmlocal2491_my_ptr, bmlocal2492_my_bitoff );\
	(*((UINT32*)bmlocal2491_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2492_my_bitoff );\
}

// L1Measurements_Rssi: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_Rssi_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2493_tmp_bits;\
	BM_L1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, bmlocal2493_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2493_tmp_bits );\
}

#define BM_L1Measurements_Rssi_BYTES_SIZE 4

#define BM_L1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2496_acc_bytes;\
	UINT bmlocal2497_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2496_acc_bytes = 20;\
	bmlocal2497_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2496_acc_bytes );\
	out_bitoff += bmlocal2497_acc_bits;\
}

#define BM_L1Measurements_RssiStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2498_tmp_bitoff;\
	BM_L1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, bmlocal2498_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2498_tmp_bitoff);\
}

#define BM_L1Measurements_RssiStd_POS_ALIGNED 20

// Alignment of L1Measurements_RssiStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_RssiStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2499_my_ptr;\
	UINT bmlocal2500_my_bitoff;\
	BM_L1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2499_my_ptr, bmlocal2500_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2499_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2499_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2499_my_ptr, bmlocal2500_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_RssiStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2501_my_ptr;\
	UINT bmlocal2502_my_bitoff;\
	BM_L1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2501_my_ptr, bmlocal2502_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2501_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2501_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2501_my_ptr, bmlocal2502_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_RssiStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_RssiStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_RssiStd: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_RssiStd: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_RssiStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_RssiStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_RssiStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2503_out_val;\
	BM_L1Measurements_RssiStd_GET( base_ptr, bmlocal2503_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RssiStd", 32, (UINT)(bmlocal2503_out_val), "%d", 1);\
}

#define BM_L1Measurements_RssiStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_RssiStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_RssiStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2504_my_ptr;\
	UINT bmlocal2505_my_bitoff;\
	BM_L1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2504_my_ptr, bmlocal2505_my_bitoff );\
	(*((UINT32*)bmlocal2504_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2505_my_bitoff );\
}

// L1Measurements_RssiStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_RssiStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2506_tmp_bits;\
	BM_L1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, bmlocal2506_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2506_tmp_bits );\
}

#define BM_L1Measurements_RssiStd_BYTES_SIZE 4

#define BM_L1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2509_acc_bytes;\
	UINT bmlocal2510_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2509_acc_bytes = 24;\
	bmlocal2510_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2509_acc_bytes );\
	out_bitoff += bmlocal2510_acc_bits;\
}

#define BM_L1Measurements_MimoStbcPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2511_tmp_bitoff;\
	BM_L1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, bmlocal2511_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2511_tmp_bitoff);\
}

#define BM_L1Measurements_MimoStbcPCinr_POS_ALIGNED 24

// Alignment of L1Measurements_MimoStbcPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoStbcPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2512_my_ptr;\
	UINT bmlocal2513_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2512_my_ptr, bmlocal2513_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2512_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2512_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2512_my_ptr, bmlocal2513_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoStbcPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2514_my_ptr;\
	UINT bmlocal2515_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2514_my_ptr, bmlocal2515_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2514_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2514_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2514_my_ptr, bmlocal2515_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoStbcPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcPCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcPCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoStbcPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2516_out_val;\
	BM_L1Measurements_MimoStbcPCinr_GET( base_ptr, bmlocal2516_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinr", 32, (UINT)(bmlocal2516_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoStbcPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoStbcPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2517_my_ptr;\
	UINT bmlocal2518_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2517_my_ptr, bmlocal2518_my_bitoff );\
	(*((UINT32*)bmlocal2517_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2518_my_bitoff );\
}

// L1Measurements_MimoStbcPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoStbcPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2519_tmp_bits;\
	BM_L1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2519_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2519_tmp_bits );\
}

#define BM_L1Measurements_MimoStbcPCinr_BYTES_SIZE 4

#define BM_L1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2522_acc_bytes;\
	UINT bmlocal2523_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2522_acc_bytes = 28;\
	bmlocal2523_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2522_acc_bytes );\
	out_bitoff += bmlocal2523_acc_bits;\
}

#define BM_L1Measurements_MimoStbcPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2524_tmp_bitoff;\
	BM_L1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2524_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2524_tmp_bitoff);\
}

#define BM_L1Measurements_MimoStbcPCinrStd_POS_ALIGNED 28

// Alignment of L1Measurements_MimoStbcPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoStbcPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2525_my_ptr;\
	UINT bmlocal2526_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2525_my_ptr, bmlocal2526_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2525_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2525_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2525_my_ptr, bmlocal2526_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoStbcPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2527_my_ptr;\
	UINT bmlocal2528_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2527_my_ptr, bmlocal2528_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2527_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2527_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2527_my_ptr, bmlocal2528_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoStbcPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoStbcPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2529_out_val;\
	BM_L1Measurements_MimoStbcPCinrStd_GET( base_ptr, bmlocal2529_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinrStd", 32, (UINT)(bmlocal2529_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoStbcPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoStbcPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2530_my_ptr;\
	UINT bmlocal2531_my_bitoff;\
	BM_L1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2530_my_ptr, bmlocal2531_my_bitoff );\
	(*((UINT32*)bmlocal2530_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2531_my_bitoff );\
}

// L1Measurements_MimoStbcPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoStbcPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2532_tmp_bits;\
	BM_L1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2532_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2532_tmp_bits );\
}

#define BM_L1Measurements_MimoStbcPCinrStd_BYTES_SIZE 4

#define BM_L1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2535_acc_bytes;\
	UINT bmlocal2536_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2535_acc_bytes = 32;\
	bmlocal2536_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2535_acc_bytes );\
	out_bitoff += bmlocal2536_acc_bits;\
}

#define BM_L1Measurements_MimoSmPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2537_tmp_bitoff;\
	BM_L1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, bmlocal2537_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2537_tmp_bitoff);\
}

#define BM_L1Measurements_MimoSmPCinr_POS_ALIGNED 32

// Alignment of L1Measurements_MimoSmPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoSmPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2538_my_ptr;\
	UINT bmlocal2539_my_bitoff;\
	BM_L1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2538_my_ptr, bmlocal2539_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2538_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2538_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2538_my_ptr, bmlocal2539_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoSmPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2540_my_ptr;\
	UINT bmlocal2541_my_bitoff;\
	BM_L1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2540_my_ptr, bmlocal2541_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2540_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2540_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2540_my_ptr, bmlocal2541_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoSmPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmPCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmPCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoSmPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2542_out_val;\
	BM_L1Measurements_MimoSmPCinr_GET( base_ptr, bmlocal2542_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinr", 32, (UINT)(bmlocal2542_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoSmPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoSmPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2543_my_ptr;\
	UINT bmlocal2544_my_bitoff;\
	BM_L1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2543_my_ptr, bmlocal2544_my_bitoff );\
	(*((UINT32*)bmlocal2543_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2544_my_bitoff );\
}

// L1Measurements_MimoSmPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoSmPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2545_tmp_bits;\
	BM_L1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2545_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2545_tmp_bits );\
}

#define BM_L1Measurements_MimoSmPCinr_BYTES_SIZE 4

#define BM_L1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2548_acc_bytes;\
	UINT bmlocal2549_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2548_acc_bytes = 36;\
	bmlocal2549_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2548_acc_bytes );\
	out_bitoff += bmlocal2549_acc_bits;\
}

#define BM_L1Measurements_MimoSmPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2550_tmp_bitoff;\
	BM_L1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2550_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2550_tmp_bitoff);\
}

#define BM_L1Measurements_MimoSmPCinrStd_POS_ALIGNED 36

// Alignment of L1Measurements_MimoSmPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoSmPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2551_my_ptr;\
	UINT bmlocal2552_my_bitoff;\
	BM_L1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2551_my_ptr, bmlocal2552_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2551_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2551_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2551_my_ptr, bmlocal2552_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoSmPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2553_my_ptr;\
	UINT bmlocal2554_my_bitoff;\
	BM_L1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2553_my_ptr, bmlocal2554_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2553_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2553_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2553_my_ptr, bmlocal2554_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoSmPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoSmPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2555_out_val;\
	BM_L1Measurements_MimoSmPCinrStd_GET( base_ptr, bmlocal2555_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinrStd", 32, (UINT)(bmlocal2555_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoSmPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoSmPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2556_my_ptr;\
	UINT bmlocal2557_my_bitoff;\
	BM_L1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2556_my_ptr, bmlocal2557_my_bitoff );\
	(*((UINT32*)bmlocal2556_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2557_my_bitoff );\
}

// L1Measurements_MimoSmPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoSmPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2558_tmp_bits;\
	BM_L1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2558_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2558_tmp_bits );\
}

#define BM_L1Measurements_MimoSmPCinrStd_BYTES_SIZE 4

#define BM_L1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2561_acc_bytes;\
	UINT bmlocal2562_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2561_acc_bytes = 40;\
	bmlocal2562_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2561_acc_bytes );\
	out_bitoff += bmlocal2562_acc_bits;\
}

#define BM_L1Measurements_MimoStbcECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2563_tmp_bitoff;\
	BM_L1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, bmlocal2563_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2563_tmp_bitoff);\
}

#define BM_L1Measurements_MimoStbcECinr_POS_ALIGNED 40

// Alignment of L1Measurements_MimoStbcECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoStbcECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2564_my_ptr;\
	UINT bmlocal2565_my_bitoff;\
	BM_L1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2564_my_ptr, bmlocal2565_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2564_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2564_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2564_my_ptr, bmlocal2565_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoStbcECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2566_my_ptr;\
	UINT bmlocal2567_my_bitoff;\
	BM_L1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2566_my_ptr, bmlocal2567_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2566_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2566_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2566_my_ptr, bmlocal2567_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoStbcECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoStbcECinr: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcECinr: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoStbcECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoStbcECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2568_out_val;\
	BM_L1Measurements_MimoStbcECinr_GET( base_ptr, bmlocal2568_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcECinr", 32, (UINT)(bmlocal2568_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoStbcECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoStbcECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2569_my_ptr;\
	UINT bmlocal2570_my_bitoff;\
	BM_L1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2569_my_ptr, bmlocal2570_my_bitoff );\
	(*((UINT32*)bmlocal2569_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2570_my_bitoff );\
}

// L1Measurements_MimoStbcECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoStbcECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2571_tmp_bits;\
	BM_L1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, bmlocal2571_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2571_tmp_bits );\
}

#define BM_L1Measurements_MimoStbcECinr_BYTES_SIZE 4

#define BM_L1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2574_acc_bytes;\
	UINT bmlocal2575_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2574_acc_bytes = 44;\
	bmlocal2575_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2574_acc_bytes );\
	out_bitoff += bmlocal2575_acc_bits;\
}

#define BM_L1Measurements_MimoSmECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2576_tmp_bitoff;\
	BM_L1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, bmlocal2576_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2576_tmp_bitoff);\
}

#define BM_L1Measurements_MimoSmECinr_POS_ALIGNED 44

// Alignment of L1Measurements_MimoSmECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_MimoSmECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2577_my_ptr;\
	UINT bmlocal2578_my_bitoff;\
	BM_L1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2577_my_ptr, bmlocal2578_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2577_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2577_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2577_my_ptr, bmlocal2578_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_MimoSmECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2579_my_ptr;\
	UINT bmlocal2580_my_bitoff;\
	BM_L1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2579_my_ptr, bmlocal2580_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2579_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2579_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2579_my_ptr, bmlocal2580_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1Measurements_MimoSmECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_MimoSmECinr: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmECinr: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_MimoSmECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_MimoSmECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2581_out_val;\
	BM_L1Measurements_MimoSmECinr_GET( base_ptr, bmlocal2581_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmECinr", 32, (UINT)(bmlocal2581_out_val), "%d", 1);\
}

#define BM_L1Measurements_MimoSmECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_MimoSmECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2582_my_ptr;\
	UINT bmlocal2583_my_bitoff;\
	BM_L1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2582_my_ptr, bmlocal2583_my_bitoff );\
	(*((UINT32*)bmlocal2582_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2583_my_bitoff );\
}

// L1Measurements_MimoSmECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_MimoSmECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2584_tmp_bits;\
	BM_L1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, bmlocal2584_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2584_tmp_bits );\
}

#define BM_L1Measurements_MimoSmECinr_BYTES_SIZE 4

#define BM_L1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2587_acc_bytes;\
	UINT bmlocal2588_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2587_acc_bytes = 48;\
	bmlocal2588_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2587_acc_bytes );\
	out_bitoff += bmlocal2588_acc_bits;\
}

#define BM_L1Measurements_RxAntModeAutoDetect_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2589_tmp_bitoff;\
	BM_L1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, bmlocal2589_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2589_tmp_bitoff);\
}

#define BM_L1Measurements_RxAntModeAutoDetect_POS_ALIGNED 48

// Alignment of L1Measurements_RxAntModeAutoDetect: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_RxAntModeAutoDetect_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2590_my_ptr;\
	UINT bmlocal2591_my_bitoff;\
	BM_L1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2590_my_ptr, bmlocal2591_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2590_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2590_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2590_my_ptr, bmlocal2591_my_bitoff, 8, eRF_RX_ANT_MODE, out_val, 0x00000000 );\
	}\
}

#define BM_L1Measurements_RxAntModeAutoDetect_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2592_my_ptr;\
	UINT bmlocal2593_my_bitoff;\
	BM_L1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2592_my_ptr, bmlocal2593_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2592_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2592_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2592_my_ptr, bmlocal2593_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1Measurements_RxAntModeAutoDetect: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_RxAntModeAutoDetect: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_RxAntModeAutoDetect: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_RxAntModeAutoDetect: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_RxAntModeAutoDetect: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_RxAntModeAutoDetect: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	eRF_RX_ANT_MODE bmlocal2594_out_val;\
	BM_L1Measurements_RxAntModeAutoDetect_GET( base_ptr, bmlocal2594_out_val );\
	if( bmlocal2594_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_MODE", 1);\
	}\
	if( bmlocal2594_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT0_MODE", 1);\
	}\
	if( bmlocal2594_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT1_MODE", 1);\
	}\
	if( bmlocal2594_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_DISABLED", 1);\
	}\
}

#define BM_L1Measurements_RxAntModeAutoDetect_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_RxAntModeAutoDetect_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2595_my_ptr;\
	UINT bmlocal2596_my_bitoff;\
	BM_L1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2595_my_ptr, bmlocal2596_my_bitoff );\
	(*((UINT8*)bmlocal2595_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2596_my_bitoff );\
}

// L1Measurements_RxAntModeAutoDetect: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_RxAntModeAutoDetect_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2597_tmp_bits;\
	BM_L1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, bmlocal2597_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2597_tmp_bits );\
}

#define BM_L1Measurements_RxAntModeAutoDetect_BYTES_SIZE 1

#define BM_L1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2600_acc_bytes;\
	UINT bmlocal2601_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2600_acc_bytes = 49;\
	bmlocal2601_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2600_acc_bytes );\
	out_bitoff += bmlocal2601_acc_bits;\
}

#define BM_L1Measurements_Reserved8_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2602_tmp_bitoff;\
	BM_L1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, bmlocal2602_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2602_tmp_bitoff);\
}

#define BM_L1Measurements_Reserved8_POS_ALIGNED 49

// Alignment of L1Measurements_Reserved8: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_Reserved8_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2603_my_ptr;\
	UINT bmlocal2604_my_bitoff;\
	BM_L1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2603_my_ptr, bmlocal2604_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2603_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2603_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2603_my_ptr, bmlocal2604_my_bitoff, 8, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_L1Measurements_Reserved8_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2605_my_ptr;\
	UINT bmlocal2606_my_bitoff;\
	BM_L1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2605_my_ptr, bmlocal2606_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2605_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2605_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2605_my_ptr, bmlocal2606_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L1Measurements_Reserved8: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Reserved8: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Reserved8: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Reserved8: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Reserved8: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_Reserved8: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_Reserved8_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2607_out_val;\
	BM_L1Measurements_Reserved8_GET( base_ptr, bmlocal2607_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved8", 8, (UINT)(bmlocal2607_out_val), "%d", 1);\
}

#define BM_L1Measurements_Reserved8_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_Reserved8_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_Reserved8_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2608_my_ptr;\
	UINT bmlocal2609_my_bitoff;\
	BM_L1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2608_my_ptr, bmlocal2609_my_bitoff );\
	(*((UINT8*)bmlocal2608_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2609_my_bitoff );\
}

// L1Measurements_Reserved8: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_Reserved8_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2610_tmp_bits;\
	BM_L1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, bmlocal2610_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2610_tmp_bits );\
}

#define BM_L1Measurements_Reserved8_BYTES_SIZE 1

#define BM_L1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2613_acc_bytes;\
	UINT bmlocal2614_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2613_acc_bytes = 50;\
	bmlocal2614_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2613_acc_bytes );\
	out_bitoff += bmlocal2614_acc_bits;\
}

#define BM_L1Measurements_Reserved16_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2615_tmp_bitoff;\
	BM_L1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, bmlocal2615_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2615_tmp_bitoff);\
}

#define BM_L1Measurements_Reserved16_POS_ALIGNED 50

// Alignment of L1Measurements_Reserved16: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_Reserved16_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2616_my_ptr;\
	UINT bmlocal2617_my_bitoff;\
	BM_L1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2616_my_ptr, bmlocal2617_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2616_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2616_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2616_my_ptr, bmlocal2617_my_bitoff, 16, UINT32, out_val, 0x00000002 );\
	}\
}

#define BM_L1Measurements_Reserved16_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2618_my_ptr;\
	UINT bmlocal2619_my_bitoff;\
	BM_L1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2618_my_ptr, bmlocal2619_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2618_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2618_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2618_my_ptr, bmlocal2619_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1Measurements_Reserved16: IS_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Reserved16: SET_DEFAULT accessor is not defined because no default value was specified.
// L1Measurements_Reserved16: IS_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Reserved16: SET_RESET accessor is not defined because no reset value was specified.
// L1Measurements_Reserved16: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1Measurements_Reserved16: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1Measurements_Reserved16_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2620_out_val;\
	BM_L1Measurements_Reserved16_GET( base_ptr, bmlocal2620_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved16", 16, (UINT)(bmlocal2620_out_val), "%d", 1);\
}

#define BM_L1Measurements_Reserved16_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_Reserved16_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1Measurements_Reserved16_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2621_my_ptr;\
	UINT bmlocal2622_my_bitoff;\
	BM_L1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2621_my_ptr, bmlocal2622_my_bitoff );\
	(*((UINT16*)bmlocal2621_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2622_my_bitoff );\
}

// L1Measurements_Reserved16: Validation accessors are not defined because validation condition was not specified.
#define BM_L1Measurements_Reserved16_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2623_tmp_bits;\
	BM_L1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, bmlocal2623_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2623_tmp_bits );\
}

#define BM_L1Measurements_Reserved16_BYTES_SIZE 2

#define BM_L1Measurements_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 52;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2626_tmp_bits;\
	BM_L1Measurements_GET_SIZE( base_ptr, out_bytes, bmlocal2626_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2626_tmp_bits );\
}

#define BM_L1Measurements_BYTES_SIZE 52

#define BM_L1Measurements_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L1Measurements", 1);\
	BM_L1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_Rssi_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_RssiStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_Reserved8_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1Measurements_Reserved16_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1Measurements_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1Measurements_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 dmPhyPerformance[100];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_MapsStatistics _MapsStatistics;
	BMS_L1Measurements _l1Measurements;
	UINT32 _cqichCount; //total count of the CQICH transmissions (frames ?) from the MS
	INT16 _TemperatureInCelsius : 16; //Chip auto temperature measurement
	eRF_RX_ANT_MODE _RxAntMode : 8; //Both antenas enabled=0,Ant0=1,Ant1=2,Both antenas disabled=3
	UINT8 _Reserved_1 : 8; //Reserved to get to short alignment
} BMS_dmPhyPerformance; //L1 PHY Performance parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Reserved_1 : 8; //Reserved to get to short alignment
	eRF_RX_ANT_MODE _RxAntMode : 8; //Both antenas enabled=0,Ant0=1,Ant1=2,Both antenas disabled=3
	INT16 _TemperatureInCelsius : 16; //Chip auto temperature measurement
	UINT32 _cqichCount; //total count of the CQICH transmissions (frames ?) from the MS
	BMS_L1Measurements _l1Measurements;
	BMS_MapsStatistics _MapsStatistics;
} BMS_dmPhyPerformance; //L1 PHY Performance parameters for the DM

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'dmPhyPerformance' Type: 'dmPhyPerformance', Top-level, Non-instance, No bitoff root
#define BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_dmPhyPerformance_MapsStatistics_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2627_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, out_ptr, bmlocal2627_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2627_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_POS_ALIGNED 0

// COMPOSITE: Full name: 'dmPhyPerformance_MapsStatistics' Type: 'MapsStatistics', Inner, Non-instance, No bitoff root
#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2628_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2628_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2628_parent_out_ptr;\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2629_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2629_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2629_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_POS_ALIGNED 0

// Alignment of dmPhyPerformance_MapsStatistics_FchRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2630_my_ptr;\
	UINT bmlocal2631_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2630_my_ptr, bmlocal2631_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2630_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2630_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2630_my_ptr, bmlocal2631_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2632_my_ptr;\
	UINT bmlocal2633_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2632_my_ptr, bmlocal2633_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2632_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2632_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2632_my_ptr, bmlocal2633_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_FchRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_FchRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_FchRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_FchRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_FchRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_FchRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2634_out_val;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET( base_ptr, bmlocal2634_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchRecievedOK", 32, (UINT)(bmlocal2634_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2635_my_ptr;\
	UINT bmlocal2636_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal2635_my_ptr, bmlocal2636_my_bitoff );\
	(*((UINT32*)bmlocal2635_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2636_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_FchRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2637_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2637_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2637_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2640_acc_bytes;\
	UINT bmlocal2641_acc_bits;\
	PVOID bmlocal2642_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2642_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2642_parent_out_ptr;\
	bmlocal2640_acc_bytes = 4;\
	bmlocal2641_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2640_acc_bytes );\
	out_bitoff += bmlocal2641_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2643_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, bmlocal2643_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2643_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_POS_ALIGNED 4

// Alignment of dmPhyPerformance_MapsStatistics_FchFailures: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2644_my_ptr;\
	UINT bmlocal2645_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2644_my_ptr, bmlocal2645_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2644_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2644_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2644_my_ptr, bmlocal2645_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2646_my_ptr;\
	UINT bmlocal2647_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2646_my_ptr, bmlocal2647_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2646_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2646_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2646_my_ptr, bmlocal2647_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_FchFailures: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_FchFailures: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_FchFailures: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_FchFailures: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_FchFailures: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_FchFailures: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2648_out_val;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET( base_ptr, bmlocal2648_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchFailures", 32, (UINT)(bmlocal2648_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2649_my_ptr;\
	UINT bmlocal2650_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal2649_my_ptr, bmlocal2650_my_bitoff );\
	(*((UINT32*)bmlocal2649_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2650_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_FchFailures: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2651_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, bmlocal2651_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2651_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_FchFailures_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2654_acc_bytes;\
	UINT bmlocal2655_acc_bits;\
	PVOID bmlocal2656_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2656_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2656_parent_out_ptr;\
	bmlocal2654_acc_bytes = 8;\
	bmlocal2655_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2654_acc_bytes );\
	out_bitoff += bmlocal2655_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2657_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2657_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2657_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_POS_ALIGNED 8

// Alignment of dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2658_my_ptr;\
	UINT bmlocal2659_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2658_my_ptr, bmlocal2659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2658_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2658_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2658_my_ptr, bmlocal2659_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2660_my_ptr;\
	UINT bmlocal2661_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2660_my_ptr, bmlocal2661_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2660_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2660_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2660_my_ptr, bmlocal2661_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2662_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, bmlocal2662_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapRecievedOK", 32, (UINT)(bmlocal2662_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2663_my_ptr;\
	UINT bmlocal2664_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal2663_my_ptr, bmlocal2664_my_bitoff );\
	(*((UINT32*)bmlocal2663_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2664_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2665_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2665_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2665_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2668_acc_bytes;\
	UINT bmlocal2669_acc_bits;\
	PVOID bmlocal2670_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2670_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2670_parent_out_ptr;\
	bmlocal2668_acc_bytes = 12;\
	bmlocal2669_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2668_acc_bytes );\
	out_bitoff += bmlocal2669_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2671_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal2671_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2671_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_POS_ALIGNED 12

// Alignment of dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2672_my_ptr;\
	UINT bmlocal2673_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2672_my_ptr, bmlocal2673_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2672_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2672_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2672_my_ptr, bmlocal2673_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2674_my_ptr;\
	UINT bmlocal2675_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2674_my_ptr, bmlocal2675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2674_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2674_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2674_my_ptr, bmlocal2675_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2676_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, bmlocal2676_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapHcsError", 32, (UINT)(bmlocal2676_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2677_my_ptr;\
	UINT bmlocal2678_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal2677_my_ptr, bmlocal2678_my_bitoff );\
	(*((UINT32*)bmlocal2677_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2678_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2679_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal2679_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2679_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2682_acc_bytes;\
	UINT bmlocal2683_acc_bits;\
	PVOID bmlocal2684_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2684_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2684_parent_out_ptr;\
	bmlocal2682_acc_bytes = 16;\
	bmlocal2683_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2682_acc_bytes );\
	out_bitoff += bmlocal2683_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2685_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2685_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2685_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_POS_ALIGNED 16

// Alignment of dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2686_my_ptr;\
	UINT bmlocal2687_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2686_my_ptr, bmlocal2687_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2686_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2686_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2686_my_ptr, bmlocal2687_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2688_my_ptr;\
	UINT bmlocal2689_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2688_my_ptr, bmlocal2689_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2688_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2688_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2688_my_ptr, bmlocal2689_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2690_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, bmlocal2690_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapCrcError", 32, (UINT)(bmlocal2690_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2691_my_ptr;\
	UINT bmlocal2692_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal2691_my_ptr, bmlocal2692_my_bitoff );\
	(*((UINT32*)bmlocal2691_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2692_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalDlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2693_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2693_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2693_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2696_acc_bytes;\
	UINT bmlocal2697_acc_bits;\
	PVOID bmlocal2698_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2698_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2698_parent_out_ptr;\
	bmlocal2696_acc_bytes = 20;\
	bmlocal2697_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2696_acc_bytes );\
	out_bitoff += bmlocal2697_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2699_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2699_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2699_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_POS_ALIGNED 20

// Alignment of dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2700_my_ptr;\
	UINT bmlocal2701_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2700_my_ptr, bmlocal2701_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2700_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2700_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2700_my_ptr, bmlocal2701_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2702_my_ptr;\
	UINT bmlocal2703_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2702_my_ptr, bmlocal2703_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2702_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2702_my_ptr, bmlocal2703_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2704_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, bmlocal2704_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapRecievedOK", 32, (UINT)(bmlocal2704_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2705_my_ptr;\
	UINT bmlocal2706_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal2705_my_ptr, bmlocal2706_my_bitoff );\
	(*((UINT32*)bmlocal2705_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2706_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2707_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2707_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2707_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2710_acc_bytes;\
	UINT bmlocal2711_acc_bits;\
	PVOID bmlocal2712_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2712_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2712_parent_out_ptr;\
	bmlocal2710_acc_bytes = 24;\
	bmlocal2711_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2710_acc_bytes );\
	out_bitoff += bmlocal2711_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2713_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal2713_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2713_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_POS_ALIGNED 24

// Alignment of dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2714_my_ptr;\
	UINT bmlocal2715_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2714_my_ptr, bmlocal2715_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2714_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2714_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2714_my_ptr, bmlocal2715_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2716_my_ptr;\
	UINT bmlocal2717_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2716_my_ptr, bmlocal2717_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2716_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2716_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2716_my_ptr, bmlocal2717_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2718_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, bmlocal2718_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapHcsError", 32, (UINT)(bmlocal2718_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2719_my_ptr;\
	UINT bmlocal2720_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal2719_my_ptr, bmlocal2720_my_bitoff );\
	(*((UINT32*)bmlocal2719_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2720_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2721_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal2721_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2721_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2724_acc_bytes;\
	UINT bmlocal2725_acc_bits;\
	PVOID bmlocal2726_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2726_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2726_parent_out_ptr;\
	bmlocal2724_acc_bytes = 28;\
	bmlocal2725_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2724_acc_bytes );\
	out_bitoff += bmlocal2725_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2727_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2727_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2727_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_POS_ALIGNED 28

// Alignment of dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2728_my_ptr;\
	UINT bmlocal2729_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2728_my_ptr, bmlocal2729_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2728_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2728_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2728_my_ptr, bmlocal2729_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2730_my_ptr;\
	UINT bmlocal2731_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2730_my_ptr, bmlocal2731_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2730_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2730_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2730_my_ptr, bmlocal2731_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2732_out_val;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, bmlocal2732_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapCrcError", 32, (UINT)(bmlocal2732_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2733_my_ptr;\
	UINT bmlocal2734_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal2733_my_ptr, bmlocal2734_my_bitoff );\
	(*((UINT32*)bmlocal2733_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2734_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_NormalUlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2735_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2735_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2735_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2738_acc_bytes;\
	UINT bmlocal2739_acc_bits;\
	PVOID bmlocal2740_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2740_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2740_parent_out_ptr;\
	bmlocal2738_acc_bytes = 32;\
	bmlocal2739_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2738_acc_bytes );\
	out_bitoff += bmlocal2739_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2741_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal2741_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2741_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_POS_ALIGNED 32

// Alignment of dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2742_my_ptr;\
	UINT bmlocal2743_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2742_my_ptr, bmlocal2743_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2742_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2742_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2742_my_ptr, bmlocal2743_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2744_my_ptr;\
	UINT bmlocal2745_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2744_my_ptr, bmlocal2745_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2744_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2744_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2744_my_ptr, bmlocal2745_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2746_out_val;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, bmlocal2746_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapRecievedOK", 32, (UINT)(bmlocal2746_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2747_my_ptr;\
	UINT bmlocal2748_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal2747_my_ptr, bmlocal2748_my_bitoff );\
	(*((UINT32*)bmlocal2747_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2748_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2749_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal2749_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2749_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2752_acc_bytes;\
	UINT bmlocal2753_acc_bits;\
	PVOID bmlocal2754_parent_out_ptr;\
	BM_dmPhyPerformance_MapsStatistics_GET_POS( base_ptr, bmlocal2754_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2754_parent_out_ptr;\
	bmlocal2752_acc_bytes = 36;\
	bmlocal2753_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2752_acc_bytes );\
	out_bitoff += bmlocal2753_acc_bits;\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2755_tmp_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal2755_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2755_tmp_bitoff);\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_POS_ALIGNED 36

// Alignment of dmPhyPerformance_MapsStatistics_CompressedMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2756_my_ptr;\
	UINT bmlocal2757_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2756_my_ptr, bmlocal2757_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2756_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2756_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2756_my_ptr, bmlocal2757_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2758_my_ptr;\
	UINT bmlocal2759_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2758_my_ptr, bmlocal2759_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2758_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2758_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2758_my_ptr, bmlocal2759_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2760_out_val;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET( base_ptr, bmlocal2760_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapCrcError", 32, (UINT)(bmlocal2760_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2761_my_ptr;\
	UINT bmlocal2762_my_bitoff;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal2761_my_ptr, bmlocal2762_my_bitoff );\
	(*((UINT32*)bmlocal2761_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2762_my_bitoff );\
}

// dmPhyPerformance_MapsStatistics_CompressedMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2763_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal2763_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2763_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_BYTES_SIZE 4

#define BM_dmPhyPerformance_MapsStatistics_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 40;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2766_tmp_bits;\
	BM_dmPhyPerformance_MapsStatistics_GET_SIZE( base_ptr, out_bytes, bmlocal2766_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2766_tmp_bits );\
}

#define BM_dmPhyPerformance_MapsStatistics_BYTES_SIZE 40

#define BM_dmPhyPerformance_MapsStatistics_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MapsStatistics", 1);\
	BM_dmPhyPerformance_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_MapsStatistics_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_MapsStatistics_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2769_acc_bytes;\
	UINT bmlocal2770_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2769_acc_bytes = 40;\
	bmlocal2770_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2769_acc_bytes );\
	out_bitoff += bmlocal2770_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2771_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, out_ptr, bmlocal2771_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2771_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_POS_ALIGNED 40

// COMPOSITE: Full name: 'dmPhyPerformance_l1Measurements' Type: 'L1Measurements', Inner, Non-instance, No bitoff root
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2772_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2772_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2772_parent_out_ptr;\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2773_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, bmlocal2773_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2773_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_POS_ALIGNED 40

// Alignment of dmPhyPerformance_l1Measurements_PreamblePCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2774_my_ptr;\
	UINT bmlocal2775_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2774_my_ptr, bmlocal2775_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2774_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2774_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2774_my_ptr, bmlocal2775_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2776_my_ptr;\
	UINT bmlocal2777_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2776_my_ptr, bmlocal2777_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2776_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2776_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2776_my_ptr, bmlocal2777_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_PreamblePCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinr: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinr: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_PreamblePCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2778_out_val;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET( base_ptr, bmlocal2778_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinr", 32, (UINT)(bmlocal2778_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2779_my_ptr;\
	UINT bmlocal2780_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal2779_my_ptr, bmlocal2780_my_bitoff );\
	(*((UINT32*)bmlocal2779_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2780_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_PreamblePCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2781_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2781_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2781_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinr_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2784_acc_bytes;\
	UINT bmlocal2785_acc_bits;\
	PVOID bmlocal2786_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2786_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2786_parent_out_ptr;\
	bmlocal2784_acc_bytes = 4;\
	bmlocal2785_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2784_acc_bytes );\
	out_bitoff += bmlocal2785_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2787_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, bmlocal2787_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2787_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_POS_ALIGNED 44

// Alignment of dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2788_my_ptr;\
	UINT bmlocal2789_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2788_my_ptr, bmlocal2789_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2788_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2788_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2788_my_ptr, bmlocal2789_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2790_my_ptr;\
	UINT bmlocal2791_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2790_my_ptr, bmlocal2791_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2790_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2790_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2790_my_ptr, bmlocal2791_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2792_out_val;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET( base_ptr, bmlocal2792_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt0", 32, (UINT)(bmlocal2792_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2793_my_ptr;\
	UINT bmlocal2794_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal2793_my_ptr, bmlocal2794_my_bitoff );\
	(*((UINT32*)bmlocal2793_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2794_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrAnt0: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2795_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, bmlocal2795_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2795_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2798_acc_bytes;\
	UINT bmlocal2799_acc_bits;\
	PVOID bmlocal2800_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2800_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2800_parent_out_ptr;\
	bmlocal2798_acc_bytes = 8;\
	bmlocal2799_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2798_acc_bytes );\
	out_bitoff += bmlocal2799_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2801_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, bmlocal2801_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2801_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_POS_ALIGNED 48

// Alignment of dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2802_my_ptr;\
	UINT bmlocal2803_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2802_my_ptr, bmlocal2803_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2802_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2802_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2802_my_ptr, bmlocal2803_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2804_my_ptr;\
	UINT bmlocal2805_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2804_my_ptr, bmlocal2805_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2804_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2804_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2804_my_ptr, bmlocal2805_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2806_out_val;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET( base_ptr, bmlocal2806_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt1", 32, (UINT)(bmlocal2806_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2807_my_ptr;\
	UINT bmlocal2808_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal2807_my_ptr, bmlocal2808_my_bitoff );\
	(*((UINT32*)bmlocal2807_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2808_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrAnt1: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2809_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, bmlocal2809_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2809_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2812_acc_bytes;\
	UINT bmlocal2813_acc_bits;\
	PVOID bmlocal2814_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2814_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2814_parent_out_ptr;\
	bmlocal2812_acc_bytes = 12;\
	bmlocal2813_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2812_acc_bytes );\
	out_bitoff += bmlocal2813_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2815_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2815_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2815_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_POS_ALIGNED 52

// Alignment of dmPhyPerformance_l1Measurements_PreamblePCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2816_my_ptr;\
	UINT bmlocal2817_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2816_my_ptr, bmlocal2817_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2816_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2816_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2816_my_ptr, bmlocal2817_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2818_my_ptr;\
	UINT bmlocal2819_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2818_my_ptr, bmlocal2819_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2818_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2818_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2818_my_ptr, bmlocal2819_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_PreamblePCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_PreamblePCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2820_out_val;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET( base_ptr, bmlocal2820_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrStd", 32, (UINT)(bmlocal2820_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2821_my_ptr;\
	UINT bmlocal2822_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal2821_my_ptr, bmlocal2822_my_bitoff );\
	(*((UINT32*)bmlocal2821_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2822_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_PreamblePCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2823_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2823_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2823_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2826_acc_bytes;\
	UINT bmlocal2827_acc_bits;\
	PVOID bmlocal2828_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2828_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2828_parent_out_ptr;\
	bmlocal2826_acc_bytes = 16;\
	bmlocal2827_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2826_acc_bytes );\
	out_bitoff += bmlocal2827_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2829_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS( base_ptr, out_ptr, bmlocal2829_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2829_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_POS_ALIGNED 56

// Alignment of dmPhyPerformance_l1Measurements_Rssi: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2830_my_ptr;\
	UINT bmlocal2831_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal2830_my_ptr, bmlocal2831_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2830_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2830_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2830_my_ptr, bmlocal2831_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2832_my_ptr;\
	UINT bmlocal2833_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal2832_my_ptr, bmlocal2833_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2832_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2832_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2832_my_ptr, bmlocal2833_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_Rssi: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Rssi: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Rssi: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Rssi: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Rssi: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_Rssi: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2834_out_val;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET( base_ptr, bmlocal2834_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Rssi", 32, (UINT)(bmlocal2834_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2835_my_ptr;\
	UINT bmlocal2836_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal2835_my_ptr, bmlocal2836_my_bitoff );\
	(*((UINT32*)bmlocal2835_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2836_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_Rssi: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_Rssi_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2837_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, bmlocal2837_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2837_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_Rssi_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2840_acc_bytes;\
	UINT bmlocal2841_acc_bits;\
	PVOID bmlocal2842_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2842_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2842_parent_out_ptr;\
	bmlocal2840_acc_bytes = 20;\
	bmlocal2841_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2840_acc_bytes );\
	out_bitoff += bmlocal2841_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2843_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, bmlocal2843_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2843_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_POS_ALIGNED 60

// Alignment of dmPhyPerformance_l1Measurements_RssiStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2844_my_ptr;\
	UINT bmlocal2845_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2844_my_ptr, bmlocal2845_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2844_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2844_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2844_my_ptr, bmlocal2845_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2846_my_ptr;\
	UINT bmlocal2847_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2846_my_ptr, bmlocal2847_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2846_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2846_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2846_my_ptr, bmlocal2847_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_RssiStd: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_RssiStd: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_RssiStd: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_RssiStd: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_RssiStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_RssiStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2848_out_val;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET( base_ptr, bmlocal2848_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RssiStd", 32, (UINT)(bmlocal2848_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2849_my_ptr;\
	UINT bmlocal2850_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal2849_my_ptr, bmlocal2850_my_bitoff );\
	(*((UINT32*)bmlocal2849_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2850_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_RssiStd: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_RssiStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2851_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, bmlocal2851_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2851_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_RssiStd_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2854_acc_bytes;\
	UINT bmlocal2855_acc_bits;\
	PVOID bmlocal2856_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2856_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2856_parent_out_ptr;\
	bmlocal2854_acc_bytes = 24;\
	bmlocal2855_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2854_acc_bytes );\
	out_bitoff += bmlocal2855_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2857_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, bmlocal2857_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2857_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_POS_ALIGNED 64

// Alignment of dmPhyPerformance_l1Measurements_MimoStbcPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2858_my_ptr;\
	UINT bmlocal2859_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2858_my_ptr, bmlocal2859_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2858_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2858_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2858_my_ptr, bmlocal2859_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2860_my_ptr;\
	UINT bmlocal2861_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2860_my_ptr, bmlocal2861_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2860_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2860_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2860_my_ptr, bmlocal2861_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoStbcPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinr: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinr: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoStbcPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2862_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET( base_ptr, bmlocal2862_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinr", 32, (UINT)(bmlocal2862_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2863_my_ptr;\
	UINT bmlocal2864_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal2863_my_ptr, bmlocal2864_my_bitoff );\
	(*((UINT32*)bmlocal2863_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2864_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoStbcPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2865_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2865_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2865_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2868_acc_bytes;\
	UINT bmlocal2869_acc_bits;\
	PVOID bmlocal2870_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2870_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2870_parent_out_ptr;\
	bmlocal2868_acc_bytes = 28;\
	bmlocal2869_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2868_acc_bytes );\
	out_bitoff += bmlocal2869_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2871_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2871_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2871_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_POS_ALIGNED 68

// Alignment of dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2872_my_ptr;\
	UINT bmlocal2873_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2872_my_ptr, bmlocal2873_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2872_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2872_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2872_my_ptr, bmlocal2873_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2874_my_ptr;\
	UINT bmlocal2875_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2874_my_ptr, bmlocal2875_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2874_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2874_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2874_my_ptr, bmlocal2875_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2876_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET( base_ptr, bmlocal2876_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinrStd", 32, (UINT)(bmlocal2876_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2877_my_ptr;\
	UINT bmlocal2878_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal2877_my_ptr, bmlocal2878_my_bitoff );\
	(*((UINT32*)bmlocal2877_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2878_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoStbcPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2879_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2879_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2879_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2882_acc_bytes;\
	UINT bmlocal2883_acc_bits;\
	PVOID bmlocal2884_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2884_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2884_parent_out_ptr;\
	bmlocal2882_acc_bytes = 32;\
	bmlocal2883_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2882_acc_bytes );\
	out_bitoff += bmlocal2883_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2885_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, bmlocal2885_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2885_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_POS_ALIGNED 72

// Alignment of dmPhyPerformance_l1Measurements_MimoSmPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2886_my_ptr;\
	UINT bmlocal2887_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2886_my_ptr, bmlocal2887_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2886_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2886_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2886_my_ptr, bmlocal2887_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2888_my_ptr;\
	UINT bmlocal2889_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2888_my_ptr, bmlocal2889_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2888_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2888_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2888_my_ptr, bmlocal2889_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoSmPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinr: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinr: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoSmPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2890_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET( base_ptr, bmlocal2890_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinr", 32, (UINT)(bmlocal2890_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2891_my_ptr;\
	UINT bmlocal2892_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal2891_my_ptr, bmlocal2892_my_bitoff );\
	(*((UINT32*)bmlocal2891_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2892_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoSmPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2893_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal2893_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2893_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2896_acc_bytes;\
	UINT bmlocal2897_acc_bits;\
	PVOID bmlocal2898_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2898_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2898_parent_out_ptr;\
	bmlocal2896_acc_bytes = 36;\
	bmlocal2897_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2896_acc_bytes );\
	out_bitoff += bmlocal2897_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2899_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal2899_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2899_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_POS_ALIGNED 76

// Alignment of dmPhyPerformance_l1Measurements_MimoSmPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2900_my_ptr;\
	UINT bmlocal2901_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2900_my_ptr, bmlocal2901_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2900_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2900_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2900_my_ptr, bmlocal2901_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2902_my_ptr;\
	UINT bmlocal2903_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2902_my_ptr, bmlocal2903_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2902_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2902_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2902_my_ptr, bmlocal2903_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2904_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET( base_ptr, bmlocal2904_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinrStd", 32, (UINT)(bmlocal2904_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2905_my_ptr;\
	UINT bmlocal2906_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal2905_my_ptr, bmlocal2906_my_bitoff );\
	(*((UINT32*)bmlocal2905_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2906_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoSmPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2907_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal2907_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2907_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2910_acc_bytes;\
	UINT bmlocal2911_acc_bits;\
	PVOID bmlocal2912_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2912_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2912_parent_out_ptr;\
	bmlocal2910_acc_bytes = 40;\
	bmlocal2911_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2910_acc_bytes );\
	out_bitoff += bmlocal2911_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2913_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, bmlocal2913_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2913_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_POS_ALIGNED 80

// Alignment of dmPhyPerformance_l1Measurements_MimoStbcECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2914_my_ptr;\
	UINT bmlocal2915_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2914_my_ptr, bmlocal2915_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2914_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2914_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2914_my_ptr, bmlocal2915_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2916_my_ptr;\
	UINT bmlocal2917_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2916_my_ptr, bmlocal2917_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2916_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2916_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2916_my_ptr, bmlocal2917_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoStbcECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcECinr: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcECinr: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoStbcECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoStbcECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2918_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET( base_ptr, bmlocal2918_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcECinr", 32, (UINT)(bmlocal2918_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2919_my_ptr;\
	UINT bmlocal2920_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal2919_my_ptr, bmlocal2920_my_bitoff );\
	(*((UINT32*)bmlocal2919_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2920_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoStbcECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2921_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, bmlocal2921_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2921_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2924_acc_bytes;\
	UINT bmlocal2925_acc_bits;\
	PVOID bmlocal2926_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2926_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2926_parent_out_ptr;\
	bmlocal2924_acc_bytes = 44;\
	bmlocal2925_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2924_acc_bytes );\
	out_bitoff += bmlocal2925_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2927_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, bmlocal2927_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2927_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_POS_ALIGNED 84

// Alignment of dmPhyPerformance_l1Measurements_MimoSmECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2928_my_ptr;\
	UINT bmlocal2929_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2928_my_ptr, bmlocal2929_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2928_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2928_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2928_my_ptr, bmlocal2929_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2930_my_ptr;\
	UINT bmlocal2931_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2930_my_ptr, bmlocal2931_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2930_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2930_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2930_my_ptr, bmlocal2931_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_MimoSmECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_MimoSmECinr: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmECinr: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_MimoSmECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_MimoSmECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal2932_out_val;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET( base_ptr, bmlocal2932_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmECinr", 32, (UINT)(bmlocal2932_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2933_my_ptr;\
	UINT bmlocal2934_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal2933_my_ptr, bmlocal2934_my_bitoff );\
	(*((UINT32*)bmlocal2933_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2934_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_MimoSmECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2935_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, bmlocal2935_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2935_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_MimoSmECinr_BYTES_SIZE 4

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2938_acc_bytes;\
	UINT bmlocal2939_acc_bits;\
	PVOID bmlocal2940_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2940_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2940_parent_out_ptr;\
	bmlocal2938_acc_bytes = 48;\
	bmlocal2939_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2938_acc_bytes );\
	out_bitoff += bmlocal2939_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2941_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, bmlocal2941_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2941_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_POS_ALIGNED 88

// Alignment of dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2942_my_ptr;\
	UINT bmlocal2943_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2942_my_ptr, bmlocal2943_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2942_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2942_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2942_my_ptr, bmlocal2943_my_bitoff, 8, eRF_RX_ANT_MODE, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2944_my_ptr;\
	UINT bmlocal2945_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2944_my_ptr, bmlocal2945_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2944_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2944_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2944_my_ptr, bmlocal2945_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	eRF_RX_ANT_MODE bmlocal2946_out_val;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET( base_ptr, bmlocal2946_out_val );\
	if( bmlocal2946_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_MODE", 1);\
	}\
	if( bmlocal2946_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT0_MODE", 1);\
	}\
	if( bmlocal2946_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT1_MODE", 1);\
	}\
	if( bmlocal2946_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_DISABLED", 1);\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2947_my_ptr;\
	UINT bmlocal2948_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal2947_my_ptr, bmlocal2948_my_bitoff );\
	(*((UINT8*)bmlocal2947_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2948_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_RxAntModeAutoDetect: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2949_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, bmlocal2949_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2949_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_BYTES_SIZE 1

#define BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2952_acc_bytes;\
	UINT bmlocal2953_acc_bits;\
	PVOID bmlocal2954_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2954_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2954_parent_out_ptr;\
	bmlocal2952_acc_bytes = 49;\
	bmlocal2953_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2952_acc_bytes );\
	out_bitoff += bmlocal2953_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2955_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, bmlocal2955_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2955_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_POS_ALIGNED 89

// Alignment of dmPhyPerformance_l1Measurements_Reserved8: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2956_my_ptr;\
	UINT bmlocal2957_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2956_my_ptr, bmlocal2957_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2956_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2956_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2956_my_ptr, bmlocal2957_my_bitoff, 8, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2958_my_ptr;\
	UINT bmlocal2959_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2958_my_ptr, bmlocal2959_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2958_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2958_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2958_my_ptr, bmlocal2959_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// dmPhyPerformance_l1Measurements_Reserved8: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Reserved8: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Reserved8: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Reserved8: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Reserved8: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_Reserved8: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2960_out_val;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET( base_ptr, bmlocal2960_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved8", 8, (UINT)(bmlocal2960_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2961_my_ptr;\
	UINT bmlocal2962_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal2961_my_ptr, bmlocal2962_my_bitoff );\
	(*((UINT8*)bmlocal2961_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2962_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_Reserved8: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_Reserved8_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2963_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, bmlocal2963_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2963_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved8_BYTES_SIZE 1

#define BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2966_acc_bytes;\
	UINT bmlocal2967_acc_bits;\
	PVOID bmlocal2968_parent_out_ptr;\
	BM_dmPhyPerformance_l1Measurements_GET_POS( base_ptr, bmlocal2968_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal2968_parent_out_ptr;\
	bmlocal2966_acc_bytes = 50;\
	bmlocal2967_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2966_acc_bytes );\
	out_bitoff += bmlocal2967_acc_bits;\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2969_tmp_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, bmlocal2969_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2969_tmp_bitoff);\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_POS_ALIGNED 90

// Alignment of dmPhyPerformance_l1Measurements_Reserved16: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_l1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2970_my_ptr;\
	UINT bmlocal2971_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2970_my_ptr, bmlocal2971_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2970_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2970_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2970_my_ptr, bmlocal2971_my_bitoff, 16, UINT32, out_val, 0x00000002 );\
	}\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2972_my_ptr;\
	UINT bmlocal2973_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2972_my_ptr, bmlocal2973_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2972_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2972_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2972_my_ptr, bmlocal2973_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// dmPhyPerformance_l1Measurements_Reserved16: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Reserved16: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_l1Measurements_Reserved16: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Reserved16: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_l1Measurements_Reserved16: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_l1Measurements_Reserved16: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2974_out_val;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET( base_ptr, bmlocal2974_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved16", 16, (UINT)(bmlocal2974_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2975_my_ptr;\
	UINT bmlocal2976_my_bitoff;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal2975_my_ptr, bmlocal2976_my_bitoff );\
	(*((UINT16*)bmlocal2975_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2976_my_bitoff );\
}

// dmPhyPerformance_l1Measurements_Reserved16: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_l1Measurements_Reserved16_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2977_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, bmlocal2977_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2977_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_Reserved16_BYTES_SIZE 2

#define BM_dmPhyPerformance_l1Measurements_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 52;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2980_tmp_bits;\
	BM_dmPhyPerformance_l1Measurements_GET_SIZE( base_ptr, out_bytes, bmlocal2980_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2980_tmp_bits );\
}

#define BM_dmPhyPerformance_l1Measurements_BYTES_SIZE 52

#define BM_dmPhyPerformance_l1Measurements_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "l1Measurements", 1);\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_l1Measurements_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_l1Measurements_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_dmPhyPerformance_cqichCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2983_acc_bytes;\
	UINT bmlocal2984_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2983_acc_bytes = 92;\
	bmlocal2984_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2983_acc_bytes );\
	out_bitoff += bmlocal2984_acc_bits;\
}

#define BM_dmPhyPerformance_cqichCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2985_tmp_bitoff;\
	BM_dmPhyPerformance_cqichCount_GET_POS( base_ptr, out_ptr, bmlocal2985_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2985_tmp_bitoff);\
}

#define BM_dmPhyPerformance_cqichCount_POS_ALIGNED 92

// Alignment of dmPhyPerformance_cqichCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_cqichCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_cqichCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2986_my_ptr;\
	UINT bmlocal2987_my_bitoff;\
	BM_dmPhyPerformance_cqichCount_GET_POS( base_ptr, bmlocal2986_my_ptr, bmlocal2987_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2986_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2986_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2986_my_ptr, bmlocal2987_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_cqichCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2988_my_ptr;\
	UINT bmlocal2989_my_bitoff;\
	BM_dmPhyPerformance_cqichCount_GET_POS( base_ptr, bmlocal2988_my_ptr, bmlocal2989_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2988_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2988_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal2988_my_ptr, bmlocal2989_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_cqichCount: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_cqichCount: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_cqichCount: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_cqichCount: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_cqichCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_cqichCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_cqichCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal2990_out_val;\
	BM_dmPhyPerformance_cqichCount_GET( base_ptr, bmlocal2990_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cqichCount", 32, (UINT)(bmlocal2990_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_cqichCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_cqichCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_cqichCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2991_my_ptr;\
	UINT bmlocal2992_my_bitoff;\
	BM_dmPhyPerformance_cqichCount_GET_POS( base_ptr, bmlocal2991_my_ptr, bmlocal2992_my_bitoff );\
	(*((UINT32*)bmlocal2991_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal2992_my_bitoff );\
}

// dmPhyPerformance_cqichCount: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_cqichCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal2993_tmp_bits;\
	BM_dmPhyPerformance_cqichCount_GET_SIZE( base_ptr, out_bytes, bmlocal2993_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal2993_tmp_bits );\
}

#define BM_dmPhyPerformance_cqichCount_BYTES_SIZE 4

#define BM_dmPhyPerformance_TemperatureInCelsius_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal2996_acc_bytes;\
	UINT bmlocal2997_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal2996_acc_bytes = 96;\
	bmlocal2997_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal2996_acc_bytes );\
	out_bitoff += bmlocal2997_acc_bits;\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal2998_tmp_bitoff;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET_POS( base_ptr, out_ptr, bmlocal2998_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal2998_tmp_bitoff);\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_POS_ALIGNED 96

// Alignment of dmPhyPerformance_TemperatureInCelsius: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_TemperatureInCelsius_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal2999_my_ptr;\
	UINT bmlocal3000_my_bitoff;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET_POS( base_ptr, bmlocal2999_my_ptr, bmlocal3000_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2999_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal2999_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal2999_my_ptr, bmlocal3000_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3001_my_ptr;\
	UINT bmlocal3002_my_bitoff;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET_POS( base_ptr, bmlocal3001_my_ptr, bmlocal3002_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3001_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3001_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3001_my_ptr, bmlocal3002_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// dmPhyPerformance_TemperatureInCelsius: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_TemperatureInCelsius: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_TemperatureInCelsius: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_TemperatureInCelsius: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_TemperatureInCelsius: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_TemperatureInCelsius: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_TemperatureInCelsius_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3003_out_val;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET( base_ptr, bmlocal3003_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TemperatureInCelsius", 16, (UINT)(bmlocal3003_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_TemperatureInCelsius_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3004_my_ptr;\
	UINT bmlocal3005_my_bitoff;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET_POS( base_ptr, bmlocal3004_my_ptr, bmlocal3005_my_bitoff );\
	(*((UINT16*)bmlocal3004_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3005_my_bitoff );\
}

// dmPhyPerformance_TemperatureInCelsius: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_TemperatureInCelsius_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3006_tmp_bits;\
	BM_dmPhyPerformance_TemperatureInCelsius_GET_SIZE( base_ptr, out_bytes, bmlocal3006_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3006_tmp_bits );\
}

#define BM_dmPhyPerformance_TemperatureInCelsius_BYTES_SIZE 2

#define BM_dmPhyPerformance_RxAntMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3009_acc_bytes;\
	UINT bmlocal3010_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal3009_acc_bytes = 98;\
	bmlocal3010_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3009_acc_bytes );\
	out_bitoff += bmlocal3010_acc_bits;\
}

#define BM_dmPhyPerformance_RxAntMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3011_tmp_bitoff;\
	BM_dmPhyPerformance_RxAntMode_GET_POS( base_ptr, out_ptr, bmlocal3011_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3011_tmp_bitoff);\
}

#define BM_dmPhyPerformance_RxAntMode_POS_ALIGNED 98

// Alignment of dmPhyPerformance_RxAntMode: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_RxAntMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_RxAntMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3012_my_ptr;\
	UINT bmlocal3013_my_bitoff;\
	BM_dmPhyPerformance_RxAntMode_GET_POS( base_ptr, bmlocal3012_my_ptr, bmlocal3013_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3012_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3012_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3012_my_ptr, bmlocal3013_my_bitoff, 8, eRF_RX_ANT_MODE, out_val, 0x00000002 );\
	}\
}

#define BM_dmPhyPerformance_RxAntMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3014_my_ptr;\
	UINT bmlocal3015_my_bitoff;\
	BM_dmPhyPerformance_RxAntMode_GET_POS( base_ptr, bmlocal3014_my_ptr, bmlocal3015_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3014_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3014_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3014_my_ptr, bmlocal3015_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// dmPhyPerformance_RxAntMode: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_RxAntMode: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_RxAntMode: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_RxAntMode: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_RxAntMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_RxAntMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_RxAntMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	eRF_RX_ANT_MODE bmlocal3016_out_val;\
	BM_dmPhyPerformance_RxAntMode_GET( base_ptr, bmlocal3016_out_val );\
	if( bmlocal3016_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eBOTH_RX_ANT_MODE", 1);\
	}\
	if( bmlocal3016_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eRX_ANT0_MODE", 1);\
	}\
	if( bmlocal3016_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eRX_ANT1_MODE", 1);\
	}\
	if( bmlocal3016_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eBOTH_RX_ANT_DISABLED", 1);\
	}\
}

#define BM_dmPhyPerformance_RxAntMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_RxAntMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_RxAntMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3017_my_ptr;\
	UINT bmlocal3018_my_bitoff;\
	BM_dmPhyPerformance_RxAntMode_GET_POS( base_ptr, bmlocal3017_my_ptr, bmlocal3018_my_bitoff );\
	(*((UINT8*)bmlocal3017_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3018_my_bitoff );\
}

// dmPhyPerformance_RxAntMode: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_RxAntMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3019_tmp_bits;\
	BM_dmPhyPerformance_RxAntMode_GET_SIZE( base_ptr, out_bytes, bmlocal3019_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3019_tmp_bits );\
}

#define BM_dmPhyPerformance_RxAntMode_BYTES_SIZE 1

#define BM_dmPhyPerformance_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3022_acc_bytes;\
	UINT bmlocal3023_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal3022_acc_bytes = 99;\
	bmlocal3023_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3022_acc_bytes );\
	out_bitoff += bmlocal3023_acc_bits;\
}

#define BM_dmPhyPerformance_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3024_tmp_bitoff;\
	BM_dmPhyPerformance_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal3024_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3024_tmp_bitoff);\
}

#define BM_dmPhyPerformance_Reserved_1_POS_ALIGNED 99

// Alignment of dmPhyPerformance_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_dmPhyPerformance_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3025_my_ptr;\
	UINT bmlocal3026_my_bitoff;\
	BM_dmPhyPerformance_Reserved_1_GET_POS( base_ptr, bmlocal3025_my_ptr, bmlocal3026_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3025_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3025_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3025_my_ptr, bmlocal3026_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_dmPhyPerformance_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3027_my_ptr;\
	UINT bmlocal3028_my_bitoff;\
	BM_dmPhyPerformance_Reserved_1_GET_POS( base_ptr, bmlocal3027_my_ptr, bmlocal3028_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3027_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3027_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3027_my_ptr, bmlocal3028_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// dmPhyPerformance_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// dmPhyPerformance_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// dmPhyPerformance_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// dmPhyPerformance_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_dmPhyPerformance_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3029_out_val;\
	BM_dmPhyPerformance_Reserved_1_GET( base_ptr, bmlocal3029_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal3029_out_val), "%d", 1);\
}

#define BM_dmPhyPerformance_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_dmPhyPerformance_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3030_my_ptr;\
	UINT bmlocal3031_my_bitoff;\
	BM_dmPhyPerformance_Reserved_1_GET_POS( base_ptr, bmlocal3030_my_ptr, bmlocal3031_my_bitoff );\
	(*((UINT8*)bmlocal3030_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3031_my_bitoff );\
}

// dmPhyPerformance_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_dmPhyPerformance_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3032_tmp_bits;\
	BM_dmPhyPerformance_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal3032_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3032_tmp_bits );\
}

#define BM_dmPhyPerformance_Reserved_1_BYTES_SIZE 1

#define BM_dmPhyPerformance_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3035_tmp_bits;\
	BM_dmPhyPerformance_GET_SIZE( base_ptr, out_bytes, bmlocal3035_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3035_tmp_bits );\
}

#define BM_dmPhyPerformance_BYTES_SIZE 100

#define BM_dmPhyPerformance_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "dmPhyPerformance", 1);\
	BM_dmPhyPerformance_MapsStatistics_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_l1Measurements_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_cqichCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_TemperatureInCelsius_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_RxAntMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_dmPhyPerformance_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_dmPhyPerformance_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_dmPhyPerformance_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 L1DM[158];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_dmPhyConfiguration _PhyConfig;
	BMS_dmPhyPerformance _PhyPerf;
	BMS_dmTpc _Tpc;
} BMS_L1DM; //L1 Diagnostics Monitors

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_dmTpc _Tpc;
	BMS_dmPhyPerformance _PhyPerf;
	BMS_dmPhyConfiguration _PhyConfig;
} BMS_L1DM; //L1 Diagnostics Monitors

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L1DM' Type: 'L1DM', Top-level, Non-instance, No bitoff root
#define BM_L1DM_PhyConfig_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L1DM_PhyConfig_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3036_tmp_bitoff;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, out_ptr, bmlocal3036_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3036_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_POS_ALIGNED 0

// COMPOSITE: Full name: 'L1DM_PhyConfig' Type: 'dmPhyConfiguration', Inner, Non-instance, No bitoff root
#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3037_parent_out_ptr;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, bmlocal3037_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3037_parent_out_ptr;\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3038_tmp_bitoff;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS( base_ptr, out_ptr, bmlocal3038_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3038_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_POS_ALIGNED 0

// Alignment of L1DM_PhyConfig_FrequencyOffsetInHz: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3039_my_ptr;\
	UINT bmlocal3040_my_bitoff;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal3039_my_ptr, bmlocal3040_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3039_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3039_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3039_my_ptr, bmlocal3040_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3041_my_ptr;\
	UINT bmlocal3042_my_bitoff;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal3041_my_ptr, bmlocal3042_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3041_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3041_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3041_my_ptr, bmlocal3042_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyConfig_FrequencyOffsetInHz: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_FrequencyOffsetInHz: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_FrequencyOffsetInHz: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_FrequencyOffsetInHz: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_FrequencyOffsetInHz: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyConfig_FrequencyOffsetInHz: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3043_out_val;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET( base_ptr, bmlocal3043_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FrequencyOffsetInHz", 32, (UINT)(bmlocal3043_out_val), "%d", 1);\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3044_my_ptr;\
	UINT bmlocal3045_my_bitoff;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_POS( base_ptr, bmlocal3044_my_ptr, bmlocal3045_my_bitoff );\
	(*((UINT32*)bmlocal3044_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3045_my_bitoff );\
}

// L1DM_PhyConfig_FrequencyOffsetInHz: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3046_tmp_bits;\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_GET_SIZE( base_ptr, out_bytes, bmlocal3046_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3046_tmp_bits );\
}

#define BM_L1DM_PhyConfig_FrequencyOffsetInHz_BYTES_SIZE 4

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3049_acc_bytes;\
	UINT bmlocal3050_acc_bits;\
	PVOID bmlocal3051_parent_out_ptr;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, bmlocal3051_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3051_parent_out_ptr;\
	bmlocal3049_acc_bytes = 4;\
	bmlocal3050_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3049_acc_bytes );\
	out_bitoff += bmlocal3050_acc_bits;\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3052_tmp_bitoff;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS( base_ptr, out_ptr, bmlocal3052_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3052_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_POS_ALIGNED 4

// Alignment of L1DM_PhyConfig_CenterFrequencyInKHz: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3053_my_ptr;\
	UINT bmlocal3054_my_bitoff;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal3053_my_ptr, bmlocal3054_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3053_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3053_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3053_my_ptr, bmlocal3054_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3055_my_ptr;\
	UINT bmlocal3056_my_bitoff;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal3055_my_ptr, bmlocal3056_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3055_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3055_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3055_my_ptr, bmlocal3056_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyConfig_CenterFrequencyInKHz: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_CenterFrequencyInKHz: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_CenterFrequencyInKHz: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_CenterFrequencyInKHz: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_CenterFrequencyInKHz: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyConfig_CenterFrequencyInKHz: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3057_out_val;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET( base_ptr, bmlocal3057_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CenterFrequencyInKHz", 32, (UINT)(bmlocal3057_out_val), "%d", 1);\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3058_my_ptr;\
	UINT bmlocal3059_my_bitoff;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_POS( base_ptr, bmlocal3058_my_ptr, bmlocal3059_my_bitoff );\
	(*((UINT32*)bmlocal3058_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3059_my_bitoff );\
}

// L1DM_PhyConfig_CenterFrequencyInKHz: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3060_tmp_bits;\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_GET_SIZE( base_ptr, out_bytes, bmlocal3060_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3060_tmp_bits );\
}

#define BM_L1DM_PhyConfig_CenterFrequencyInKHz_BYTES_SIZE 4

#define BM_L1DM_PhyConfig_transitionGaps_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3063_acc_bytes;\
	UINT bmlocal3064_acc_bits;\
	PVOID bmlocal3065_parent_out_ptr;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, bmlocal3065_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3065_parent_out_ptr;\
	bmlocal3063_acc_bytes = 8;\
	bmlocal3064_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3063_acc_bytes );\
	out_bitoff += bmlocal3064_acc_bits;\
}

#define BM_L1DM_PhyConfig_transitionGaps_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3066_tmp_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_GET_POS( base_ptr, out_ptr, bmlocal3066_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3066_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_transitionGaps_POS_ALIGNED 8

// COMPOSITE: Full name: 'L1DM_PhyConfig_transitionGaps' Type: 'TransitionGapsComp', Inner, Non-instance, No bitoff root
#define BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3067_parent_out_ptr;\
	BM_L1DM_PhyConfig_transitionGaps_GET_POS( base_ptr, bmlocal3067_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3067_parent_out_ptr;\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3068_tmp_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS( base_ptr, out_ptr, bmlocal3068_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3068_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_POS_ALIGNED 8

// Alignment of L1DM_PhyConfig_transitionGaps_TTG: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyConfig_transitionGaps_TTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3069_my_ptr;\
	UINT bmlocal3070_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS( base_ptr, bmlocal3069_my_ptr, bmlocal3070_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3069_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3069_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal3069_my_ptr, bmlocal3070_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3071_my_ptr;\
	UINT bmlocal3072_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS( base_ptr, bmlocal3071_my_ptr, bmlocal3072_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3071_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3071_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal3071_my_ptr, bmlocal3072_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyConfig_transitionGaps_TTG: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_transitionGaps_TTG: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_transitionGaps_TTG: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_transitionGaps_TTG: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_transitionGaps_TTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyConfig_transitionGaps_TTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyConfig_transitionGaps_TTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal3073_out_val;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET( base_ptr, bmlocal3073_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TTG", 16, (UINT)(bmlocal3073_out_val), "%d", 1);\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_transitionGaps_TTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3074_my_ptr;\
	UINT bmlocal3075_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET_POS( base_ptr, bmlocal3074_my_ptr, bmlocal3075_my_bitoff );\
	(*((UINT16*)bmlocal3074_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3075_my_bitoff );\
}

// L1DM_PhyConfig_transitionGaps_TTG: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyConfig_transitionGaps_TTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3076_tmp_bits;\
	BM_L1DM_PhyConfig_transitionGaps_TTG_GET_SIZE( base_ptr, out_bytes, bmlocal3076_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3076_tmp_bits );\
}

#define BM_L1DM_PhyConfig_transitionGaps_TTG_BYTES_SIZE 2

#define BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3079_acc_bytes;\
	UINT bmlocal3080_acc_bits;\
	PVOID bmlocal3081_parent_out_ptr;\
	BM_L1DM_PhyConfig_transitionGaps_GET_POS( base_ptr, bmlocal3081_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3081_parent_out_ptr;\
	bmlocal3079_acc_bytes = 2;\
	bmlocal3080_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3079_acc_bytes );\
	out_bitoff += bmlocal3080_acc_bits;\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3082_tmp_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS( base_ptr, out_ptr, bmlocal3082_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3082_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_POS_ALIGNED 10

// Alignment of L1DM_PhyConfig_transitionGaps_RTG: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyConfig_transitionGaps_RTG_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3083_my_ptr;\
	UINT bmlocal3084_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS( base_ptr, bmlocal3083_my_ptr, bmlocal3084_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3083_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3083_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal3083_my_ptr, bmlocal3084_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3085_my_ptr;\
	UINT bmlocal3086_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS( base_ptr, bmlocal3085_my_ptr, bmlocal3086_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3085_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS_VOLATILE( BMI_PTR_TO_NUMERIC_CAST(bmlocal3085_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal3085_my_ptr, bmlocal3086_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1DM_PhyConfig_transitionGaps_RTG: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_transitionGaps_RTG: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_transitionGaps_RTG: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_transitionGaps_RTG: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_transitionGaps_RTG: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyConfig_transitionGaps_RTG: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyConfig_transitionGaps_RTG_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal3087_out_val;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET( base_ptr, bmlocal3087_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RTG", 16, (UINT)(bmlocal3087_out_val), "%d", 1);\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_transitionGaps_RTG_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3088_my_ptr;\
	UINT bmlocal3089_my_bitoff;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET_POS( base_ptr, bmlocal3088_my_ptr, bmlocal3089_my_bitoff );\
	(*((UINT16*)bmlocal3088_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3089_my_bitoff );\
}

// L1DM_PhyConfig_transitionGaps_RTG: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyConfig_transitionGaps_RTG_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3090_tmp_bits;\
	BM_L1DM_PhyConfig_transitionGaps_RTG_GET_SIZE( base_ptr, out_bytes, bmlocal3090_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3090_tmp_bits );\
}

#define BM_L1DM_PhyConfig_transitionGaps_RTG_BYTES_SIZE 2

#define BM_L1DM_PhyConfig_transitionGaps_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_transitionGaps_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3093_tmp_bits;\
	BM_L1DM_PhyConfig_transitionGaps_GET_SIZE( base_ptr, out_bytes, bmlocal3093_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3093_tmp_bits );\
}

#define BM_L1DM_PhyConfig_transitionGaps_BYTES_SIZE 4

#define BM_L1DM_PhyConfig_transitionGaps_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "transitionGaps", 1);\
	BM_L1DM_PhyConfig_transitionGaps_TTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyConfig_transitionGaps_RTG_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_transitionGaps_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_transitionGaps_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3096_acc_bytes;\
	UINT bmlocal3097_acc_bits;\
	PVOID bmlocal3098_parent_out_ptr;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, bmlocal3098_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3098_parent_out_ptr;\
	bmlocal3096_acc_bytes = 12;\
	bmlocal3097_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3096_acc_bytes );\
	out_bitoff += bmlocal3097_acc_bits;\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3099_tmp_bitoff;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS( base_ptr, out_ptr, bmlocal3099_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3099_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_POS_ALIGNED 12

// Alignment of L1DM_PhyConfig_RecommendedMIMOMode: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3100_my_ptr;\
	UINT bmlocal3101_my_bitoff;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal3100_my_ptr, bmlocal3101_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3100_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3100_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3100_my_ptr, bmlocal3101_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3102_my_ptr;\
	UINT bmlocal3103_my_bitoff;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal3102_my_ptr, bmlocal3103_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3102_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3102_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3102_my_ptr, bmlocal3103_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyConfig_RecommendedMIMOMode: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_RecommendedMIMOMode: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyConfig_RecommendedMIMOMode: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_RecommendedMIMOMode: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyConfig_RecommendedMIMOMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyConfig_RecommendedMIMOMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyConfig_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3104_out_val;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET( base_ptr, bmlocal3104_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RecommendedMIMOMode", 8, (UINT)(bmlocal3104_out_val), "%d", 1);\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3105_my_ptr;\
	UINT bmlocal3106_my_bitoff;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_POS( base_ptr, bmlocal3105_my_ptr, bmlocal3106_my_bitoff );\
	(*((UINT8*)bmlocal3105_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3106_my_bitoff );\
}

// L1DM_PhyConfig_RecommendedMIMOMode: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3107_tmp_bits;\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_GET_SIZE( base_ptr, out_bytes, bmlocal3107_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3107_tmp_bits );\
}

#define BM_L1DM_PhyConfig_RecommendedMIMOMode_BYTES_SIZE 1

#define BM_L1DM_PhyConfig_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3110_acc_bytes;\
	UINT bmlocal3111_acc_bits;\
	PVOID bmlocal3112_parent_out_ptr;\
	BM_L1DM_PhyConfig_GET_POS( base_ptr, bmlocal3112_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3112_parent_out_ptr;\
	bmlocal3110_acc_bytes = 13;\
	bmlocal3111_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3110_acc_bytes );\
	out_bitoff += bmlocal3111_acc_bits;\
}

#define BM_L1DM_PhyConfig_r2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3113_tmp_bitoff;\
	BM_L1DM_PhyConfig_r2_GET_POS( base_ptr, out_ptr, bmlocal3113_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3113_tmp_bitoff);\
}

#define BM_L1DM_PhyConfig_r2_POS_ALIGNED 13

#define BM_L1DM_PhyConfig_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_PhyConfig_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 16;\
	out_bits = 0;\
	BMI_NORMALIZE_BITSIZE(out_bytes, out_bits);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3116_tmp_bits;\
	BM_L1DM_PhyConfig_GET_SIZE( base_ptr, out_bytes, bmlocal3116_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3116_tmp_bits );\
}

#define BM_L1DM_PhyConfig_BYTES_SIZE 16

#define BM_L1DM_PhyConfig_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PhyConfig", 1);\
	BM_L1DM_PhyConfig_FrequencyOffsetInHz_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyConfig_CenterFrequencyInKHz_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyConfig_transitionGaps_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyConfig_RecommendedMIMOMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyConfig_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyConfig_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyConfig_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_PhyPerf_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3119_acc_bytes;\
	UINT bmlocal3120_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal3119_acc_bytes = 16;\
	bmlocal3120_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3119_acc_bytes );\
	out_bitoff += bmlocal3120_acc_bits;\
}

#define BM_L1DM_PhyPerf_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3121_tmp_bitoff;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, out_ptr, bmlocal3121_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3121_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_POS_ALIGNED 16

// COMPOSITE: Full name: 'L1DM_PhyPerf' Type: 'dmPhyPerformance', Inner, Non-instance, No bitoff root
#define BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3122_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3122_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3122_parent_out_ptr;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3123_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, out_ptr, bmlocal3123_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3123_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_POS_ALIGNED 16

// COMPOSITE: Full name: 'L1DM_PhyPerf_MapsStatistics' Type: 'MapsStatistics', Inner, Non-instance, No bitoff root
#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3124_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3124_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3124_parent_out_ptr;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3125_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal3125_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3125_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_POS_ALIGNED 16

// Alignment of L1DM_PhyPerf_MapsStatistics_FchRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3126_my_ptr;\
	UINT bmlocal3127_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal3126_my_ptr, bmlocal3127_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3126_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3126_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3126_my_ptr, bmlocal3127_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3128_my_ptr;\
	UINT bmlocal3129_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal3128_my_ptr, bmlocal3129_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3128_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3128_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3128_my_ptr, bmlocal3129_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3130_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET( base_ptr, bmlocal3130_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchRecievedOK", 32, (UINT)(bmlocal3130_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3131_my_ptr;\
	UINT bmlocal3132_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_POS( base_ptr, bmlocal3131_my_ptr, bmlocal3132_my_bitoff );\
	(*((UINT32*)bmlocal3131_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3132_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_FchRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3133_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal3133_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3133_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3136_acc_bytes;\
	UINT bmlocal3137_acc_bits;\
	PVOID bmlocal3138_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3138_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3138_parent_out_ptr;\
	bmlocal3136_acc_bytes = 4;\
	bmlocal3137_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3136_acc_bytes );\
	out_bitoff += bmlocal3137_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3139_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS( base_ptr, out_ptr, bmlocal3139_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3139_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_POS_ALIGNED 20

// Alignment of L1DM_PhyPerf_MapsStatistics_FchFailures: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3140_my_ptr;\
	UINT bmlocal3141_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal3140_my_ptr, bmlocal3141_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3140_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3140_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3140_my_ptr, bmlocal3141_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3142_my_ptr;\
	UINT bmlocal3143_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal3142_my_ptr, bmlocal3143_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3142_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3142_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3142_my_ptr, bmlocal3143_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_FchFailures: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_FchFailures: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_FchFailures: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_FchFailures: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_FchFailures: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_FchFailures: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3144_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET( base_ptr, bmlocal3144_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "FchFailures", 32, (UINT)(bmlocal3144_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3145_my_ptr;\
	UINT bmlocal3146_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_POS( base_ptr, bmlocal3145_my_ptr, bmlocal3146_my_bitoff );\
	(*((UINT32*)bmlocal3145_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3146_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_FchFailures: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3147_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_GET_SIZE( base_ptr, out_bytes, bmlocal3147_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3147_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_FchFailures_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3150_acc_bytes;\
	UINT bmlocal3151_acc_bits;\
	PVOID bmlocal3152_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3152_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3152_parent_out_ptr;\
	bmlocal3150_acc_bytes = 8;\
	bmlocal3151_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3150_acc_bytes );\
	out_bitoff += bmlocal3151_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3153_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal3153_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3153_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_POS_ALIGNED 24

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3154_my_ptr;\
	UINT bmlocal3155_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal3154_my_ptr, bmlocal3155_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3154_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3154_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3154_my_ptr, bmlocal3155_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3156_my_ptr;\
	UINT bmlocal3157_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal3156_my_ptr, bmlocal3157_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3156_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3156_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3156_my_ptr, bmlocal3157_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3158_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET( base_ptr, bmlocal3158_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapRecievedOK", 32, (UINT)(bmlocal3158_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3159_my_ptr;\
	UINT bmlocal3160_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_POS( base_ptr, bmlocal3159_my_ptr, bmlocal3160_my_bitoff );\
	(*((UINT32*)bmlocal3159_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3160_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3161_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal3161_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3161_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3164_acc_bytes;\
	UINT bmlocal3165_acc_bits;\
	PVOID bmlocal3166_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3166_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3166_parent_out_ptr;\
	bmlocal3164_acc_bytes = 12;\
	bmlocal3165_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3164_acc_bytes );\
	out_bitoff += bmlocal3165_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3167_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal3167_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3167_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_POS_ALIGNED 28

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3168_my_ptr;\
	UINT bmlocal3169_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal3168_my_ptr, bmlocal3169_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3168_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3168_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3168_my_ptr, bmlocal3169_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3170_my_ptr;\
	UINT bmlocal3171_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal3170_my_ptr, bmlocal3171_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3170_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3170_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3170_my_ptr, bmlocal3171_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3172_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET( base_ptr, bmlocal3172_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapHcsError", 32, (UINT)(bmlocal3172_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3173_my_ptr;\
	UINT bmlocal3174_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_POS( base_ptr, bmlocal3173_my_ptr, bmlocal3174_my_bitoff );\
	(*((UINT32*)bmlocal3173_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3174_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3175_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal3175_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3175_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3178_acc_bytes;\
	UINT bmlocal3179_acc_bits;\
	PVOID bmlocal3180_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3180_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3180_parent_out_ptr;\
	bmlocal3178_acc_bytes = 16;\
	bmlocal3179_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3178_acc_bytes );\
	out_bitoff += bmlocal3179_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3181_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal3181_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3181_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_POS_ALIGNED 32

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3182_my_ptr;\
	UINT bmlocal3183_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal3182_my_ptr, bmlocal3183_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3182_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3182_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3182_my_ptr, bmlocal3183_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3184_my_ptr;\
	UINT bmlocal3185_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal3184_my_ptr, bmlocal3185_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3184_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3184_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3184_my_ptr, bmlocal3185_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3186_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET( base_ptr, bmlocal3186_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalDlMapCrcError", 32, (UINT)(bmlocal3186_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3187_my_ptr;\
	UINT bmlocal3188_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_POS( base_ptr, bmlocal3187_my_ptr, bmlocal3188_my_bitoff );\
	(*((UINT32*)bmlocal3187_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3188_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3189_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal3189_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3189_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3192_acc_bytes;\
	UINT bmlocal3193_acc_bits;\
	PVOID bmlocal3194_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3194_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3194_parent_out_ptr;\
	bmlocal3192_acc_bytes = 20;\
	bmlocal3193_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3192_acc_bytes );\
	out_bitoff += bmlocal3193_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3195_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal3195_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3195_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_POS_ALIGNED 36

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3196_my_ptr;\
	UINT bmlocal3197_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal3196_my_ptr, bmlocal3197_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3196_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3196_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3196_my_ptr, bmlocal3197_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3198_my_ptr;\
	UINT bmlocal3199_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal3198_my_ptr, bmlocal3199_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3198_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3198_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3198_my_ptr, bmlocal3199_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3200_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET( base_ptr, bmlocal3200_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapRecievedOK", 32, (UINT)(bmlocal3200_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3201_my_ptr;\
	UINT bmlocal3202_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_POS( base_ptr, bmlocal3201_my_ptr, bmlocal3202_my_bitoff );\
	(*((UINT32*)bmlocal3201_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3202_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3203_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal3203_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3203_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3206_acc_bytes;\
	UINT bmlocal3207_acc_bits;\
	PVOID bmlocal3208_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3208_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3208_parent_out_ptr;\
	bmlocal3206_acc_bytes = 24;\
	bmlocal3207_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3206_acc_bytes );\
	out_bitoff += bmlocal3207_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3209_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, out_ptr, bmlocal3209_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3209_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_POS_ALIGNED 40

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3210_my_ptr;\
	UINT bmlocal3211_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal3210_my_ptr, bmlocal3211_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3210_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3210_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3210_my_ptr, bmlocal3211_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3212_my_ptr;\
	UINT bmlocal3213_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal3212_my_ptr, bmlocal3213_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3212_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3212_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3212_my_ptr, bmlocal3213_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3214_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET( base_ptr, bmlocal3214_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapHcsError", 32, (UINT)(bmlocal3214_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3215_my_ptr;\
	UINT bmlocal3216_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_POS( base_ptr, bmlocal3215_my_ptr, bmlocal3216_my_bitoff );\
	(*((UINT32*)bmlocal3215_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3216_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3217_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_GET_SIZE( base_ptr, out_bytes, bmlocal3217_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3217_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3220_acc_bytes;\
	UINT bmlocal3221_acc_bits;\
	PVOID bmlocal3222_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3222_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3222_parent_out_ptr;\
	bmlocal3220_acc_bytes = 28;\
	bmlocal3221_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3220_acc_bytes );\
	out_bitoff += bmlocal3221_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3223_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal3223_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3223_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_POS_ALIGNED 44

// Alignment of L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3224_my_ptr;\
	UINT bmlocal3225_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal3224_my_ptr, bmlocal3225_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3224_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3224_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3224_my_ptr, bmlocal3225_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3226_my_ptr;\
	UINT bmlocal3227_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal3226_my_ptr, bmlocal3227_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3226_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3226_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3226_my_ptr, bmlocal3227_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3228_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET( base_ptr, bmlocal3228_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NormalUlMapCrcError", 32, (UINT)(bmlocal3228_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3229_my_ptr;\
	UINT bmlocal3230_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_POS( base_ptr, bmlocal3229_my_ptr, bmlocal3230_my_bitoff );\
	(*((UINT32*)bmlocal3229_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3230_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3231_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal3231_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3231_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3234_acc_bytes;\
	UINT bmlocal3235_acc_bits;\
	PVOID bmlocal3236_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3236_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3236_parent_out_ptr;\
	bmlocal3234_acc_bytes = 32;\
	bmlocal3235_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3234_acc_bytes );\
	out_bitoff += bmlocal3235_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3237_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, out_ptr, bmlocal3237_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3237_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_POS_ALIGNED 48

// Alignment of L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3238_my_ptr;\
	UINT bmlocal3239_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal3238_my_ptr, bmlocal3239_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3238_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3238_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3238_my_ptr, bmlocal3239_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3240_my_ptr;\
	UINT bmlocal3241_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal3240_my_ptr, bmlocal3241_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3240_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3240_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3240_my_ptr, bmlocal3241_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3242_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET( base_ptr, bmlocal3242_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapRecievedOK", 32, (UINT)(bmlocal3242_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3243_my_ptr;\
	UINT bmlocal3244_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_POS( base_ptr, bmlocal3243_my_ptr, bmlocal3244_my_bitoff );\
	(*((UINT32*)bmlocal3243_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3244_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3245_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_GET_SIZE( base_ptr, out_bytes, bmlocal3245_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3245_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3248_acc_bytes;\
	UINT bmlocal3249_acc_bits;\
	PVOID bmlocal3250_parent_out_ptr;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_POS( base_ptr, bmlocal3250_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3250_parent_out_ptr;\
	bmlocal3248_acc_bytes = 36;\
	bmlocal3249_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3248_acc_bytes );\
	out_bitoff += bmlocal3249_acc_bits;\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3251_tmp_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, out_ptr, bmlocal3251_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3251_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_POS_ALIGNED 52

// Alignment of L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3252_my_ptr;\
	UINT bmlocal3253_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal3252_my_ptr, bmlocal3253_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3252_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3252_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3252_my_ptr, bmlocal3253_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3254_my_ptr;\
	UINT bmlocal3255_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal3254_my_ptr, bmlocal3255_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3254_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3254_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3254_my_ptr, bmlocal3255_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3256_out_val;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET( base_ptr, bmlocal3256_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CompressedMapCrcError", 32, (UINT)(bmlocal3256_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3257_my_ptr;\
	UINT bmlocal3258_my_bitoff;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_POS( base_ptr, bmlocal3257_my_ptr, bmlocal3258_my_bitoff );\
	(*((UINT32*)bmlocal3257_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3258_my_bitoff );\
}

// L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3259_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_GET_SIZE( base_ptr, out_bytes, bmlocal3259_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3259_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_MapsStatistics_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 40;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3262_tmp_bits;\
	BM_L1DM_PhyPerf_MapsStatistics_GET_SIZE( base_ptr, out_bytes, bmlocal3262_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3262_tmp_bits );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_BYTES_SIZE 40

#define BM_L1DM_PhyPerf_MapsStatistics_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MapsStatistics", 1);\
	BM_L1DM_PhyPerf_MapsStatistics_FchRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_FchFailures_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalDlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapHcsError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_NormalUlMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapRecievedOK_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_MapsStatistics_CompressedMapCrcError_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_MapsStatistics_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_MapsStatistics_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3265_acc_bytes;\
	UINT bmlocal3266_acc_bits;\
	PVOID bmlocal3267_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3267_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3267_parent_out_ptr;\
	bmlocal3265_acc_bytes = 40;\
	bmlocal3266_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3265_acc_bytes );\
	out_bitoff += bmlocal3266_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3268_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, out_ptr, bmlocal3268_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3268_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_POS_ALIGNED 56

// COMPOSITE: Full name: 'L1DM_PhyPerf_l1Measurements' Type: 'L1Measurements', Inner, Non-instance, No bitoff root
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3269_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3269_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3269_parent_out_ptr;\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3270_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS( base_ptr, out_ptr, bmlocal3270_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3270_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_POS_ALIGNED 56

// Alignment of L1DM_PhyPerf_l1Measurements_PreamblePCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3271_my_ptr;\
	UINT bmlocal3272_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal3271_my_ptr, bmlocal3272_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3271_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3271_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3271_my_ptr, bmlocal3272_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3273_my_ptr;\
	UINT bmlocal3274_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal3273_my_ptr, bmlocal3274_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3273_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3273_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3273_my_ptr, bmlocal3274_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_PreamblePCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3275_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET( base_ptr, bmlocal3275_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinr", 32, (UINT)(bmlocal3275_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3276_my_ptr;\
	UINT bmlocal3277_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_POS( base_ptr, bmlocal3276_my_ptr, bmlocal3277_my_bitoff );\
	(*((UINT32*)bmlocal3276_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3277_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3278_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_GET_SIZE( base_ptr, out_bytes, bmlocal3278_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3278_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3281_acc_bytes;\
	UINT bmlocal3282_acc_bits;\
	PVOID bmlocal3283_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3283_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3283_parent_out_ptr;\
	bmlocal3281_acc_bytes = 4;\
	bmlocal3282_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3281_acc_bytes );\
	out_bitoff += bmlocal3282_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3284_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, out_ptr, bmlocal3284_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3284_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_POS_ALIGNED 60

// Alignment of L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3285_my_ptr;\
	UINT bmlocal3286_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal3285_my_ptr, bmlocal3286_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3285_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3285_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3285_my_ptr, bmlocal3286_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3287_my_ptr;\
	UINT bmlocal3288_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal3287_my_ptr, bmlocal3288_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3287_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3287_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3287_my_ptr, bmlocal3288_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3289_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET( base_ptr, bmlocal3289_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt0", 32, (UINT)(bmlocal3289_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3290_my_ptr;\
	UINT bmlocal3291_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_POS( base_ptr, bmlocal3290_my_ptr, bmlocal3291_my_bitoff );\
	(*((UINT32*)bmlocal3290_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3291_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3292_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_GET_SIZE( base_ptr, out_bytes, bmlocal3292_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3292_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3295_acc_bytes;\
	UINT bmlocal3296_acc_bits;\
	PVOID bmlocal3297_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3297_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3297_parent_out_ptr;\
	bmlocal3295_acc_bytes = 8;\
	bmlocal3296_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3295_acc_bytes );\
	out_bitoff += bmlocal3296_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3298_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, out_ptr, bmlocal3298_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3298_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_POS_ALIGNED 64

// Alignment of L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3299_my_ptr;\
	UINT bmlocal3300_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal3299_my_ptr, bmlocal3300_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3299_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3299_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3299_my_ptr, bmlocal3300_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3301_my_ptr;\
	UINT bmlocal3302_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal3301_my_ptr, bmlocal3302_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3301_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3301_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3301_my_ptr, bmlocal3302_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3303_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET( base_ptr, bmlocal3303_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrAnt1", 32, (UINT)(bmlocal3303_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3304_my_ptr;\
	UINT bmlocal3305_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_POS( base_ptr, bmlocal3304_my_ptr, bmlocal3305_my_bitoff );\
	(*((UINT32*)bmlocal3304_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3305_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3306_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_GET_SIZE( base_ptr, out_bytes, bmlocal3306_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3306_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3309_acc_bytes;\
	UINT bmlocal3310_acc_bits;\
	PVOID bmlocal3311_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3311_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3311_parent_out_ptr;\
	bmlocal3309_acc_bytes = 12;\
	bmlocal3310_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3309_acc_bytes );\
	out_bitoff += bmlocal3310_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3312_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, out_ptr, bmlocal3312_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3312_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_POS_ALIGNED 68

// Alignment of L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3313_my_ptr;\
	UINT bmlocal3314_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal3313_my_ptr, bmlocal3314_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3313_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3313_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3313_my_ptr, bmlocal3314_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3315_my_ptr;\
	UINT bmlocal3316_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal3315_my_ptr, bmlocal3316_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3315_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3315_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3315_my_ptr, bmlocal3316_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3317_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET( base_ptr, bmlocal3317_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PreamblePCinrStd", 32, (UINT)(bmlocal3317_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3318_my_ptr;\
	UINT bmlocal3319_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_POS( base_ptr, bmlocal3318_my_ptr, bmlocal3319_my_bitoff );\
	(*((UINT32*)bmlocal3318_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3319_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_PreamblePCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3320_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal3320_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3320_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3323_acc_bytes;\
	UINT bmlocal3324_acc_bits;\
	PVOID bmlocal3325_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3325_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3325_parent_out_ptr;\
	bmlocal3323_acc_bytes = 16;\
	bmlocal3324_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3323_acc_bytes );\
	out_bitoff += bmlocal3324_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3326_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS( base_ptr, out_ptr, bmlocal3326_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3326_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_POS_ALIGNED 72

// Alignment of L1DM_PhyPerf_l1Measurements_Rssi: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3327_my_ptr;\
	UINT bmlocal3328_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal3327_my_ptr, bmlocal3328_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3327_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3327_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3327_my_ptr, bmlocal3328_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3329_my_ptr;\
	UINT bmlocal3330_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal3329_my_ptr, bmlocal3330_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3329_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3329_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3329_my_ptr, bmlocal3330_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_Rssi: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Rssi: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Rssi: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Rssi: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Rssi: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_Rssi: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3331_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET( base_ptr, bmlocal3331_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Rssi", 32, (UINT)(bmlocal3331_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3332_my_ptr;\
	UINT bmlocal3333_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_POS( base_ptr, bmlocal3332_my_ptr, bmlocal3333_my_bitoff );\
	(*((UINT32*)bmlocal3332_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3333_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_Rssi: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3334_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_GET_SIZE( base_ptr, out_bytes, bmlocal3334_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3334_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Rssi_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3337_acc_bytes;\
	UINT bmlocal3338_acc_bits;\
	PVOID bmlocal3339_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3339_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3339_parent_out_ptr;\
	bmlocal3337_acc_bytes = 20;\
	bmlocal3338_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3337_acc_bytes );\
	out_bitoff += bmlocal3338_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3340_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS( base_ptr, out_ptr, bmlocal3340_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3340_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_POS_ALIGNED 76

// Alignment of L1DM_PhyPerf_l1Measurements_RssiStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3341_my_ptr;\
	UINT bmlocal3342_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal3341_my_ptr, bmlocal3342_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3341_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3341_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3341_my_ptr, bmlocal3342_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3343_my_ptr;\
	UINT bmlocal3344_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal3343_my_ptr, bmlocal3344_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3343_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3343_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3343_my_ptr, bmlocal3344_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_RssiStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_RssiStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_RssiStd: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_RssiStd: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_RssiStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_RssiStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3345_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET( base_ptr, bmlocal3345_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "RssiStd", 32, (UINT)(bmlocal3345_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3346_my_ptr;\
	UINT bmlocal3347_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_POS( base_ptr, bmlocal3346_my_ptr, bmlocal3347_my_bitoff );\
	(*((UINT32*)bmlocal3346_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3347_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_RssiStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3348_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_GET_SIZE( base_ptr, out_bytes, bmlocal3348_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3348_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RssiStd_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3351_acc_bytes;\
	UINT bmlocal3352_acc_bits;\
	PVOID bmlocal3353_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3353_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3353_parent_out_ptr;\
	bmlocal3351_acc_bytes = 24;\
	bmlocal3352_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3351_acc_bytes );\
	out_bitoff += bmlocal3352_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3354_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, out_ptr, bmlocal3354_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3354_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_POS_ALIGNED 80

// Alignment of L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3355_my_ptr;\
	UINT bmlocal3356_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal3355_my_ptr, bmlocal3356_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3355_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3355_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3355_my_ptr, bmlocal3356_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3357_my_ptr;\
	UINT bmlocal3358_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal3357_my_ptr, bmlocal3358_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3357_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3357_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3357_my_ptr, bmlocal3358_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3359_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET( base_ptr, bmlocal3359_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinr", 32, (UINT)(bmlocal3359_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3360_my_ptr;\
	UINT bmlocal3361_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_POS( base_ptr, bmlocal3360_my_ptr, bmlocal3361_my_bitoff );\
	(*((UINT32*)bmlocal3360_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3361_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3362_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal3362_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3362_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3365_acc_bytes;\
	UINT bmlocal3366_acc_bits;\
	PVOID bmlocal3367_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3367_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3367_parent_out_ptr;\
	bmlocal3365_acc_bytes = 28;\
	bmlocal3366_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3365_acc_bytes );\
	out_bitoff += bmlocal3366_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3368_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal3368_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3368_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_POS_ALIGNED 84

// Alignment of L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3369_my_ptr;\
	UINT bmlocal3370_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal3369_my_ptr, bmlocal3370_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3369_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3369_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3369_my_ptr, bmlocal3370_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3371_my_ptr;\
	UINT bmlocal3372_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal3371_my_ptr, bmlocal3372_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3371_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3371_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3371_my_ptr, bmlocal3372_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3373_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET( base_ptr, bmlocal3373_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcPCinrStd", 32, (UINT)(bmlocal3373_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3374_my_ptr;\
	UINT bmlocal3375_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_POS( base_ptr, bmlocal3374_my_ptr, bmlocal3375_my_bitoff );\
	(*((UINT32*)bmlocal3374_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3375_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3376_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal3376_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3376_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3379_acc_bytes;\
	UINT bmlocal3380_acc_bits;\
	PVOID bmlocal3381_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3381_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3381_parent_out_ptr;\
	bmlocal3379_acc_bytes = 32;\
	bmlocal3380_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3379_acc_bytes );\
	out_bitoff += bmlocal3380_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3382_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, out_ptr, bmlocal3382_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3382_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_POS_ALIGNED 88

// Alignment of L1DM_PhyPerf_l1Measurements_MimoSmPCinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3383_my_ptr;\
	UINT bmlocal3384_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal3383_my_ptr, bmlocal3384_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3383_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3383_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3383_my_ptr, bmlocal3384_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3385_my_ptr;\
	UINT bmlocal3386_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal3385_my_ptr, bmlocal3386_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3385_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3385_my_ptr, bmlocal3386_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3387_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET( base_ptr, bmlocal3387_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinr", 32, (UINT)(bmlocal3387_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3388_my_ptr;\
	UINT bmlocal3389_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_POS( base_ptr, bmlocal3388_my_ptr, bmlocal3389_my_bitoff );\
	(*((UINT32*)bmlocal3388_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3389_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoSmPCinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3390_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_GET_SIZE( base_ptr, out_bytes, bmlocal3390_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3390_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3393_acc_bytes;\
	UINT bmlocal3394_acc_bits;\
	PVOID bmlocal3395_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3395_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3395_parent_out_ptr;\
	bmlocal3393_acc_bytes = 36;\
	bmlocal3394_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3393_acc_bytes );\
	out_bitoff += bmlocal3394_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3396_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, out_ptr, bmlocal3396_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3396_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_POS_ALIGNED 92

// Alignment of L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3397_my_ptr;\
	UINT bmlocal3398_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal3397_my_ptr, bmlocal3398_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3397_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3397_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3397_my_ptr, bmlocal3398_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3399_my_ptr;\
	UINT bmlocal3400_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal3399_my_ptr, bmlocal3400_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3399_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3399_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3399_my_ptr, bmlocal3400_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3401_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET( base_ptr, bmlocal3401_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmPCinrStd", 32, (UINT)(bmlocal3401_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3402_my_ptr;\
	UINT bmlocal3403_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_POS( base_ptr, bmlocal3402_my_ptr, bmlocal3403_my_bitoff );\
	(*((UINT32*)bmlocal3402_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3403_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3404_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_GET_SIZE( base_ptr, out_bytes, bmlocal3404_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3404_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3407_acc_bytes;\
	UINT bmlocal3408_acc_bits;\
	PVOID bmlocal3409_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3409_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3409_parent_out_ptr;\
	bmlocal3407_acc_bytes = 40;\
	bmlocal3408_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3407_acc_bytes );\
	out_bitoff += bmlocal3408_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3410_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, out_ptr, bmlocal3410_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3410_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_POS_ALIGNED 96

// Alignment of L1DM_PhyPerf_l1Measurements_MimoStbcECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3411_my_ptr;\
	UINT bmlocal3412_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal3411_my_ptr, bmlocal3412_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3411_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3411_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3411_my_ptr, bmlocal3412_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3413_my_ptr;\
	UINT bmlocal3414_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal3413_my_ptr, bmlocal3414_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3413_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3413_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3413_my_ptr, bmlocal3414_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3415_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET( base_ptr, bmlocal3415_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoStbcECinr", 32, (UINT)(bmlocal3415_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3416_my_ptr;\
	UINT bmlocal3417_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_POS( base_ptr, bmlocal3416_my_ptr, bmlocal3417_my_bitoff );\
	(*((UINT32*)bmlocal3416_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3417_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoStbcECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3418_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_GET_SIZE( base_ptr, out_bytes, bmlocal3418_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3418_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3421_acc_bytes;\
	UINT bmlocal3422_acc_bits;\
	PVOID bmlocal3423_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3423_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3423_parent_out_ptr;\
	bmlocal3421_acc_bytes = 44;\
	bmlocal3422_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3421_acc_bytes );\
	out_bitoff += bmlocal3422_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3424_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS( base_ptr, out_ptr, bmlocal3424_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3424_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_POS_ALIGNED 100

// Alignment of L1DM_PhyPerf_l1Measurements_MimoSmECinr: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3425_my_ptr;\
	UINT bmlocal3426_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal3425_my_ptr, bmlocal3426_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3425_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3425_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3425_my_ptr, bmlocal3426_my_bitoff, 32, INT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3427_my_ptr;\
	UINT bmlocal3428_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal3427_my_ptr, bmlocal3428_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3427_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3427_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3427_my_ptr, bmlocal3428_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_MimoSmECinr: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmECinr: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmECinr: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmECinr: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_MimoSmECinr: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_MimoSmECinr: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT32 bmlocal3429_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET( base_ptr, bmlocal3429_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "MimoSmECinr", 32, (UINT)(bmlocal3429_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3430_my_ptr;\
	UINT bmlocal3431_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_POS( base_ptr, bmlocal3430_my_ptr, bmlocal3431_my_bitoff );\
	(*((UINT32*)bmlocal3430_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3431_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_MimoSmECinr: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3432_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_GET_SIZE( base_ptr, out_bytes, bmlocal3432_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3432_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3435_acc_bytes;\
	UINT bmlocal3436_acc_bits;\
	PVOID bmlocal3437_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3437_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3437_parent_out_ptr;\
	bmlocal3435_acc_bytes = 48;\
	bmlocal3436_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3435_acc_bytes );\
	out_bitoff += bmlocal3436_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3438_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, out_ptr, bmlocal3438_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3438_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_POS_ALIGNED 104

// Alignment of L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3439_my_ptr;\
	UINT bmlocal3440_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal3439_my_ptr, bmlocal3440_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3439_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3439_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3439_my_ptr, bmlocal3440_my_bitoff, 8, eRF_RX_ANT_MODE, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3441_my_ptr;\
	UINT bmlocal3442_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal3441_my_ptr, bmlocal3442_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3441_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3441_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3441_my_ptr, bmlocal3442_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	eRF_RX_ANT_MODE bmlocal3443_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET( base_ptr, bmlocal3443_out_val );\
	if( bmlocal3443_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_MODE", 1);\
	}\
	if( bmlocal3443_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT0_MODE", 1);\
	}\
	if( bmlocal3443_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eRX_ANT1_MODE", 1);\
	}\
	if( bmlocal3443_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntModeAutoDetect", "eBOTH_RX_ANT_DISABLED", 1);\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3444_my_ptr;\
	UINT bmlocal3445_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_POS( base_ptr, bmlocal3444_my_ptr, bmlocal3445_my_bitoff );\
	(*((UINT8*)bmlocal3444_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3445_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3446_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_GET_SIZE( base_ptr, out_bytes, bmlocal3446_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3446_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_BYTES_SIZE 1

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3449_acc_bytes;\
	UINT bmlocal3450_acc_bits;\
	PVOID bmlocal3451_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3451_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3451_parent_out_ptr;\
	bmlocal3449_acc_bytes = 49;\
	bmlocal3450_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3449_acc_bytes );\
	out_bitoff += bmlocal3450_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3452_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS( base_ptr, out_ptr, bmlocal3452_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3452_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_POS_ALIGNED 105

// Alignment of L1DM_PhyPerf_l1Measurements_Reserved8: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3453_my_ptr;\
	UINT bmlocal3454_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal3453_my_ptr, bmlocal3454_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3453_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3453_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3453_my_ptr, bmlocal3454_my_bitoff, 8, UINT32, out_val, 0x00000001 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3455_my_ptr;\
	UINT bmlocal3456_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal3455_my_ptr, bmlocal3456_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3455_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3455_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3455_my_ptr, bmlocal3456_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_Reserved8: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved8: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved8: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved8: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved8: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_Reserved8: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3457_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET( base_ptr, bmlocal3457_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved8", 8, (UINT)(bmlocal3457_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3458_my_ptr;\
	UINT bmlocal3459_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_POS( base_ptr, bmlocal3458_my_ptr, bmlocal3459_my_bitoff );\
	(*((UINT8*)bmlocal3458_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3459_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_Reserved8: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3460_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_GET_SIZE( base_ptr, out_bytes, bmlocal3460_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3460_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved8_BYTES_SIZE 1

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3463_acc_bytes;\
	UINT bmlocal3464_acc_bits;\
	PVOID bmlocal3465_parent_out_ptr;\
	BM_L1DM_PhyPerf_l1Measurements_GET_POS( base_ptr, bmlocal3465_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3465_parent_out_ptr;\
	bmlocal3463_acc_bytes = 50;\
	bmlocal3464_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3463_acc_bytes );\
	out_bitoff += bmlocal3464_acc_bits;\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3466_tmp_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS( base_ptr, out_ptr, bmlocal3466_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3466_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_POS_ALIGNED 106

// Alignment of L1DM_PhyPerf_l1Measurements_Reserved16: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3467_my_ptr;\
	UINT bmlocal3468_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal3467_my_ptr, bmlocal3468_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3467_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3467_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3467_my_ptr, bmlocal3468_my_bitoff, 16, UINT32, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3469_my_ptr;\
	UINT bmlocal3470_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal3469_my_ptr, bmlocal3470_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3469_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3469_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3469_my_ptr, bmlocal3470_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1DM_PhyPerf_l1Measurements_Reserved16: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved16: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved16: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved16: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_l1Measurements_Reserved16: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_l1Measurements_Reserved16: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3471_out_val;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET( base_ptr, bmlocal3471_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved16", 16, (UINT)(bmlocal3471_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3472_my_ptr;\
	UINT bmlocal3473_my_bitoff;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_POS( base_ptr, bmlocal3472_my_ptr, bmlocal3473_my_bitoff );\
	(*((UINT16*)bmlocal3472_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3473_my_bitoff );\
}

// L1DM_PhyPerf_l1Measurements_Reserved16: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3474_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_GET_SIZE( base_ptr, out_bytes, bmlocal3474_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3474_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_Reserved16_BYTES_SIZE 2

#define BM_L1DM_PhyPerf_l1Measurements_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 52;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3477_tmp_bits;\
	BM_L1DM_PhyPerf_l1Measurements_GET_SIZE( base_ptr, out_bytes, bmlocal3477_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3477_tmp_bits );\
}

#define BM_L1DM_PhyPerf_l1Measurements_BYTES_SIZE 52

#define BM_L1DM_PhyPerf_l1Measurements_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "l1Measurements", 1);\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt0_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrAnt1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_PreamblePCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_Rssi_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_RssiStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmPCinrStd_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoStbcECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_MimoSmECinr_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_RxAntModeAutoDetect_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_Reserved8_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_Reserved16_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_l1Measurements_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_l1Measurements_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_PhyPerf_cqichCount_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3480_acc_bytes;\
	UINT bmlocal3481_acc_bits;\
	PVOID bmlocal3482_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3482_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3482_parent_out_ptr;\
	bmlocal3480_acc_bytes = 92;\
	bmlocal3481_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3480_acc_bytes );\
	out_bitoff += bmlocal3481_acc_bits;\
}

#define BM_L1DM_PhyPerf_cqichCount_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3483_tmp_bitoff;\
	BM_L1DM_PhyPerf_cqichCount_GET_POS( base_ptr, out_ptr, bmlocal3483_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3483_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_cqichCount_POS_ALIGNED 108

// Alignment of L1DM_PhyPerf_cqichCount: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_cqichCount_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_cqichCount_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3484_my_ptr;\
	UINT bmlocal3485_my_bitoff;\
	BM_L1DM_PhyPerf_cqichCount_GET_POS( base_ptr, bmlocal3484_my_ptr, bmlocal3485_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3484_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3484_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3484_my_ptr, bmlocal3485_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_cqichCount_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3486_my_ptr;\
	UINT bmlocal3487_my_bitoff;\
	BM_L1DM_PhyPerf_cqichCount_GET_POS( base_ptr, bmlocal3486_my_ptr, bmlocal3487_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3486_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3486_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3486_my_ptr, bmlocal3487_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_cqichCount: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_cqichCount: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_cqichCount: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_cqichCount: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_cqichCount: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_cqichCount: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_cqichCount_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal3488_out_val;\
	BM_L1DM_PhyPerf_cqichCount_GET( base_ptr, bmlocal3488_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "cqichCount", 32, (UINT)(bmlocal3488_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_cqichCount_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_cqichCount_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_cqichCount_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3489_my_ptr;\
	UINT bmlocal3490_my_bitoff;\
	BM_L1DM_PhyPerf_cqichCount_GET_POS( base_ptr, bmlocal3489_my_ptr, bmlocal3490_my_bitoff );\
	(*((UINT32*)bmlocal3489_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3490_my_bitoff );\
}

// L1DM_PhyPerf_cqichCount: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_cqichCount_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3491_tmp_bits;\
	BM_L1DM_PhyPerf_cqichCount_GET_SIZE( base_ptr, out_bytes, bmlocal3491_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3491_tmp_bits );\
}

#define BM_L1DM_PhyPerf_cqichCount_BYTES_SIZE 4

#define BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3494_acc_bytes;\
	UINT bmlocal3495_acc_bits;\
	PVOID bmlocal3496_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3496_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3496_parent_out_ptr;\
	bmlocal3494_acc_bytes = 96;\
	bmlocal3495_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3494_acc_bytes );\
	out_bitoff += bmlocal3495_acc_bits;\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3497_tmp_bitoff;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS( base_ptr, out_ptr, bmlocal3497_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3497_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_POS_ALIGNED 112

// Alignment of L1DM_PhyPerf_TemperatureInCelsius: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_TemperatureInCelsius_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3498_my_ptr;\
	UINT bmlocal3499_my_bitoff;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS( base_ptr, bmlocal3498_my_ptr, bmlocal3499_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3498_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3498_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3498_my_ptr, bmlocal3499_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3500_my_ptr;\
	UINT bmlocal3501_my_bitoff;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS( base_ptr, bmlocal3500_my_ptr, bmlocal3501_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3500_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3500_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3500_my_ptr, bmlocal3501_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_PhyPerf_TemperatureInCelsius: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_TemperatureInCelsius: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_TemperatureInCelsius: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_TemperatureInCelsius: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_TemperatureInCelsius: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_TemperatureInCelsius: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_TemperatureInCelsius_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3502_out_val;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET( base_ptr, bmlocal3502_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "TemperatureInCelsius", 16, (UINT)(bmlocal3502_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_TemperatureInCelsius_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3503_my_ptr;\
	UINT bmlocal3504_my_bitoff;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET_POS( base_ptr, bmlocal3503_my_ptr, bmlocal3504_my_bitoff );\
	(*((UINT16*)bmlocal3503_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3504_my_bitoff );\
}

// L1DM_PhyPerf_TemperatureInCelsius: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_TemperatureInCelsius_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3505_tmp_bits;\
	BM_L1DM_PhyPerf_TemperatureInCelsius_GET_SIZE( base_ptr, out_bytes, bmlocal3505_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3505_tmp_bits );\
}

#define BM_L1DM_PhyPerf_TemperatureInCelsius_BYTES_SIZE 2

#define BM_L1DM_PhyPerf_RxAntMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3508_acc_bytes;\
	UINT bmlocal3509_acc_bits;\
	PVOID bmlocal3510_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3510_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3510_parent_out_ptr;\
	bmlocal3508_acc_bytes = 98;\
	bmlocal3509_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3508_acc_bytes );\
	out_bitoff += bmlocal3509_acc_bits;\
}

#define BM_L1DM_PhyPerf_RxAntMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3511_tmp_bitoff;\
	BM_L1DM_PhyPerf_RxAntMode_GET_POS( base_ptr, out_ptr, bmlocal3511_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3511_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_RxAntMode_POS_ALIGNED 114

// Alignment of L1DM_PhyPerf_RxAntMode: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_RxAntMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_RxAntMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3512_my_ptr;\
	UINT bmlocal3513_my_bitoff;\
	BM_L1DM_PhyPerf_RxAntMode_GET_POS( base_ptr, bmlocal3512_my_ptr, bmlocal3513_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3512_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (eRF_RX_ANT_MODE)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3512_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3512_my_ptr, bmlocal3513_my_bitoff, 8, eRF_RX_ANT_MODE, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_PhyPerf_RxAntMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3514_my_ptr;\
	UINT bmlocal3515_my_bitoff;\
	BM_L1DM_PhyPerf_RxAntMode_GET_POS( base_ptr, bmlocal3514_my_ptr, bmlocal3515_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3514_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3514_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3514_my_ptr, bmlocal3515_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_PhyPerf_RxAntMode: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_RxAntMode: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_RxAntMode: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_RxAntMode: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_RxAntMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_RxAntMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_RxAntMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	eRF_RX_ANT_MODE bmlocal3516_out_val;\
	BM_L1DM_PhyPerf_RxAntMode_GET( base_ptr, bmlocal3516_out_val );\
	if( bmlocal3516_out_val == 0 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eBOTH_RX_ANT_MODE", 1);\
	}\
	if( bmlocal3516_out_val == 1 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eRX_ANT0_MODE", 1);\
	}\
	if( bmlocal3516_out_val == 2 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eRX_ANT1_MODE", 1);\
	}\
	if( bmlocal3516_out_val == 3 )\
	{\
		/*lint -e(571) */\
		BMI_STR_DUMP(depth, "RxAntMode", "eBOTH_RX_ANT_DISABLED", 1);\
	}\
}

#define BM_L1DM_PhyPerf_RxAntMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_RxAntMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_RxAntMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3517_my_ptr;\
	UINT bmlocal3518_my_bitoff;\
	BM_L1DM_PhyPerf_RxAntMode_GET_POS( base_ptr, bmlocal3517_my_ptr, bmlocal3518_my_bitoff );\
	(*((UINT8*)bmlocal3517_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3518_my_bitoff );\
}

// L1DM_PhyPerf_RxAntMode: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_RxAntMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3519_tmp_bits;\
	BM_L1DM_PhyPerf_RxAntMode_GET_SIZE( base_ptr, out_bytes, bmlocal3519_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3519_tmp_bits );\
}

#define BM_L1DM_PhyPerf_RxAntMode_BYTES_SIZE 1

#define BM_L1DM_PhyPerf_Reserved_1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3522_acc_bytes;\
	UINT bmlocal3523_acc_bits;\
	PVOID bmlocal3524_parent_out_ptr;\
	BM_L1DM_PhyPerf_GET_POS( base_ptr, bmlocal3524_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3524_parent_out_ptr;\
	bmlocal3522_acc_bytes = 99;\
	bmlocal3523_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3522_acc_bytes );\
	out_bitoff += bmlocal3523_acc_bits;\
}

#define BM_L1DM_PhyPerf_Reserved_1_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3525_tmp_bitoff;\
	BM_L1DM_PhyPerf_Reserved_1_GET_POS( base_ptr, out_ptr, bmlocal3525_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3525_tmp_bitoff);\
}

#define BM_L1DM_PhyPerf_Reserved_1_POS_ALIGNED 115

// Alignment of L1DM_PhyPerf_Reserved_1: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_PhyPerf_Reserved_1_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_Reserved_1_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3526_my_ptr;\
	UINT bmlocal3527_my_bitoff;\
	BM_L1DM_PhyPerf_Reserved_1_GET_POS( base_ptr, bmlocal3526_my_ptr, bmlocal3527_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3526_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3526_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3526_my_ptr, bmlocal3527_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_PhyPerf_Reserved_1_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3528_my_ptr;\
	UINT bmlocal3529_my_bitoff;\
	BM_L1DM_PhyPerf_Reserved_1_GET_POS( base_ptr, bmlocal3528_my_ptr, bmlocal3529_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3528_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3528_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3528_my_ptr, bmlocal3529_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_PhyPerf_Reserved_1: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_Reserved_1: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_PhyPerf_Reserved_1: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_Reserved_1: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_PhyPerf_Reserved_1: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_PhyPerf_Reserved_1: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_PhyPerf_Reserved_1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3530_out_val;\
	BM_L1DM_PhyPerf_Reserved_1_GET( base_ptr, bmlocal3530_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved_1", 8, (UINT)(bmlocal3530_out_val), "%d", 1);\
}

#define BM_L1DM_PhyPerf_Reserved_1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_Reserved_1_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_PhyPerf_Reserved_1_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3531_my_ptr;\
	UINT bmlocal3532_my_bitoff;\
	BM_L1DM_PhyPerf_Reserved_1_GET_POS( base_ptr, bmlocal3531_my_ptr, bmlocal3532_my_bitoff );\
	(*((UINT8*)bmlocal3531_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3532_my_bitoff );\
}

// L1DM_PhyPerf_Reserved_1: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_PhyPerf_Reserved_1_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3533_tmp_bits;\
	BM_L1DM_PhyPerf_Reserved_1_GET_SIZE( base_ptr, out_bytes, bmlocal3533_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3533_tmp_bits );\
}

#define BM_L1DM_PhyPerf_Reserved_1_BYTES_SIZE 1

#define BM_L1DM_PhyPerf_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 100;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3536_tmp_bits;\
	BM_L1DM_PhyPerf_GET_SIZE( base_ptr, out_bytes, bmlocal3536_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3536_tmp_bits );\
}

#define BM_L1DM_PhyPerf_BYTES_SIZE 100

#define BM_L1DM_PhyPerf_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "PhyPerf", 1);\
	BM_L1DM_PhyPerf_MapsStatistics_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_l1Measurements_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_cqichCount_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_TemperatureInCelsius_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_RxAntMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_Reserved_1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_PhyPerf_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_PhyPerf_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3539_acc_bytes;\
	UINT bmlocal3540_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal3539_acc_bytes = 116;\
	bmlocal3540_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3539_acc_bytes );\
	out_bitoff += bmlocal3540_acc_bits;\
}

#define BM_L1DM_Tpc_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3541_tmp_bitoff;\
	BM_L1DM_Tpc_GET_POS( base_ptr, out_ptr, bmlocal3541_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3541_tmp_bitoff);\
}

#define BM_L1DM_Tpc_POS_ALIGNED 116

// COMPOSITE: Full name: 'L1DM_Tpc' Type: 'dmTpc', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_PowerPerToneCur_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3542_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3542_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3542_parent_out_ptr;\
}

#define BM_L1DM_Tpc_PowerPerToneCur_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3543_tmp_bitoff;\
	BM_L1DM_Tpc_PowerPerToneCur_GET_POS( base_ptr, out_ptr, bmlocal3543_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3543_tmp_bitoff);\
}

#define BM_L1DM_Tpc_PowerPerToneCur_POS_ALIGNED 116

// Alignment of L1DM_Tpc_PowerPerToneCur: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_PowerPerToneCur_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_PowerPerToneCur_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3544_my_ptr;\
	UINT bmlocal3545_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal3544_my_ptr, bmlocal3545_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3544_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3544_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3544_my_ptr, bmlocal3545_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_PowerPerToneCur_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3546_my_ptr;\
	UINT bmlocal3547_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal3546_my_ptr, bmlocal3547_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3546_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3546_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3546_my_ptr, bmlocal3547_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_PowerPerToneCur: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PowerPerToneCur: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PowerPerToneCur: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PowerPerToneCur: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PowerPerToneCur: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_PowerPerToneCur: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3548_out_val;\
	BM_L1DM_Tpc_PowerPerToneCur_GET( base_ptr, bmlocal3548_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerPerToneCur", 16, (UINT)(bmlocal3548_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_PowerPerToneCur_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_PowerPerToneCur_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3549_my_ptr;\
	UINT bmlocal3550_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneCur_GET_POS( base_ptr, bmlocal3549_my_ptr, bmlocal3550_my_bitoff );\
	(*((UINT16*)bmlocal3549_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3550_my_bitoff );\
}

// L1DM_Tpc_PowerPerToneCur: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_PowerPerToneCur_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3551_tmp_bits;\
	BM_L1DM_Tpc_PowerPerToneCur_GET_SIZE( base_ptr, out_bytes, bmlocal3551_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3551_tmp_bits );\
}

#define BM_L1DM_Tpc_PowerPerToneCur_BYTES_SIZE 2

#define BM_L1DM_Tpc_PowerPerToneAvg_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3554_acc_bytes;\
	UINT bmlocal3555_acc_bits;\
	PVOID bmlocal3556_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3556_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3556_parent_out_ptr;\
	bmlocal3554_acc_bytes = 2;\
	bmlocal3555_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3554_acc_bytes );\
	out_bitoff += bmlocal3555_acc_bits;\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3557_tmp_bitoff;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET_POS( base_ptr, out_ptr, bmlocal3557_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3557_tmp_bitoff);\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_POS_ALIGNED 118

// Alignment of L1DM_Tpc_PowerPerToneAvg: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_PowerPerToneAvg_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3558_my_ptr;\
	UINT bmlocal3559_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal3558_my_ptr, bmlocal3559_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3558_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3558_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3558_my_ptr, bmlocal3559_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3560_my_ptr;\
	UINT bmlocal3561_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal3560_my_ptr, bmlocal3561_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3560_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3560_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3560_my_ptr, bmlocal3561_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_PowerPerToneAvg: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PowerPerToneAvg: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PowerPerToneAvg: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PowerPerToneAvg: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PowerPerToneAvg: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_PowerPerToneAvg: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3562_out_val;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET( base_ptr, bmlocal3562_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PowerPerToneAvg", 16, (UINT)(bmlocal3562_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3563_my_ptr;\
	UINT bmlocal3564_my_bitoff;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET_POS( base_ptr, bmlocal3563_my_ptr, bmlocal3564_my_bitoff );\
	(*((UINT16*)bmlocal3563_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3564_my_bitoff );\
}

// L1DM_Tpc_PowerPerToneAvg: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_PowerPerToneAvg_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3565_tmp_bits;\
	BM_L1DM_Tpc_PowerPerToneAvg_GET_SIZE( base_ptr, out_bytes, bmlocal3565_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3565_tmp_bits );\
}

#define BM_L1DM_Tpc_PowerPerToneAvg_BYTES_SIZE 2

#define BM_L1DM_Tpc_PathLoss_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3568_acc_bytes;\
	UINT bmlocal3569_acc_bits;\
	PVOID bmlocal3570_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3570_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3570_parent_out_ptr;\
	bmlocal3568_acc_bytes = 4;\
	bmlocal3569_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3568_acc_bytes );\
	out_bitoff += bmlocal3569_acc_bits;\
}

#define BM_L1DM_Tpc_PathLoss_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3571_tmp_bitoff;\
	BM_L1DM_Tpc_PathLoss_GET_POS( base_ptr, out_ptr, bmlocal3571_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3571_tmp_bitoff);\
}

#define BM_L1DM_Tpc_PathLoss_POS_ALIGNED 120

// Alignment of L1DM_Tpc_PathLoss: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_PathLoss_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_PathLoss_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3572_my_ptr;\
	UINT bmlocal3573_my_bitoff;\
	BM_L1DM_Tpc_PathLoss_GET_POS( base_ptr, bmlocal3572_my_ptr, bmlocal3573_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3572_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3572_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3572_my_ptr, bmlocal3573_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_PathLoss_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3574_my_ptr;\
	UINT bmlocal3575_my_bitoff;\
	BM_L1DM_Tpc_PathLoss_GET_POS( base_ptr, bmlocal3574_my_ptr, bmlocal3575_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3574_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3574_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3574_my_ptr, bmlocal3575_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_PathLoss: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PathLoss: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_PathLoss: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PathLoss: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_PathLoss: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_PathLoss: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_PathLoss_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal3576_out_val;\
	BM_L1DM_Tpc_PathLoss_GET( base_ptr, bmlocal3576_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "PathLoss", 16, (UINT)(bmlocal3576_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_PathLoss_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_PathLoss_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_PathLoss_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3577_my_ptr;\
	UINT bmlocal3578_my_bitoff;\
	BM_L1DM_Tpc_PathLoss_GET_POS( base_ptr, bmlocal3577_my_ptr, bmlocal3578_my_bitoff );\
	(*((UINT16*)bmlocal3577_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3578_my_bitoff );\
}

// L1DM_Tpc_PathLoss: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_PathLoss_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3579_tmp_bits;\
	BM_L1DM_Tpc_PathLoss_GET_SIZE( base_ptr, out_bytes, bmlocal3579_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3579_tmp_bits );\
}

#define BM_L1DM_Tpc_PathLoss_BYTES_SIZE 2

#define BM_L1DM_Tpc_Headroom_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3582_acc_bytes;\
	UINT bmlocal3583_acc_bits;\
	PVOID bmlocal3584_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3584_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3584_parent_out_ptr;\
	bmlocal3582_acc_bytes = 6;\
	bmlocal3583_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3582_acc_bytes );\
	out_bitoff += bmlocal3583_acc_bits;\
}

#define BM_L1DM_Tpc_Headroom_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3585_tmp_bitoff;\
	BM_L1DM_Tpc_Headroom_GET_POS( base_ptr, out_ptr, bmlocal3585_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3585_tmp_bitoff);\
}

#define BM_L1DM_Tpc_Headroom_POS_ALIGNED 122

// Alignment of L1DM_Tpc_Headroom: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_Headroom_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_Headroom_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3586_my_ptr;\
	UINT bmlocal3587_my_bitoff;\
	BM_L1DM_Tpc_Headroom_GET_POS( base_ptr, bmlocal3586_my_ptr, bmlocal3587_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3586_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3586_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3586_my_ptr, bmlocal3587_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_Headroom_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3588_my_ptr;\
	UINT bmlocal3589_my_bitoff;\
	BM_L1DM_Tpc_Headroom_GET_POS( base_ptr, bmlocal3588_my_ptr, bmlocal3589_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3588_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3588_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3588_my_ptr, bmlocal3589_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_Headroom: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_Headroom: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_Headroom: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_Headroom: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_Headroom: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_Headroom: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_Headroom_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal3590_out_val;\
	BM_L1DM_Tpc_Headroom_GET( base_ptr, bmlocal3590_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Headroom", 16, (UINT)(bmlocal3590_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_Headroom_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_Headroom_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_Headroom_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3591_my_ptr;\
	UINT bmlocal3592_my_bitoff;\
	BM_L1DM_Tpc_Headroom_GET_POS( base_ptr, bmlocal3591_my_ptr, bmlocal3592_my_bitoff );\
	(*((UINT16*)bmlocal3591_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3592_my_bitoff );\
}

// L1DM_Tpc_Headroom: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_Headroom_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3593_tmp_bits;\
	BM_L1DM_Tpc_Headroom_GET_SIZE( base_ptr, out_bytes, bmlocal3593_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3593_tmp_bits );\
}

#define BM_L1DM_Tpc_Headroom_BYTES_SIZE 2

#define BM_L1DM_Tpc_Reserved_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3596_acc_bytes;\
	UINT bmlocal3597_acc_bits;\
	PVOID bmlocal3598_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3598_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3598_parent_out_ptr;\
	bmlocal3596_acc_bytes = 8;\
	bmlocal3597_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3596_acc_bytes );\
	out_bitoff += bmlocal3597_acc_bits;\
}

#define BM_L1DM_Tpc_Reserved_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3599_tmp_bitoff;\
	BM_L1DM_Tpc_Reserved_GET_POS( base_ptr, out_ptr, bmlocal3599_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3599_tmp_bitoff);\
}

#define BM_L1DM_Tpc_Reserved_POS_ALIGNED 124

// Alignment of L1DM_Tpc_Reserved: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_Reserved_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_Reserved_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3600_my_ptr;\
	UINT bmlocal3601_my_bitoff;\
	BM_L1DM_Tpc_Reserved_GET_POS( base_ptr, bmlocal3600_my_ptr, bmlocal3601_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3600_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3600_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3600_my_ptr, bmlocal3601_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_Reserved_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3602_my_ptr;\
	UINT bmlocal3603_my_bitoff;\
	BM_L1DM_Tpc_Reserved_GET_POS( base_ptr, bmlocal3602_my_ptr, bmlocal3603_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3602_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3602_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3602_my_ptr, bmlocal3603_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_Reserved: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_Reserved: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_Reserved: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_Reserved: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_Reserved: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_Reserved: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_Reserved_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal3604_out_val;\
	BM_L1DM_Tpc_Reserved_GET( base_ptr, bmlocal3604_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved", 16, (UINT)(bmlocal3604_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_Reserved_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_Reserved_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_Reserved_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3605_my_ptr;\
	UINT bmlocal3606_my_bitoff;\
	BM_L1DM_Tpc_Reserved_GET_POS( base_ptr, bmlocal3605_my_ptr, bmlocal3606_my_bitoff );\
	(*((UINT16*)bmlocal3605_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3606_my_bitoff );\
}

// L1DM_Tpc_Reserved: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_Reserved_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3607_tmp_bits;\
	BM_L1DM_Tpc_Reserved_GET_SIZE( base_ptr, out_bytes, bmlocal3607_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3607_tmp_bits );\
}

#define BM_L1DM_Tpc_Reserved_BYTES_SIZE 2

#define BM_L1DM_Tpc_powerControlMode_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3610_acc_bytes;\
	UINT bmlocal3611_acc_bits;\
	PVOID bmlocal3612_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3612_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3612_parent_out_ptr;\
	bmlocal3610_acc_bytes = 10;\
	bmlocal3611_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3610_acc_bytes );\
	out_bitoff += bmlocal3611_acc_bits;\
}

#define BM_L1DM_Tpc_powerControlMode_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3613_tmp_bitoff;\
	BM_L1DM_Tpc_powerControlMode_GET_POS( base_ptr, out_ptr, bmlocal3613_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3613_tmp_bitoff);\
}

#define BM_L1DM_Tpc_powerControlMode_POS_ALIGNED 126

// Alignment of L1DM_Tpc_powerControlMode: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_powerControlMode_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_powerControlMode_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3614_my_ptr;\
	UINT bmlocal3615_my_bitoff;\
	BM_L1DM_Tpc_powerControlMode_GET_POS( base_ptr, bmlocal3614_my_ptr, bmlocal3615_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3614_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3614_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3614_my_ptr, bmlocal3615_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_powerControlMode_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3616_my_ptr;\
	UINT bmlocal3617_my_bitoff;\
	BM_L1DM_Tpc_powerControlMode_GET_POS( base_ptr, bmlocal3616_my_ptr, bmlocal3617_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3616_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3616_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3616_my_ptr, bmlocal3617_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_powerControlMode: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_powerControlMode: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_powerControlMode: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_powerControlMode: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_powerControlMode: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_powerControlMode: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_powerControlMode_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3618_out_val;\
	BM_L1DM_Tpc_powerControlMode_GET( base_ptr, bmlocal3618_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "powerControlMode", 8, (UINT)(bmlocal3618_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_powerControlMode_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_powerControlMode_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_powerControlMode_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3619_my_ptr;\
	UINT bmlocal3620_my_bitoff;\
	BM_L1DM_Tpc_powerControlMode_GET_POS( base_ptr, bmlocal3619_my_ptr, bmlocal3620_my_bitoff );\
	(*((UINT8*)bmlocal3619_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3620_my_bitoff );\
}

// L1DM_Tpc_powerControlMode: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_powerControlMode_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3621_tmp_bits;\
	BM_L1DM_Tpc_powerControlMode_GET_SIZE( base_ptr, out_bytes, bmlocal3621_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3621_tmp_bits );\
}

#define BM_L1DM_Tpc_powerControlMode_BYTES_SIZE 1

#define BM_L1DM_Tpc_isTx_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3624_acc_bytes;\
	UINT bmlocal3625_acc_bits;\
	PVOID bmlocal3626_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3626_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3626_parent_out_ptr;\
	bmlocal3624_acc_bytes = 11;\
	bmlocal3625_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3624_acc_bytes );\
	out_bitoff += bmlocal3625_acc_bits;\
}

#define BM_L1DM_Tpc_isTx_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3627_tmp_bitoff;\
	BM_L1DM_Tpc_isTx_GET_POS( base_ptr, out_ptr, bmlocal3627_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3627_tmp_bitoff);\
}

#define BM_L1DM_Tpc_isTx_POS_ALIGNED 127

// Alignment of L1DM_Tpc_isTx: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_isTx_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_isTx_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3628_my_ptr;\
	UINT bmlocal3629_my_bitoff;\
	BM_L1DM_Tpc_isTx_GET_POS( base_ptr, bmlocal3628_my_ptr, bmlocal3629_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3628_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3628_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3628_my_ptr, bmlocal3629_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_isTx_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3630_my_ptr;\
	UINT bmlocal3631_my_bitoff;\
	BM_L1DM_Tpc_isTx_GET_POS( base_ptr, bmlocal3630_my_ptr, bmlocal3631_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3630_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3630_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3630_my_ptr, bmlocal3631_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_isTx: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_isTx: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_isTx: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_isTx: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_isTx: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_isTx: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_isTx_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3632_out_val;\
	BM_L1DM_Tpc_isTx_GET( base_ptr, bmlocal3632_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "isTx", 8, (UINT)(bmlocal3632_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_isTx_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_isTx_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_isTx_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3633_my_ptr;\
	UINT bmlocal3634_my_bitoff;\
	BM_L1DM_Tpc_isTx_GET_POS( base_ptr, bmlocal3633_my_ptr, bmlocal3634_my_bitoff );\
	(*((UINT8*)bmlocal3633_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3634_my_bitoff );\
}

// L1DM_Tpc_isTx: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_isTx_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3635_tmp_bits;\
	BM_L1DM_Tpc_isTx_GET_SIZE( base_ptr, out_bytes, bmlocal3635_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3635_tmp_bits );\
}

#define BM_L1DM_Tpc_isTx_BYTES_SIZE 1

#define BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3638_acc_bytes;\
	UINT bmlocal3639_acc_bits;\
	PVOID bmlocal3640_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3640_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3640_parent_out_ptr;\
	bmlocal3638_acc_bytes = 12;\
	bmlocal3639_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3638_acc_bytes );\
	out_bitoff += bmlocal3639_acc_bits;\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3641_tmp_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS( base_ptr, out_ptr, bmlocal3641_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3641_tmp_bitoff);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_POS_ALIGNED 128

// COMPOSITE: Full name: 'L1DM_Tpc_CurrentFrameTxPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3642_parent_out_ptr;\
	BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal3642_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3642_parent_out_ptr;\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3643_tmp_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, out_ptr, bmlocal3643_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3643_tmp_bitoff);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_POS_ALIGNED 128

// Alignment of L1DM_Tpc_CurrentFrameTxPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3644_my_ptr;\
	UINT bmlocal3645_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal3644_my_ptr, bmlocal3645_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3644_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3644_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3644_my_ptr, bmlocal3645_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3646_my_ptr;\
	UINT bmlocal3647_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal3646_my_ptr, bmlocal3647_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3646_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3646_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3646_my_ptr, bmlocal3647_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_CurrentFrameTxPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_CurrentFrameTxPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3648_out_val;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET( base_ptr, bmlocal3648_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal3648_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3649_my_ptr;\
	UINT bmlocal3650_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_POS( base_ptr, bmlocal3649_my_ptr, bmlocal3650_my_bitoff );\
	(*((UINT16*)bmlocal3649_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3650_my_bitoff );\
}

// L1DM_Tpc_CurrentFrameTxPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3651_tmp_bits;\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal3651_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3651_tmp_bits );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_Total_BYTES_SIZE 2

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3654_acc_bytes;\
	UINT bmlocal3655_acc_bits;\
	PVOID bmlocal3656_parent_out_ptr;\
	BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal3656_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3656_parent_out_ptr;\
	bmlocal3654_acc_bytes = 2;\
	bmlocal3655_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3654_acc_bytes );\
	out_bitoff += bmlocal3655_acc_bits;\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3657_tmp_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal3657_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3657_tmp_bitoff);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_POS_ALIGNED 130

// Alignment of L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3658_my_ptr;\
	UINT bmlocal3659_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3658_my_ptr, bmlocal3659_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3658_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3658_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3658_my_ptr, bmlocal3659_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3660_my_ptr;\
	UINT bmlocal3661_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3660_my_ptr, bmlocal3661_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3660_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3660_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3660_my_ptr, bmlocal3661_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3662_out_val;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET( base_ptr, bmlocal3662_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal3662_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3663_my_ptr;\
	UINT bmlocal3664_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3663_my_ptr, bmlocal3664_my_bitoff );\
	(*((UINT8*)bmlocal3663_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3664_my_bitoff );\
}

// L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3665_tmp_bits;\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal3665_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3665_tmp_bits );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3668_acc_bytes;\
	UINT bmlocal3669_acc_bits;\
	PVOID bmlocal3670_parent_out_ptr;\
	BM_L1DM_Tpc_CurrentFrameTxPower_GET_POS( base_ptr, bmlocal3670_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3670_parent_out_ptr;\
	bmlocal3668_acc_bytes = 3;\
	bmlocal3669_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3668_acc_bytes );\
	out_bitoff += bmlocal3669_acc_bits;\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3671_tmp_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal3671_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3671_tmp_bitoff);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_POS_ALIGNED 131

// Alignment of L1DM_Tpc_CurrentFrameTxPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3672_my_ptr;\
	UINT bmlocal3673_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal3672_my_ptr, bmlocal3673_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3672_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3672_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3672_my_ptr, bmlocal3673_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3674_my_ptr;\
	UINT bmlocal3675_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal3674_my_ptr, bmlocal3675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3674_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3674_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3674_my_ptr, bmlocal3675_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_CurrentFrameTxPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_CurrentFrameTxPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_CurrentFrameTxPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_CurrentFrameTxPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3676_out_val;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET( base_ptr, bmlocal3676_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal3676_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3677_my_ptr;\
	UINT bmlocal3678_my_bitoff;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_POS( base_ptr, bmlocal3677_my_ptr, bmlocal3678_my_bitoff );\
	(*((UINT8*)bmlocal3677_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3678_my_bitoff );\
}

// L1DM_Tpc_CurrentFrameTxPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3679_tmp_bits;\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal3679_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3679_tmp_bits );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_BYTES_SIZE 1

#define BM_L1DM_Tpc_CurrentFrameTxPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3682_tmp_bits;\
	BM_L1DM_Tpc_CurrentFrameTxPower_GET_SIZE( base_ptr, out_bytes, bmlocal3682_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3682_tmp_bits );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_BYTES_SIZE 4

#define BM_L1DM_Tpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "CurrentFrameTxPower", 1);\
	BM_L1DM_Tpc_CurrentFrameTxPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_CurrentFrameTxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_CurrentFrameTxPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_CurrentFrameTxPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ExtremePowerValues_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3685_acc_bytes;\
	UINT bmlocal3686_acc_bits;\
	PVOID bmlocal3687_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3687_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3687_parent_out_ptr;\
	bmlocal3685_acc_bytes = 16;\
	bmlocal3686_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3685_acc_bytes );\
	out_bitoff += bmlocal3686_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3688_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_GET_POS( base_ptr, out_ptr, bmlocal3688_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3688_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_POS_ALIGNED 132

// COMPOSITE: Full name: 'L1DM_Tpc_ExtremePowerValues' Type: 'PowerStatistics', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3689_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_GET_POS( base_ptr, bmlocal3689_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3689_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3690_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, out_ptr, bmlocal3690_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3690_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_POS_ALIGNED 132

// COMPOSITE: Full name: 'L1DM_Tpc_ExtremePowerValues_MaxPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3691_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal3691_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3691_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3692_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, out_ptr, bmlocal3692_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3692_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_POS_ALIGNED 132

// Alignment of L1DM_Tpc_ExtremePowerValues_MaxPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3693_my_ptr;\
	UINT bmlocal3694_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal3693_my_ptr, bmlocal3694_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3693_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3693_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3693_my_ptr, bmlocal3694_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3695_my_ptr;\
	UINT bmlocal3696_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal3695_my_ptr, bmlocal3696_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3695_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3695_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3695_my_ptr, bmlocal3696_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3697_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET( base_ptr, bmlocal3697_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal3697_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3698_my_ptr;\
	UINT bmlocal3699_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_POS( base_ptr, bmlocal3698_my_ptr, bmlocal3699_my_bitoff );\
	(*((UINT16*)bmlocal3698_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3699_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3700_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal3700_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3700_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_BYTES_SIZE 2

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3703_acc_bytes;\
	UINT bmlocal3704_acc_bits;\
	PVOID bmlocal3705_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal3705_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3705_parent_out_ptr;\
	bmlocal3703_acc_bytes = 2;\
	bmlocal3704_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3703_acc_bytes );\
	out_bitoff += bmlocal3704_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3706_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal3706_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3706_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_POS_ALIGNED 134

// Alignment of L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3707_my_ptr;\
	UINT bmlocal3708_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3707_my_ptr, bmlocal3708_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3707_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3707_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3707_my_ptr, bmlocal3708_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3709_my_ptr;\
	UINT bmlocal3710_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3709_my_ptr, bmlocal3710_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3709_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3709_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3709_my_ptr, bmlocal3710_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3711_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET( base_ptr, bmlocal3711_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal3711_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3712_my_ptr;\
	UINT bmlocal3713_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3712_my_ptr, bmlocal3713_my_bitoff );\
	(*((UINT8*)bmlocal3712_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3713_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3714_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal3714_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3714_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3717_acc_bytes;\
	UINT bmlocal3718_acc_bits;\
	PVOID bmlocal3719_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_POS( base_ptr, bmlocal3719_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3719_parent_out_ptr;\
	bmlocal3717_acc_bytes = 3;\
	bmlocal3718_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3717_acc_bytes );\
	out_bitoff += bmlocal3718_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3720_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal3720_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3720_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_POS_ALIGNED 135

// Alignment of L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3721_my_ptr;\
	UINT bmlocal3722_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal3721_my_ptr, bmlocal3722_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3721_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3721_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3721_my_ptr, bmlocal3722_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3723_my_ptr;\
	UINT bmlocal3724_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal3723_my_ptr, bmlocal3724_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3723_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3723_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3723_my_ptr, bmlocal3724_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3725_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET( base_ptr, bmlocal3725_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal3725_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3726_my_ptr;\
	UINT bmlocal3727_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_POS( base_ptr, bmlocal3726_my_ptr, bmlocal3727_my_bitoff );\
	(*((UINT8*)bmlocal3726_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3727_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3728_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal3728_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3728_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_BYTES_SIZE 1

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3731_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_GET_SIZE( base_ptr, out_bytes, bmlocal3731_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3731_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_BYTES_SIZE 4

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MaxPower", 1);\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MaxPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3734_acc_bytes;\
	UINT bmlocal3735_acc_bits;\
	PVOID bmlocal3736_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_GET_POS( base_ptr, bmlocal3736_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3736_parent_out_ptr;\
	bmlocal3734_acc_bytes = 4;\
	bmlocal3735_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3734_acc_bytes );\
	out_bitoff += bmlocal3735_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3737_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, out_ptr, bmlocal3737_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3737_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_POS_ALIGNED 136

// COMPOSITE: Full name: 'L1DM_Tpc_ExtremePowerValues_MinPower' Type: 'PowerCharacteristics', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3738_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal3738_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3738_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3739_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, out_ptr, bmlocal3739_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3739_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_POS_ALIGNED 136

// Alignment of L1DM_Tpc_ExtremePowerValues_MinPower_Total: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3740_my_ptr;\
	UINT bmlocal3741_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal3740_my_ptr, bmlocal3741_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3740_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3740_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3740_my_ptr, bmlocal3741_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3742_my_ptr;\
	UINT bmlocal3743_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal3742_my_ptr, bmlocal3743_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3742_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3742_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3742_my_ptr, bmlocal3743_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_Total: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_Total: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_Total: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_Total: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_Total: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MinPower_Total: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3744_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET( base_ptr, bmlocal3744_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Total", 16, (UINT)(bmlocal3744_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3745_my_ptr;\
	UINT bmlocal3746_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_POS( base_ptr, bmlocal3745_my_ptr, bmlocal3746_my_bitoff );\
	(*((UINT16*)bmlocal3745_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3746_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_Total: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3747_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_GET_SIZE( base_ptr, out_bytes, bmlocal3747_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3747_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_BYTES_SIZE 2

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3750_acc_bytes;\
	UINT bmlocal3751_acc_bits;\
	PVOID bmlocal3752_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal3752_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3752_parent_out_ptr;\
	bmlocal3750_acc_bytes = 2;\
	bmlocal3751_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3750_acc_bytes );\
	out_bitoff += bmlocal3751_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3753_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, out_ptr, bmlocal3753_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3753_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_POS_ALIGNED 138

// Alignment of L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3754_my_ptr;\
	UINT bmlocal3755_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3754_my_ptr, bmlocal3755_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3754_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3754_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3754_my_ptr, bmlocal3755_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3756_my_ptr;\
	UINT bmlocal3757_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3756_my_ptr, bmlocal3757_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3756_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3756_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3756_my_ptr, bmlocal3757_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3758_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET( base_ptr, bmlocal3758_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NumOfSubchannels", 8, (UINT)(bmlocal3758_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3759_my_ptr;\
	UINT bmlocal3760_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_POS( base_ptr, bmlocal3759_my_ptr, bmlocal3760_my_bitoff );\
	(*((UINT8*)bmlocal3759_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3760_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3761_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_GET_SIZE( base_ptr, out_bytes, bmlocal3761_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3761_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_BYTES_SIZE 1

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3764_acc_bytes;\
	UINT bmlocal3765_acc_bits;\
	PVOID bmlocal3766_parent_out_ptr;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_POS( base_ptr, bmlocal3766_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3766_parent_out_ptr;\
	bmlocal3764_acc_bytes = 3;\
	bmlocal3765_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3764_acc_bytes );\
	out_bitoff += bmlocal3765_acc_bits;\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3767_tmp_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, out_ptr, bmlocal3767_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3767_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_POS_ALIGNED 139

// Alignment of L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3768_my_ptr;\
	UINT bmlocal3769_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal3768_my_ptr, bmlocal3769_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3768_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3768_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3768_my_ptr, bmlocal3769_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3770_my_ptr;\
	UINT bmlocal3771_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal3770_my_ptr, bmlocal3771_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3770_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3770_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3770_my_ptr, bmlocal3771_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3772_out_val;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET( base_ptr, bmlocal3772_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "AllocationType", 8, (UINT)(bmlocal3772_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3773_my_ptr;\
	UINT bmlocal3774_my_bitoff;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_POS( base_ptr, bmlocal3773_my_ptr, bmlocal3774_my_bitoff );\
	(*((UINT8*)bmlocal3773_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3774_my_bitoff );\
}

// L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3775_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_GET_SIZE( base_ptr, out_bytes, bmlocal3775_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3775_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_BYTES_SIZE 1

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3778_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_GET_SIZE( base_ptr, out_bytes, bmlocal3778_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3778_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_BYTES_SIZE 4

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "MinPower", 1);\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_Total_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_NumOfSubchannels_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_AllocationType_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_MinPower_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ExtremePowerValues_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3781_tmp_bits;\
	BM_L1DM_Tpc_ExtremePowerValues_GET_SIZE( base_ptr, out_bytes, bmlocal3781_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3781_tmp_bits );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_BYTES_SIZE 8

#define BM_L1DM_Tpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ExtremePowerValues", 1);\
	BM_L1DM_Tpc_ExtremePowerValues_MaxPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_MinPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ExtremePowerValues_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_offsetBSperSS_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3784_acc_bytes;\
	UINT bmlocal3785_acc_bits;\
	PVOID bmlocal3786_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3786_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3786_parent_out_ptr;\
	bmlocal3784_acc_bytes = 24;\
	bmlocal3785_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3784_acc_bytes );\
	out_bitoff += bmlocal3785_acc_bits;\
}

#define BM_L1DM_Tpc_offsetBSperSS_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3787_tmp_bitoff;\
	BM_L1DM_Tpc_offsetBSperSS_GET_POS( base_ptr, out_ptr, bmlocal3787_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3787_tmp_bitoff);\
}

#define BM_L1DM_Tpc_offsetBSperSS_POS_ALIGNED 140

// Alignment of L1DM_Tpc_offsetBSperSS: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_offsetBSperSS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_offsetBSperSS_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3788_my_ptr;\
	UINT bmlocal3789_my_bitoff;\
	BM_L1DM_Tpc_offsetBSperSS_GET_POS( base_ptr, bmlocal3788_my_ptr, bmlocal3789_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3788_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3788_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3788_my_ptr, bmlocal3789_my_bitoff, 16, INT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_offsetBSperSS_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3790_my_ptr;\
	UINT bmlocal3791_my_bitoff;\
	BM_L1DM_Tpc_offsetBSperSS_GET_POS( base_ptr, bmlocal3790_my_ptr, bmlocal3791_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3790_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3790_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3790_my_ptr, bmlocal3791_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_offsetBSperSS: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_offsetBSperSS: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_offsetBSperSS: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_offsetBSperSS: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_offsetBSperSS: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_offsetBSperSS: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_offsetBSperSS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3792_out_val;\
	BM_L1DM_Tpc_offsetBSperSS_GET( base_ptr, bmlocal3792_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offsetBSperSS", 16, (UINT)(bmlocal3792_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_offsetBSperSS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_offsetBSperSS_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_offsetBSperSS_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3793_my_ptr;\
	UINT bmlocal3794_my_bitoff;\
	BM_L1DM_Tpc_offsetBSperSS_GET_POS( base_ptr, bmlocal3793_my_ptr, bmlocal3794_my_bitoff );\
	(*((UINT16*)bmlocal3793_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3794_my_bitoff );\
}

// L1DM_Tpc_offsetBSperSS: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_offsetBSperSS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3795_tmp_bits;\
	BM_L1DM_Tpc_offsetBSperSS_GET_SIZE( base_ptr, out_bytes, bmlocal3795_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3795_tmp_bits );\
}

#define BM_L1DM_Tpc_offsetBSperSS_BYTES_SIZE 2

#define BM_L1DM_Tpc_offsetSSperSS_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3798_acc_bytes;\
	UINT bmlocal3799_acc_bits;\
	PVOID bmlocal3800_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3800_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3800_parent_out_ptr;\
	bmlocal3798_acc_bytes = 26;\
	bmlocal3799_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3798_acc_bytes );\
	out_bitoff += bmlocal3799_acc_bits;\
}

#define BM_L1DM_Tpc_offsetSSperSS_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3801_tmp_bitoff;\
	BM_L1DM_Tpc_offsetSSperSS_GET_POS( base_ptr, out_ptr, bmlocal3801_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3801_tmp_bitoff);\
}

#define BM_L1DM_Tpc_offsetSSperSS_POS_ALIGNED 142

// Alignment of L1DM_Tpc_offsetSSperSS: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_offsetSSperSS_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_offsetSSperSS_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3802_my_ptr;\
	UINT bmlocal3803_my_bitoff;\
	BM_L1DM_Tpc_offsetSSperSS_GET_POS( base_ptr, bmlocal3802_my_ptr, bmlocal3803_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3802_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (INT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3802_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3802_my_ptr, bmlocal3803_my_bitoff, 16, INT16, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_offsetSSperSS_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3804_my_ptr;\
	UINT bmlocal3805_my_bitoff;\
	BM_L1DM_Tpc_offsetSSperSS_GET_POS( base_ptr, bmlocal3804_my_ptr, bmlocal3805_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3804_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3804_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3804_my_ptr, bmlocal3805_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_offsetSSperSS: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_offsetSSperSS: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_offsetSSperSS: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_offsetSSperSS: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_offsetSSperSS: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_offsetSSperSS: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_offsetSSperSS_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	INT16 bmlocal3806_out_val;\
	BM_L1DM_Tpc_offsetSSperSS_GET( base_ptr, bmlocal3806_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "offsetSSperSS", 16, (UINT)(bmlocal3806_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_offsetSSperSS_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_offsetSSperSS_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_offsetSSperSS_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3807_my_ptr;\
	UINT bmlocal3808_my_bitoff;\
	BM_L1DM_Tpc_offsetSSperSS_GET_POS( base_ptr, bmlocal3807_my_ptr, bmlocal3808_my_bitoff );\
	(*((UINT16*)bmlocal3807_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3808_my_bitoff );\
}

// L1DM_Tpc_offsetSSperSS: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_offsetSSperSS_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3809_tmp_bits;\
	BM_L1DM_Tpc_offsetSSperSS_GET_SIZE( base_ptr, out_bytes, bmlocal3809_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3809_tmp_bits );\
}

#define BM_L1DM_Tpc_offsetSSperSS_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3812_acc_bytes;\
	UINT bmlocal3813_acc_bits;\
	PVOID bmlocal3814_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal3814_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3814_parent_out_ptr;\
	bmlocal3812_acc_bytes = 28;\
	bmlocal3813_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3812_acc_bytes );\
	out_bitoff += bmlocal3813_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3815_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, out_ptr, bmlocal3815_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3815_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_POS_ALIGNED 144

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel' Type: 'ULNoiseAndInterferenceRegions', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3816_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3816_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3816_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3817_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal3817_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3817_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_POS_ALIGNED 144

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3818_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal3818_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3818_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3819_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3819_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3819_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_POS_ALIGNED 144

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3820_my_ptr;\
	UINT bmlocal3821_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal3820_my_ptr, bmlocal3821_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3820_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3820_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3820_my_ptr, bmlocal3821_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3822_my_ptr;\
	UINT bmlocal3823_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal3822_my_ptr, bmlocal3823_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3822_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3822_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3822_my_ptr, bmlocal3823_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3824_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET( base_ptr, bmlocal3824_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3824_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3825_my_ptr;\
	UINT bmlocal3826_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_POS( base_ptr, bmlocal3825_my_ptr, bmlocal3826_my_bitoff );\
	(*((UINT8*)bmlocal3825_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3826_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3827_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3827_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3827_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3830_acc_bytes;\
	UINT bmlocal3831_acc_bits;\
	PVOID bmlocal3832_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_POS( base_ptr, bmlocal3832_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3832_parent_out_ptr;\
	bmlocal3830_acc_bytes = 1;\
	bmlocal3831_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3830_acc_bytes );\
	out_bitoff += bmlocal3831_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3833_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal3833_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3833_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_POS_ALIGNED 145

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3834_my_ptr;\
	UINT bmlocal3835_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal3834_my_ptr, bmlocal3835_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3834_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3834_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3834_my_ptr, bmlocal3835_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3836_my_ptr;\
	UINT bmlocal3837_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal3836_my_ptr, bmlocal3837_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3836_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3836_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3836_my_ptr, bmlocal3837_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3838_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET( base_ptr, bmlocal3838_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal3838_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3839_my_ptr;\
	UINT bmlocal3840_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_POS( base_ptr, bmlocal3839_my_ptr, bmlocal3840_my_bitoff );\
	(*((UINT8*)bmlocal3839_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3840_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3841_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal3841_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3841_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3844_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal3844_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3844_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "cqiAckPeriodicRangingNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3847_acc_bytes;\
	UINT bmlocal3848_acc_bits;\
	PVOID bmlocal3849_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3849_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3849_parent_out_ptr;\
	bmlocal3847_acc_bytes = 2;\
	bmlocal3848_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3847_acc_bytes );\
	out_bitoff += bmlocal3848_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3850_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, out_ptr, bmlocal3850_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3850_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_POS_ALIGNED 146

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3851_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, bmlocal3851_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3851_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3852_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3852_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3852_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_POS_ALIGNED 146

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3853_my_ptr;\
	UINT bmlocal3854_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal3853_my_ptr, bmlocal3854_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3853_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3853_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3853_my_ptr, bmlocal3854_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3855_my_ptr;\
	UINT bmlocal3856_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal3855_my_ptr, bmlocal3856_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3855_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3855_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3855_my_ptr, bmlocal3856_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3857_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET( base_ptr, bmlocal3857_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3857_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3858_my_ptr;\
	UINT bmlocal3859_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_POS( base_ptr, bmlocal3858_my_ptr, bmlocal3859_my_bitoff );\
	(*((UINT8*)bmlocal3858_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3859_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3860_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3860_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3860_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3863_acc_bytes;\
	UINT bmlocal3864_acc_bits;\
	PVOID bmlocal3865_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_POS( base_ptr, bmlocal3865_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3865_parent_out_ptr;\
	bmlocal3863_acc_bytes = 1;\
	bmlocal3864_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3863_acc_bytes );\
	out_bitoff += bmlocal3864_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3866_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, out_ptr, bmlocal3866_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3866_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_POS_ALIGNED 147

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3867_my_ptr;\
	UINT bmlocal3868_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal3867_my_ptr, bmlocal3868_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3867_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3867_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3867_my_ptr, bmlocal3868_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3869_my_ptr;\
	UINT bmlocal3870_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal3869_my_ptr, bmlocal3870_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3869_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3869_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3869_my_ptr, bmlocal3870_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3871_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET( base_ptr, bmlocal3871_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal3871_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3872_my_ptr;\
	UINT bmlocal3873_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_POS( base_ptr, bmlocal3872_my_ptr, bmlocal3873_my_bitoff );\
	(*((UINT8*)bmlocal3872_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3873_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3874_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal3874_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3874_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3877_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_GET_SIZE( base_ptr, out_bytes, bmlocal3877_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3877_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "puscNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3880_acc_bytes;\
	UINT bmlocal3881_acc_bits;\
	PVOID bmlocal3882_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3882_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3882_parent_out_ptr;\
	bmlocal3880_acc_bytes = 4;\
	bmlocal3881_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3880_acc_bytes );\
	out_bitoff += bmlocal3881_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3883_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, out_ptr, bmlocal3883_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3883_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_POS_ALIGNED 148

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3884_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, bmlocal3884_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3884_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3885_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3885_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3885_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_POS_ALIGNED 148

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3886_my_ptr;\
	UINT bmlocal3887_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal3886_my_ptr, bmlocal3887_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3886_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3886_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3886_my_ptr, bmlocal3887_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3888_my_ptr;\
	UINT bmlocal3889_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal3888_my_ptr, bmlocal3889_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3888_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3888_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3888_my_ptr, bmlocal3889_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3890_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET( base_ptr, bmlocal3890_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3890_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3891_my_ptr;\
	UINT bmlocal3892_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_POS( base_ptr, bmlocal3891_my_ptr, bmlocal3892_my_bitoff );\
	(*((UINT8*)bmlocal3891_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3892_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3893_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3893_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3893_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3896_acc_bytes;\
	UINT bmlocal3897_acc_bits;\
	PVOID bmlocal3898_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_POS( base_ptr, bmlocal3898_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3898_parent_out_ptr;\
	bmlocal3896_acc_bytes = 1;\
	bmlocal3897_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3896_acc_bytes );\
	out_bitoff += bmlocal3897_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3899_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, out_ptr, bmlocal3899_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3899_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_POS_ALIGNED 149

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3900_my_ptr;\
	UINT bmlocal3901_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal3900_my_ptr, bmlocal3901_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3900_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3900_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3900_my_ptr, bmlocal3901_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3902_my_ptr;\
	UINT bmlocal3903_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal3902_my_ptr, bmlocal3903_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3902_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3902_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3902_my_ptr, bmlocal3903_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3904_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET( base_ptr, bmlocal3904_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal3904_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3905_my_ptr;\
	UINT bmlocal3906_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_POS( base_ptr, bmlocal3905_my_ptr, bmlocal3906_my_bitoff );\
	(*((UINT8*)bmlocal3905_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3906_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3907_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal3907_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3907_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3910_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_GET_SIZE( base_ptr, out_bytes, bmlocal3910_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3910_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "amcNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3913_acc_bytes;\
	UINT bmlocal3914_acc_bits;\
	PVOID bmlocal3915_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3915_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3915_parent_out_ptr;\
	bmlocal3913_acc_bytes = 6;\
	bmlocal3914_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3913_acc_bytes );\
	out_bitoff += bmlocal3914_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3916_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, out_ptr, bmlocal3916_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3916_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_POS_ALIGNED 150

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3917_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, bmlocal3917_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3917_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3918_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3918_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3918_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_POS_ALIGNED 150

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3919_my_ptr;\
	UINT bmlocal3920_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal3919_my_ptr, bmlocal3920_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3919_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3919_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3919_my_ptr, bmlocal3920_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3921_my_ptr;\
	UINT bmlocal3922_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal3921_my_ptr, bmlocal3922_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3921_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3921_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3921_my_ptr, bmlocal3922_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3923_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET( base_ptr, bmlocal3923_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3923_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3924_my_ptr;\
	UINT bmlocal3925_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_POS( base_ptr, bmlocal3924_my_ptr, bmlocal3925_my_bitoff );\
	(*((UINT8*)bmlocal3924_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3925_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3926_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3926_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3926_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3929_acc_bytes;\
	UINT bmlocal3930_acc_bits;\
	PVOID bmlocal3931_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_POS( base_ptr, bmlocal3931_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3931_parent_out_ptr;\
	bmlocal3929_acc_bytes = 1;\
	bmlocal3930_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3929_acc_bytes );\
	out_bitoff += bmlocal3930_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3932_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, out_ptr, bmlocal3932_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3932_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_POS_ALIGNED 151

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3933_my_ptr;\
	UINT bmlocal3934_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal3933_my_ptr, bmlocal3934_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3933_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3933_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3933_my_ptr, bmlocal3934_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3935_my_ptr;\
	UINT bmlocal3936_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal3935_my_ptr, bmlocal3936_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3935_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3935_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3935_my_ptr, bmlocal3936_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3937_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET( base_ptr, bmlocal3937_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal3937_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3938_my_ptr;\
	UINT bmlocal3939_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_POS( base_ptr, bmlocal3938_my_ptr, bmlocal3939_my_bitoff );\
	(*((UINT8*)bmlocal3938_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3939_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3940_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal3940_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3940_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3943_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_GET_SIZE( base_ptr, out_bytes, bmlocal3943_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3943_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "periodicRangingNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3946_acc_bytes;\
	UINT bmlocal3947_acc_bits;\
	PVOID bmlocal3948_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3948_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3948_parent_out_ptr;\
	bmlocal3946_acc_bytes = 8;\
	bmlocal3947_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3946_acc_bytes );\
	out_bitoff += bmlocal3947_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3949_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, out_ptr, bmlocal3949_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3949_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_POS_ALIGNED 152

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3950_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, bmlocal3950_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3950_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3951_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3951_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3951_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_POS_ALIGNED 152

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3952_my_ptr;\
	UINT bmlocal3953_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal3952_my_ptr, bmlocal3953_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3952_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3952_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3952_my_ptr, bmlocal3953_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3954_my_ptr;\
	UINT bmlocal3955_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal3954_my_ptr, bmlocal3955_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3954_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3954_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3954_my_ptr, bmlocal3955_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3956_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET( base_ptr, bmlocal3956_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3956_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3957_my_ptr;\
	UINT bmlocal3958_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_POS( base_ptr, bmlocal3957_my_ptr, bmlocal3958_my_bitoff );\
	(*((UINT8*)bmlocal3957_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3958_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3959_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3959_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3959_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3962_acc_bytes;\
	UINT bmlocal3963_acc_bits;\
	PVOID bmlocal3964_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_POS( base_ptr, bmlocal3964_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3964_parent_out_ptr;\
	bmlocal3962_acc_bytes = 1;\
	bmlocal3963_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3962_acc_bytes );\
	out_bitoff += bmlocal3963_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3965_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, out_ptr, bmlocal3965_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3965_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_POS_ALIGNED 153

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3966_my_ptr;\
	UINT bmlocal3967_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal3966_my_ptr, bmlocal3967_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3966_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3966_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3966_my_ptr, bmlocal3967_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3968_my_ptr;\
	UINT bmlocal3969_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal3968_my_ptr, bmlocal3969_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3968_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3968_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3968_my_ptr, bmlocal3969_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3970_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET( base_ptr, bmlocal3970_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal3970_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3971_my_ptr;\
	UINT bmlocal3972_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_POS( base_ptr, bmlocal3971_my_ptr, bmlocal3972_my_bitoff );\
	(*((UINT8*)bmlocal3971_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3972_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3973_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal3973_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3973_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3976_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_GET_SIZE( base_ptr, out_bytes, bmlocal3976_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3976_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "soundingNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3979_acc_bytes;\
	UINT bmlocal3980_acc_bits;\
	PVOID bmlocal3981_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_POS( base_ptr, bmlocal3981_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3981_parent_out_ptr;\
	bmlocal3979_acc_bytes = 10;\
	bmlocal3980_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3979_acc_bytes );\
	out_bitoff += bmlocal3980_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3982_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, out_ptr, bmlocal3982_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3982_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_POS_ALIGNED 154

// COMPOSITE: Full name: 'L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI' Type: 'ULNoiseAndInterferenceLevel', Inner, Non-instance, No bitoff root
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3983_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, bmlocal3983_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3983_parent_out_ptr;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3984_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, out_ptr, bmlocal3984_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3984_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_POS_ALIGNED 154

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: accumulated=(2,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3985_my_ptr;\
	UINT bmlocal3986_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal3985_my_ptr, bmlocal3986_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3985_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3985_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3985_my_ptr, bmlocal3986_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3987_my_ptr;\
	UINT bmlocal3988_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal3987_my_ptr, bmlocal3988_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3987_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3987_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal3987_my_ptr, bmlocal3988_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal3989_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET( base_ptr, bmlocal3989_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "valid", 8, (UINT)(bmlocal3989_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3990_my_ptr;\
	UINT bmlocal3991_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_POS( base_ptr, bmlocal3990_my_ptr, bmlocal3991_my_bitoff );\
	(*((UINT8*)bmlocal3990_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal3991_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal3992_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_GET_SIZE( base_ptr, out_bytes, bmlocal3992_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal3992_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal3995_acc_bytes;\
	UINT bmlocal3996_acc_bits;\
	PVOID bmlocal3997_parent_out_ptr;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_POS( base_ptr, bmlocal3997_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal3997_parent_out_ptr;\
	bmlocal3995_acc_bytes = 1;\
	bmlocal3996_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal3995_acc_bytes );\
	out_bitoff += bmlocal3996_acc_bits;\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal3998_tmp_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, out_ptr, bmlocal3998_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal3998_tmp_bitoff);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_POS_ALIGNED 155

// Alignment of L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: accumulated=(3,0, ABA=4), parent.base=(2,0, ABA=4)
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal3999_my_ptr;\
	UINT bmlocal4000_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal3999_my_ptr, bmlocal4000_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3999_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal3999_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal3999_my_ptr, bmlocal4000_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4001_my_ptr;\
	UINT bmlocal4002_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal4001_my_ptr, bmlocal4002_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4001_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4001_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4001_my_ptr, bmlocal4002_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal4003_out_val;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET( base_ptr, bmlocal4003_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "level", 8, (UINT)(bmlocal4003_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4004_my_ptr;\
	UINT bmlocal4005_my_bitoff;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_POS( base_ptr, bmlocal4004_my_ptr, bmlocal4005_my_bitoff );\
	(*((UINT8*)bmlocal4004_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4005_my_bitoff );\
}

// L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4006_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_GET_SIZE( base_ptr, out_bytes, bmlocal4006_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4006_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_BYTES_SIZE 1

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4009_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_GET_SIZE( base_ptr, out_bytes, bmlocal4009_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4009_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_BYTES_SIZE 2

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "mimoNI", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_valid_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_level_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4012_tmp_bits;\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_GET_SIZE( base_ptr, out_bytes, bmlocal4012_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4012_tmp_bits );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_BYTES_SIZE 12

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "ulNoiseAndInterferenceLevel", 1);\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_cqiAckPeriodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_puscNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_amcNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_periodicRangingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_soundingNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_mimoNI_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal4015_acc_bytes;\
	UINT bmlocal4016_acc_bits;\
	PVOID bmlocal4017_parent_out_ptr;\
	BM_L1DM_Tpc_GET_POS( base_ptr, bmlocal4017_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal4017_parent_out_ptr;\
	bmlocal4015_acc_bytes = 40;\
	bmlocal4016_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal4015_acc_bytes );\
	out_bitoff += bmlocal4016_acc_bits;\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal4018_tmp_bitoff;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS( base_ptr, out_ptr, bmlocal4018_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal4018_tmp_bitoff);\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_POS_ALIGNED 156

// Alignment of L1DM_Tpc_LackOfHeadroomCounter: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L1DM_Tpc_LackOfHeadroomCounter_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4019_my_ptr;\
	UINT bmlocal4020_my_bitoff;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal4019_my_ptr, bmlocal4020_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4019_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4019_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal4019_my_ptr, bmlocal4020_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4021_my_ptr;\
	UINT bmlocal4022_my_bitoff;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal4021_my_ptr, bmlocal4022_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4021_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal4021_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal4021_my_ptr, bmlocal4022_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L1DM_Tpc_LackOfHeadroomCounter: IS_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_LackOfHeadroomCounter: SET_DEFAULT accessor is not defined because no default value was specified.
// L1DM_Tpc_LackOfHeadroomCounter: IS_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_LackOfHeadroomCounter: SET_RESET accessor is not defined because no reset value was specified.
// L1DM_Tpc_LackOfHeadroomCounter: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L1DM_Tpc_LackOfHeadroomCounter: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L1DM_Tpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal4023_out_val;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET( base_ptr, bmlocal4023_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "LackOfHeadroomCounter", 16, (UINT)(bmlocal4023_out_val), "%d", 1);\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal4024_my_ptr;\
	UINT bmlocal4025_my_bitoff;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET_POS( base_ptr, bmlocal4024_my_ptr, bmlocal4025_my_bitoff );\
	(*((UINT16*)bmlocal4024_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal4025_my_bitoff );\
}

// L1DM_Tpc_LackOfHeadroomCounter: Validation accessors are not defined because validation condition was not specified.
#define BM_L1DM_Tpc_LackOfHeadroomCounter_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4026_tmp_bits;\
	BM_L1DM_Tpc_LackOfHeadroomCounter_GET_SIZE( base_ptr, out_bytes, bmlocal4026_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4026_tmp_bits );\
}

#define BM_L1DM_Tpc_LackOfHeadroomCounter_BYTES_SIZE 2

#define BM_L1DM_Tpc_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 42;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4029_tmp_bits;\
	BM_L1DM_Tpc_GET_SIZE( base_ptr, out_bytes, bmlocal4029_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4029_tmp_bits );\
}

#define BM_L1DM_Tpc_BYTES_SIZE 42

#define BM_L1DM_Tpc_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Tpc", 1);\
	BM_L1DM_Tpc_PowerPerToneCur_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_PowerPerToneAvg_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_PathLoss_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_Headroom_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_Reserved_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_powerControlMode_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_isTx_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_CurrentFrameTxPower_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ExtremePowerValues_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_offsetBSperSS_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_offsetSSperSS_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_ulNoiseAndInterferenceLevel_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_LackOfHeadroomCounter_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_Tpc_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_Tpc_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L1DM_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 158;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal4032_tmp_bits;\
	BM_L1DM_GET_SIZE( base_ptr, out_bytes, bmlocal4032_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal4032_tmp_bits );\
}

#define BM_L1DM_BYTES_SIZE 158

#define BM_L1DM_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L1DM", 1);\
	BM_L1DM_PhyConfig_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_PhyPerf_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L1DM_Tpc_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L1DM_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L1DM_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L1DMMONITORGROUPS_H_ */

