/*****************************************************************************
 * Automatically generated by Bitman2Base V3.9.2.0 (2.0) Bitman2 (exe) V3.9.1.0 (1.0) - DO NOT EDIT!
 * Generated at 2/18/2008 7:22:25 PM
 *
 * Project : Ofer
 * Module  : L3L4 types define
 * Author  : Roy Ramon
 * Date    : Oct 25th 2006
 * Purpose : Define the L3 L4 msgs
 *****************************************************************************/

#if !defined(_BITMAN_BOOTSTRAP_H_)
#define _BITMAN_BOOTSTRAP_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V3.9.2.0 (2.0) Bitman2 (exe) V3.9.1.0 (1.0)"
#endif 

// Definitions

typedef UINT8 BootstrapMessage[20];

// COMPOSITE: Full name: 'BootstrapMessage' Type: 'BootstrapMessage', Top-level, Non-instance, Including bitoff root
#define BM_BootstrapMessage_Version_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of BootstrapMessage_Version: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Version_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Version_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal55_my_ptr;\
	UINT bmlocal56_my_bitoff;\
	BM_BootstrapMessage_Version_GET_POS( base_ptr, base_bitoff, bmlocal55_my_ptr, bmlocal56_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal55_my_ptr, bmlocal56_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT16 BM_INLINE_BootstrapMessage_Version_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT16 bmlocal57_tmp_var;
	BM_BootstrapMessage_Version_GET( base_ptr, base_bitoff, bmlocal57_tmp_var );
	return bmlocal57_tmp_var;
}

#define BM_BootstrapMessage_Version_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal58_my_ptr;\
	UINT bmlocal59_my_bitoff;\
	BM_BootstrapMessage_Version_GET_POS( base_ptr, base_bitoff, bmlocal58_my_ptr, bmlocal59_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal58_my_ptr, bmlocal59_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Version: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Version: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Version: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Version: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Version: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Version: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Version_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal60_out_val;\
	BM_BootstrapMessage_Version_GET( base_ptr, base_bitoff, bmlocal60_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Version", 16, (UINT)(bmlocal60_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_Version_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Version_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_Version: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Version_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal61_val;\
	BM_BootstrapMessage_Version_GET( base_ptr, base_bitoff, bmlocal61_val );\
	(bmlocal61_val)++;\
	BM_BootstrapMessage_Version_SET( base_ptr, base_bitoff, bmlocal61_val );\
}

#define BM_BootstrapMessage_Version_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal62_tmp_bits;\
	BM_BootstrapMessage_Version_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal62_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal62_tmp_bits );\
}

#define BM_BootstrapMessage_Version_BYTES_SIZE 2

#define BM_BootstrapMessage_Protocol_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal65_acc_bytes;\
	UINT bmlocal66_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal65_acc_bytes = 2;\
	bmlocal66_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal65_acc_bytes );\
	out_bitoff += bmlocal66_acc_bits;\
}

// Alignment of BootstrapMessage_Protocol: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Protocol_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Protocol_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal67_my_ptr;\
	UINT bmlocal68_my_bitoff;\
	BM_BootstrapMessage_Protocol_GET_POS( base_ptr, base_bitoff, bmlocal67_my_ptr, bmlocal68_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal67_my_ptr, bmlocal68_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT16 BM_INLINE_BootstrapMessage_Protocol_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT16 bmlocal69_tmp_var;
	BM_BootstrapMessage_Protocol_GET( base_ptr, base_bitoff, bmlocal69_tmp_var );
	return bmlocal69_tmp_var;
}

#define BM_BootstrapMessage_Protocol_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal70_my_ptr;\
	UINT bmlocal71_my_bitoff;\
	BM_BootstrapMessage_Protocol_GET_POS( base_ptr, base_bitoff, bmlocal70_my_ptr, bmlocal71_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal70_my_ptr, bmlocal71_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Protocol: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Protocol: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Protocol: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Protocol: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Protocol: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Protocol: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Protocol_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal72_out_val;\
	BM_BootstrapMessage_Protocol_GET( base_ptr, base_bitoff, bmlocal72_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Protocol", 16, (UINT)(bmlocal72_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_Protocol_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Protocol_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_Protocol: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Protocol_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal73_val;\
	BM_BootstrapMessage_Protocol_GET( base_ptr, base_bitoff, bmlocal73_val );\
	(bmlocal73_val)++;\
	BM_BootstrapMessage_Protocol_SET( base_ptr, base_bitoff, bmlocal73_val );\
}

#define BM_BootstrapMessage_Protocol_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal74_tmp_bits;\
	BM_BootstrapMessage_Protocol_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal74_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal74_tmp_bits );\
}

#define BM_BootstrapMessage_Protocol_BYTES_SIZE 2

#define BM_BootstrapMessage_Length_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal77_acc_bytes;\
	UINT bmlocal78_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal77_acc_bytes = 4;\
	bmlocal78_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal77_acc_bytes );\
	out_bitoff += bmlocal78_acc_bits;\
}

// Alignment of BootstrapMessage_Length: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Length_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Length_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal79_my_ptr;\
	UINT bmlocal80_my_bitoff;\
	BM_BootstrapMessage_Length_GET_POS( base_ptr, base_bitoff, bmlocal79_my_ptr, bmlocal80_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal79_my_ptr, bmlocal80_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_BootstrapMessage_Length_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT32 bmlocal81_tmp_var;
	BM_BootstrapMessage_Length_GET( base_ptr, base_bitoff, bmlocal81_tmp_var );
	return bmlocal81_tmp_var;
}

#define BM_BootstrapMessage_Length_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal82_my_ptr;\
	UINT bmlocal83_my_bitoff;\
	BM_BootstrapMessage_Length_GET_POS( base_ptr, base_bitoff, bmlocal82_my_ptr, bmlocal83_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal82_my_ptr, bmlocal83_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Length: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Length: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Length_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal84_out_val;\
	BM_BootstrapMessage_Length_GET( base_ptr, base_bitoff, bmlocal84_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Length", 32, (UINT)(bmlocal84_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_Length_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Length_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Length_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal85_val;\
	BM_BootstrapMessage_Length_GET( base_ptr, base_bitoff, bmlocal85_val );\
	(bmlocal85_val)++;\
	BM_BootstrapMessage_Length_SET( base_ptr, base_bitoff, bmlocal85_val );\
}

#define BM_BootstrapMessage_Length_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal86_tmp_bits;\
	BM_BootstrapMessage_Length_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal86_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal86_tmp_bits );\
}

#define BM_BootstrapMessage_Length_BYTES_SIZE 4

#define BM_BootstrapMessage_NonceTag_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal89_acc_bytes;\
	UINT bmlocal90_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal89_acc_bytes = 8;\
	bmlocal90_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal89_acc_bytes );\
	out_bitoff += bmlocal90_acc_bits;\
}

// Alignment of BootstrapMessage_NonceTag: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_NonceTag_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_NonceTag_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal91_my_ptr;\
	UINT bmlocal92_my_bitoff;\
	BM_BootstrapMessage_NonceTag_GET_POS( base_ptr, base_bitoff, bmlocal91_my_ptr, bmlocal92_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal91_my_ptr, bmlocal92_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT16 BM_INLINE_BootstrapMessage_NonceTag_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT16 bmlocal93_tmp_var;
	BM_BootstrapMessage_NonceTag_GET( base_ptr, base_bitoff, bmlocal93_tmp_var );
	return bmlocal93_tmp_var;
}

#define BM_BootstrapMessage_NonceTag_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal94_my_ptr;\
	UINT bmlocal95_my_bitoff;\
	BM_BootstrapMessage_NonceTag_GET_POS( base_ptr, base_bitoff, bmlocal94_my_ptr, bmlocal95_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal94_my_ptr, bmlocal95_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_NonceTag: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_NonceTag: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_NonceTag: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_NonceTag: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_NonceTag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_NonceTag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_NonceTag_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal96_out_val;\
	BM_BootstrapMessage_NonceTag_GET( base_ptr, base_bitoff, bmlocal96_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NonceTag", 16, (UINT)(bmlocal96_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_NonceTag_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_NonceTag_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_NonceTag: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_NonceTag_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal97_val;\
	BM_BootstrapMessage_NonceTag_GET( base_ptr, base_bitoff, bmlocal97_val );\
	(bmlocal97_val)++;\
	BM_BootstrapMessage_NonceTag_SET( base_ptr, base_bitoff, bmlocal97_val );\
}

#define BM_BootstrapMessage_NonceTag_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal98_tmp_bits;\
	BM_BootstrapMessage_NonceTag_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal98_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal98_tmp_bits );\
}

#define BM_BootstrapMessage_NonceTag_BYTES_SIZE 2

#define BM_BootstrapMessage_NonceLength_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal101_acc_bytes;\
	UINT bmlocal102_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal101_acc_bytes = 10;\
	bmlocal102_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal101_acc_bytes );\
	out_bitoff += bmlocal102_acc_bits;\
}

// Alignment of BootstrapMessage_NonceLength: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_NonceLength_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal103_my_ptr;\
	UINT bmlocal104_my_bitoff;\
	BM_BootstrapMessage_NonceLength_GET_POS( base_ptr, base_bitoff, bmlocal103_my_ptr, bmlocal104_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal103_my_ptr, bmlocal104_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_BootstrapMessage_NonceLength_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT32 bmlocal105_tmp_var;
	BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal105_tmp_var );
	return bmlocal105_tmp_var;
}

#define BM_BootstrapMessage_NonceLength_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal106_my_ptr;\
	UINT bmlocal107_my_bitoff;\
	BM_BootstrapMessage_NonceLength_GET_POS( base_ptr, base_bitoff, bmlocal106_my_ptr, bmlocal107_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal106_my_ptr, bmlocal107_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_NonceLength: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_NonceLength: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_NonceLength: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_NonceLength: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_NonceLength: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_NonceLength: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_NonceLength_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal108_out_val;\
	BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal108_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "NonceLength", 32, (UINT)(bmlocal108_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_NonceLength_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_NonceLength_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_NonceLength: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_NonceLength_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal109_val;\
	BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal109_val );\
	(bmlocal109_val)++;\
	BM_BootstrapMessage_NonceLength_SET( base_ptr, base_bitoff, bmlocal109_val );\
}

#define BM_BootstrapMessage_NonceLength_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal110_tmp_bits;\
	BM_BootstrapMessage_NonceLength_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal110_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal110_tmp_bits );\
}

#define BM_BootstrapMessage_NonceLength_BYTES_SIZE 4

#define BM_BootstrapMessage_Nonce_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal113_acc_bytes;\
	UINT bmlocal114_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal113_acc_bytes = 14;\
	bmlocal114_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal113_acc_bytes );\
	out_bitoff += bmlocal114_acc_bits;\
}

// ARRAY: BootstrapMessage_Nonce
#define BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal115_var0;\
		BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal115_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal115_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

BMI_INLINE UINT BM_INLINE_BootstrapMessage_Nonce_GET_SIZE(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT bmlocal116_my_bytes;
	UINT bmlocal117_my_bits;
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, bmlocal116_my_bytes, bmlocal117_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal116_my_bytes, bmlocal117_my_bits);
	BMI_UNUSED_VAR( bmlocal117_my_bits );
	return bmlocal116_my_bytes;
}

#define BM_BootstrapMessage_Nonce_GET_DIMENSION_ELEMENT_COUNT( base_ptr, base_bitoff, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal118_var0;\
			BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal118_var0 );\
			out_element_count = (UINT)(bmlocal118_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Nonce_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal119_out_ptr;\
	UINT bmlocal120_out_bitoff;\
	UINT bmlocal121_element_size_bytes;\
	UINT bmlocal122_element_size_bits;\
	BM_BootstrapMessage_Nonce_GET_POS( base_ptr, base_bitoff, bmlocal119_out_ptr, bmlocal120_out_bitoff );\
	bmlocal121_element_size_bytes = 1;\
	bmlocal122_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal119_out_ptr) + (idx0) * bmlocal121_element_size_bytes );\
	out_bitoff = bmlocal120_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal122_element_size_bits );\
}

// COMPOSITE: Full name: 'BootstrapMessage_Nonce' Type: 'Uint8', Inner, Non-instance, Including bitoff root
#define BM_BootstrapMessage_Nonce_value_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal123_parent_out_ptr;\
	BM_BootstrapMessage_Nonce_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal123_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal123_parent_out_ptr;\
}

// Alignment of BootstrapMessage_Nonce_value: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Nonce_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Nonce_value_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal124_my_ptr;\
	UINT bmlocal125_my_bitoff;\
	BM_BootstrapMessage_Nonce_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal124_my_ptr, bmlocal125_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal124_my_ptr, bmlocal125_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_BootstrapMessage_Nonce_value_GET(PVOID base_ptr, UINT base_bitoff, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal126_tmp_var;
	BM_BootstrapMessage_Nonce_value_GET( base_ptr, base_bitoff, idx0, bmlocal126_tmp_var );
	return bmlocal126_tmp_var;
}

#define BM_BootstrapMessage_Nonce_value_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal127_my_ptr;\
	UINT bmlocal128_my_bitoff;\
	BM_BootstrapMessage_Nonce_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal127_my_ptr, bmlocal128_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal127_my_ptr, bmlocal128_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Nonce_value: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Nonce_value: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Nonce_value: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Nonce_value: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Nonce_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Nonce_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Nonce_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal129_out_val;\
	BM_BootstrapMessage_Nonce_value_GET( base_ptr, base_bitoff, idx0, bmlocal129_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal129_out_val), "%u", 1);\
}

#define BM_BootstrapMessage_Nonce_value_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Nonce_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

// BootstrapMessage_Nonce_value: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Nonce_value_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal130_val;\
	BM_BootstrapMessage_Nonce_value_GET( base_ptr, base_bitoff, idx0, bmlocal130_val );\
	(bmlocal130_val)++;\
	BM_BootstrapMessage_Nonce_value_SET( base_ptr, base_bitoff, idx0, bmlocal130_val );\
}

#define BM_BootstrapMessage_Nonce_value_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal131_tmp_bits;\
	BM_BootstrapMessage_Nonce_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal131_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal131_tmp_bits );\
}

#define BM_BootstrapMessage_Nonce_value_BYTES_SIZE 1

#define BM_BootstrapMessage_Nonce_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Nonce_GET_BYTES_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal134_tmp_bits;\
	BM_BootstrapMessage_Nonce_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal134_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal134_tmp_bits );\
}

#define BM_BootstrapMessage_Nonce_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_BootstrapMessage_Nonce_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_BootstrapMessage_Nonce_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Nonce_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Nonce_DUMP_IDX( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Nonce_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_BootstrapMessage_Nonce_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal135_dim_size0;\
	UINT bmlocal136_idx0;\
	{\
		UINT32 bmlocal137_var0;\
		BM_BootstrapMessage_NonceLength_GET( base_ptr, base_bitoff, bmlocal137_var0 );\
		bmlocal135_dim_size0 = (UINT)(bmlocal137_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Nonce", 1);\
	for( bmlocal136_idx0=0; bmlocal136_idx0<bmlocal135_dim_size0; bmlocal136_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal136_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BootstrapMessage_Nonce_DUMP_DEPTH_IDX( base_ptr, base_bitoff, bmlocal136_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Nonce_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Nonce_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_BootstrapMessage_Nonce_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal138_tmp_bits;\
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal138_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal138_tmp_bits );\
}


#define BM_BootstrapMessage_Tag_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal139_tmp_bytes = 0;\
	UINT bmlocal140_tmp_bits = 0;\
	UINT bmlocal141_acc_bytes;\
	UINT bmlocal142_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal141_acc_bytes = 14;\
	bmlocal142_acc_bits = 0;\
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, bmlocal139_tmp_bytes, bmlocal140_tmp_bits );\
	bmlocal141_acc_bytes += bmlocal139_tmp_bytes;\
	bmlocal142_acc_bits += bmlocal140_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal141_acc_bytes );\
	out_bitoff += bmlocal142_acc_bits;\
}

// Alignment of BootstrapMessage_Tag: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Tag_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Tag_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal143_my_ptr;\
	UINT bmlocal144_my_bitoff;\
	BM_BootstrapMessage_Tag_GET_POS( base_ptr, base_bitoff, bmlocal143_my_ptr, bmlocal144_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal143_my_ptr, bmlocal144_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT16 BM_INLINE_BootstrapMessage_Tag_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT16 bmlocal145_tmp_var;
	BM_BootstrapMessage_Tag_GET( base_ptr, base_bitoff, bmlocal145_tmp_var );
	return bmlocal145_tmp_var;
}

#define BM_BootstrapMessage_Tag_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal146_my_ptr;\
	UINT bmlocal147_my_bitoff;\
	BM_BootstrapMessage_Tag_GET_POS( base_ptr, base_bitoff, bmlocal146_my_ptr, bmlocal147_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal146_my_ptr, bmlocal147_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Tag: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Tag: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Tag: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Tag: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Tag: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Tag: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Tag_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal148_out_val;\
	BM_BootstrapMessage_Tag_GET( base_ptr, base_bitoff, bmlocal148_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Tag", 16, (UINT)(bmlocal148_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_Tag_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Tag_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_Tag: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Tag_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal149_val;\
	BM_BootstrapMessage_Tag_GET( base_ptr, base_bitoff, bmlocal149_val );\
	(bmlocal149_val)++;\
	BM_BootstrapMessage_Tag_SET( base_ptr, base_bitoff, bmlocal149_val );\
}

#define BM_BootstrapMessage_Tag_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal150_tmp_bits;\
	BM_BootstrapMessage_Tag_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal150_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal150_tmp_bits );\
}

#define BM_BootstrapMessage_Tag_BYTES_SIZE 2

#define BM_BootstrapMessage_CiphertextLength_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal151_tmp_bytes = 0;\
	UINT bmlocal152_tmp_bits = 0;\
	UINT bmlocal153_acc_bytes;\
	UINT bmlocal154_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal153_acc_bytes = 16;\
	bmlocal154_acc_bits = 0;\
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, bmlocal151_tmp_bytes, bmlocal152_tmp_bits );\
	bmlocal153_acc_bytes += bmlocal151_tmp_bytes;\
	bmlocal154_acc_bits += bmlocal152_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal153_acc_bytes );\
	out_bitoff += bmlocal154_acc_bits;\
}

// Alignment of BootstrapMessage_CiphertextLength: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_CiphertextLength_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal155_my_ptr;\
	UINT bmlocal156_my_bitoff;\
	BM_BootstrapMessage_CiphertextLength_GET_POS( base_ptr, base_bitoff, bmlocal155_my_ptr, bmlocal156_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal155_my_ptr, bmlocal156_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_BootstrapMessage_CiphertextLength_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT32 bmlocal157_tmp_var;
	BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal157_tmp_var );
	return bmlocal157_tmp_var;
}

#define BM_BootstrapMessage_CiphertextLength_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal158_my_ptr;\
	UINT bmlocal159_my_bitoff;\
	BM_BootstrapMessage_CiphertextLength_GET_POS( base_ptr, base_bitoff, bmlocal158_my_ptr, bmlocal159_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal158_my_ptr, bmlocal159_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_CiphertextLength: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_CiphertextLength: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_CiphertextLength: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_CiphertextLength: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_CiphertextLength: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_CiphertextLength: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_CiphertextLength_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal160_out_val;\
	BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal160_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "CiphertextLength", 32, (UINT)(bmlocal160_out_val), "%d", 1);\
}

#define BM_BootstrapMessage_CiphertextLength_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_CiphertextLength_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

// BootstrapMessage_CiphertextLength: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_CiphertextLength_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal161_val;\
	BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal161_val );\
	(bmlocal161_val)++;\
	BM_BootstrapMessage_CiphertextLength_SET( base_ptr, base_bitoff, bmlocal161_val );\
}

#define BM_BootstrapMessage_CiphertextLength_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal162_tmp_bits;\
	BM_BootstrapMessage_CiphertextLength_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal162_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal162_tmp_bits );\
}

#define BM_BootstrapMessage_CiphertextLength_BYTES_SIZE 4

#define BM_BootstrapMessage_Ciphertext_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal163_tmp_bytes = 0;\
	UINT bmlocal164_tmp_bits = 0;\
	UINT bmlocal165_acc_bytes;\
	UINT bmlocal166_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal165_acc_bytes = 20;\
	bmlocal166_acc_bits = 0;\
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, bmlocal163_tmp_bytes, bmlocal164_tmp_bits );\
	bmlocal165_acc_bytes += bmlocal163_tmp_bytes;\
	bmlocal166_acc_bits += bmlocal164_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal165_acc_bytes );\
	out_bitoff += bmlocal166_acc_bits;\
}

// ARRAY: BootstrapMessage_Ciphertext
#define BM_BootstrapMessage_Ciphertext_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal167_var0;\
		BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal167_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal167_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

BMI_INLINE UINT BM_INLINE_BootstrapMessage_Ciphertext_GET_SIZE(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT bmlocal168_my_bytes;
	UINT bmlocal169_my_bits;
	BM_BootstrapMessage_Ciphertext_GET_SIZE( base_ptr, base_bitoff, bmlocal168_my_bytes, bmlocal169_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal168_my_bytes, bmlocal169_my_bits);
	BMI_UNUSED_VAR( bmlocal169_my_bits );
	return bmlocal168_my_bytes;
}

#define BM_BootstrapMessage_Ciphertext_GET_DIMENSION_ELEMENT_COUNT( base_ptr, base_bitoff, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal170_var0;\
			BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal170_var0 );\
			out_element_count = (UINT)(bmlocal170_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Ciphertext_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal171_out_ptr;\
	UINT bmlocal172_out_bitoff;\
	UINT bmlocal173_element_size_bytes;\
	UINT bmlocal174_element_size_bits;\
	BM_BootstrapMessage_Ciphertext_GET_POS( base_ptr, base_bitoff, bmlocal171_out_ptr, bmlocal172_out_bitoff );\
	bmlocal173_element_size_bytes = 1;\
	bmlocal174_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal171_out_ptr) + (idx0) * bmlocal173_element_size_bytes );\
	out_bitoff = bmlocal172_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal174_element_size_bits );\
}

// COMPOSITE: Full name: 'BootstrapMessage_Ciphertext' Type: 'Uint8', Inner, Non-instance, Including bitoff root
#define BM_BootstrapMessage_Ciphertext_value_GET_POS( base_ptr, base_bitoff, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal175_parent_out_ptr;\
	BM_BootstrapMessage_Ciphertext_GET_ELEMENT_POS( base_ptr, base_bitoff, idx0, bmlocal175_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal175_parent_out_ptr;\
}

// Alignment of BootstrapMessage_Ciphertext_value: accumulated=(Variable), parent.base=(Variable)
#define BM_BootstrapMessage_Ciphertext_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Ciphertext_value_GET( base_ptr, base_bitoff, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal176_my_ptr;\
	UINT bmlocal177_my_bitoff;\
	BM_BootstrapMessage_Ciphertext_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal176_my_ptr, bmlocal177_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_GET( bmlocal176_my_ptr, bmlocal177_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_BootstrapMessage_Ciphertext_value_GET(PVOID base_ptr, UINT base_bitoff, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal178_tmp_var;
	BM_BootstrapMessage_Ciphertext_value_GET( base_ptr, base_bitoff, idx0, bmlocal178_tmp_var );
	return bmlocal178_tmp_var;
}

#define BM_BootstrapMessage_Ciphertext_value_SET( base_ptr, base_bitoff, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal179_my_ptr;\
	UINT bmlocal180_my_bitoff;\
	BM_BootstrapMessage_Ciphertext_value_GET_POS( base_ptr, base_bitoff, idx0, bmlocal179_my_ptr, bmlocal180_my_bitoff );\
	BMI_GENERIC_32BIT_BIG_SET( bmlocal179_my_ptr, bmlocal180_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// BootstrapMessage_Ciphertext_value: IS_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Ciphertext_value: SET_DEFAULT accessor is not defined because no default value was specified.
// BootstrapMessage_Ciphertext_value: IS_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Ciphertext_value: SET_RESET accessor is not defined because no reset value was specified.
// BootstrapMessage_Ciphertext_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// BootstrapMessage_Ciphertext_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_BootstrapMessage_Ciphertext_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal181_out_val;\
	BM_BootstrapMessage_Ciphertext_value_GET( base_ptr, base_bitoff, idx0, bmlocal181_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal181_out_val), "%u", 1);\
}

#define BM_BootstrapMessage_Ciphertext_value_DUMP( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Ciphertext_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, 0 );\
}

// BootstrapMessage_Ciphertext_value: Validation accessors are not defined because validation condition was not specified.
#define BM_BootstrapMessage_Ciphertext_value_INCREMENT( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal182_val;\
	BM_BootstrapMessage_Ciphertext_value_GET( base_ptr, base_bitoff, idx0, bmlocal182_val );\
	(bmlocal182_val)++;\
	BM_BootstrapMessage_Ciphertext_value_SET( base_ptr, base_bitoff, idx0, bmlocal182_val );\
}

#define BM_BootstrapMessage_Ciphertext_value_GET_BYTES_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal183_tmp_bits;\
	BM_BootstrapMessage_Ciphertext_value_GET_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal183_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal183_tmp_bits );\
}

#define BM_BootstrapMessage_Ciphertext_value_BYTES_SIZE 1

#define BM_BootstrapMessage_Ciphertext_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Ciphertext_GET_BYTES_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal186_tmp_bits;\
	BM_BootstrapMessage_Ciphertext_GET_CELL_SIZE( base_ptr, base_bitoff, idx0, out_bytes, bmlocal186_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal186_tmp_bits );\
}

#define BM_BootstrapMessage_Ciphertext_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_BootstrapMessage_Ciphertext_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_BootstrapMessage_Ciphertext_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Ciphertext_value_DUMP_DEPTH( base_ptr, base_bitoff, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_BootstrapMessage_Ciphertext_DUMP_IDX( base_ptr, base_bitoff, idx0 )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Ciphertext_DUMP_DEPTH_IDX( base_ptr, base_bitoff, idx0, 0 );\
}

#define BM_BootstrapMessage_Ciphertext_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal187_dim_size0;\
	UINT bmlocal188_idx0;\
	{\
		UINT32 bmlocal189_var0;\
		BM_BootstrapMessage_CiphertextLength_GET( base_ptr, base_bitoff, bmlocal189_var0 );\
		bmlocal187_dim_size0 = (UINT)(bmlocal189_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "Ciphertext", 1);\
	for( bmlocal188_idx0=0; bmlocal188_idx0<bmlocal187_dim_size0; bmlocal188_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal188_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_BootstrapMessage_Ciphertext_DUMP_DEPTH_IDX( base_ptr, base_bitoff, bmlocal188_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_Ciphertext_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_Ciphertext_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_BootstrapMessage_Ciphertext_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal190_tmp_bits;\
	BM_BootstrapMessage_Ciphertext_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal190_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal190_tmp_bits );\
}


#define BM_BootstrapMessage_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal191_tmp_bytes = 0;\
	UINT bmlocal192_tmp_bits = 0;\
	out_bytes = 20;\
	out_bits = 0;\
	BM_BootstrapMessage_Nonce_GET_SIZE( base_ptr, base_bitoff, bmlocal191_tmp_bytes, bmlocal192_tmp_bits );\
	out_bytes += bmlocal191_tmp_bytes;\
	out_bits += bmlocal192_tmp_bits;\
	BM_BootstrapMessage_Ciphertext_GET_SIZE( base_ptr, base_bitoff, bmlocal191_tmp_bytes, bmlocal192_tmp_bits );\
	out_bytes += bmlocal191_tmp_bytes;\
	out_bits += bmlocal192_tmp_bits;\
}

#define BM_BootstrapMessage_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal193_tmp_bits;\
	BM_BootstrapMessage_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal193_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal193_tmp_bits );\
}

#define BM_BootstrapMessage_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "BootstrapMessage", 1);\
	BM_BootstrapMessage_Version_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_Protocol_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_Length_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_NonceTag_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_NonceLength_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_Nonce_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_Tag_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_CiphertextLength_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_BootstrapMessage_Ciphertext_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_BootstrapMessage_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_BootstrapMessage_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_BOOTSTRAP_H_ */

