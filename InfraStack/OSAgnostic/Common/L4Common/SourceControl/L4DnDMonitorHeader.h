/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 3/23/2009 2:35:08 PM
 *
 * Project : Ofer
 * Module  : L3L4 interface
 * Author  : Roy Ramon And Anat Ganor
 * Date    : Oct 25th 2006
 * Purpose : Define the L3 L4 msgs
 *****************************************************************************/

#if !defined(_BITMAN_L4DNDMONITORHEADER_H_)
#define _BITMAN_L4DNDMONITORHEADER_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "L4Common.h"
#include "MonitorGeneral.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

typedef UINT8 HostTimestamp[8];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Year : 8;
	UINT8 _Month : 8;
	UINT8 _Day : 8;
	UINT8 _Hour : 8;
	UINT8 _Minute : 8;
	UINT8 _Second : 8;
	UINT8 _Res_bytes [2];
} BMS_HostTimestamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT8 _Res_bytes [2];
	UINT8 _Second : 8;
	UINT8 _Minute : 8;
	UINT8 _Hour : 8;
	UINT8 _Day : 8;
	UINT8 _Month : 8;
	UINT8 _Year : 8;
} BMS_HostTimestamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'HostTimestamp' Type: 'HostTimestamp', Top-level, Non-instance, Including bitoff root
#define BM_HostTimestamp_Year_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
}

// Alignment of HostTimestamp_Year: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Year_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Year_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal342_my_ptr;\
	UINT bmlocal343_my_bitoff;\
	BM_HostTimestamp_Year_GET_POS( base_ptr, base_bitoff, bmlocal342_my_ptr, bmlocal343_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal342_my_ptr, bmlocal343_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Year_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal344_tmp_var;
	BM_HostTimestamp_Year_GET( base_ptr, base_bitoff, bmlocal344_tmp_var );
	return bmlocal344_tmp_var;
}

#define BM_HostTimestamp_Year_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal345_my_ptr;\
	UINT bmlocal346_my_bitoff;\
	BM_HostTimestamp_Year_GET_POS( base_ptr, base_bitoff, bmlocal345_my_ptr, bmlocal346_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal345_my_ptr, bmlocal346_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Year: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Year: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Year: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Year: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Year: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Year: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Year_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal347_out_val;\
	BM_HostTimestamp_Year_GET( base_ptr, base_bitoff, bmlocal347_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Year", 8, (UINT)(bmlocal347_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Year_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Year_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Year_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal348_val;\
	BM_HostTimestamp_Year_GET( base_ptr, base_bitoff, bmlocal348_val );\
	(bmlocal348_val)++;\
	BM_HostTimestamp_Year_SET( base_ptr, base_bitoff, bmlocal348_val );\
}

// HostTimestamp_Year: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Year_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal349_tmp_bits;\
	BM_HostTimestamp_Year_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal349_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal349_tmp_bits );\
}

#define BM_HostTimestamp_Year_BYTES_SIZE 1

#define BM_HostTimestamp_Month_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal352_acc_bytes;\
	UINT bmlocal353_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal352_acc_bytes = 1;\
	bmlocal353_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal352_acc_bytes );\
	out_bitoff += bmlocal353_acc_bits;\
}

// Alignment of HostTimestamp_Month: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Month_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Month_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal354_my_ptr;\
	UINT bmlocal355_my_bitoff;\
	BM_HostTimestamp_Month_GET_POS( base_ptr, base_bitoff, bmlocal354_my_ptr, bmlocal355_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal354_my_ptr, bmlocal355_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Month_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal356_tmp_var;
	BM_HostTimestamp_Month_GET( base_ptr, base_bitoff, bmlocal356_tmp_var );
	return bmlocal356_tmp_var;
}

#define BM_HostTimestamp_Month_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal357_my_ptr;\
	UINT bmlocal358_my_bitoff;\
	BM_HostTimestamp_Month_GET_POS( base_ptr, base_bitoff, bmlocal357_my_ptr, bmlocal358_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal357_my_ptr, bmlocal358_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Month: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Month: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Month: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Month: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Month: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Month: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Month_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal359_out_val;\
	BM_HostTimestamp_Month_GET( base_ptr, base_bitoff, bmlocal359_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Month", 8, (UINT)(bmlocal359_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Month_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Month_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Month_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal360_val;\
	BM_HostTimestamp_Month_GET( base_ptr, base_bitoff, bmlocal360_val );\
	(bmlocal360_val)++;\
	BM_HostTimestamp_Month_SET( base_ptr, base_bitoff, bmlocal360_val );\
}

// HostTimestamp_Month: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Month_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal361_tmp_bits;\
	BM_HostTimestamp_Month_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal361_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal361_tmp_bits );\
}

#define BM_HostTimestamp_Month_BYTES_SIZE 1

#define BM_HostTimestamp_Day_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal364_acc_bytes;\
	UINT bmlocal365_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal364_acc_bytes = 2;\
	bmlocal365_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal364_acc_bytes );\
	out_bitoff += bmlocal365_acc_bits;\
}

// Alignment of HostTimestamp_Day: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Day_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Day_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal366_my_ptr;\
	UINT bmlocal367_my_bitoff;\
	BM_HostTimestamp_Day_GET_POS( base_ptr, base_bitoff, bmlocal366_my_ptr, bmlocal367_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal366_my_ptr, bmlocal367_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Day_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal368_tmp_var;
	BM_HostTimestamp_Day_GET( base_ptr, base_bitoff, bmlocal368_tmp_var );
	return bmlocal368_tmp_var;
}

#define BM_HostTimestamp_Day_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal369_my_ptr;\
	UINT bmlocal370_my_bitoff;\
	BM_HostTimestamp_Day_GET_POS( base_ptr, base_bitoff, bmlocal369_my_ptr, bmlocal370_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal369_my_ptr, bmlocal370_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Day: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Day: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Day: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Day: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Day: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Day: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Day_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal371_out_val;\
	BM_HostTimestamp_Day_GET( base_ptr, base_bitoff, bmlocal371_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Day", 8, (UINT)(bmlocal371_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Day_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Day_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Day_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal372_val;\
	BM_HostTimestamp_Day_GET( base_ptr, base_bitoff, bmlocal372_val );\
	(bmlocal372_val)++;\
	BM_HostTimestamp_Day_SET( base_ptr, base_bitoff, bmlocal372_val );\
}

// HostTimestamp_Day: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Day_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal373_tmp_bits;\
	BM_HostTimestamp_Day_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal373_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal373_tmp_bits );\
}

#define BM_HostTimestamp_Day_BYTES_SIZE 1

#define BM_HostTimestamp_Hour_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal376_acc_bytes;\
	UINT bmlocal377_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal376_acc_bytes = 3;\
	bmlocal377_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal376_acc_bytes );\
	out_bitoff += bmlocal377_acc_bits;\
}

// Alignment of HostTimestamp_Hour: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Hour_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Hour_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal378_my_ptr;\
	UINT bmlocal379_my_bitoff;\
	BM_HostTimestamp_Hour_GET_POS( base_ptr, base_bitoff, bmlocal378_my_ptr, bmlocal379_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal378_my_ptr, bmlocal379_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Hour_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal380_tmp_var;
	BM_HostTimestamp_Hour_GET( base_ptr, base_bitoff, bmlocal380_tmp_var );
	return bmlocal380_tmp_var;
}

#define BM_HostTimestamp_Hour_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal381_my_ptr;\
	UINT bmlocal382_my_bitoff;\
	BM_HostTimestamp_Hour_GET_POS( base_ptr, base_bitoff, bmlocal381_my_ptr, bmlocal382_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal381_my_ptr, bmlocal382_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Hour: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Hour: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Hour: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Hour: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Hour: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Hour: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal383_out_val;\
	BM_HostTimestamp_Hour_GET( base_ptr, base_bitoff, bmlocal383_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Hour", 8, (UINT)(bmlocal383_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Hour_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Hour_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal384_val;\
	BM_HostTimestamp_Hour_GET( base_ptr, base_bitoff, bmlocal384_val );\
	(bmlocal384_val)++;\
	BM_HostTimestamp_Hour_SET( base_ptr, base_bitoff, bmlocal384_val );\
}

// HostTimestamp_Hour: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Hour_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal385_tmp_bits;\
	BM_HostTimestamp_Hour_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal385_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal385_tmp_bits );\
}

#define BM_HostTimestamp_Hour_BYTES_SIZE 1

#define BM_HostTimestamp_Minute_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal388_acc_bytes;\
	UINT bmlocal389_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal388_acc_bytes = 4;\
	bmlocal389_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal388_acc_bytes );\
	out_bitoff += bmlocal389_acc_bits;\
}

// Alignment of HostTimestamp_Minute: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Minute_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Minute_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal390_my_ptr;\
	UINT bmlocal391_my_bitoff;\
	BM_HostTimestamp_Minute_GET_POS( base_ptr, base_bitoff, bmlocal390_my_ptr, bmlocal391_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal390_my_ptr, bmlocal391_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Minute_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal392_tmp_var;
	BM_HostTimestamp_Minute_GET( base_ptr, base_bitoff, bmlocal392_tmp_var );
	return bmlocal392_tmp_var;
}

#define BM_HostTimestamp_Minute_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal393_my_ptr;\
	UINT bmlocal394_my_bitoff;\
	BM_HostTimestamp_Minute_GET_POS( base_ptr, base_bitoff, bmlocal393_my_ptr, bmlocal394_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal393_my_ptr, bmlocal394_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Minute: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Minute: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Minute: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Minute: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Minute: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Minute: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal395_out_val;\
	BM_HostTimestamp_Minute_GET( base_ptr, base_bitoff, bmlocal395_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Minute", 8, (UINT)(bmlocal395_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Minute_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Minute_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal396_val;\
	BM_HostTimestamp_Minute_GET( base_ptr, base_bitoff, bmlocal396_val );\
	(bmlocal396_val)++;\
	BM_HostTimestamp_Minute_SET( base_ptr, base_bitoff, bmlocal396_val );\
}

// HostTimestamp_Minute: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Minute_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal397_tmp_bits;\
	BM_HostTimestamp_Minute_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal397_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal397_tmp_bits );\
}

#define BM_HostTimestamp_Minute_BYTES_SIZE 1

#define BM_HostTimestamp_Second_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal400_acc_bytes;\
	UINT bmlocal401_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal400_acc_bytes = 5;\
	bmlocal401_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal400_acc_bytes );\
	out_bitoff += bmlocal401_acc_bits;\
}

// Alignment of HostTimestamp_Second: accumulated=(Variable), parent.base=(Variable)
#define BM_HostTimestamp_Second_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Second_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal402_my_ptr;\
	UINT bmlocal403_my_bitoff;\
	BM_HostTimestamp_Second_GET_POS( base_ptr, base_bitoff, bmlocal402_my_ptr, bmlocal403_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal402_my_ptr, bmlocal403_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_HostTimestamp_Second_GET(PVOID base_ptr, UINT base_bitoff)
{
	/*lint --e{*} */
	UINT8 bmlocal404_tmp_var;
	BM_HostTimestamp_Second_GET( base_ptr, base_bitoff, bmlocal404_tmp_var );
	return bmlocal404_tmp_var;
}

#define BM_HostTimestamp_Second_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal405_my_ptr;\
	UINT bmlocal406_my_bitoff;\
	BM_HostTimestamp_Second_GET_POS( base_ptr, base_bitoff, bmlocal405_my_ptr, bmlocal406_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal405_my_ptr, bmlocal406_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// HostTimestamp_Second: IS_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Second: SET_DEFAULT accessor is not defined because no default value was specified.
// HostTimestamp_Second: IS_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Second: SET_RESET accessor is not defined because no reset value was specified.
// HostTimestamp_Second: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// HostTimestamp_Second: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_HostTimestamp_Second_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal407_out_val;\
	BM_HostTimestamp_Second_GET( base_ptr, base_bitoff, bmlocal407_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Second", 8, (UINT)(bmlocal407_out_val), "%d", 1);\
}

#define BM_HostTimestamp_Second_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Second_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Second_INCREMENT( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal408_val;\
	BM_HostTimestamp_Second_GET( base_ptr, base_bitoff, bmlocal408_val );\
	(bmlocal408_val)++;\
	BM_HostTimestamp_Second_SET( base_ptr, base_bitoff, bmlocal408_val );\
}

// HostTimestamp_Second: Validation accessors are not defined because validation condition was not specified.
#define BM_HostTimestamp_Second_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal409_tmp_bits;\
	BM_HostTimestamp_Second_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal409_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal409_tmp_bits );\
}

#define BM_HostTimestamp_Second_BYTES_SIZE 1

#define BM_HostTimestamp_Res_GET_POS( base_ptr, base_bitoff, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal412_acc_bytes;\
	UINT bmlocal413_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = base_bitoff;\
	bmlocal412_acc_bytes = 6;\
	bmlocal413_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal412_acc_bytes );\
	out_bitoff += bmlocal413_acc_bits;\
}

#define BM_HostTimestamp_Res_GET( base_ptr, base_bitoff, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal414_my_ptr;\
	UINT bmlocal415_my_bitoff;\
	BM_HostTimestamp_Res_GET_POS( base_ptr, base_bitoff, bmlocal414_my_ptr, bmlocal415_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal414_my_ptr, bmlocal415_my_bitoff, 16, UINT16, out_val, 0xFFFFFFFF );\
}

#define BM_HostTimestamp_Res_SET( base_ptr, base_bitoff, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal416_my_ptr;\
	UINT bmlocal417_my_bitoff;\
	BM_HostTimestamp_Res_GET_POS( base_ptr, base_bitoff, bmlocal416_my_ptr, bmlocal417_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal416_my_ptr, bmlocal417_my_bitoff, 16, in_val, 0xFFFFFFFF );\
}

#define BM_HostTimestamp_Res_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_Res_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal418_out_bytes;\
	UINT bmlocal419_out_bits;\
	BM_HostTimestamp_Res_GET_SIZE( base_ptr, base_bitoff, bmlocal418_out_bytes, bmlocal419_out_bits );\
	bmlocal419_out_bits += bmlocal418_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-Res", 32, (UINT)(bmlocal419_out_bits), "%d", 1);\
}

#define BM_HostTimestamp_Res_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_Res_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}

#define BM_HostTimestamp_Res_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal420_tmp_bits;\
	BM_HostTimestamp_Res_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal420_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal420_tmp_bits );\
}

#define BM_HostTimestamp_Res_BYTES_SIZE 2

#define BM_HostTimestamp_GET_SIZE( base_ptr, base_bitoff, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_GET_BYTES_SIZE( base_ptr, base_bitoff, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal423_tmp_bits;\
	BM_HostTimestamp_GET_SIZE( base_ptr, base_bitoff, out_bytes, bmlocal423_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal423_tmp_bits );\
}

#define BM_HostTimestamp_BYTES_SIZE 8

#define BM_HostTimestamp_DUMP_DEPTH( base_ptr, base_bitoff, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HostTimestamp", 1);\
	BM_HostTimestamp_Year_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Month_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Day_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Second_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BM_HostTimestamp_Res_DUMP_DEPTH( base_ptr, base_bitoff, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( base_bitoff );\
}

#define BM_HostTimestamp_DUMP( base_ptr, base_bitoff )\
{\
	/*lint --e{*} */\
	BM_HostTimestamp_DUMP_DEPTH( base_ptr, base_bitoff, 0 );\
}


typedef UINT8 L4DnDMonitorHeader[24];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_L3L4CompleteHeader _L3L4CompleteHeader;
	BMS_GenericTlv _GenericTlv;
	BMS_HostTimestamp _HostTimestamp;
} BMS_L4DnDMonitorHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_HostTimestamp _HostTimestamp;
	BMS_GenericTlv _GenericTlv;
	BMS_L3L4CompleteHeader _L3L4CompleteHeader;
} BMS_L4DnDMonitorHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L4DnDMonitorHeader' Type: 'L4DnDMonitorHeader', Top-level, Non-instance, No bitoff root
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal424_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, out_ptr, bmlocal424_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal424_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_POS_ALIGNED 0

// COMPOSITE: Full name: 'L4DnDMonitorHeader_L3L4CompleteHeader' Type: 'L3L4CompleteHeader', Inner, Non-instance, No bitoff root
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal425_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal425_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal425_parent_out_ptr;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal426_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, bmlocal426_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal426_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_POS_ALIGNED 0

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Type: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal427_my_ptr;\
	UINT bmlocal428_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal427_my_ptr, bmlocal428_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal427_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal427_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal427_my_ptr, bmlocal428_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal429_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET( base_ptr, bmlocal429_tmp_var );
	return bmlocal429_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal430_my_ptr;\
	UINT bmlocal431_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal430_my_ptr, bmlocal431_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal430_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal430_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal430_my_ptr, bmlocal431_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Type: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Type: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal432_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET( base_ptr, bmlocal432_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Type", 16, (UINT)(bmlocal432_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal433_my_ptr;\
	UINT bmlocal434_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal433_my_ptr, bmlocal434_my_bitoff );\
	(*((UINT16*)bmlocal433_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal434_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal435_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, bmlocal435_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal435_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal438_acc_bytes;\
	UINT bmlocal439_acc_bits;\
	PVOID bmlocal440_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal440_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal440_parent_out_ptr;\
	bmlocal438_acc_bytes = 2;\
	bmlocal439_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal438_acc_bytes );\
	out_bitoff += bmlocal439_acc_bits;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal441_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, bmlocal441_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal441_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_POS_ALIGNED 2

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Length: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal442_my_ptr;\
	UINT bmlocal443_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal442_my_ptr, bmlocal443_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal442_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal442_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal442_my_ptr, bmlocal443_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal444_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET( base_ptr, bmlocal444_tmp_var );
	return bmlocal444_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal445_my_ptr;\
	UINT bmlocal446_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal445_my_ptr, bmlocal446_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal445_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal445_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal445_my_ptr, bmlocal446_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Length: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Length: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal447_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET( base_ptr, bmlocal447_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Length", 16, (UINT)(bmlocal447_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal448_my_ptr;\
	UINT bmlocal449_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal448_my_ptr, bmlocal449_my_bitoff );\
	(*((UINT16*)bmlocal448_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal449_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal450_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, bmlocal450_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal450_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal453_acc_bytes;\
	UINT bmlocal454_acc_bits;\
	PVOID bmlocal455_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal455_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal455_parent_out_ptr;\
	bmlocal453_acc_bytes = 4;\
	bmlocal454_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal453_acc_bytes );\
	out_bitoff += bmlocal454_acc_bits;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal456_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, bmlocal456_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal456_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_POS_ALIGNED 4

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Version: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal457_my_ptr;\
	UINT bmlocal458_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal457_my_ptr, bmlocal458_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal457_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal457_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal457_my_ptr, bmlocal458_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal459_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET( base_ptr, bmlocal459_tmp_var );
	return bmlocal459_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal460_my_ptr;\
	UINT bmlocal461_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal460_my_ptr, bmlocal461_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal460_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal460_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal460_my_ptr, bmlocal461_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Version: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Version: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Version: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Version: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Version: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Version: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal462_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET( base_ptr, bmlocal462_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Version", 16, (UINT)(bmlocal462_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal463_my_ptr;\
	UINT bmlocal464_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal463_my_ptr, bmlocal464_my_bitoff );\
	(*((UINT16*)bmlocal463_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal464_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Version: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal465_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, bmlocal465_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal465_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal468_acc_bytes;\
	UINT bmlocal469_acc_bits;\
	PVOID bmlocal470_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal470_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal470_parent_out_ptr;\
	bmlocal468_acc_bytes = 6;\
	bmlocal469_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal468_acc_bytes );\
	out_bitoff += bmlocal469_acc_bits;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal471_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, bmlocal471_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal471_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_POS_ALIGNED 6

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal472_my_ptr;\
	UINT bmlocal473_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal472_my_ptr, bmlocal473_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal472_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal472_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal472_my_ptr, bmlocal473_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal474_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, bmlocal474_tmp_var );
	return bmlocal474_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal475_my_ptr;\
	UINT bmlocal476_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal475_my_ptr, bmlocal476_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal475_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal475_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal475_my_ptr, bmlocal476_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal477_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, bmlocal477_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Accessibility", 16, (UINT)(bmlocal477_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal478_my_ptr;\
	UINT bmlocal479_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal478_my_ptr, bmlocal479_my_bitoff );\
	(*((UINT16*)bmlocal478_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal479_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal480_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, bmlocal480_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal480_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal483_acc_bytes;\
	UINT bmlocal484_acc_bits;\
	PVOID bmlocal485_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal485_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal485_parent_out_ptr;\
	bmlocal483_acc_bytes = 8;\
	bmlocal484_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal483_acc_bytes );\
	out_bitoff += bmlocal484_acc_bits;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal486_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, bmlocal486_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal486_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_POS_ALIGNED 8

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Status: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal487_my_ptr;\
	UINT bmlocal488_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal487_my_ptr, bmlocal488_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal487_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal487_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal487_my_ptr, bmlocal488_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal489_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET( base_ptr, bmlocal489_tmp_var );
	return bmlocal489_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal490_my_ptr;\
	UINT bmlocal491_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal490_my_ptr, bmlocal491_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal490_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal490_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal490_my_ptr, bmlocal491_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Status: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Status: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Status: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Status: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Status: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Status: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal492_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET( base_ptr, bmlocal492_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Status", 16, (UINT)(bmlocal492_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal493_my_ptr;\
	UINT bmlocal494_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal493_my_ptr, bmlocal494_my_bitoff );\
	(*((UINT16*)bmlocal493_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal494_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Status: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal495_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, bmlocal495_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal495_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal498_acc_bytes;\
	UINT bmlocal499_acc_bits;\
	PVOID bmlocal500_parent_out_ptr;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal500_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal500_parent_out_ptr;\
	bmlocal498_acc_bytes = 10;\
	bmlocal499_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal498_acc_bytes );\
	out_bitoff += bmlocal499_acc_bits;\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal501_tmp_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, bmlocal501_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal501_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_POS_ALIGNED 10

// Alignment of L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal502_my_ptr;\
	UINT bmlocal503_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal502_my_ptr, bmlocal503_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal502_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal502_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal502_my_ptr, bmlocal503_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal504_tmp_var;
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, bmlocal504_tmp_var );
	return bmlocal504_tmp_var;
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal505_my_ptr;\
	UINT bmlocal506_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal505_my_ptr, bmlocal506_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal505_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal505_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal505_my_ptr, bmlocal506_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal507_out_val;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, bmlocal507_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved2", 16, (UINT)(bmlocal507_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal508_my_ptr;\
	UINT bmlocal509_my_bitoff;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal508_my_ptr, bmlocal509_my_bitoff );\
	(*((UINT16*)bmlocal508_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal509_my_bitoff );\
}

// L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal510_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, bmlocal510_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal510_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal513_tmp_bits;\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, bmlocal513_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal513_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_BYTES_SIZE 12

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L3L4CompleteHeader", 1);\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_L3L4CompleteHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDMonitorHeader_GenericTlv_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal516_acc_bytes;\
	UINT bmlocal517_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal516_acc_bytes = 12;\
	bmlocal517_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal516_acc_bytes );\
	out_bitoff += bmlocal517_acc_bits;\
}

#define BM_L4DnDMonitorHeader_GenericTlv_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal518_tmp_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_GET_POS( base_ptr, out_ptr, bmlocal518_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal518_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_GenericTlv_POS_ALIGNED 12

// COMPOSITE: Full name: 'L4DnDMonitorHeader_GenericTlv' Type: 'GenericTlv', Inner, Non-instance, No bitoff root
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal519_parent_out_ptr;\
	BM_L4DnDMonitorHeader_GenericTlv_GET_POS( base_ptr, bmlocal519_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal519_parent_out_ptr;\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal520_tmp_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, bmlocal520_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal520_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_POS_ALIGNED 12

// Alignment of L4DnDMonitorHeader_GenericTlv_Generic_Type: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal521_my_ptr;\
	UINT bmlocal522_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal521_my_ptr, bmlocal522_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal521_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal521_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal521_my_ptr, bmlocal522_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal523_tmp_var;
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET( base_ptr, bmlocal523_tmp_var );
	return bmlocal523_tmp_var;
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal524_my_ptr;\
	UINT bmlocal525_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal524_my_ptr, bmlocal525_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal524_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal524_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal524_my_ptr, bmlocal525_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_GenericTlv_Generic_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Type: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Type: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_GenericTlv_Generic_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal526_out_val;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET( base_ptr, bmlocal526_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Type", 16, (UINT)(bmlocal526_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal527_my_ptr;\
	UINT bmlocal528_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal527_my_ptr, bmlocal528_my_bitoff );\
	(*((UINT16*)bmlocal527_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal528_my_bitoff );\
}

// L4DnDMonitorHeader_GenericTlv_Generic_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal529_tmp_bits;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, bmlocal529_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal529_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal532_acc_bytes;\
	UINT bmlocal533_acc_bits;\
	PVOID bmlocal534_parent_out_ptr;\
	BM_L4DnDMonitorHeader_GenericTlv_GET_POS( base_ptr, bmlocal534_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal534_parent_out_ptr;\
	bmlocal532_acc_bytes = 2;\
	bmlocal533_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal532_acc_bytes );\
	out_bitoff += bmlocal533_acc_bits;\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal535_tmp_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, bmlocal535_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal535_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_POS_ALIGNED 14

// Alignment of L4DnDMonitorHeader_GenericTlv_Generic_Length: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal536_my_ptr;\
	UINT bmlocal537_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal536_my_ptr, bmlocal537_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal536_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal536_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal536_my_ptr, bmlocal537_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal538_tmp_var;
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET( base_ptr, bmlocal538_tmp_var );
	return bmlocal538_tmp_var;
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal539_my_ptr;\
	UINT bmlocal540_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal539_my_ptr, bmlocal540_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal539_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal539_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal539_my_ptr, bmlocal540_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDMonitorHeader_GenericTlv_Generic_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Length: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Length: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_GenericTlv_Generic_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_GenericTlv_Generic_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal541_out_val;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET( base_ptr, bmlocal541_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Length", 16, (UINT)(bmlocal541_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal542_my_ptr;\
	UINT bmlocal543_my_bitoff;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal542_my_ptr, bmlocal543_my_bitoff );\
	(*((UINT16*)bmlocal542_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal543_my_bitoff );\
}

// L4DnDMonitorHeader_GenericTlv_Generic_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal544_tmp_bits;\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, bmlocal544_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal544_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_GenericTlv_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal547_tmp_bits;\
	BM_L4DnDMonitorHeader_GenericTlv_GET_SIZE( base_ptr, out_bytes, bmlocal547_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal547_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_BYTES_SIZE 4

#define BM_L4DnDMonitorHeader_GenericTlv_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "GenericTlv", 1);\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_GenericTlv_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_GenericTlv_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal550_acc_bytes;\
	UINT bmlocal551_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal550_acc_bytes = 16;\
	bmlocal551_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal550_acc_bytes );\
	out_bitoff += bmlocal551_acc_bits;\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal552_tmp_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, out_ptr, bmlocal552_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal552_tmp_bitoff);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_POS_ALIGNED 16

// COMPOSITE: Full name: 'L4DnDMonitorHeader_HostTimestamp' Type: 'HostTimestamp', Inner, Non-instance, No bitoff root
#define BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal553_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal553_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal553_parent_out_ptr;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Year: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Year_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal554_my_ptr;\
	UINT bmlocal555_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal554_my_ptr, bmlocal555_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal554_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal554_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal554_my_ptr, bmlocal555_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Year_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal556_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET( base_ptr, bmlocal556_tmp_var );
	return bmlocal556_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Year_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal557_my_ptr;\
	UINT bmlocal558_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal557_my_ptr, bmlocal558_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal557_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal557_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal557_my_ptr, bmlocal558_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Year: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Year: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Year: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Year: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Year: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Year: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal559_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET( base_ptr, bmlocal559_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Year", 8, (UINT)(bmlocal559_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Year_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Year_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal560_my_ptr;\
	UINT bmlocal561_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal560_my_ptr, bmlocal561_my_bitoff );\
	(*((UINT8*)bmlocal560_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal561_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Year: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal562_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_GET_SIZE( base_ptr, out_bytes, bmlocal562_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal562_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Year_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal565_acc_bytes;\
	UINT bmlocal566_acc_bits;\
	PVOID bmlocal567_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal567_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal567_parent_out_ptr;\
	bmlocal565_acc_bytes = 1;\
	bmlocal566_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal565_acc_bytes );\
	out_bitoff += bmlocal566_acc_bits;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Month: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal568_my_ptr;\
	UINT bmlocal569_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal568_my_ptr, bmlocal569_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal568_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal568_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal568_my_ptr, bmlocal569_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Month_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal570_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET( base_ptr, bmlocal570_tmp_var );
	return bmlocal570_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal571_my_ptr;\
	UINT bmlocal572_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal571_my_ptr, bmlocal572_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal571_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal571_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal571_my_ptr, bmlocal572_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Month: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Month: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Month: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Month: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Month: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Month: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal573_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET( base_ptr, bmlocal573_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Month", 8, (UINT)(bmlocal573_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal574_my_ptr;\
	UINT bmlocal575_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal574_my_ptr, bmlocal575_my_bitoff );\
	(*((UINT8*)bmlocal574_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal575_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Month: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal576_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_GET_SIZE( base_ptr, out_bytes, bmlocal576_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal576_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Month_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal579_acc_bytes;\
	UINT bmlocal580_acc_bits;\
	PVOID bmlocal581_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal581_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal581_parent_out_ptr;\
	bmlocal579_acc_bytes = 2;\
	bmlocal580_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal579_acc_bytes );\
	out_bitoff += bmlocal580_acc_bits;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Day: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal582_my_ptr;\
	UINT bmlocal583_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal582_my_ptr, bmlocal583_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal582_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal582_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal582_my_ptr, bmlocal583_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Day_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal584_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET( base_ptr, bmlocal584_tmp_var );
	return bmlocal584_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal585_my_ptr;\
	UINT bmlocal586_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal585_my_ptr, bmlocal586_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal585_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal585_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal585_my_ptr, bmlocal586_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Day: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Day: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Day: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Day: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Day: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Day: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal587_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET( base_ptr, bmlocal587_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Day", 8, (UINT)(bmlocal587_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal588_my_ptr;\
	UINT bmlocal589_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal588_my_ptr, bmlocal589_my_bitoff );\
	(*((UINT8*)bmlocal588_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal589_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Day: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal590_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_GET_SIZE( base_ptr, out_bytes, bmlocal590_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal590_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Day_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal593_acc_bytes;\
	UINT bmlocal594_acc_bits;\
	PVOID bmlocal595_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal595_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal595_parent_out_ptr;\
	bmlocal593_acc_bytes = 3;\
	bmlocal594_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal593_acc_bytes );\
	out_bitoff += bmlocal594_acc_bits;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Hour: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal596_my_ptr;\
	UINT bmlocal597_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal596_my_ptr, bmlocal597_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal596_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal596_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal596_my_ptr, bmlocal597_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Hour_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal598_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET( base_ptr, bmlocal598_tmp_var );
	return bmlocal598_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal599_my_ptr;\
	UINT bmlocal600_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal599_my_ptr, bmlocal600_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal599_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal599_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal599_my_ptr, bmlocal600_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Hour: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Hour: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Hour: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Hour: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Hour: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Hour: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal601_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET( base_ptr, bmlocal601_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Hour", 8, (UINT)(bmlocal601_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal602_my_ptr;\
	UINT bmlocal603_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal602_my_ptr, bmlocal603_my_bitoff );\
	(*((UINT8*)bmlocal602_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal603_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Hour: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal604_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_GET_SIZE( base_ptr, out_bytes, bmlocal604_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal604_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Hour_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal607_acc_bytes;\
	UINT bmlocal608_acc_bits;\
	PVOID bmlocal609_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal609_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal609_parent_out_ptr;\
	bmlocal607_acc_bytes = 4;\
	bmlocal608_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal607_acc_bytes );\
	out_bitoff += bmlocal608_acc_bits;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Minute: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal610_my_ptr;\
	UINT bmlocal611_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal610_my_ptr, bmlocal611_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal610_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal610_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal610_my_ptr, bmlocal611_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Minute_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal612_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET( base_ptr, bmlocal612_tmp_var );
	return bmlocal612_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal613_my_ptr;\
	UINT bmlocal614_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal613_my_ptr, bmlocal614_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal613_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal613_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal613_my_ptr, bmlocal614_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Minute: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Minute: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Minute: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Minute: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Minute: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Minute: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal615_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET( base_ptr, bmlocal615_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Minute", 8, (UINT)(bmlocal615_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal616_my_ptr;\
	UINT bmlocal617_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal616_my_ptr, bmlocal617_my_bitoff );\
	(*((UINT8*)bmlocal616_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal617_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Minute: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal618_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_GET_SIZE( base_ptr, out_bytes, bmlocal618_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal618_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Minute_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal621_acc_bytes;\
	UINT bmlocal622_acc_bits;\
	PVOID bmlocal623_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal623_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal623_parent_out_ptr;\
	bmlocal621_acc_bytes = 5;\
	bmlocal622_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal621_acc_bytes );\
	out_bitoff += bmlocal622_acc_bits;\
}

// Alignment of L4DnDMonitorHeader_HostTimestamp_Second: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal624_my_ptr;\
	UINT bmlocal625_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal624_my_ptr, bmlocal625_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal624_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal624_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal624_my_ptr, bmlocal625_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDMonitorHeader_HostTimestamp_Second_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal626_tmp_var;
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET( base_ptr, bmlocal626_tmp_var );
	return bmlocal626_tmp_var;
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal627_my_ptr;\
	UINT bmlocal628_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal627_my_ptr, bmlocal628_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal627_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal627_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal627_my_ptr, bmlocal628_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L4DnDMonitorHeader_HostTimestamp_Second: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Second: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDMonitorHeader_HostTimestamp_Second: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Second: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDMonitorHeader_HostTimestamp_Second: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDMonitorHeader_HostTimestamp_Second: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDMonitorHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal629_out_val;\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET( base_ptr, bmlocal629_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Second", 8, (UINT)(bmlocal629_out_val), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal630_my_ptr;\
	UINT bmlocal631_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal630_my_ptr, bmlocal631_my_bitoff );\
	(*((UINT8*)bmlocal630_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal631_my_bitoff );\
}

// L4DnDMonitorHeader_HostTimestamp_Second: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal632_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_GET_SIZE( base_ptr, out_bytes, bmlocal632_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal632_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Second_BYTES_SIZE 1

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal635_acc_bytes;\
	UINT bmlocal636_acc_bits;\
	PVOID bmlocal637_parent_out_ptr;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_POS( base_ptr, bmlocal637_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal637_parent_out_ptr;\
	bmlocal635_acc_bytes = 6;\
	bmlocal636_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal635_acc_bytes );\
	out_bitoff += bmlocal636_acc_bits;\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal638_my_ptr;\
	UINT bmlocal639_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_POS( base_ptr, bmlocal638_my_ptr, bmlocal639_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal638_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal638_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal638_my_ptr, bmlocal639_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal640_my_ptr;\
	UINT bmlocal641_my_bitoff;\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_POS( base_ptr, bmlocal640_my_ptr, bmlocal641_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal640_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal640_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal640_my_ptr, bmlocal641_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal642_out_bytes;\
	UINT bmlocal643_out_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_SIZE( base_ptr, bmlocal642_out_bytes, bmlocal643_out_bits );\
	bmlocal643_out_bits += bmlocal642_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-Res", 32, (UINT)(bmlocal643_out_bits), "%d", 1);\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal644_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_GET_SIZE( base_ptr, out_bytes, bmlocal644_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal644_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_Res_BYTES_SIZE 2

#define BM_L4DnDMonitorHeader_HostTimestamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal647_tmp_bits;\
	BM_L4DnDMonitorHeader_HostTimestamp_GET_SIZE( base_ptr, out_bytes, bmlocal647_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal647_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_BYTES_SIZE 8

#define BM_L4DnDMonitorHeader_HostTimestamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HostTimestamp", 1);\
	BM_L4DnDMonitorHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_HostTimestamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_HostTimestamp_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDMonitorHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 24;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal650_tmp_bits;\
	BM_L4DnDMonitorHeader_GET_SIZE( base_ptr, out_bytes, bmlocal650_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal650_tmp_bits );\
}

#define BM_L4DnDMonitorHeader_BYTES_SIZE 24

#define BM_L4DnDMonitorHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L4DnDMonitorHeader", 1);\
	BM_L4DnDMonitorHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_GenericTlv_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDMonitorHeader_HostTimestamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDMonitorHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDMonitorHeader_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 L4DnDTraceHeader[32];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	BMS_L4DnDMonitorHeader _GeneralHeader;
	UINT32 _SubSystemId;
	UINT32 _Signature;
} BMS_L4DnDTraceHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _Signature;
	UINT32 _SubSystemId;
	BMS_L4DnDMonitorHeader _GeneralHeader;
} BMS_L4DnDTraceHeader;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'L4DnDTraceHeader' Type: 'L4DnDTraceHeader', Top-level, Non-instance, No bitoff root
#define BM_L4DnDTraceHeader_GeneralHeader_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal651_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GET_POS( base_ptr, out_ptr, bmlocal651_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal651_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_POS_ALIGNED 0

// COMPOSITE: Full name: 'L4DnDTraceHeader_GeneralHeader' Type: 'L4DnDMonitorHeader', Inner, Non-instance, No bitoff root
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal652_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_GET_POS( base_ptr, bmlocal652_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal652_parent_out_ptr;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal653_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, out_ptr, bmlocal653_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal653_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_POS_ALIGNED 0

// COMPOSITE: Full name: 'L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader' Type: 'L3L4CompleteHeader', Inner, Non-instance, No bitoff root
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal654_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal654_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal654_parent_out_ptr;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal655_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, out_ptr, bmlocal655_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal655_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_POS_ALIGNED 0

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal656_my_ptr;\
	UINT bmlocal657_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal656_my_ptr, bmlocal657_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal656_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal656_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal656_my_ptr, bmlocal657_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal658_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET( base_ptr, bmlocal658_tmp_var );
	return bmlocal658_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal659_my_ptr;\
	UINT bmlocal660_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal659_my_ptr, bmlocal660_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal659_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal659_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal659_my_ptr, bmlocal660_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal661_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET( base_ptr, bmlocal661_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Type", 16, (UINT)(bmlocal661_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal662_my_ptr;\
	UINT bmlocal663_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_POS( base_ptr, bmlocal662_my_ptr, bmlocal663_my_bitoff );\
	(*((UINT16*)bmlocal662_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal663_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal664_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_GET_SIZE( base_ptr, out_bytes, bmlocal664_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal664_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal667_acc_bytes;\
	UINT bmlocal668_acc_bits;\
	PVOID bmlocal669_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal669_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal669_parent_out_ptr;\
	bmlocal667_acc_bytes = 2;\
	bmlocal668_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal667_acc_bytes );\
	out_bitoff += bmlocal668_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal670_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, out_ptr, bmlocal670_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal670_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_POS_ALIGNED 2

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal671_my_ptr;\
	UINT bmlocal672_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal671_my_ptr, bmlocal672_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal671_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal671_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal671_my_ptr, bmlocal672_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal673_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET( base_ptr, bmlocal673_tmp_var );
	return bmlocal673_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal674_my_ptr;\
	UINT bmlocal675_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal674_my_ptr, bmlocal675_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal674_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal674_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal674_my_ptr, bmlocal675_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal676_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET( base_ptr, bmlocal676_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Length", 16, (UINT)(bmlocal676_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal677_my_ptr;\
	UINT bmlocal678_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_POS( base_ptr, bmlocal677_my_ptr, bmlocal678_my_bitoff );\
	(*((UINT16*)bmlocal677_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal678_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal679_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_GET_SIZE( base_ptr, out_bytes, bmlocal679_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal679_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal682_acc_bytes;\
	UINT bmlocal683_acc_bits;\
	PVOID bmlocal684_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal684_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal684_parent_out_ptr;\
	bmlocal682_acc_bytes = 4;\
	bmlocal683_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal682_acc_bytes );\
	out_bitoff += bmlocal683_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal685_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, out_ptr, bmlocal685_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal685_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_POS_ALIGNED 4

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal686_my_ptr;\
	UINT bmlocal687_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal686_my_ptr, bmlocal687_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal686_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal686_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal686_my_ptr, bmlocal687_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal688_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET( base_ptr, bmlocal688_tmp_var );
	return bmlocal688_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal689_my_ptr;\
	UINT bmlocal690_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal689_my_ptr, bmlocal690_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal689_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal689_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal689_my_ptr, bmlocal690_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal691_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET( base_ptr, bmlocal691_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Version", 16, (UINT)(bmlocal691_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal692_my_ptr;\
	UINT bmlocal693_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_POS( base_ptr, bmlocal692_my_ptr, bmlocal693_my_bitoff );\
	(*((UINT16*)bmlocal692_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal693_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal694_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_GET_SIZE( base_ptr, out_bytes, bmlocal694_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal694_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal697_acc_bytes;\
	UINT bmlocal698_acc_bits;\
	PVOID bmlocal699_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal699_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal699_parent_out_ptr;\
	bmlocal697_acc_bytes = 6;\
	bmlocal698_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal697_acc_bytes );\
	out_bitoff += bmlocal698_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal700_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, out_ptr, bmlocal700_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal700_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_POS_ALIGNED 6

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal701_my_ptr;\
	UINT bmlocal702_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal701_my_ptr, bmlocal702_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal701_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal701_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal701_my_ptr, bmlocal702_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal703_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, bmlocal703_tmp_var );
	return bmlocal703_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal704_my_ptr;\
	UINT bmlocal705_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal704_my_ptr, bmlocal705_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal704_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal704_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal704_my_ptr, bmlocal705_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal706_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET( base_ptr, bmlocal706_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Accessibility", 16, (UINT)(bmlocal706_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal707_my_ptr;\
	UINT bmlocal708_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_POS( base_ptr, bmlocal707_my_ptr, bmlocal708_my_bitoff );\
	(*((UINT16*)bmlocal707_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal708_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal709_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_GET_SIZE( base_ptr, out_bytes, bmlocal709_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal709_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal712_acc_bytes;\
	UINT bmlocal713_acc_bits;\
	PVOID bmlocal714_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal714_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal714_parent_out_ptr;\
	bmlocal712_acc_bytes = 8;\
	bmlocal713_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal712_acc_bytes );\
	out_bitoff += bmlocal713_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal715_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, out_ptr, bmlocal715_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal715_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_POS_ALIGNED 8

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal716_my_ptr;\
	UINT bmlocal717_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal716_my_ptr, bmlocal717_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal716_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal716_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal716_my_ptr, bmlocal717_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal718_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET( base_ptr, bmlocal718_tmp_var );
	return bmlocal718_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal719_my_ptr;\
	UINT bmlocal720_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal719_my_ptr, bmlocal720_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal719_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal719_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal719_my_ptr, bmlocal720_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal721_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET( base_ptr, bmlocal721_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Status", 16, (UINT)(bmlocal721_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal722_my_ptr;\
	UINT bmlocal723_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_POS( base_ptr, bmlocal722_my_ptr, bmlocal723_my_bitoff );\
	(*((UINT16*)bmlocal722_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal723_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal724_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_GET_SIZE( base_ptr, out_bytes, bmlocal724_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal724_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal727_acc_bytes;\
	UINT bmlocal728_acc_bits;\
	PVOID bmlocal729_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_POS( base_ptr, bmlocal729_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal729_parent_out_ptr;\
	bmlocal727_acc_bytes = 10;\
	bmlocal728_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal727_acc_bytes );\
	out_bitoff += bmlocal728_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal730_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, out_ptr, bmlocal730_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal730_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_POS_ALIGNED 10

// Alignment of L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal731_my_ptr;\
	UINT bmlocal732_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal731_my_ptr, bmlocal732_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal731_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal731_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal731_my_ptr, bmlocal732_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal733_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, bmlocal733_tmp_var );
	return bmlocal733_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal734_my_ptr;\
	UINT bmlocal735_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal734_my_ptr, bmlocal735_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal734_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal734_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal734_my_ptr, bmlocal735_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal736_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET( base_ptr, bmlocal736_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Reserved2", 16, (UINT)(bmlocal736_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal737_my_ptr;\
	UINT bmlocal738_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_POS( base_ptr, bmlocal737_my_ptr, bmlocal738_my_bitoff );\
	(*((UINT16*)bmlocal737_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal738_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal739_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_GET_SIZE( base_ptr, out_bytes, bmlocal739_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal739_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 12;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal742_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_GET_SIZE( base_ptr, out_bytes, bmlocal742_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal742_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_BYTES_SIZE 12

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L3L4CompleteHeader", 1);\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Version_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Accessibility_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_Reserved2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal745_acc_bytes;\
	UINT bmlocal746_acc_bits;\
	PVOID bmlocal747_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_GET_POS( base_ptr, bmlocal747_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal747_parent_out_ptr;\
	bmlocal745_acc_bytes = 12;\
	bmlocal746_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal745_acc_bytes );\
	out_bitoff += bmlocal746_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal748_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_POS( base_ptr, out_ptr, bmlocal748_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal748_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_POS_ALIGNED 12

// COMPOSITE: Full name: 'L4DnDTraceHeader_GeneralHeader_GenericTlv' Type: 'GenericTlv', Inner, Non-instance, No bitoff root
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal749_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_POS( base_ptr, bmlocal749_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal749_parent_out_ptr;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal750_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, out_ptr, bmlocal750_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal750_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_POS_ALIGNED 12

// Alignment of L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal751_my_ptr;\
	UINT bmlocal752_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal751_my_ptr, bmlocal752_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal751_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal751_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal751_my_ptr, bmlocal752_my_bitoff, 16, UINT16, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal753_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET( base_ptr, bmlocal753_tmp_var );
	return bmlocal753_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal754_my_ptr;\
	UINT bmlocal755_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal754_my_ptr, bmlocal755_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal754_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal754_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal754_my_ptr, bmlocal755_my_bitoff, 16, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal756_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET( base_ptr, bmlocal756_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Type", 16, (UINT)(bmlocal756_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal757_my_ptr;\
	UINT bmlocal758_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_POS( base_ptr, bmlocal757_my_ptr, bmlocal758_my_bitoff );\
	(*((UINT16*)bmlocal757_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal758_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal759_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_GET_SIZE( base_ptr, out_bytes, bmlocal759_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal759_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal762_acc_bytes;\
	UINT bmlocal763_acc_bits;\
	PVOID bmlocal764_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_POS( base_ptr, bmlocal764_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal764_parent_out_ptr;\
	bmlocal762_acc_bytes = 2;\
	bmlocal763_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal762_acc_bytes );\
	out_bitoff += bmlocal763_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal765_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, out_ptr, bmlocal765_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal765_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_POS_ALIGNED 14

// Alignment of L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal766_my_ptr;\
	UINT bmlocal767_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal766_my_ptr, bmlocal767_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal766_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal766_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal766_my_ptr, bmlocal767_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT16 BM_INLINE_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT16 bmlocal768_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET( base_ptr, bmlocal768_tmp_var );
	return bmlocal768_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal769_my_ptr;\
	UINT bmlocal770_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal769_my_ptr, bmlocal770_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal769_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal769_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal769_my_ptr, bmlocal770_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT16 bmlocal771_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET( base_ptr, bmlocal771_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Generic_Length", 16, (UINT)(bmlocal771_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal772_my_ptr;\
	UINT bmlocal773_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_POS( base_ptr, bmlocal772_my_ptr, bmlocal773_my_bitoff );\
	(*((UINT16*)bmlocal772_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal773_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal774_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_GET_SIZE( base_ptr, out_bytes, bmlocal774_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal774_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal777_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_GET_SIZE( base_ptr, out_bytes, bmlocal777_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal777_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_BYTES_SIZE 4

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "GenericTlv", 1);\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Type_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_Generic_Length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal780_acc_bytes;\
	UINT bmlocal781_acc_bits;\
	PVOID bmlocal782_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_GET_POS( base_ptr, bmlocal782_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal782_parent_out_ptr;\
	bmlocal780_acc_bytes = 16;\
	bmlocal781_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal780_acc_bytes );\
	out_bitoff += bmlocal781_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal783_tmp_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, out_ptr, bmlocal783_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal783_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_POS_ALIGNED 16

// COMPOSITE: Full name: 'L4DnDTraceHeader_GeneralHeader_HostTimestamp' Type: 'HostTimestamp', Inner, Non-instance, No bitoff root
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal784_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal784_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal784_parent_out_ptr;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal785_my_ptr;\
	UINT bmlocal786_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal785_my_ptr, bmlocal786_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal785_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal785_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal785_my_ptr, bmlocal786_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal787_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET( base_ptr, bmlocal787_tmp_var );
	return bmlocal787_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal788_my_ptr;\
	UINT bmlocal789_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal788_my_ptr, bmlocal789_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal788_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal788_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal788_my_ptr, bmlocal789_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal790_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET( base_ptr, bmlocal790_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Year", 8, (UINT)(bmlocal790_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal791_my_ptr;\
	UINT bmlocal792_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_POS( base_ptr, bmlocal791_my_ptr, bmlocal792_my_bitoff );\
	(*((UINT8*)bmlocal791_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal792_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal793_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_GET_SIZE( base_ptr, out_bytes, bmlocal793_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal793_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal796_acc_bytes;\
	UINT bmlocal797_acc_bits;\
	PVOID bmlocal798_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal798_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal798_parent_out_ptr;\
	bmlocal796_acc_bytes = 1;\
	bmlocal797_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal796_acc_bytes );\
	out_bitoff += bmlocal797_acc_bits;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal799_my_ptr;\
	UINT bmlocal800_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal799_my_ptr, bmlocal800_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal799_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal799_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal799_my_ptr, bmlocal800_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal801_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET( base_ptr, bmlocal801_tmp_var );
	return bmlocal801_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal802_my_ptr;\
	UINT bmlocal803_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal802_my_ptr, bmlocal803_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal802_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal802_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal802_my_ptr, bmlocal803_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal804_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET( base_ptr, bmlocal804_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Month", 8, (UINT)(bmlocal804_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal805_my_ptr;\
	UINT bmlocal806_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_POS( base_ptr, bmlocal805_my_ptr, bmlocal806_my_bitoff );\
	(*((UINT8*)bmlocal805_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal806_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal807_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_GET_SIZE( base_ptr, out_bytes, bmlocal807_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal807_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal810_acc_bytes;\
	UINT bmlocal811_acc_bits;\
	PVOID bmlocal812_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal812_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal812_parent_out_ptr;\
	bmlocal810_acc_bytes = 2;\
	bmlocal811_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal810_acc_bytes );\
	out_bitoff += bmlocal811_acc_bits;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: accumulated=(2,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal813_my_ptr;\
	UINT bmlocal814_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal813_my_ptr, bmlocal814_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal813_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal813_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal813_my_ptr, bmlocal814_my_bitoff, 8, UINT8, out_val, 0x00000002 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal815_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET( base_ptr, bmlocal815_tmp_var );
	return bmlocal815_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal816_my_ptr;\
	UINT bmlocal817_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal816_my_ptr, bmlocal817_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal816_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal816_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal816_my_ptr, bmlocal817_my_bitoff, 8, in_val, 0x00000002 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal818_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET( base_ptr, bmlocal818_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Day", 8, (UINT)(bmlocal818_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal819_my_ptr;\
	UINT bmlocal820_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_POS( base_ptr, bmlocal819_my_ptr, bmlocal820_my_bitoff );\
	(*((UINT8*)bmlocal819_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal820_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal821_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_GET_SIZE( base_ptr, out_bytes, bmlocal821_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal821_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal824_acc_bytes;\
	UINT bmlocal825_acc_bits;\
	PVOID bmlocal826_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal826_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal826_parent_out_ptr;\
	bmlocal824_acc_bytes = 3;\
	bmlocal825_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal824_acc_bytes );\
	out_bitoff += bmlocal825_acc_bits;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal827_my_ptr;\
	UINT bmlocal828_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal827_my_ptr, bmlocal828_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal827_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal827_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal827_my_ptr, bmlocal828_my_bitoff, 8, UINT8, out_val, 0x00000003 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal829_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET( base_ptr, bmlocal829_tmp_var );
	return bmlocal829_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal830_my_ptr;\
	UINT bmlocal831_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal830_my_ptr, bmlocal831_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal830_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal830_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal830_my_ptr, bmlocal831_my_bitoff, 8, in_val, 0x00000003 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal832_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET( base_ptr, bmlocal832_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Hour", 8, (UINT)(bmlocal832_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal833_my_ptr;\
	UINT bmlocal834_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_POS( base_ptr, bmlocal833_my_ptr, bmlocal834_my_bitoff );\
	(*((UINT8*)bmlocal833_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal834_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal835_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_GET_SIZE( base_ptr, out_bytes, bmlocal835_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal835_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal838_acc_bytes;\
	UINT bmlocal839_acc_bits;\
	PVOID bmlocal840_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal840_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal840_parent_out_ptr;\
	bmlocal838_acc_bytes = 4;\
	bmlocal839_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal838_acc_bytes );\
	out_bitoff += bmlocal839_acc_bits;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal841_my_ptr;\
	UINT bmlocal842_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal841_my_ptr, bmlocal842_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal841_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal841_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal841_my_ptr, bmlocal842_my_bitoff, 8, UINT8, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal843_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET( base_ptr, bmlocal843_tmp_var );
	return bmlocal843_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal844_my_ptr;\
	UINT bmlocal845_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal844_my_ptr, bmlocal845_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal844_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal844_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal844_my_ptr, bmlocal845_my_bitoff, 8, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal846_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET( base_ptr, bmlocal846_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Minute", 8, (UINT)(bmlocal846_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal847_my_ptr;\
	UINT bmlocal848_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_POS( base_ptr, bmlocal847_my_ptr, bmlocal848_my_bitoff );\
	(*((UINT8*)bmlocal847_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal848_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal849_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_GET_SIZE( base_ptr, out_bytes, bmlocal849_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal849_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal852_acc_bytes;\
	UINT bmlocal853_acc_bits;\
	PVOID bmlocal854_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal854_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal854_parent_out_ptr;\
	bmlocal852_acc_bytes = 5;\
	bmlocal853_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal852_acc_bytes );\
	out_bitoff += bmlocal853_acc_bits;\
}

// Alignment of L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: accumulated=(1,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal855_my_ptr;\
	UINT bmlocal856_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal855_my_ptr, bmlocal856_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal855_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal855_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal855_my_ptr, bmlocal856_my_bitoff, 8, UINT8, out_val, 0x00000001 );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT8 bmlocal857_tmp_var;
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET( base_ptr, bmlocal857_tmp_var );
	return bmlocal857_tmp_var;
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal858_my_ptr;\
	UINT bmlocal859_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal858_my_ptr, bmlocal859_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal858_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal858_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal858_my_ptr, bmlocal859_my_bitoff, 8, in_val, 0x00000001 );\
	}\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal860_out_val;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET( base_ptr, bmlocal860_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Second", 8, (UINT)(bmlocal860_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal861_my_ptr;\
	UINT bmlocal862_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_POS( base_ptr, bmlocal861_my_ptr, bmlocal862_my_bitoff );\
	(*((UINT8*)bmlocal861_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal862_my_bitoff );\
}

// L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal863_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_GET_SIZE( base_ptr, out_bytes, bmlocal863_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal863_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_BYTES_SIZE 1

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal866_acc_bytes;\
	UINT bmlocal867_acc_bits;\
	PVOID bmlocal868_parent_out_ptr;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_POS( base_ptr, bmlocal868_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal868_parent_out_ptr;\
	bmlocal866_acc_bytes = 6;\
	bmlocal867_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal866_acc_bytes );\
	out_bitoff += bmlocal867_acc_bits;\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal869_my_ptr;\
	UINT bmlocal870_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_POS( base_ptr, bmlocal869_my_ptr, bmlocal870_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal869_my_ptr)) ), 0, 16, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT16)BMI_32BIT_EXTRACT( (BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal869_my_ptr)) ), 0, 16, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal869_my_ptr, bmlocal870_my_bitoff, 16, UINT16, out_val, 0x00000002 );\
	}\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal871_my_ptr;\
	UINT bmlocal872_my_bitoff;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_POS( base_ptr, bmlocal871_my_ptr, bmlocal872_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal871_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_16BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal871_my_ptr) ), (in_val), 0, 0, 16, UINT16 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal871_my_ptr, bmlocal872_my_bitoff, 16, in_val, 0x00000002 );\
	}\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal873_out_bytes;\
	UINT bmlocal874_out_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_SIZE( base_ptr, bmlocal873_out_bytes, bmlocal874_out_bits );\
	bmlocal874_out_bits += bmlocal873_out_bytes* 8;\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Padding-Res", 32, (UINT)(bmlocal874_out_bits), "%d", 1);\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal875_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_GET_SIZE( base_ptr, out_bytes, bmlocal875_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal875_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_BYTES_SIZE 2

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 8;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal878_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_GET_SIZE( base_ptr, out_bytes, bmlocal878_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal878_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_BYTES_SIZE 8

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "HostTimestamp", 1);\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Year_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Month_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Day_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Hour_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Minute_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Second_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_Res_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDTraceHeader_GeneralHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 24;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal881_tmp_bits;\
	BM_L4DnDTraceHeader_GeneralHeader_GET_SIZE( base_ptr, out_bytes, bmlocal881_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal881_tmp_bits );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_BYTES_SIZE 24

#define BM_L4DnDTraceHeader_GeneralHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "GeneralHeader", 1);\
	BM_L4DnDTraceHeader_GeneralHeader_L3L4CompleteHeader_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_GenericTlv_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_GeneralHeader_HostTimestamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GeneralHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_GeneralHeader_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_L4DnDTraceHeader_SubSystemId_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal884_acc_bytes;\
	UINT bmlocal885_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal884_acc_bytes = 24;\
	bmlocal885_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal884_acc_bytes );\
	out_bitoff += bmlocal885_acc_bits;\
}

#define BM_L4DnDTraceHeader_SubSystemId_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal886_tmp_bitoff;\
	BM_L4DnDTraceHeader_SubSystemId_GET_POS( base_ptr, out_ptr, bmlocal886_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal886_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_SubSystemId_POS_ALIGNED 24

// Alignment of L4DnDTraceHeader_SubSystemId: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_SubSystemId_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_SubSystemId_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal887_my_ptr;\
	UINT bmlocal888_my_bitoff;\
	BM_L4DnDTraceHeader_SubSystemId_GET_POS( base_ptr, bmlocal887_my_ptr, bmlocal888_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal887_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal887_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal887_my_ptr, bmlocal888_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_L4DnDTraceHeader_SubSystemId_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal889_tmp_var;
	BM_L4DnDTraceHeader_SubSystemId_GET( base_ptr, bmlocal889_tmp_var );
	return bmlocal889_tmp_var;
}

#define BM_L4DnDTraceHeader_SubSystemId_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal890_my_ptr;\
	UINT bmlocal891_my_bitoff;\
	BM_L4DnDTraceHeader_SubSystemId_GET_POS( base_ptr, bmlocal890_my_ptr, bmlocal891_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal890_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal890_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal890_my_ptr, bmlocal891_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_SubSystemId: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_SubSystemId: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_SubSystemId: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_SubSystemId: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_SubSystemId: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_SubSystemId: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_SubSystemId_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal892_out_val;\
	BM_L4DnDTraceHeader_SubSystemId_GET( base_ptr, bmlocal892_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "SubSystemId", 32, (UINT)(bmlocal892_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_SubSystemId_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_SubSystemId_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_SubSystemId_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal893_my_ptr;\
	UINT bmlocal894_my_bitoff;\
	BM_L4DnDTraceHeader_SubSystemId_GET_POS( base_ptr, bmlocal893_my_ptr, bmlocal894_my_bitoff );\
	(*((UINT32*)bmlocal893_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal894_my_bitoff );\
}

// L4DnDTraceHeader_SubSystemId: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_SubSystemId_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal895_tmp_bits;\
	BM_L4DnDTraceHeader_SubSystemId_GET_SIZE( base_ptr, out_bytes, bmlocal895_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal895_tmp_bits );\
}

#define BM_L4DnDTraceHeader_SubSystemId_BYTES_SIZE 4

#define BM_L4DnDTraceHeader_Signature_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal898_acc_bytes;\
	UINT bmlocal899_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal898_acc_bytes = 28;\
	bmlocal899_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal898_acc_bytes );\
	out_bitoff += bmlocal899_acc_bits;\
}

#define BM_L4DnDTraceHeader_Signature_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal900_tmp_bitoff;\
	BM_L4DnDTraceHeader_Signature_GET_POS( base_ptr, out_ptr, bmlocal900_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal900_tmp_bitoff);\
}

#define BM_L4DnDTraceHeader_Signature_POS_ALIGNED 28

// Alignment of L4DnDTraceHeader_Signature: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_L4DnDTraceHeader_Signature_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_Signature_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal901_my_ptr;\
	UINT bmlocal902_my_bitoff;\
	BM_L4DnDTraceHeader_Signature_GET_POS( base_ptr, bmlocal901_my_ptr, bmlocal902_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal901_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal901_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal901_my_ptr, bmlocal902_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_L4DnDTraceHeader_Signature_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal903_tmp_var;
	BM_L4DnDTraceHeader_Signature_GET( base_ptr, bmlocal903_tmp_var );
	return bmlocal903_tmp_var;
}

#define BM_L4DnDTraceHeader_Signature_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal904_my_ptr;\
	UINT bmlocal905_my_bitoff;\
	BM_L4DnDTraceHeader_Signature_GET_POS( base_ptr, bmlocal904_my_ptr, bmlocal905_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal904_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal904_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal904_my_ptr, bmlocal905_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// L4DnDTraceHeader_Signature: IS_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_Signature: SET_DEFAULT accessor is not defined because no default value was specified.
// L4DnDTraceHeader_Signature: IS_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_Signature: SET_RESET accessor is not defined because no reset value was specified.
// L4DnDTraceHeader_Signature: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// L4DnDTraceHeader_Signature: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_L4DnDTraceHeader_Signature_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal906_out_val;\
	BM_L4DnDTraceHeader_Signature_GET( base_ptr, bmlocal906_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "Signature", 32, (UINT)(bmlocal906_out_val), "%d", 1);\
}

#define BM_L4DnDTraceHeader_Signature_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_Signature_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_L4DnDTraceHeader_Signature_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal907_my_ptr;\
	UINT bmlocal908_my_bitoff;\
	BM_L4DnDTraceHeader_Signature_GET_POS( base_ptr, bmlocal907_my_ptr, bmlocal908_my_bitoff );\
	(*((UINT32*)bmlocal907_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal908_my_bitoff );\
}

// L4DnDTraceHeader_Signature: Validation accessors are not defined because validation condition was not specified.
#define BM_L4DnDTraceHeader_Signature_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal909_tmp_bits;\
	BM_L4DnDTraceHeader_Signature_GET_SIZE( base_ptr, out_bytes, bmlocal909_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal909_tmp_bits );\
}

#define BM_L4DnDTraceHeader_Signature_BYTES_SIZE 4

#define BM_L4DnDTraceHeader_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 32;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal912_tmp_bits;\
	BM_L4DnDTraceHeader_GET_SIZE( base_ptr, out_bytes, bmlocal912_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal912_tmp_bits );\
}

#define BM_L4DnDTraceHeader_BYTES_SIZE 32

#define BM_L4DnDTraceHeader_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "L4DnDTraceHeader", 1);\
	BM_L4DnDTraceHeader_GeneralHeader_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_SubSystemId_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_L4DnDTraceHeader_Signature_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_L4DnDTraceHeader_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_L4DnDTraceHeader_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_L4DNDMONITORHEADER_H_ */

