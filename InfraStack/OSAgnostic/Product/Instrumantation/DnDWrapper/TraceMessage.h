/*****************************************************************************
 * Automatically generated by Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0) - DO NOT EDIT!
 * Generated at 1/22/2009 1:29:13 PM
 *
 * Project : Ofer
 * Module  : TraceMessage
 * Author  : Igor Brainman
 * Date    : 23/07/2006
 * Purpose : Trace Messages Format
 *****************************************************************************/

#if !defined(_BITMAN_TRACEMESSAGE_H_)
#define _BITMAN_TRACEMESSAGE_H_


/*lint ++flb */
// Include the Bitman common header file
#include "BitmanCommon.h"

// Include headers generated from XMLs (the source is both XMLs and the command-line)
#include "BasicBitmanTypes.h"

// Include user C header files

// Include user C header files (supplied in the command-line)


// Bitman version Accessor...
#ifndef BM_BITMAN_VERSION
#define BM_BITMAN_VERSION 	"Bitman2Base V4.2.5.0 (5.0) Bitman2 (exe) V4.2.5.0 (5.0)"
#endif 

// Definitions

#define BM_TraceMsgStatus_msgID_MASK (0x000FFFFF)

#define BM_TraceMsgStatus_msgID_OFFSET (0)

#define BM_TraceMsgStatus_msgID_SHIFTED_MASK (0x000FFFFF)

#define BM_TraceMsgStatus_numOfParams_MASK (0x00000003)

#define BM_TraceMsgStatus_numOfParams_OFFSET (20)

#define BM_TraceMsgStatus_numOfParams_SHIFTED_MASK (0x00300000)

#define BM_TraceMsgStatus_timeStampPresent_MASK (0x00000001)

#define BM_TraceMsgStatus_timeStampPresent_OFFSET (22)

#define BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK (0x00400000)

#define BM_TraceMsgStatus_inlineString_MASK (0x00000001)

#define BM_TraceMsgStatus_inlineString_OFFSET (23)

#define BM_TraceMsgStatus_inlineString_SHIFTED_MASK (0x00800000)

#define BM_TraceMsgStatus_payload_MASK (0x00000001)

#define BM_TraceMsgStatus_payload_OFFSET (24)

#define BM_TraceMsgStatus_payload_SHIFTED_MASK (0x01000000)

#define BM_TraceMsgStatus_bufferOverrun_MASK (0x00000001)

#define BM_TraceMsgStatus_bufferOverrun_OFFSET (25)

#define BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK (0x02000000)

#define BM_TraceMsgStatus_subSystemID_MASK (0x00000007)

#define BM_TraceMsgStatus_subSystemID_OFFSET (26)

#define BM_TraceMsgStatus_subSystemID_SHIFTED_MASK (0x1C000000)

#define BM_TraceMsgStatus_severity_MASK (0x00000007)

#define BM_TraceMsgStatus_severity_OFFSET (29)

#define BM_TraceMsgStatus_severity_SHIFTED_MASK (0xE0000000)

typedef UINT8 TraceMsgStatus[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _msgID : 20; //a unique message ID to access trace string table
		UINT32 _numOfParams : 2; //may be 0..3
		UINT32 _timeStampPresent : 1; //set to TRUE, if time stamp is attached
		UINT32 _inlineString : 1; //set to TRUE, if inline string is attached
		UINT32 _payload : 1; //set to TRUE, if raw buffer (payload) is attached
		UINT32 _bufferOverrun : 1; //set to TRUE, if buffer overflow happened
		UINT32 _subSystemID : 3; //may be 0..7
		UINT32 _severity : 3; //may be 0..7
	} fields;
} BMS_TraceMsgStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed union
#elif defined __arc
typedef _Packed union
#else
typedef union
#endif
{
	UINT32 reg;
#ifdef __arm
	__packed struct
#elif defined __arc
_Packed struct
#else
	struct
#endif
	{
		UINT32 _severity : 3; //may be 0..7
		UINT32 _subSystemID : 3; //may be 0..7
		UINT32 _bufferOverrun : 1; //set to TRUE, if buffer overflow happened
		UINT32 _payload : 1; //set to TRUE, if raw buffer (payload) is attached
		UINT32 _inlineString : 1; //set to TRUE, if inline string is attached
		UINT32 _timeStampPresent : 1; //set to TRUE, if time stamp is attached
		UINT32 _numOfParams : 2; //may be 0..3
		UINT32 _msgID : 20; //a unique message ID to access trace string table
	} fields;
} BMS_TraceMsgStatus;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceMsgStatus' Type: 'TraceMsgStatus', Top-level, Non-instance, No bitoff root
#define BM_TraceMsgStatus_msgID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceMsgStatus_msgID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal57_tmp_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, out_ptr, bmlocal57_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal57_tmp_bitoff);\
}

#define BM_TraceMsgStatus_msgID_POS_ALIGNED 0

// Alignment of TraceMsgStatus_msgID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_msgID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 4;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_msgID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal58_my_ptr;\
	UINT bmlocal59_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal58_my_ptr, bmlocal59_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal58_my_ptr, bmlocal59_my_bitoff, 20, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_msgID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal60_tmp_var;
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal60_tmp_var );
	return bmlocal60_tmp_var;
}

#define BM_TraceMsgStatus_msgID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal61_my_ptr;\
	UINT bmlocal62_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal61_my_ptr, bmlocal62_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal61_my_ptr, bmlocal62_my_bitoff, 20, in_val, 0x00000000 );\
}

// TraceMsgStatus_msgID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_msgID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_msgID: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_msgID: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_msgID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_msgID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal63_out_val;\
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal63_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "msgID", 20, (UINT)(bmlocal63_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_msgID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_msgID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal64_val;\
	BM_TraceMsgStatus_msgID_GET( base_ptr, bmlocal64_val );\
	(bmlocal64_val)++;\
	BM_TraceMsgStatus_msgID_SET( base_ptr, bmlocal64_val );\
}

// TraceMsgStatus_msgID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_msgID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal65_tmp_bits;\
	BM_TraceMsgStatus_msgID_GET_SIZE( base_ptr, out_bytes, bmlocal65_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal65_tmp_bits );\
}

#define BM_TraceMsgStatus_msgID_BYTES_SIZE 3

#define BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal68_acc_bytes;\
	UINT bmlocal69_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal68_acc_bytes = 2;\
	bmlocal69_acc_bits = 4;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal68_acc_bytes );\
	out_bitoff += bmlocal69_acc_bits;\
}

// Alignment of TraceMsgStatus_numOfParams: accumulated=(2,4, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_numOfParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 2;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_numOfParams_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal70_my_ptr;\
	UINT bmlocal71_my_bitoff;\
	BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, bmlocal70_my_ptr, bmlocal71_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal70_my_ptr, bmlocal71_my_bitoff, 2, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_numOfParams_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal72_tmp_var;
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal72_tmp_var );
	return bmlocal72_tmp_var;
}

#define BM_TraceMsgStatus_numOfParams_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal73_my_ptr;\
	UINT bmlocal74_my_bitoff;\
	BM_TraceMsgStatus_numOfParams_GET_POS( base_ptr, bmlocal73_my_ptr, bmlocal74_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal73_my_ptr, bmlocal74_my_bitoff, 2, in_val, 0x00000002 );\
}

// TraceMsgStatus_numOfParams: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_numOfParams: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_numOfParams: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_numOfParams: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_numOfParams: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_numOfParams: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal75_out_val;\
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal75_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfParams", 2, (UINT)(bmlocal75_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_numOfParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_numOfParams_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal76_val;\
	BM_TraceMsgStatus_numOfParams_GET( base_ptr, bmlocal76_val );\
	(bmlocal76_val)++;\
	BM_TraceMsgStatus_numOfParams_SET( base_ptr, bmlocal76_val );\
}

// TraceMsgStatus_numOfParams: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_numOfParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal77_tmp_bits;\
	BM_TraceMsgStatus_numOfParams_GET_SIZE( base_ptr, out_bytes, bmlocal77_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal77_tmp_bits );\
}

#define BM_TraceMsgStatus_numOfParams_BYTES_SIZE 1

#define BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal80_acc_bytes;\
	UINT bmlocal81_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal80_acc_bytes = 2;\
	bmlocal81_acc_bits = 6;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal80_acc_bytes );\
	out_bitoff += bmlocal81_acc_bits;\
}

// Alignment of TraceMsgStatus_timeStampPresent: accumulated=(2,6, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_timeStampPresent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal82_my_ptr;\
	UINT bmlocal83_my_bitoff;\
	BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, bmlocal82_my_ptr, bmlocal83_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal82_my_ptr, bmlocal83_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_timeStampPresent_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal84_tmp_var;
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal84_tmp_var );
	return bmlocal84_tmp_var;
}

#define BM_TraceMsgStatus_timeStampPresent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal85_my_ptr;\
	UINT bmlocal86_my_bitoff;\
	BM_TraceMsgStatus_timeStampPresent_GET_POS( base_ptr, bmlocal85_my_ptr, bmlocal86_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal85_my_ptr, bmlocal86_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceMsgStatus_timeStampPresent: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_timeStampPresent: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_timeStampPresent: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_timeStampPresent: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_timeStampPresent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_timeStampPresent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal87_out_val;\
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal87_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStampPresent", 1, (UINT)(bmlocal87_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_timeStampPresent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_timeStampPresent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal88_val;\
	BM_TraceMsgStatus_timeStampPresent_GET( base_ptr, bmlocal88_val );\
	(bmlocal88_val)++;\
	BM_TraceMsgStatus_timeStampPresent_SET( base_ptr, bmlocal88_val );\
}

// TraceMsgStatus_timeStampPresent: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_timeStampPresent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal89_tmp_bits;\
	BM_TraceMsgStatus_timeStampPresent_GET_SIZE( base_ptr, out_bytes, bmlocal89_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal89_tmp_bits );\
}

#define BM_TraceMsgStatus_timeStampPresent_BYTES_SIZE 1

#define BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal92_acc_bytes;\
	UINT bmlocal93_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal92_acc_bytes = 2;\
	bmlocal93_acc_bits = 7;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal92_acc_bytes );\
	out_bitoff += bmlocal93_acc_bits;\
}

// Alignment of TraceMsgStatus_inlineString: accumulated=(2,7, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_inlineString_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal94_my_ptr;\
	UINT bmlocal95_my_bitoff;\
	BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, bmlocal94_my_ptr, bmlocal95_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal94_my_ptr, bmlocal95_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_inlineString_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal96_tmp_var;
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal96_tmp_var );
	return bmlocal96_tmp_var;
}

#define BM_TraceMsgStatus_inlineString_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal97_my_ptr;\
	UINT bmlocal98_my_bitoff;\
	BM_TraceMsgStatus_inlineString_GET_POS( base_ptr, bmlocal97_my_ptr, bmlocal98_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal97_my_ptr, bmlocal98_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceMsgStatus_inlineString: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_inlineString: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_inlineString: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_inlineString: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_inlineString: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_inlineString: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal99_out_val;\
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal99_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "inlineString", 1, (UINT)(bmlocal99_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_inlineString_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal100_val;\
	BM_TraceMsgStatus_inlineString_GET( base_ptr, bmlocal100_val );\
	(bmlocal100_val)++;\
	BM_TraceMsgStatus_inlineString_SET( base_ptr, bmlocal100_val );\
}

// TraceMsgStatus_inlineString: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal101_tmp_bits;\
	BM_TraceMsgStatus_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal101_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal101_tmp_bits );\
}

#define BM_TraceMsgStatus_inlineString_BYTES_SIZE 1

#define BM_TraceMsgStatus_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal104_acc_bytes;\
	UINT bmlocal105_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal104_acc_bytes = 3;\
	bmlocal105_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal104_acc_bytes );\
	out_bitoff += bmlocal105_acc_bits;\
}

#define BM_TraceMsgStatus_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal106_tmp_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, out_ptr, bmlocal106_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal106_tmp_bitoff);\
}

#define BM_TraceMsgStatus_payload_POS_ALIGNED 3

// Alignment of TraceMsgStatus_payload: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_payload_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal107_my_ptr;\
	UINT bmlocal108_my_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, bmlocal107_my_ptr, bmlocal108_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal107_my_ptr, bmlocal108_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_payload_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal109_tmp_var;
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal109_tmp_var );
	return bmlocal109_tmp_var;
}

#define BM_TraceMsgStatus_payload_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal110_my_ptr;\
	UINT bmlocal111_my_bitoff;\
	BM_TraceMsgStatus_payload_GET_POS( base_ptr, bmlocal110_my_ptr, bmlocal111_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal110_my_ptr, bmlocal111_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceMsgStatus_payload: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_payload: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_payload: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_payload: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_payload: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_payload: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal112_out_val;\
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal112_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "payload", 1, (UINT)(bmlocal112_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_payload_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal113_val;\
	BM_TraceMsgStatus_payload_GET( base_ptr, bmlocal113_val );\
	(bmlocal113_val)++;\
	BM_TraceMsgStatus_payload_SET( base_ptr, bmlocal113_val );\
}

// TraceMsgStatus_payload: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal114_tmp_bits;\
	BM_TraceMsgStatus_payload_GET_SIZE( base_ptr, out_bytes, bmlocal114_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal114_tmp_bits );\
}

#define BM_TraceMsgStatus_payload_BYTES_SIZE 1

#define BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal117_acc_bytes;\
	UINT bmlocal118_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal117_acc_bytes = 3;\
	bmlocal118_acc_bits = 1;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal117_acc_bytes );\
	out_bitoff += bmlocal118_acc_bits;\
}

// Alignment of TraceMsgStatus_bufferOverrun: accumulated=(3,1, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_bufferOverrun_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal119_my_ptr;\
	UINT bmlocal120_my_bitoff;\
	BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, bmlocal119_my_ptr, bmlocal120_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal119_my_ptr, bmlocal120_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_bufferOverrun_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal121_tmp_var;
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal121_tmp_var );
	return bmlocal121_tmp_var;
}

#define BM_TraceMsgStatus_bufferOverrun_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal122_my_ptr;\
	UINT bmlocal123_my_bitoff;\
	BM_TraceMsgStatus_bufferOverrun_GET_POS( base_ptr, bmlocal122_my_ptr, bmlocal123_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal122_my_ptr, bmlocal123_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceMsgStatus_bufferOverrun: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_bufferOverrun: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_bufferOverrun: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_bufferOverrun: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_bufferOverrun: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_bufferOverrun: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal124_out_val;\
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal124_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "bufferOverrun", 1, (UINT)(bmlocal124_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_bufferOverrun_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_bufferOverrun_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal125_val;\
	BM_TraceMsgStatus_bufferOverrun_GET( base_ptr, bmlocal125_val );\
	(bmlocal125_val)++;\
	BM_TraceMsgStatus_bufferOverrun_SET( base_ptr, bmlocal125_val );\
}

// TraceMsgStatus_bufferOverrun: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_bufferOverrun_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal126_tmp_bits;\
	BM_TraceMsgStatus_bufferOverrun_GET_SIZE( base_ptr, out_bytes, bmlocal126_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal126_tmp_bits );\
}

#define BM_TraceMsgStatus_bufferOverrun_BYTES_SIZE 1

#define BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal129_acc_bytes;\
	UINT bmlocal130_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal129_acc_bytes = 3;\
	bmlocal130_acc_bits = 2;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal129_acc_bytes );\
	out_bitoff += bmlocal130_acc_bits;\
}

// Alignment of TraceMsgStatus_subSystemID: accumulated=(3,2, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal131_my_ptr;\
	UINT bmlocal132_my_bitoff;\
	BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, bmlocal131_my_ptr, bmlocal132_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal131_my_ptr, bmlocal132_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal133_tmp_var;
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal133_tmp_var );
	return bmlocal133_tmp_var;
}

#define BM_TraceMsgStatus_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal134_my_ptr;\
	UINT bmlocal135_my_bitoff;\
	BM_TraceMsgStatus_subSystemID_GET_POS( base_ptr, bmlocal134_my_ptr, bmlocal135_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal134_my_ptr, bmlocal135_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceMsgStatus_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal136_out_val;\
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal136_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 3, (UINT)(bmlocal136_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal137_val;\
	BM_TraceMsgStatus_subSystemID_GET( base_ptr, bmlocal137_val );\
	(bmlocal137_val)++;\
	BM_TraceMsgStatus_subSystemID_SET( base_ptr, bmlocal137_val );\
}

// TraceMsgStatus_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal138_tmp_bits;\
	BM_TraceMsgStatus_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal138_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal138_tmp_bits );\
}

#define BM_TraceMsgStatus_subSystemID_BYTES_SIZE 1

#define BM_TraceMsgStatus_severity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal141_acc_bytes;\
	UINT bmlocal142_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal141_acc_bytes = 3;\
	bmlocal142_acc_bits = 5;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal141_acc_bytes );\
	out_bitoff += bmlocal142_acc_bits;\
}

// Alignment of TraceMsgStatus_severity: accumulated=(3,5, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceMsgStatus_severity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_severity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal143_my_ptr;\
	UINT bmlocal144_my_bitoff;\
	BM_TraceMsgStatus_severity_GET_POS( base_ptr, bmlocal143_my_ptr, bmlocal144_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal143_my_ptr, bmlocal144_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_severity_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal145_tmp_var;
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal145_tmp_var );
	return bmlocal145_tmp_var;
}

#define BM_TraceMsgStatus_severity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal146_my_ptr;\
	UINT bmlocal147_my_bitoff;\
	BM_TraceMsgStatus_severity_GET_POS( base_ptr, bmlocal146_my_ptr, bmlocal147_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal146_my_ptr, bmlocal147_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceMsgStatus_severity: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_severity: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus_severity: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_severity: SET_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus_severity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceMsgStatus_severity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal148_out_val;\
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal148_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "severity", 3, (UINT)(bmlocal148_out_val), "%d", 1);\
}

#define BM_TraceMsgStatus_severity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceMsgStatus_severity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal149_val;\
	BM_TraceMsgStatus_severity_GET( base_ptr, bmlocal149_val );\
	(bmlocal149_val)++;\
	BM_TraceMsgStatus_severity_SET( base_ptr, bmlocal149_val );\
}

// TraceMsgStatus_severity: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceMsgStatus_severity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal150_tmp_bits;\
	BM_TraceMsgStatus_severity_GET_SIZE( base_ptr, out_bytes, bmlocal150_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal150_tmp_bits );\
}

#define BM_TraceMsgStatus_severity_BYTES_SIZE 1

#define BM_TraceMsgStatus_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal153_tmp_bits;\
	BM_TraceMsgStatus_GET_SIZE( base_ptr, out_bytes, bmlocal153_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal153_tmp_bits );\
}

#define BM_TraceMsgStatus_BYTES_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceMsgStatus_GET_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceMsgStatus_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal154_my_ptr;\
	UINT bmlocal155_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal154_my_ptr, bmlocal155_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal154_my_ptr, bmlocal155_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceMsgStatus_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal156_tmp_var;
	BM_TraceMsgStatus_GET( base_ptr, bmlocal156_tmp_var );
	return bmlocal156_tmp_var;
}

#define BM_TraceMsgStatus_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal157_my_ptr;\
	UINT bmlocal158_my_bitoff;\
	BM_TraceMsgStatus_msgID_GET_POS( base_ptr, bmlocal157_my_ptr, bmlocal158_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal157_my_ptr, bmlocal158_my_bitoff, 32, in_val, 0x00000000 );\
}

// TraceMsgStatus: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceMsgStatus: IS_RESET accessor is not defined because no reset value was specified.
// TraceMsgStatus: SET_RESET accessor is not defined because no reset value was specified.
#define BM_TraceMsgStatus_GET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal159_val;\
	BM_TraceMsgStatus_GET( base_ptr, bmlocal159_val );\
	param_msgID = (UINT32)(((bmlocal159_val&BM_TraceMsgStatus_msgID_SHIFTED_MASK) >> BM_TraceMsgStatus_msgID_OFFSET));\
	param_numOfParams = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_numOfParams_SHIFTED_MASK) >> BM_TraceMsgStatus_numOfParams_OFFSET));\
	param_timeStampPresent = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK) >> BM_TraceMsgStatus_timeStampPresent_OFFSET));\
	param_inlineString = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_inlineString_SHIFTED_MASK) >> BM_TraceMsgStatus_inlineString_OFFSET));\
	param_payload = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_payload_SHIFTED_MASK) >> BM_TraceMsgStatus_payload_OFFSET));\
	param_bufferOverrun = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK) >> BM_TraceMsgStatus_bufferOverrun_OFFSET));\
	param_subSystemID = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_subSystemID_SHIFTED_MASK) >> BM_TraceMsgStatus_subSystemID_OFFSET));\
	param_severity = (UINT8)(((bmlocal159_val&BM_TraceMsgStatus_severity_SHIFTED_MASK) >> BM_TraceMsgStatus_severity_OFFSET));\
}

#define BM_TraceMsgStatus_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal160_varToWrite = (UINT32)(((param_msgID&BM_TraceMsgStatus_msgID_MASK) << BM_TraceMsgStatus_msgID_OFFSET) | ((param_numOfParams&BM_TraceMsgStatus_numOfParams_MASK) << BM_TraceMsgStatus_numOfParams_OFFSET) | ((param_timeStampPresent&BM_TraceMsgStatus_timeStampPresent_MASK) << BM_TraceMsgStatus_timeStampPresent_OFFSET) | ((param_inlineString&BM_TraceMsgStatus_inlineString_MASK) << BM_TraceMsgStatus_inlineString_OFFSET) | ((param_payload&BM_TraceMsgStatus_payload_MASK) << BM_TraceMsgStatus_payload_OFFSET) | ((param_bufferOverrun&BM_TraceMsgStatus_bufferOverrun_MASK) << BM_TraceMsgStatus_bufferOverrun_OFFSET) | ((param_subSystemID&BM_TraceMsgStatus_subSystemID_MASK) << BM_TraceMsgStatus_subSystemID_OFFSET) | ((param_severity&BM_TraceMsgStatus_severity_MASK) << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceMsgStatus_SET( base_ptr, bmlocal160_varToWrite );\
}

#define BM_TraceMsgStatus_STRICT_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal161_varToWrite = (UINT32)((param_msgID << BM_TraceMsgStatus_msgID_OFFSET) | (param_numOfParams << BM_TraceMsgStatus_numOfParams_OFFSET) | (param_timeStampPresent << BM_TraceMsgStatus_timeStampPresent_OFFSET) | (param_inlineString << BM_TraceMsgStatus_inlineString_OFFSET) | (param_payload << BM_TraceMsgStatus_payload_OFFSET) | (param_bufferOverrun << BM_TraceMsgStatus_bufferOverrun_OFFSET) | (param_subSystemID << BM_TraceMsgStatus_subSystemID_OFFSET) | (param_severity << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceMsgStatus_SET( base_ptr, bmlocal161_varToWrite );\
}

#define BM_TraceMsgStatus_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceMsgStatus", 1);\
	BM_TraceMsgStatus_msgID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_numOfParams_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_timeStampPresent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_bufferOverrun_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceMsgStatus_severity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceMsgStatus_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceMsgStatus_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceTimeStamp[4];

/*lint -save -e806 */ /* Small bit field is signed rather than unsigned*/
#ifdef BMI_ENDIANNESS_LITTLE
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _timeStamp; //HW clock(Timer1) timestamp
} BMS_TraceTimeStamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#else /* BMI_ENDIANNESS_BIG */
#if (!defined __arm && !defined __arc)
#pragma pack( push, 1 )
#endif
#ifdef __arm
typedef __packed struct
#elif defined __arc
typedef _Packed struct
#else
typedef struct
#endif
{
	UINT32 _timeStamp; //HW clock(Timer1) timestamp
} BMS_TraceTimeStamp;

#if (!defined __arm && !defined __arc)
#pragma pack( pop )
#endif

#endif	/*#ifdef BMI_ENDIANNESS_LITTLE*/
/*lint -restore */

// COMPOSITE: Full name: 'TraceTimeStamp' Type: 'TraceTimeStamp', Top-level, Non-instance, No bitoff root
#define BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceTimeStamp_timeStamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal162_tmp_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, out_ptr, bmlocal162_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal162_tmp_bitoff);\
}

#define BM_TraceTimeStamp_timeStamp_POS_ALIGNED 0

// Alignment of TraceTimeStamp_timeStamp: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceTimeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_timeStamp_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal163_my_ptr;\
	UINT bmlocal164_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal163_my_ptr, bmlocal164_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal163_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal163_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal163_my_ptr, bmlocal164_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceTimeStamp_timeStamp_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal165_tmp_var;
	BM_TraceTimeStamp_timeStamp_GET( base_ptr, bmlocal165_tmp_var );
	return bmlocal165_tmp_var;
}

#define BM_TraceTimeStamp_timeStamp_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal166_my_ptr;\
	UINT bmlocal167_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal166_my_ptr, bmlocal167_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal166_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal166_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal166_my_ptr, bmlocal167_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceTimeStamp_timeStamp: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceTimeStamp_timeStamp: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceTimeStamp_timeStamp: IS_RESET accessor is not defined because no reset value was specified.
// TraceTimeStamp_timeStamp: SET_RESET accessor is not defined because no reset value was specified.
// TraceTimeStamp_timeStamp: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceTimeStamp_timeStamp: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal168_out_val;\
	BM_TraceTimeStamp_timeStamp_GET( base_ptr, bmlocal168_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStamp", 32, (UINT)(bmlocal168_out_val), "%d", 1);\
}

#define BM_TraceTimeStamp_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceTimeStamp_timeStamp_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal169_my_ptr;\
	UINT bmlocal170_my_bitoff;\
	BM_TraceTimeStamp_timeStamp_GET_POS( base_ptr, bmlocal169_my_ptr, bmlocal170_my_bitoff );\
	(*((UINT32*)bmlocal169_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal170_my_bitoff );\
}

// TraceTimeStamp_timeStamp: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceTimeStamp_timeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal171_tmp_bits;\
	BM_TraceTimeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal171_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal171_tmp_bits );\
}

#define BM_TraceTimeStamp_timeStamp_BYTES_SIZE 4

#define BM_TraceTimeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal174_tmp_bits;\
	BM_TraceTimeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal174_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal174_tmp_bits );\
}

#define BM_TraceTimeStamp_BYTES_SIZE 4

#define BM_TraceTimeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceTimeStamp", 1);\
	BM_TraceTimeStamp_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceTimeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceTimeStamp_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceInlineString[4];

// COMPOSITE: Full name: 'TraceInlineString' Type: 'TraceInlineString', Top-level, Non-instance, No bitoff root
#define BM_TraceInlineString_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceInlineString_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal175_tmp_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, out_ptr, bmlocal175_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal175_tmp_bitoff);\
}

#define BM_TraceInlineString_length_POS_ALIGNED 0

// Alignment of TraceInlineString_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceInlineString_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal176_my_ptr;\
	UINT bmlocal177_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal176_my_ptr, bmlocal177_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal176_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal176_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal176_my_ptr, bmlocal177_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TraceInlineString_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal178_tmp_var;
	BM_TraceInlineString_length_GET( base_ptr, bmlocal178_tmp_var );
	return bmlocal178_tmp_var;
}

#define BM_TraceInlineString_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal179_my_ptr;\
	UINT bmlocal180_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal179_my_ptr, bmlocal180_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal179_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal179_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal179_my_ptr, bmlocal180_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TraceInlineString_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceInlineString_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal181_out_val;\
	BM_TraceInlineString_length_GET( base_ptr, bmlocal181_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal181_out_val), "%d", 1);\
}

#define BM_TraceInlineString_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceInlineString_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal182_my_ptr;\
	UINT bmlocal183_my_bitoff;\
	BM_TraceInlineString_length_GET_POS( base_ptr, bmlocal182_my_ptr, bmlocal183_my_bitoff );\
	(*((UINT32*)bmlocal182_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal183_my_bitoff );\
}

// TraceInlineString_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceInlineString_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal184_tmp_bits;\
	BM_TraceInlineString_length_GET_SIZE( base_ptr, out_bytes, bmlocal184_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal184_tmp_bits );\
}

#define BM_TraceInlineString_length_BYTES_SIZE 4

#define BM_TraceInlineString_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal187_acc_bytes;\
	UINT bmlocal188_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal187_acc_bytes = 4;\
	bmlocal188_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal187_acc_bytes );\
	out_bitoff += bmlocal188_acc_bits;\
}

#define BM_TraceInlineString_inlineString_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal189_tmp_bitoff;\
	BM_TraceInlineString_inlineString_GET_POS( base_ptr, out_ptr, bmlocal189_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal189_tmp_bitoff);\
}

#define BM_TraceInlineString_inlineString_POS_ALIGNED 4

// ARRAY: TraceInlineString_inlineString
#define BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal190_var0;\
		BM_TraceInlineString_length_GET( base_ptr, bmlocal190_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal190_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceInlineString_inlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal191_my_bytes;
	UINT bmlocal192_my_bits;
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal191_my_bytes, bmlocal192_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal191_my_bytes, bmlocal192_my_bits);
	BMI_UNUSED_VAR( bmlocal192_my_bits );
	return bmlocal191_my_bytes;
}

#define BM_TraceInlineString_inlineString_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal193_var0;\
			BM_TraceInlineString_length_GET( base_ptr, bmlocal193_var0 );\
			out_element_count = (UINT)(bmlocal193_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal194_out_ptr;\
	UINT bmlocal195_out_bitoff;\
	UINT bmlocal196_element_size_bytes;\
	UINT bmlocal197_element_size_bits;\
	BM_TraceInlineString_inlineString_GET_POS( base_ptr, bmlocal194_out_ptr, bmlocal195_out_bitoff );\
	bmlocal196_element_size_bytes = 1;\
	bmlocal197_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal194_out_ptr) + (idx0) * bmlocal196_element_size_bytes );\
	out_bitoff = bmlocal195_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal197_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceInlineString_inlineString' Type: 'Char', Inner, Non-instance, No bitoff root
#define BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal198_parent_out_ptr;\
	BM_TraceInlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, bmlocal198_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal198_parent_out_ptr;\
}

// Alignment of TraceInlineString_inlineString_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TraceInlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal199_my_ptr;\
	UINT bmlocal200_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal199_my_ptr, bmlocal200_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (char)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal199_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (char)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal199_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal199_my_ptr, bmlocal200_my_bitoff, 8, char, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE char BM_INLINE_TraceInlineString_inlineString_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	char bmlocal201_tmp_var;
	BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, bmlocal201_tmp_var );
	return bmlocal201_tmp_var;
}

#define BM_TraceInlineString_inlineString_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal202_my_ptr;\
	UINT bmlocal203_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal202_my_ptr, bmlocal203_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal202_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal202_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal202_my_ptr, bmlocal203_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TraceInlineString_inlineString_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_inlineString_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceInlineString_inlineString_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_inlineString_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceInlineString_inlineString_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceInlineString_inlineString_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	char bmlocal204_out_val;\
	BM_TraceInlineString_inlineString_value_GET( base_ptr, idx0, bmlocal204_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal204_out_val), "%d", 1);\
}

#define BM_TraceInlineString_inlineString_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceInlineString_inlineString_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal205_my_ptr;\
	UINT bmlocal206_my_bitoff;\
	BM_TraceInlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal205_my_ptr, bmlocal206_my_bitoff );\
	(*((UINT8*)bmlocal205_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal206_my_bitoff );\
}

// TraceInlineString_inlineString_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceInlineString_inlineString_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal207_tmp_bits;\
	BM_TraceInlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal207_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal207_tmp_bits );\
}

#define BM_TraceInlineString_inlineString_value_BYTES_SIZE 1

#define BM_TraceInlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal210_tmp_bits;\
	BM_TraceInlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal210_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal210_tmp_bits );\
}

#define BM_TraceInlineString_inlineString_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceInlineString_inlineString_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceInlineString_inlineString_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal211_dim_size0;\
	UINT bmlocal212_idx0;\
	{\
		UINT32 bmlocal213_var0;\
		BM_TraceInlineString_length_GET( base_ptr, bmlocal213_var0 );\
		bmlocal211_dim_size0 = (UINT)(bmlocal213_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	for( bmlocal212_idx0=0; bmlocal212_idx0<bmlocal211_dim_size0; bmlocal212_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal212_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceInlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, bmlocal212_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceInlineString_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal214_tmp_bits;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal214_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal214_tmp_bits );\
}


#define BM_TraceInlineString_r1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal215_tmp_bytes = 0;\
	UINT bmlocal216_tmp_bits = 0;\
	UINT bmlocal217_acc_bytes;\
	UINT bmlocal218_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal217_acc_bytes = 4;\
	bmlocal218_acc_bits = 0;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal215_tmp_bytes, bmlocal216_tmp_bits );\
	bmlocal217_acc_bytes += bmlocal215_tmp_bytes;\
	bmlocal218_acc_bits += bmlocal216_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal217_acc_bytes );\
	out_bitoff += bmlocal218_acc_bits;\
}

#define BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r1>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_r1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceInlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal219_tmp_bytes = 0;\
	UINT bmlocal220_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceInlineString_inlineString_GET_SIZE( base_ptr, bmlocal219_tmp_bytes, bmlocal220_tmp_bits );\
	out_bytes += bmlocal219_tmp_bytes;\
	out_bits += bmlocal220_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceInlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal221_tmp_bits;\
	BM_TraceInlineString_GET_SIZE( base_ptr, out_bytes, bmlocal221_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal221_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceInlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal222_my_bytes;
	UINT bmlocal223_my_bits;
	BM_TraceInlineString_GET_SIZE( base_ptr, bmlocal222_my_bytes, bmlocal223_my_bits );
	BMI_UNUSED_VAR( bmlocal223_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal222_my_bytes;
}

#define BM_TraceInlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceInlineString", 1);\
	BM_TraceInlineString_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceInlineString_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceInlineString_r1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceInlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceInlineString_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TracePayload[4];

// COMPOSITE: Full name: 'TracePayload' Type: 'TracePayload', Top-level, Non-instance, No bitoff root
#define BM_TracePayload_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TracePayload_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal224_tmp_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, out_ptr, bmlocal224_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal224_tmp_bitoff);\
}

#define BM_TracePayload_length_POS_ALIGNED 0

// Alignment of TracePayload_length: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TracePayload_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal225_my_ptr;\
	UINT bmlocal226_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal225_my_ptr, bmlocal226_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal225_my_ptr)) ), 0, 32, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT32)BMI_32BIT_EXTRACT( (BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal225_my_ptr)) ), 0, 32, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal225_my_ptr, bmlocal226_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
	}\
}

BMI_INLINE UINT32 BM_INLINE_TracePayload_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal227_tmp_var;
	BM_TracePayload_length_GET( base_ptr, bmlocal227_tmp_var );
	return bmlocal227_tmp_var;
}

#define BM_TracePayload_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal228_my_ptr;\
	UINT bmlocal229_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal228_my_ptr, bmlocal229_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal228_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_32BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal228_my_ptr) ), (in_val), 0, 0, 32, UINT32 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal228_my_ptr, bmlocal229_my_bitoff, 32, in_val, 0x00000000 );\
	}\
}

// TracePayload_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_length: IS_RESET accessor is not defined because no reset value was specified.
// TracePayload_length: SET_RESET accessor is not defined because no reset value was specified.
// TracePayload_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TracePayload_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TracePayload_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal230_out_val;\
	BM_TracePayload_length_GET( base_ptr, bmlocal230_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal230_out_val), "%d", 1);\
}

#define BM_TracePayload_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TracePayload_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	PVOID bmlocal231_my_ptr;\
	UINT bmlocal232_my_bitoff;\
	BM_TracePayload_length_GET_POS( base_ptr, bmlocal231_my_ptr, bmlocal232_my_bitoff );\
	(*((UINT32*)bmlocal231_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal232_my_bitoff );\
}

// TracePayload_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TracePayload_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal233_tmp_bits;\
	BM_TracePayload_length_GET_SIZE( base_ptr, out_bytes, bmlocal233_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal233_tmp_bits );\
}

#define BM_TracePayload_length_BYTES_SIZE 4

#define BM_TracePayload_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal236_acc_bytes;\
	UINT bmlocal237_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal236_acc_bytes = 4;\
	bmlocal237_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal236_acc_bytes );\
	out_bitoff += bmlocal237_acc_bits;\
}

#define BM_TracePayload_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal238_tmp_bitoff;\
	BM_TracePayload_payload_GET_POS( base_ptr, out_ptr, bmlocal238_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal238_tmp_bitoff);\
}

#define BM_TracePayload_payload_POS_ALIGNED 4

// ARRAY: TracePayload_payload
#define BM_TracePayload_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal239_var0;\
		BM_TracePayload_length_GET( base_ptr, bmlocal239_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal239_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TracePayload_payload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal240_my_bytes;
	UINT bmlocal241_my_bits;
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal240_my_bytes, bmlocal241_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal240_my_bytes, bmlocal241_my_bits);
	BMI_UNUSED_VAR( bmlocal241_my_bits );
	return bmlocal240_my_bytes;
}

#define BM_TracePayload_payload_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal242_var0;\
			BM_TracePayload_length_GET( base_ptr, bmlocal242_var0 );\
			out_element_count = (UINT)(bmlocal242_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_payload_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal243_out_ptr;\
	UINT bmlocal244_out_bitoff;\
	UINT bmlocal245_element_size_bytes;\
	UINT bmlocal246_element_size_bits;\
	BM_TracePayload_payload_GET_POS( base_ptr, bmlocal243_out_ptr, bmlocal244_out_bitoff );\
	bmlocal245_element_size_bytes = 1;\
	bmlocal246_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal243_out_ptr) + (idx0) * bmlocal245_element_size_bytes );\
	out_bitoff = bmlocal244_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal246_element_size_bits );\
}

// COMPOSITE: Full name: 'TracePayload_payload' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal247_parent_out_ptr;\
	BM_TracePayload_payload_GET_ELEMENT_POS( base_ptr, idx0, bmlocal247_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal247_parent_out_ptr;\
}

// Alignment of TracePayload_payload_value: accumulated=(0,0, ABA=1), parent.base=(0,0, ABA=1)
#define BM_TracePayload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal248_my_ptr;\
	UINT bmlocal249_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal248_my_ptr, bmlocal249_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal248_my_ptr)) ), 0, 8, 0);\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		(out_val) = (UINT8)BMI_32BIT_EXTRACT( (BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal248_my_ptr)) ), 0, 8, 0);\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_GET( bmlocal248_my_ptr, bmlocal249_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
	}\
}

BMI_INLINE UINT8 BM_INLINE_TracePayload_payload_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal250_tmp_var;
	BM_TracePayload_payload_value_GET( base_ptr, idx0, bmlocal250_tmp_var );
	return bmlocal250_tmp_var;
}

#define BM_TracePayload_payload_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal251_my_ptr;\
	UINT bmlocal252_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal251_my_ptr, bmlocal252_my_bitoff );\
	if( BMI_MACHINE_ARM_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal251_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else if( BMI_MACHINE_INTEL_LITTLE == BMI_MACHINE_VALUE )\
	{\
		BMI_32BIT_CLEAR_ASSIGN_TYPE( BMI_GET_8BIT_PTR_CONTENTS( BMI_PTR_TO_NUMERIC_CAST(bmlocal251_my_ptr) ), (in_val), 0, 0, 8, UINT8 );\
	}\
	else\
	{\
		BMI_GENERIC_32BIT_LITTLE_SET( bmlocal251_my_ptr, bmlocal252_my_bitoff, 8, in_val, 0xFFFFFFFF );\
	}\
}

// TracePayload_payload_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_payload_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TracePayload_payload_value: IS_RESET accessor is not defined because no reset value was specified.
// TracePayload_payload_value: SET_RESET accessor is not defined because no reset value was specified.
// TracePayload_payload_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TracePayload_payload_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal253_out_val;\
	BM_TracePayload_payload_value_GET( base_ptr, idx0, bmlocal253_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal253_out_val), "%u", 1);\
}

#define BM_TracePayload_payload_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TracePayload_payload_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	PVOID bmlocal254_my_ptr;\
	UINT bmlocal255_my_bitoff;\
	BM_TracePayload_payload_value_GET_POS( base_ptr, idx0, bmlocal254_my_ptr, bmlocal255_my_bitoff );\
	(*((UINT8*)bmlocal254_my_ptr))++;\
	BMI_UNUSED_VAR( bmlocal255_my_bitoff );\
}

// TracePayload_payload_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TracePayload_payload_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal256_tmp_bits;\
	BM_TracePayload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal256_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal256_tmp_bits );\
}

#define BM_TracePayload_payload_value_BYTES_SIZE 1

#define BM_TracePayload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal259_tmp_bits;\
	BM_TracePayload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal259_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal259_tmp_bits );\
}

#define BM_TracePayload_payload_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TracePayload_payload_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TracePayload_payload_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TracePayload_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal260_dim_size0;\
	UINT bmlocal261_idx0;\
	{\
		UINT32 bmlocal262_var0;\
		BM_TracePayload_length_GET( base_ptr, bmlocal262_var0 );\
		bmlocal260_dim_size0 = (UINT)(bmlocal262_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	for( bmlocal261_idx0=0; bmlocal261_idx0<bmlocal260_dim_size0; bmlocal261_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal261_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TracePayload_payload_DUMP_DEPTH_IDX( base_ptr, bmlocal261_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TracePayload_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal263_tmp_bits;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, out_bytes, bmlocal263_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal263_tmp_bits );\
}


#define BM_TracePayload_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal264_tmp_bytes = 0;\
	UINT bmlocal265_tmp_bits = 0;\
	UINT bmlocal266_acc_bytes;\
	UINT bmlocal267_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal266_acc_bytes = 4;\
	bmlocal267_acc_bits = 0;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal264_tmp_bytes, bmlocal265_tmp_bits );\
	bmlocal266_acc_bytes += bmlocal264_tmp_bytes;\
	bmlocal267_acc_bits += bmlocal265_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal266_acc_bytes );\
	out_bitoff += bmlocal267_acc_bits;\
}

#define BM_TracePayload_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TracePayload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal268_tmp_bytes = 0;\
	UINT bmlocal269_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TracePayload_payload_GET_SIZE( base_ptr, bmlocal268_tmp_bytes, bmlocal269_tmp_bits );\
	out_bytes += bmlocal268_tmp_bytes;\
	out_bits += bmlocal269_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TracePayload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal270_tmp_bits;\
	BM_TracePayload_GET_SIZE( base_ptr, out_bytes, bmlocal270_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal270_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TracePayload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal271_my_bytes;
	UINT bmlocal272_my_bits;
	BM_TracePayload_GET_SIZE( base_ptr, bmlocal271_my_bytes, bmlocal272_my_bits );
	BMI_UNUSED_VAR( bmlocal272_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal271_my_bytes;
}

#define BM_TracePayload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TracePayload", 1);\
	BM_TracePayload_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TracePayload_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TracePayload_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TracePayload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TracePayload_DUMP_DEPTH( base_ptr, 0 );\
}


typedef UINT8 TraceRunTimeMsgData[4];

// COMPOSITE: Full name: 'TraceRunTimeMsgData' Type: 'TraceRunTimeMsgData', Top-level, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
}

#define BM_TraceRunTimeMsgData_status_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal273_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, out_ptr, bmlocal273_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal273_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_POS_ALIGNED 0

// COMPOSITE: Full name: 'TraceRunTimeMsgData_status' Type: 'TraceMsgStatus', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal274_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal274_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal274_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_status_msgID_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal275_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, out_ptr, bmlocal275_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal275_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_msgID_POS_ALIGNED 0

// Alignment of TraceRunTimeMsgData_status_msgID: accumulated=(0,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_msgID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 2;\
	out_bits = 4;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal276_my_ptr;\
	UINT bmlocal277_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal276_my_ptr, bmlocal277_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal276_my_ptr, bmlocal277_my_bitoff, 20, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_msgID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal278_tmp_var;
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal278_tmp_var );
	return bmlocal278_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_msgID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal279_my_ptr;\
	UINT bmlocal280_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal279_my_ptr, bmlocal280_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal279_my_ptr, bmlocal280_my_bitoff, 20, in_val, 0x00000000 );\
}

// TraceRunTimeMsgData_status_msgID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_msgID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_msgID: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_msgID: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_msgID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_msgID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal281_out_val;\
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal281_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "msgID", 20, (UINT)(bmlocal281_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_msgID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_msgID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal282_val;\
	BM_TraceRunTimeMsgData_status_msgID_GET( base_ptr, bmlocal282_val );\
	(bmlocal282_val)++;\
	BM_TraceRunTimeMsgData_status_msgID_SET( base_ptr, bmlocal282_val );\
}

// TraceRunTimeMsgData_status_msgID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_msgID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal283_tmp_bits;\
	BM_TraceRunTimeMsgData_status_msgID_GET_SIZE( base_ptr, out_bytes, bmlocal283_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal283_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_msgID_BYTES_SIZE 3

#define BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal286_acc_bytes;\
	UINT bmlocal287_acc_bits;\
	PVOID bmlocal288_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal288_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal288_parent_out_ptr;\
	bmlocal286_acc_bytes = 2;\
	bmlocal287_acc_bits = 4;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal286_acc_bytes );\
	out_bitoff += bmlocal287_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_numOfParams: accumulated=(2,4, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_numOfParams_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 2;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal289_my_ptr;\
	UINT bmlocal290_my_bitoff;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, bmlocal289_my_ptr, bmlocal290_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal289_my_ptr, bmlocal290_my_bitoff, 2, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_numOfParams_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal291_tmp_var;
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal291_tmp_var );
	return bmlocal291_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_numOfParams_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal292_my_ptr;\
	UINT bmlocal293_my_bitoff;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_POS( base_ptr, bmlocal292_my_ptr, bmlocal293_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal292_my_ptr, bmlocal293_my_bitoff, 2, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_numOfParams: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_numOfParams: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_numOfParams: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_numOfParams: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_numOfParams: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_numOfParams: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal294_out_val;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal294_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "numOfParams", 2, (UINT)(bmlocal294_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal295_val;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal295_val );\
	(bmlocal295_val)++;\
	BM_TraceRunTimeMsgData_status_numOfParams_SET( base_ptr, bmlocal295_val );\
}

// TraceRunTimeMsgData_status_numOfParams: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_numOfParams_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal296_tmp_bits;\
	BM_TraceRunTimeMsgData_status_numOfParams_GET_SIZE( base_ptr, out_bytes, bmlocal296_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal296_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_numOfParams_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal299_acc_bytes;\
	UINT bmlocal300_acc_bits;\
	PVOID bmlocal301_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal301_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal301_parent_out_ptr;\
	bmlocal299_acc_bytes = 2;\
	bmlocal300_acc_bits = 6;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal299_acc_bytes );\
	out_bitoff += bmlocal300_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_timeStampPresent: accumulated=(2,6, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal302_my_ptr;\
	UINT bmlocal303_my_bitoff;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, bmlocal302_my_ptr, bmlocal303_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal302_my_ptr, bmlocal303_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_timeStampPresent_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal304_tmp_var;
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal304_tmp_var );
	return bmlocal304_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal305_my_ptr;\
	UINT bmlocal306_my_bitoff;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_POS( base_ptr, bmlocal305_my_ptr, bmlocal306_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal305_my_ptr, bmlocal306_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_timeStampPresent: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_timeStampPresent: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_timeStampPresent: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal307_out_val;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal307_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStampPresent", 1, (UINT)(bmlocal307_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal308_val;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal308_val );\
	(bmlocal308_val)++;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_SET( base_ptr, bmlocal308_val );\
}

// TraceRunTimeMsgData_status_timeStampPresent: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_timeStampPresent_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal309_tmp_bits;\
	BM_TraceRunTimeMsgData_status_timeStampPresent_GET_SIZE( base_ptr, out_bytes, bmlocal309_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal309_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_timeStampPresent_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal312_acc_bytes;\
	UINT bmlocal313_acc_bits;\
	PVOID bmlocal314_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal314_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal314_parent_out_ptr;\
	bmlocal312_acc_bytes = 2;\
	bmlocal313_acc_bits = 7;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal312_acc_bytes );\
	out_bitoff += bmlocal313_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_inlineString: accumulated=(2,7, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal315_my_ptr;\
	UINT bmlocal316_my_bitoff;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, bmlocal315_my_ptr, bmlocal316_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal315_my_ptr, bmlocal316_my_bitoff, 1, UINT32, out_val, 0x00000002 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_inlineString_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal317_tmp_var;
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal317_tmp_var );
	return bmlocal317_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_inlineString_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal318_my_ptr;\
	UINT bmlocal319_my_bitoff;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_POS( base_ptr, bmlocal318_my_ptr, bmlocal319_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal318_my_ptr, bmlocal319_my_bitoff, 1, in_val, 0x00000002 );\
}

// TraceRunTimeMsgData_status_inlineString: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_inlineString: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_inlineString: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_inlineString: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_inlineString: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_inlineString: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal320_out_val;\
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal320_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "inlineString", 1, (UINT)(bmlocal320_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal321_val;\
	BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal321_val );\
	(bmlocal321_val)++;\
	BM_TraceRunTimeMsgData_status_inlineString_SET( base_ptr, bmlocal321_val );\
}

// TraceRunTimeMsgData_status_inlineString: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal322_tmp_bits;\
	BM_TraceRunTimeMsgData_status_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal322_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal322_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_inlineString_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal325_acc_bytes;\
	UINT bmlocal326_acc_bits;\
	PVOID bmlocal327_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal327_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal327_parent_out_ptr;\
	bmlocal325_acc_bytes = 3;\
	bmlocal326_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal325_acc_bytes );\
	out_bitoff += bmlocal326_acc_bits;\
}

#define BM_TraceRunTimeMsgData_status_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal328_tmp_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, out_ptr, bmlocal328_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal328_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_status_payload_POS_ALIGNED 3

// Alignment of TraceRunTimeMsgData_status_payload: accumulated=(3,0, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal329_my_ptr;\
	UINT bmlocal330_my_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, bmlocal329_my_ptr, bmlocal330_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal329_my_ptr, bmlocal330_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_payload_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal331_tmp_var;
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal331_tmp_var );
	return bmlocal331_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_payload_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal332_my_ptr;\
	UINT bmlocal333_my_bitoff;\
	BM_TraceRunTimeMsgData_status_payload_GET_POS( base_ptr, bmlocal332_my_ptr, bmlocal333_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal332_my_ptr, bmlocal333_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_payload: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_payload: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_payload: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_payload: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_payload: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_payload: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal334_out_val;\
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal334_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "payload", 1, (UINT)(bmlocal334_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_payload_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal335_val;\
	BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal335_val );\
	(bmlocal335_val)++;\
	BM_TraceRunTimeMsgData_status_payload_SET( base_ptr, bmlocal335_val );\
}

// TraceRunTimeMsgData_status_payload: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal336_tmp_bits;\
	BM_TraceRunTimeMsgData_status_payload_GET_SIZE( base_ptr, out_bytes, bmlocal336_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal336_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_payload_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal339_acc_bytes;\
	UINT bmlocal340_acc_bits;\
	PVOID bmlocal341_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal341_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal341_parent_out_ptr;\
	bmlocal339_acc_bytes = 3;\
	bmlocal340_acc_bits = 1;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal339_acc_bytes );\
	out_bitoff += bmlocal340_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_bufferOverrun: accumulated=(3,1, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 1;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal342_my_ptr;\
	UINT bmlocal343_my_bitoff;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, bmlocal342_my_ptr, bmlocal343_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal342_my_ptr, bmlocal343_my_bitoff, 1, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_bufferOverrun_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal344_tmp_var;
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal344_tmp_var );
	return bmlocal344_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal345_my_ptr;\
	UINT bmlocal346_my_bitoff;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_POS( base_ptr, bmlocal345_my_ptr, bmlocal346_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal345_my_ptr, bmlocal346_my_bitoff, 1, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_bufferOverrun: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_bufferOverrun: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_bufferOverrun: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal347_out_val;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal347_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "bufferOverrun", 1, (UINT)(bmlocal347_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal348_val;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET( base_ptr, bmlocal348_val );\
	(bmlocal348_val)++;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_SET( base_ptr, bmlocal348_val );\
}

// TraceRunTimeMsgData_status_bufferOverrun: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_bufferOverrun_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal349_tmp_bits;\
	BM_TraceRunTimeMsgData_status_bufferOverrun_GET_SIZE( base_ptr, out_bytes, bmlocal349_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal349_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_bufferOverrun_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal352_acc_bytes;\
	UINT bmlocal353_acc_bits;\
	PVOID bmlocal354_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal354_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal354_parent_out_ptr;\
	bmlocal352_acc_bytes = 3;\
	bmlocal353_acc_bits = 2;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal352_acc_bytes );\
	out_bitoff += bmlocal353_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_subSystemID: accumulated=(3,2, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_subSystemID_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal355_my_ptr;\
	UINT bmlocal356_my_bitoff;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, bmlocal355_my_ptr, bmlocal356_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal355_my_ptr, bmlocal356_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_subSystemID_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal357_tmp_var;
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal357_tmp_var );
	return bmlocal357_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_subSystemID_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal358_my_ptr;\
	UINT bmlocal359_my_bitoff;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_POS( base_ptr, bmlocal358_my_ptr, bmlocal359_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal358_my_ptr, bmlocal359_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_subSystemID: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_subSystemID: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_subSystemID: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_subSystemID: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_subSystemID: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_subSystemID: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal360_out_val;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal360_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "subSystemID", 3, (UINT)(bmlocal360_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal361_val;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET( base_ptr, bmlocal361_val );\
	(bmlocal361_val)++;\
	BM_TraceRunTimeMsgData_status_subSystemID_SET( base_ptr, bmlocal361_val );\
}

// TraceRunTimeMsgData_status_subSystemID: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_subSystemID_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal362_tmp_bits;\
	BM_TraceRunTimeMsgData_status_subSystemID_GET_SIZE( base_ptr, out_bytes, bmlocal362_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal362_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_subSystemID_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal365_acc_bytes;\
	UINT bmlocal366_acc_bits;\
	PVOID bmlocal367_parent_out_ptr;\
	BM_TraceRunTimeMsgData_status_GET_POS( base_ptr, bmlocal367_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal367_parent_out_ptr;\
	bmlocal365_acc_bytes = 3;\
	bmlocal366_acc_bits = 5;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal365_acc_bytes );\
	out_bitoff += bmlocal366_acc_bits;\
}

// Alignment of TraceRunTimeMsgData_status_severity: accumulated=(3,5, ABA=4), parent.base=(0,0, ABA=4)
#define BM_TraceRunTimeMsgData_status_severity_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 0;\
	out_bits = 3;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal368_my_ptr;\
	UINT bmlocal369_my_bitoff;\
	BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, bmlocal368_my_ptr, bmlocal369_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal368_my_ptr, bmlocal369_my_bitoff, 3, UINT32, out_val, 0x00000003 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_severity_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal370_tmp_var;
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal370_tmp_var );
	return bmlocal370_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_severity_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal371_my_ptr;\
	UINT bmlocal372_my_bitoff;\
	BM_TraceRunTimeMsgData_status_severity_GET_POS( base_ptr, bmlocal371_my_ptr, bmlocal372_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal371_my_ptr, bmlocal372_my_bitoff, 3, in_val, 0x00000003 );\
}

// TraceRunTimeMsgData_status_severity: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_severity: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status_severity: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_severity: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status_severity: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_status_severity: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal373_out_val;\
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal373_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "severity", 3, (UINT)(bmlocal373_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_status_severity_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_status_severity_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal374_val;\
	BM_TraceRunTimeMsgData_status_severity_GET( base_ptr, bmlocal374_val );\
	(bmlocal374_val)++;\
	BM_TraceRunTimeMsgData_status_severity_SET( base_ptr, bmlocal374_val );\
}

// TraceRunTimeMsgData_status_severity: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_status_severity_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal375_tmp_bits;\
	BM_TraceRunTimeMsgData_status_severity_GET_SIZE( base_ptr, out_bytes, bmlocal375_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal375_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_severity_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_status_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal378_tmp_bits;\
	BM_TraceRunTimeMsgData_status_GET_SIZE( base_ptr, out_bytes, bmlocal378_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal378_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_status_BYTES_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_status_GET_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceRunTimeMsgData_status_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal379_my_ptr;\
	UINT bmlocal380_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal379_my_ptr, bmlocal380_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET_VOLATILE( bmlocal379_my_ptr, bmlocal380_my_bitoff, 32, UINT32, out_val, 0x00000000 );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_status_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal381_tmp_var;
	BM_TraceRunTimeMsgData_status_GET( base_ptr, bmlocal381_tmp_var );
	return bmlocal381_tmp_var;
}

#define BM_TraceRunTimeMsgData_status_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal382_my_ptr;\
	UINT bmlocal383_my_bitoff;\
	BM_TraceRunTimeMsgData_status_msgID_GET_POS( base_ptr, bmlocal382_my_ptr, bmlocal383_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET_VOLATILE( bmlocal382_my_ptr, bmlocal383_my_bitoff, 32, in_val, 0x00000000 );\
}

// TraceRunTimeMsgData_status: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_status: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_status: SET_RESET accessor is not defined because no reset value was specified.
#define BM_TraceRunTimeMsgData_status_GET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal384_val;\
	BM_TraceRunTimeMsgData_status_GET( base_ptr, bmlocal384_val );\
	param_msgID = (UINT32)(((bmlocal384_val&BM_TraceMsgStatus_msgID_SHIFTED_MASK) >> BM_TraceMsgStatus_msgID_OFFSET));\
	param_numOfParams = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_numOfParams_SHIFTED_MASK) >> BM_TraceMsgStatus_numOfParams_OFFSET));\
	param_timeStampPresent = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_timeStampPresent_SHIFTED_MASK) >> BM_TraceMsgStatus_timeStampPresent_OFFSET));\
	param_inlineString = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_inlineString_SHIFTED_MASK) >> BM_TraceMsgStatus_inlineString_OFFSET));\
	param_payload = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_payload_SHIFTED_MASK) >> BM_TraceMsgStatus_payload_OFFSET));\
	param_bufferOverrun = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_bufferOverrun_SHIFTED_MASK) >> BM_TraceMsgStatus_bufferOverrun_OFFSET));\
	param_subSystemID = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_subSystemID_SHIFTED_MASK) >> BM_TraceMsgStatus_subSystemID_OFFSET));\
	param_severity = (UINT8)(((bmlocal384_val&BM_TraceMsgStatus_severity_SHIFTED_MASK) >> BM_TraceMsgStatus_severity_OFFSET));\
}

#define BM_TraceRunTimeMsgData_status_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal385_varToWrite = (UINT32)(((param_msgID&BM_TraceMsgStatus_msgID_MASK) << BM_TraceMsgStatus_msgID_OFFSET) | ((param_numOfParams&BM_TraceMsgStatus_numOfParams_MASK) << BM_TraceMsgStatus_numOfParams_OFFSET) | ((param_timeStampPresent&BM_TraceMsgStatus_timeStampPresent_MASK) << BM_TraceMsgStatus_timeStampPresent_OFFSET) | ((param_inlineString&BM_TraceMsgStatus_inlineString_MASK) << BM_TraceMsgStatus_inlineString_OFFSET) | ((param_payload&BM_TraceMsgStatus_payload_MASK) << BM_TraceMsgStatus_payload_OFFSET) | ((param_bufferOverrun&BM_TraceMsgStatus_bufferOverrun_MASK) << BM_TraceMsgStatus_bufferOverrun_OFFSET) | ((param_subSystemID&BM_TraceMsgStatus_subSystemID_MASK) << BM_TraceMsgStatus_subSystemID_OFFSET) | ((param_severity&BM_TraceMsgStatus_severity_MASK) << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceRunTimeMsgData_status_SET( base_ptr, bmlocal385_varToWrite );\
}

#define BM_TraceRunTimeMsgData_status_STRICT_SET_ALL( base_ptr, param_msgID, param_numOfParams, param_timeStampPresent, param_inlineString, param_payload, param_bufferOverrun, param_subSystemID, param_severity )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal386_varToWrite = (UINT32)((param_msgID << BM_TraceMsgStatus_msgID_OFFSET) | (param_numOfParams << BM_TraceMsgStatus_numOfParams_OFFSET) | (param_timeStampPresent << BM_TraceMsgStatus_timeStampPresent_OFFSET) | (param_inlineString << BM_TraceMsgStatus_inlineString_OFFSET) | (param_payload << BM_TraceMsgStatus_payload_OFFSET) | (param_bufferOverrun << BM_TraceMsgStatus_bufferOverrun_OFFSET) | (param_subSystemID << BM_TraceMsgStatus_subSystemID_OFFSET) | (param_severity << BM_TraceMsgStatus_severity_OFFSET));\
	BM_TraceRunTimeMsgData_status_SET( base_ptr, bmlocal386_varToWrite );\
}

#define BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "status", 1);\
	BM_TraceRunTimeMsgData_status_msgID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_numOfParams_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_timeStampPresent_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_bufferOverrun_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_subSystemID_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_status_severity_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_status_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal389_acc_bytes;\
	UINT bmlocal390_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal389_acc_bytes = 4;\
	bmlocal390_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal389_acc_bytes );\
	out_bitoff += bmlocal390_acc_bits;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal391_tmp_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, out_ptr, bmlocal391_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal391_tmp_bitoff);\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_POS_ALIGNED 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal392_parent_out_ptr;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_POS( base_ptr, bmlocal392_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal392_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_timeStampOpt_timeStamp' Type: 'TraceTimeStamp', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal393_parent_out_ptr;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_POS( base_ptr, bmlocal393_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal393_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal394_tmp_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, out_ptr, bmlocal394_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal394_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal395_my_ptr;\
	UINT bmlocal396_my_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, bmlocal395_my_ptr, bmlocal396_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal395_my_ptr, bmlocal396_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal397_tmp_var;
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal397_tmp_var );
	return bmlocal397_tmp_var;
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal398_my_ptr;\
	UINT bmlocal399_my_bitoff;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_POS( base_ptr, bmlocal398_my_ptr, bmlocal399_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal398_my_ptr, bmlocal399_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal400_out_val;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal400_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "timeStamp", 32, (UINT)(bmlocal400_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal401_val;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET( base_ptr, bmlocal401_val );\
	(bmlocal401_val)++;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_SET( base_ptr, bmlocal401_val );\
}

// TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal402_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_GET_SIZE( base_ptr, out_bytes, bmlocal402_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal402_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal405_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal405_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal405_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "timeStamp", 1);\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal406_var0;\
		BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal406_var0 );\
		if( bmlocal406_var0 != 0 )\
		{\
			out_bytes = 4;\
			out_bits = 0;\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal407_var0;\
		BM_TraceRunTimeMsgData_status_timeStampPresent_GET( base_ptr, bmlocal407_var0 );\
		out_flag = (bmlocal407_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal408_tmp_bytes = 0;\
	UINT bmlocal409_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_GET_SIZE( base_ptr, bmlocal408_tmp_bytes, bmlocal409_tmp_bits );\
	out_bytes += bmlocal408_tmp_bytes;\
	out_bits += bmlocal409_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal410_tmp_bits;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, out_bytes, bmlocal410_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal410_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal411_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "timeStampOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_EVALUATE( base_ptr, bmlocal411_out_flag );\
		if( bmlocal411_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_timeStampOpt_timeStamp_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_timeStampOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal412_tmp_bytes = 0;\
	UINT bmlocal413_tmp_bits = 0;\
	UINT bmlocal414_acc_bytes;\
	UINT bmlocal415_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal414_acc_bytes = 4;\
	bmlocal415_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal412_tmp_bytes, bmlocal413_tmp_bits );\
	bmlocal414_acc_bytes += bmlocal412_tmp_bytes;\
	bmlocal415_acc_bits += bmlocal413_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal414_acc_bytes );\
	out_bitoff += bmlocal415_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal416_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_POS( base_ptr, bmlocal416_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal416_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_inlineStringOpt_inlineString' Type: 'TraceInlineString', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal417_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal417_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal417_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal418_tmp_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, out_ptr, bmlocal418_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal418_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_inlineStringOpt_inlineString_length: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal419_my_ptr;\
	UINT bmlocal420_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, bmlocal419_my_ptr, bmlocal420_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal419_my_ptr, bmlocal420_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal421_tmp_var;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal421_tmp_var );
	return bmlocal421_tmp_var;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal422_my_ptr;\
	UINT bmlocal423_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_POS( base_ptr, bmlocal422_my_ptr, bmlocal423_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal422_my_ptr, bmlocal423_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal424_out_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal424_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal424_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal425_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal425_val );\
	(bmlocal425_val)++;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_SET( base_ptr, bmlocal425_val );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal426_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET_SIZE( base_ptr, out_bytes, bmlocal426_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal426_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal429_acc_bytes;\
	UINT bmlocal430_acc_bits;\
	PVOID bmlocal431_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal431_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal431_parent_out_ptr;\
	bmlocal429_acc_bytes = 4;\
	bmlocal430_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal429_acc_bytes );\
	out_bitoff += bmlocal430_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal432_tmp_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, out_ptr, bmlocal432_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal432_tmp_bitoff);\
}

// ARRAY: TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal433_var0;\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal433_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal433_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal434_my_bytes;
	UINT bmlocal435_my_bits;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal434_my_bytes, bmlocal435_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal434_my_bytes, bmlocal435_my_bits);
	BMI_UNUSED_VAR( bmlocal435_my_bits );
	return bmlocal434_my_bytes;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal436_var0;\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal436_var0 );\
			out_element_count = (UINT)(bmlocal436_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal437_out_ptr;\
	UINT bmlocal438_out_bitoff;\
	UINT bmlocal439_element_size_bytes;\
	UINT bmlocal440_element_size_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_POS( base_ptr, bmlocal437_out_ptr, bmlocal438_out_bitoff );\
	bmlocal439_element_size_bytes = 1;\
	bmlocal440_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal437_out_ptr) + (idx0) * bmlocal439_element_size_bytes );\
	out_bitoff = bmlocal438_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal440_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString' Type: 'Char', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal441_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_ELEMENT_POS( base_ptr, idx0, bmlocal441_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal441_parent_out_ptr;\
}

// Alignment of TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal442_my_ptr;\
	UINT bmlocal443_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal442_my_ptr, bmlocal443_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal442_my_ptr, bmlocal443_my_bitoff, 8, char, out_val, 0xFFFFFFFF );\
}

BMI_INLINE char BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	char bmlocal444_tmp_var;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal444_tmp_var );
	return bmlocal444_tmp_var;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal445_my_ptr;\
	UINT bmlocal446_my_bitoff;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_POS( base_ptr, idx0, bmlocal445_my_ptr, bmlocal446_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal445_my_ptr, bmlocal446_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	char bmlocal447_out_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal447_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal447_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	char bmlocal448_val;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET( base_ptr, idx0, bmlocal448_val );\
	(bmlocal448_val)++;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_SET( base_ptr, idx0, bmlocal448_val );\
}

// TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal449_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal449_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal449_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal452_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal452_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal452_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal453_dim_size0;\
	UINT bmlocal454_idx0;\
	{\
		UINT32 bmlocal455_var0;\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_GET( base_ptr, bmlocal455_var0 );\
		bmlocal453_dim_size0 = (UINT)(bmlocal455_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	for( bmlocal454_idx0=0; bmlocal454_idx0<bmlocal453_dim_size0; bmlocal454_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal454_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH_IDX( base_ptr, bmlocal454_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal456_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, out_bytes, bmlocal456_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal456_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal457_tmp_bytes = 0;\
	UINT bmlocal458_tmp_bits = 0;\
	UINT bmlocal459_acc_bytes;\
	UINT bmlocal460_acc_bits;\
	PVOID bmlocal461_parent_out_ptr;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_POS( base_ptr, bmlocal461_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal461_parent_out_ptr;\
	bmlocal459_acc_bytes = 4;\
	bmlocal460_acc_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal457_tmp_bytes, bmlocal458_tmp_bits );\
	bmlocal459_acc_bytes += bmlocal457_tmp_bytes;\
	bmlocal460_acc_bits += bmlocal458_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal459_acc_bytes );\
	out_bitoff += bmlocal460_acc_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r1>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal462_tmp_bytes = 0;\
	UINT bmlocal463_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_GET_SIZE( base_ptr, bmlocal462_tmp_bytes, bmlocal463_tmp_bits );\
	out_bytes += bmlocal462_tmp_bytes;\
	out_bits += bmlocal463_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal464_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal464_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal464_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal465_my_bytes;
	UINT bmlocal466_my_bits;
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, bmlocal465_my_bytes, bmlocal466_my_bits );
	BMI_UNUSED_VAR( bmlocal466_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal465_my_bytes;
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineString", 1);\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_r1_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal467_var0;\
		BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal467_var0 );\
		if( bmlocal467_var0 != 0 )\
		{\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits );\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal468_var0;\
		BM_TraceRunTimeMsgData_status_inlineString_GET( base_ptr, bmlocal468_var0 );\
		out_flag = (bmlocal468_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal469_tmp_bytes = 0;\
	UINT bmlocal470_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_GET_SIZE( base_ptr, bmlocal469_tmp_bytes, bmlocal470_tmp_bits );\
	out_bytes += bmlocal469_tmp_bytes;\
	out_bits += bmlocal470_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal471_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, out_bytes, bmlocal471_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal471_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal472_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "inlineStringOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_EVALUATE( base_ptr, bmlocal472_out_flag );\
		if( bmlocal472_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_inlineStringOpt_inlineString_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_inlineStringOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_params_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal473_tmp_bytes = 0;\
	UINT bmlocal474_tmp_bits = 0;\
	UINT bmlocal475_acc_bytes;\
	UINT bmlocal476_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal475_acc_bytes = 4;\
	bmlocal476_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal473_tmp_bytes, bmlocal474_tmp_bits );\
	bmlocal475_acc_bytes += bmlocal473_tmp_bytes;\
	bmlocal476_acc_bits += bmlocal474_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal473_tmp_bytes, bmlocal474_tmp_bits );\
	bmlocal475_acc_bytes += bmlocal473_tmp_bytes;\
	bmlocal476_acc_bits += bmlocal474_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal475_acc_bytes );\
	out_bitoff += bmlocal476_acc_bits;\
}

// ARRAY: TraceRunTimeMsgData_params
#define BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal477_var0;\
		BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal477_var0 );\
		out_bytes = (UINT)(4*(1*bmlocal477_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_params_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal478_my_bytes;
	UINT bmlocal479_my_bits;
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal478_my_bytes, bmlocal479_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal478_my_bytes, bmlocal479_my_bits);
	BMI_UNUSED_VAR( bmlocal479_my_bits );
	return bmlocal478_my_bytes;
}

#define BM_TraceRunTimeMsgData_params_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal480_var0;\
			BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal480_var0 );\
			out_element_count = (UINT)(bmlocal480_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_params_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal481_out_ptr;\
	UINT bmlocal482_out_bitoff;\
	UINT bmlocal483_element_size_bytes;\
	UINT bmlocal484_element_size_bits;\
	BM_TraceRunTimeMsgData_params_GET_POS( base_ptr, bmlocal481_out_ptr, bmlocal482_out_bitoff );\
	bmlocal483_element_size_bytes = 4;\
	bmlocal484_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal481_out_ptr) + (idx0) * bmlocal483_element_size_bytes );\
	out_bitoff = bmlocal482_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal484_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_params' Type: 'Uint32', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal485_parent_out_ptr;\
	BM_TraceRunTimeMsgData_params_GET_ELEMENT_POS( base_ptr, idx0, bmlocal485_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal485_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_params_value_GET_POS_ALIGNED( base_ptr, idx0, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal486_tmp_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, out_ptr, bmlocal486_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal486_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_params_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_params_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal487_my_ptr;\
	UINT bmlocal488_my_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, bmlocal487_my_ptr, bmlocal488_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal487_my_ptr, bmlocal488_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_params_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT32 bmlocal489_tmp_var;
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal489_tmp_var );
	return bmlocal489_tmp_var;
}

#define BM_TraceRunTimeMsgData_params_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal490_my_ptr;\
	UINT bmlocal491_my_bitoff;\
	BM_TraceRunTimeMsgData_params_value_GET_POS( base_ptr, idx0, bmlocal490_my_ptr, bmlocal491_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal490_my_ptr, bmlocal491_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_params_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_params_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_params_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_params_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_params_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_params_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal492_out_val;\
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal492_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 32, (UINT)(bmlocal492_out_val), "%u", 1);\
}

#define BM_TraceRunTimeMsgData_params_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_params_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal493_val;\
	BM_TraceRunTimeMsgData_params_value_GET( base_ptr, idx0, bmlocal493_val );\
	(bmlocal493_val)++;\
	BM_TraceRunTimeMsgData_params_value_SET( base_ptr, idx0, bmlocal493_val );\
}

// TraceRunTimeMsgData_params_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_params_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal494_tmp_bits;\
	BM_TraceRunTimeMsgData_params_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal494_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal494_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_params_value_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_params_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal497_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal497_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal497_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_params_BYTES_CELL_SIZE 4

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_params_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 4;
}

#define BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_params_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal498_dim_size0;\
	UINT bmlocal499_idx0;\
	{\
		UINT32 bmlocal500_var0;\
		BM_TraceRunTimeMsgData_status_numOfParams_GET( base_ptr, bmlocal500_var0 );\
		bmlocal498_dim_size0 = (UINT)(bmlocal500_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "params", 1);\
	for( bmlocal499_idx0=0; bmlocal499_idx0<bmlocal498_dim_size0; bmlocal499_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal499_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_params_DUMP_DEPTH_IDX( base_ptr, bmlocal499_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_params_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_params_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal501_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, out_bytes, bmlocal501_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal501_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal502_tmp_bytes = 0;\
	UINT bmlocal503_tmp_bits = 0;\
	UINT bmlocal504_acc_bytes;\
	UINT bmlocal505_acc_bits;\
	out_ptr = base_ptr;\
	out_bitoff = 0;\
	bmlocal504_acc_bytes = 4;\
	bmlocal505_acc_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal502_tmp_bytes, bmlocal503_tmp_bits );\
	bmlocal504_acc_bytes += bmlocal502_tmp_bytes;\
	bmlocal505_acc_bits += bmlocal503_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal502_tmp_bytes, bmlocal503_tmp_bits );\
	bmlocal504_acc_bytes += bmlocal502_tmp_bytes;\
	bmlocal505_acc_bits += bmlocal503_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal502_tmp_bytes, bmlocal503_tmp_bits );\
	bmlocal504_acc_bytes += bmlocal502_tmp_bytes;\
	bmlocal505_acc_bits += bmlocal503_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal504_acc_bytes );\
	out_bitoff += bmlocal505_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal506_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_POS( base_ptr, bmlocal506_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal506_parent_out_ptr;\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_payloadOpt_payload' Type: 'TracePayload', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal507_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal507_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal507_parent_out_ptr;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal508_tmp_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, out_ptr, bmlocal508_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal508_tmp_bitoff);\
}

// Alignment of TraceRunTimeMsgData_payloadOpt_payload_length: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 4;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal509_my_ptr;\
	UINT bmlocal510_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, bmlocal509_my_ptr, bmlocal510_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal509_my_ptr, bmlocal510_my_bitoff, 32, UINT32, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT32 BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_length_GET(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT32 bmlocal511_tmp_var;
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal511_tmp_var );
	return bmlocal511_tmp_var;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_SET( base_ptr, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal512_my_ptr;\
	UINT bmlocal513_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_POS( base_ptr, bmlocal512_my_ptr, bmlocal513_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal512_my_ptr, bmlocal513_my_bitoff, 32, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_payloadOpt_payload_length: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_length: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_payloadOpt_payload_length: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal514_out_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal514_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "length", 32, (UINT)(bmlocal514_out_val), "%d", 1);\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_INCREMENT( base_ptr )\
{\
	/*lint --e{*} */\
	UINT32 bmlocal515_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal515_val );\
	(bmlocal515_val)++;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_SET( base_ptr, bmlocal515_val );\
}

// TraceRunTimeMsgData_payloadOpt_payload_length: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal516_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET_SIZE( base_ptr, out_bytes, bmlocal516_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal516_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_length_BYTES_SIZE 4

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal519_acc_bytes;\
	UINT bmlocal520_acc_bits;\
	PVOID bmlocal521_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal521_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal521_parent_out_ptr;\
	bmlocal519_acc_bytes = 4;\
	bmlocal520_acc_bits = 0;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal519_acc_bytes );\
	out_bitoff += bmlocal520_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS_ALIGNED( base_ptr, out_ptr )\
{\
	/*lint --e{*} */\
	UINT bmlocal522_tmp_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, out_ptr, bmlocal522_tmp_bitoff );\
	BMI_NORMALIZE_BITOFF(out_ptr, bmlocal522_tmp_bitoff);\
}

// ARRAY: TraceRunTimeMsgData_payloadOpt_payload_payload
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal523_var0;\
		BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal523_var0 );\
		out_bytes = (UINT)(1*(1*bmlocal523_var0));\
	}\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal524_my_bytes;
	UINT bmlocal525_my_bits;
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal524_my_bytes, bmlocal525_my_bits );
	BMI_NORMALIZE_BITSIZE(bmlocal524_my_bytes, bmlocal525_my_bits);
	BMI_UNUSED_VAR( bmlocal525_my_bits );
	return bmlocal524_my_bytes;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_DIMENSION_ELEMENT_COUNT( base_ptr, index, out_element_count )\
{\
	/*lint --e{*} */\
	switch( index )\
	{\
		case (0):\
		{\
			UINT32 bmlocal526_var0;\
			BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal526_var0 );\
			out_element_count = (UINT)(bmlocal526_var0);\
		}\
		break;\
		default:\
		out_element_count = 0;\
		break;\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_ELEMENT_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal527_out_ptr;\
	UINT bmlocal528_out_bitoff;\
	UINT bmlocal529_element_size_bytes;\
	UINT bmlocal530_element_size_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_POS( base_ptr, bmlocal527_out_ptr, bmlocal528_out_bitoff );\
	bmlocal529_element_size_bytes = 1;\
	bmlocal530_element_size_bits = 0;\
	out_ptr = BMI_NUMBER_TO_PTR_CAST( BMI_PTR_TO_NUMERIC_CAST(bmlocal527_out_ptr) + (idx0) * bmlocal529_element_size_bytes );\
	out_bitoff = bmlocal528_out_bitoff;\
	BMI_UNUSED_VAR( bmlocal530_element_size_bits );\
}

// COMPOSITE: Full name: 'TraceRunTimeMsgData_payloadOpt_payload_payload' Type: 'Uint8', Inner, Non-instance, No bitoff root
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	PVOID bmlocal531_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_ELEMENT_POS( base_ptr, idx0, bmlocal531_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal531_parent_out_ptr;\
}

// Alignment of TraceRunTimeMsgData_payloadOpt_payload_payload_value: accumulated=(Variable), parent.base=(Variable)
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, out_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal532_my_ptr;\
	UINT bmlocal533_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, bmlocal532_my_ptr, bmlocal533_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_GET( bmlocal532_my_ptr, bmlocal533_my_bitoff, 8, UINT8, out_val, 0xFFFFFFFF );\
}

BMI_INLINE UINT8 BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET(PVOID base_ptr, UINT idx0)
{
	/*lint --e{*} */
	UINT8 bmlocal534_tmp_var;
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal534_tmp_var );
	return bmlocal534_tmp_var;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_SET( base_ptr, idx0, in_val )\
{\
	/*lint --e{*} */\
	PVOID bmlocal535_my_ptr;\
	UINT bmlocal536_my_bitoff;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_POS( base_ptr, idx0, bmlocal535_my_ptr, bmlocal536_my_bitoff );\
	BMI_GENERIC_32BIT_LITTLE_SET( bmlocal535_my_ptr, bmlocal536_my_bitoff, 8, in_val, 0xFFFFFFFF );\
}

// TraceRunTimeMsgData_payloadOpt_payload_payload_value: IS_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET_DEFAULT accessor is not defined because no default value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: IS_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET_RESET accessor is not defined because no reset value was specified.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: CLEAR accessor is not defined because of incompatible access rights. Specified: RW Required: W1C, WO1C.
// TraceRunTimeMsgData_payloadOpt_payload_payload_value: SET(W1S) accessor is not defined because of incompatible access rights. Specified: RW Required: W1S, WO1S.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal537_out_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal537_out_val );\
	/*lint -e(571) */\
	BMI_FORMAT_DUMP(depth, "value", 8, (UINT)(bmlocal537_out_val), "%u", 1);\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_INCREMENT( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	UINT8 bmlocal538_val;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET( base_ptr, idx0, bmlocal538_val );\
	(bmlocal538_val)++;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_SET( base_ptr, idx0, bmlocal538_val );\
}

// TraceRunTimeMsgData_payloadOpt_payload_payload_value: Validation accessors are not defined because validation condition was not specified.
#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_BYTES_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal539_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_GET_SIZE( base_ptr, idx0, out_bytes, bmlocal539_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal539_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_BYTES_SIZE 1

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	out_bytes = 1;\
	out_bits = 0;\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_BYTES_CELL_SIZE( base_ptr, idx0, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal542_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE( base_ptr, idx0, out_bytes, bmlocal542_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal542_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_BYTES_CELL_SIZE 1

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_CELL_SIZE()
{
	/*lint --e{*} */
	return 1;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, depth )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_value_DUMP_DEPTH( base_ptr, idx0, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
	BMI_UNUSED_VAR( idx0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_IDX( base_ptr, idx0 )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, idx0, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	UINT bmlocal543_dim_size0;\
	UINT bmlocal544_idx0;\
	{\
		UINT32 bmlocal545_var0;\
		BM_TraceRunTimeMsgData_payloadOpt_payload_length_GET( base_ptr, bmlocal545_var0 );\
		bmlocal543_dim_size0 = (UINT)(bmlocal545_var0);\
	}\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	for( bmlocal544_idx0=0; bmlocal544_idx0<bmlocal543_dim_size0; bmlocal544_idx0++ )\
	{\
		BMI_FORMAT_NONVALUE_DUMP((depth + 1), "(", 0);\
		/*lint -e(571) */\
		BMI_FORMAT_DUMP(0, "", 32, (UINT)(bmlocal544_idx0), "%d", 0);\
		BMI_FORMAT_NONVALUE_DUMP(0, ")", 1);\
		BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH_IDX( base_ptr, bmlocal544_idx0, depth );\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal546_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, out_bytes, bmlocal546_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal546_tmp_bits );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_GET_POS( base_ptr, out_ptr, out_bitoff )\
{\
	/*lint --e{*} */\
	UINT bmlocal547_tmp_bytes = 0;\
	UINT bmlocal548_tmp_bits = 0;\
	UINT bmlocal549_acc_bytes;\
	UINT bmlocal550_acc_bits;\
	PVOID bmlocal551_parent_out_ptr;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_POS( base_ptr, bmlocal551_parent_out_ptr, out_bitoff );\
	out_ptr = bmlocal551_parent_out_ptr;\
	bmlocal549_acc_bytes = 4;\
	bmlocal550_acc_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal547_tmp_bytes, bmlocal548_tmp_bits );\
	bmlocal549_acc_bytes += bmlocal547_tmp_bytes;\
	bmlocal550_acc_bits += bmlocal548_tmp_bits;\
	BMI_ADD_ASSIGN_PTR( out_ptr, bmlocal549_acc_bytes );\
	out_bitoff += bmlocal550_acc_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "<OptionalPadding-r2>", 1);\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal552_tmp_bytes = 0;\
	UINT bmlocal553_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_GET_SIZE( base_ptr, bmlocal552_tmp_bytes, bmlocal553_tmp_bits );\
	out_bytes += bmlocal552_tmp_bytes;\
	out_bits += bmlocal553_tmp_bits;\
	BMI_ROUND_UP_4BYTES( out_bytes, out_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_BYTES_NON_CONDITIONAL_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal554_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, bmlocal554_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal554_tmp_bits );\
}

BMI_INLINE UINT BM_INLINE_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE(PVOID base_ptr)
{
	/*lint --e{*} */
	UINT bmlocal555_my_bytes;
	UINT bmlocal556_my_bits;
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, bmlocal555_my_bytes, bmlocal556_my_bits );
	BMI_UNUSED_VAR( bmlocal556_my_bits );
	BMI_UNUSED_VAR( base_ptr );
	return bmlocal555_my_bytes;
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payload", 1);\
	BM_TraceRunTimeMsgData_payloadOpt_payload_length_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_payload_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_payload_r2_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal557_var0;\
		BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal557_var0 );\
		if( bmlocal557_var0 != 0 )\
		{\
			BM_TraceRunTimeMsgData_payloadOpt_payload_GET_NON_CONDITIONAL_SIZE( base_ptr, out_bytes, out_bits );\
		}\
		else\
		{\
			out_bytes = 0;\
			out_bits = 0;\
		}\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_payload_EVALUATE( base_ptr, out_flag )\
{\
	/*lint --e{*} */\
	{\
		UINT32 bmlocal558_var0;\
		BM_TraceRunTimeMsgData_status_payload_GET( base_ptr, bmlocal558_var0 );\
		out_flag = (bmlocal558_var0 != 0);\
	}\
	BMI_UNUSED_VAR( base_ptr );\
}


#define BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal559_tmp_bytes = 0;\
	UINT bmlocal560_tmp_bits = 0;\
	out_bytes = 0;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_payloadOpt_payload_GET_SIZE( base_ptr, bmlocal559_tmp_bytes, bmlocal560_tmp_bits );\
	out_bytes += bmlocal559_tmp_bytes;\
	out_bits += bmlocal560_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_payloadOpt_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal561_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, out_bytes, bmlocal561_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal561_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BOOL bmlocal562_out_flag;\
	BMI_FORMAT_NONVALUE_DUMP(depth, "payloadOpt", 1);\
	do\
	{\
		BM_TraceRunTimeMsgData_payloadOpt_payload_EVALUATE( base_ptr, bmlocal562_out_flag );\
		if( bmlocal562_out_flag == 1 )\
		{\
			BM_TraceRunTimeMsgData_payloadOpt_payload_DUMP_DEPTH( base_ptr, (depth + 1) );\
		}\
	}\
	while( /*lint -e(717) */ /*do ... while(0)*/ 0 );\
}

#define BM_TraceRunTimeMsgData_payloadOpt_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, 0 );\
}


#define BM_TraceRunTimeMsgData_GET_SIZE( base_ptr, out_bytes, out_bits )\
{\
	/*lint --e{*} */\
	UINT bmlocal563_tmp_bytes = 0;\
	UINT bmlocal564_tmp_bits = 0;\
	out_bytes = 4;\
	out_bits = 0;\
	BM_TraceRunTimeMsgData_timeStampOpt_GET_SIZE( base_ptr, bmlocal563_tmp_bytes, bmlocal564_tmp_bits );\
	out_bytes += bmlocal563_tmp_bytes;\
	out_bits += bmlocal564_tmp_bits;\
	BM_TraceRunTimeMsgData_inlineStringOpt_GET_SIZE( base_ptr, bmlocal563_tmp_bytes, bmlocal564_tmp_bits );\
	out_bytes += bmlocal563_tmp_bytes;\
	out_bits += bmlocal564_tmp_bits;\
	BM_TraceRunTimeMsgData_params_GET_SIZE( base_ptr, bmlocal563_tmp_bytes, bmlocal564_tmp_bits );\
	out_bytes += bmlocal563_tmp_bytes;\
	out_bits += bmlocal564_tmp_bits;\
	BM_TraceRunTimeMsgData_payloadOpt_GET_SIZE( base_ptr, bmlocal563_tmp_bytes, bmlocal564_tmp_bits );\
	out_bytes += bmlocal563_tmp_bytes;\
	out_bits += bmlocal564_tmp_bits;\
}

#define BM_TraceRunTimeMsgData_GET_BYTES_SIZE( base_ptr, out_bytes )\
{\
	/*lint --e{*} */\
	UINT bmlocal565_tmp_bits;\
	BM_TraceRunTimeMsgData_GET_SIZE( base_ptr, out_bytes, bmlocal565_tmp_bits );\
	BMI_ROUND_UP_1BYTES( out_bytes, bmlocal565_tmp_bits );\
}

#define BM_TraceRunTimeMsgData_DUMP_DEPTH( base_ptr, depth )\
{\
	/*lint --e{*} */\
	BMI_FORMAT_NONVALUE_DUMP(depth, "TraceRunTimeMsgData", 1);\
	BM_TraceRunTimeMsgData_status_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_timeStampOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_inlineStringOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_params_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BM_TraceRunTimeMsgData_payloadOpt_DUMP_DEPTH( base_ptr, (depth + 1) );\
	BMI_UNUSED_VAR( base_ptr );\
}

#define BM_TraceRunTimeMsgData_DUMP( base_ptr )\
{\
	/*lint --e{*} */\
	BM_TraceRunTimeMsgData_DUMP_DEPTH( base_ptr, 0 );\
}


/*lint --flb */

#endif /* _BITMAN_TRACEMESSAGE_H_ */

